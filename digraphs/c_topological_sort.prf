(|c_topological_sort| (|topological_ordering?_TCC1| 0 (|topological_ordering?_TCC1-1| |nil| 3847635000 ("" (SUBTYPE-TCC) NIL NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_ordering?| SUBTYPE "c_topological_sort.x" "vert[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make](c_topological_sort.G)"))) (|topological_ordering?_TCC2| 0 (|topological_ordering?_TCC2-1| |nil| 3847635000 ("" (SUBTYPE-TCC) NIL NIL) ((|injective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_ordering?| SUBTYPE "c_topological_sort.y" "vert[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make](c_topological_sort.G)"))) (|topological_ordering_path_TCC1| 0 (|topological_ordering_path_TCC1-1| |nil| 3847636724 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|topological_ordering?| CONST-DECL "bool" |c_topological_sort| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (G!1 SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL)) NIL (|topological_ordering_path| SUBTYPE "c_topological_sort.w`seq(c_topological_sort.i)" "vert[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make](c_topological_sort.G)"))) (|topological_ordering_path_TCC2| 0 (|topological_ordering_path_TCC2-1| |nil| 3847636724 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|topological_ordering?| CONST-DECL "bool" |c_topological_sort| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (G!1 SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL)) NIL (|topological_ordering_path| SUBTYPE "c_topological_sort.w`seq(c_topological_sort.j)" "vert[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make](c_topological_sort.G)"))) (|topological_ordering_path| 0 (|topological_ordering_path-2| "" 3884659184 ("" (SKOLEM 1 ("G" "f" "_" "_" "_" "_")) (("" (INDUCT "n") (("1" (SKEEP*) (("1" (ASSERT) (("1" (REPLACE -1 * RL) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "i") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "f") (("1" (EXPAND "topological_ordering?") (("1" (FLATTEN) (("1" (INST - "w`seq(i)" "w`seq(j)") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "n") (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "w" "i" "i + n + 1") (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "i+n+1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "f") (("1" (EXPAND "topological_ordering?") (("1" (FLATTEN) (("1" (INST - "w`seq(1+i+n)" "w`seq(2+i+n)") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|topological_ordering_path-1| |nil| 3847637093 ("" (SKOLEM 1 ("G" "f" "_" "_" "_" "_")) (("" (INDUCT N) (("1" (SKEEP*) (("1" (ASSERT) (("1" (REPLACE -1 * RL) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 I) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "f") (("1" (EXPAND "topological_ordering?") (("1" (FLATTEN) (("1" (INST - "w`seq(i)" "w`seq(j)") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 N) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 W I "i + n + 1") (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "i+n+1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "f") (("1" (EXPAND "topological_ordering?") (("1" (FLATTEN) (("1" (INST - "w`seq(1+i+n)" "w`seq(2+i+n)") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|topological_ordering?| CONST-DECL "bool" |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|j| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|n| SKOLEM-CONST-DECL "nat" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" |c_topological_sort| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|temp_count_same| 0 (|temp_count_same-2| "" 3884659927 ("" (INDUCT "l") (("1" (SKEEP) (("1" (EXPAND "member") (("1" (EXPAND "temp_count") (("1" (EXPAND "filter") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("y" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "m" "x") (("2" (EXPAND "member" 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 3) (("2" (EXPAND "length" 3 (1 3)) (("2" (LIFT-IF) (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (EXPAND "o ") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "o ") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|temp_count_same-1| |nil| 3817487138 ("" (INDUCT L) (("1" (SKEEP) (("1" (EXPAND "member") (("1" (EXPAND "temp_count") (("1" (EXPAND "filter") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("y" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "m" "x") (("2" (EXPAND "member" 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 3) (("2" (EXPAND "length" 3 (1 3)) (("2" (LIFT-IF) (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (EXPAND "o ") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "o ") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (O CONST-DECL "T3" |function_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|temp_count_incr| 0 (|temp_count_incr-2| "" 3884660013 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("y" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "m" "x") (("2" (EXPAND "member" -2) (("2" (CASE "not member(x, l)") (("1" (SPLIT -2) (("1" (HIDE -2) (("1" (LEMMA "temp_count_same") (("1" (INST? - ("l" "l")) (("1" (ASSERT) (("1" (EXPAND "temp_count") (("1" (EXPAND "filter" 3) (("1" (EXPAND "length" 3 (1 3)) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (REPLACE -1 * LR) (("1" (LIFT-IF) (("1" (REPLACE -2 * LR) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 2) (("2" (EXPAND "length" 2 (1 3)) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (SPLIT -2) (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "no_repetitions?") (("1" (LEMMA "member_nth[T]") (("1" (INST? -) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -5 "0" "i+1") (("1" (ASSERT) (("1" (EXPAND "nth" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "length" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "no_repetitions?") (("2" (SKEEP) (("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (ASSERT) (("2" (TYPEPRED "i") (("2" (INST - "i+1" "j+1") (("1" (ASSERT) (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (ASSERT) (("2" (EXPAND "length" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (EXPAND "length" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|temp_count_incr-1| |nil| 3817485056 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("y" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "m" "x") (("2" (EXPAND "member" -2) (("2" (CASE "not member(x, l)") (("1" (SPLIT -2) (("1" (HIDE -2) (("1" (LEMMA "temp_count_same") (("1" (INST? - (L L)) (("1" (ASSERT) (("1" (EXPAND "temp_count") (("1" (EXPAND "filter" 3) (("1" (EXPAND "length" 3 (1 3)) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (REPLACE -1 * LR) (("1" (LIFT-IF) (("1" (REPLACE -2 * LR) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 2) (("2" (EXPAND "length" 2 (1 3)) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (SPLIT -2) (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "no_repetitions?") (("1" (LEMMA "member_nth[T]") (("1" (INST? -) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -5 "0" "i+1") (("1" (ASSERT) (("1" (EXPAND "nth" +) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "length" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "no_repetitions?") (("2" (SKEEP) (("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (ASSERT) (("2" (TYPEPRED "i") (("2" (INST - "i+1" "j+1") (("1" (ASSERT) (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (ASSERT) (("2" (EXPAND "length" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (EXPAND "length" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|j| SKOLEM-CONST-DECL "below(length(l))" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "below(length(l))" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|i| SKOLEM-CONST-DECL "below(length(l))" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|y| SKOLEM-CONST-DECL "T" |c_topological_sort| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |c_topological_sort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|temp_count_same| FORMULA-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (O CONST-DECL "T3" |function_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|temp_count_bound| 0 (|temp_count_bound-2| "" 3884660069 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "m") (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 1) (("2" (EXPAND "length" 1 (1 3)) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|temp_count_bound-1| |nil| 3817537046 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "m") (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 1) (("2" (EXPAND "length" 1 (1 3)) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|perm_count_same| 0 (|perm_count_same-2| "" 3884660163 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (EXPAND "member" 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "perm_count") (("2" (EXPAND "filter" 3) (("2" (EXPAND "length" 3 (1 3)) (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "o ") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|perm_count_same-1| |nil| 3817552361 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (EXPAND "member" 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "perm_count") (("2" (EXPAND "filter" 3) (("2" (EXPAND "length" 3 (1 3)) (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "o ") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((O CONST-DECL "T3" |function_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|perm_count_same2| 0 (|perm_count_same2-2| "" 3884660185 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|perm_count_same2-1| |nil| 3817557917 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((O CONST-DECL "T3" |function_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|perm_count_incr| 0 (|perm_count_incr-2| "" 3884660200 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|perm_count_incr-1| |nil| 3817556954 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((O CONST-DECL "T3" |function_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|perm_count_bound| 0 (|perm_count_bound-2| "" 3884660217 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|perm_count_bound-1| |nil| 3817552878 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((O CONST-DECL "T3" |function_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|greater_marking_update| 0 (|greater_marking_update-1| |nil| 3817539462 ("" (GRIND) NIL NIL) ((|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL)) SHOSTAK)) (|greater_marking_temp_count| 0 (|greater_marking_temp_count-2| "" 3884660590 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 1) (("2" (EXPAND "length" 1 (1 3)) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "greater_marking") (("2" (INST -3 "x") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|greater_marking_temp_count-1| |nil| 3817544045 ("" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (EXPAND "temp_count") (("2" (EXPAND "filter" 1) (("2" (EXPAND "length" 1 (1 3)) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "greater_marking") (("2" (INST -3 "x") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (O CONST-DECL "T3" |function_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|greater_marking_perm_count| 0 (|greater_marking_perm_count-2| "" 3884660695 ("" (CASE "FORALL (l: list[T]) (m1, m2: marking) (x: T):
               greater_marking(m1, m2) IMPLIES perm_count(l, m1) >= perm_count(l, m2)") (("1" (INDUCT "l") (("1" (SKEEP) (("1" (SKOLEM 1 "y") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (SKOLEM 1 "y") (("2" (INST -1 "m1" "m2") (("2" (INST -1 "y") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "perm_count") (("2" (EXPAND "filter" 2) (("2" (EXPAND "length" 2 (1 3)) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (EXPAND "member" -3) (("2" (SPLIT -3) (("1" (ASSERT) (("1" (REPLACE -1 * LR) (("1" (LIFT-IF) (("1" (EXPAND "o" 2 (1 2 7)) (("1" (INST -5 "l" "m1" "m2" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "o ") (("2" (ASSERT) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (SKOLEM 1 "y") (("2" (INST -1 "m1" "m2") (("2" (INST -1 "y") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "perm_count") (("2" (EXPAND "filter" 1) (("2" (EXPAND "length" 1 (1 3)) (("2" (EXPAND "greater_marking") (("2" (INST -2 "x") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|greater_marking_perm_count-1| |nil| 3817552899 ("" (CASE "FORALL (l: list[T]) (m1, m2: marking) (x: T):
               greater_marking(m1, m2) IMPLIES perm_count(l, m1) >= perm_count(l, m2)") (("1" (INDUCT L) (("1" (SKEEP) (("1" (SKOLEM 1 "y") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (SKOLEM 1 "y") (("2" (INST -1 "m1" "m2") (("2" (INST -1 "y") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "perm_count") (("2" (EXPAND "filter" 2) (("2" (EXPAND "length" 2 (1 3)) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (EXPAND "member" -3) (("2" (SPLIT -3) (("1" (ASSERT) (("1" (REPLACE -1 * LR) (("1" (LIFT-IF) (("1" (EXPAND "o" 2 (1 2 7)) (("1" (INST -5 "l" "m1" "m2" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "o ") (("2" (ASSERT) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT L) (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (SKOLEM 1 "y") (("2" (INST -1 "m1" "m2") (("2" (INST -1 "y") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "perm_count") (("2" (EXPAND "filter" 1) (("2" (EXPAND "length" 1 (1 3)) (("2" (EXPAND "greater_marking") (("2" (INST -2 "x") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (> CONST-DECL "bool" |reals| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (O CONST-DECL "T3" |function_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL)) SHOSTAK)) (|visit_TCC1| 0 (|visit_TCC2-1| |nil| 3846653608 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "topperm_list") (("" (FLATTEN) (("" (EXPAND "permanent_list?") (("" (INST -5 "node") (("" (ASSERT) (("" (CASE-REPLACE "lp = null") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|visit| SUBTYPE "0" "below[length[T](lp)]"))) (|visit_TCC2| 0 (|visit_TCC11-1| |nil| 3846587962 ("" (ASSERT) (("" (SKEEP) (("" (TYPEPRED "adjs") (("" (ASSERT) (("" (EXPAND "is_dag") (("" (INST -2 CHILD_ID) (("" (DELETE -1) (("" (ASSERT) (("" (TYPEPRED "node_id") (("" (INST - "child") (("" (ASSERT) (("" (SPLIT -2) (("1" (ASSERT) (("1" (REPLACE * * LR) (("1" (DELETE -5) (("1" (CASE-REPLACE "node_id = child_id") (("1" (DELETE -1) (("1" (INST -8 "gen_seq2(G, child, child)") (("1" (REPLACE -5 * LR) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST -9 0 1) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "gen_seq2") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (EXPAND "no_repetitions?") (("2" (EXPAND "node") (("2" (INST -3 "child_id" "node_id") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP -1) (("2" (INST -9 "add1(w, child)") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST -10 0 "length(w)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "walk?_add1") (("2" (ASSERT) (("2" (DELETE 2 3) (("2" (TYPEPRED "child") (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)(length(c_topological_sort.w), 1)" "below[w`length]"))) (|visit_TCC3| 0 (|visit_TCC1-1| |nil| 3817552266 ("" (SKEEP*) (("" (USE "perm_count_bound") (("" (ASSERT) (("" (EXPAND "size") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|perm_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.perm_count(data(c_topological_sort.G), c_topological_sort.m))" "nat"))) (|visit_TCC4| 0 (|visit_TCC1-1| |nil| 3817537046 ("" (SKEEP*) (("" (USE "temp_count_bound") (("" (ASSERT) (("" (EXPAND "size") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|temp_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.temp_count(data(c_topological_sort.G), c_topological_sort.m))" "nat"))) (|visit_TCC5| 0 (|visit_TCC5-1| |nil| 3817539461 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "l") (("" (ASSERT) (("" (EXPAND "nth" +) (("" (SPLIT) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (EXPAND "topological_list?") (("1" (SPLIT 1) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP*) (("2" (EXPAND "nth" -1) (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (COMMENT "All paths starting at the node end in members of l") (("1" (FLATTEN) (("1" (ASSERT) (("1" (TYPEPRED "adjs") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (CASE "w!1`length = 2") (("1" (HIDE -2 -3 -8) (("1" (REPLACE -11 * LR) (("1" (HIDE -11) (("1" (SWAP-REL -10) (("1" (REPLACES) (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 0) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "verts_in?") (("1" (INST -2 1) (("1" (EXPAND "digraph_verts") (("1" (EXPAND "vert") (("1" (REPLACES) (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (SKOLEM -1 "x_id") (("1" (EXPAND "node") (("1" (INST -5 "x_id") (("1" (REPLACES) (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (INST -5 "x") (("2" (ASSERT) (("2" (LEMMA "member_iff_nth[T]") (("2" (INST -1 L X) (("2" (ASSERT) (("2" (SKOLEM -1 "x_l_id") (("2" (INST 1 "x_l_id+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (REPLACE -12 * LR) (("2" (HIDE -12) (("2" (REPLACE -3 * LR) (("2" (HIDE -3) (("2" (SWAP-REL -10) (("2" (NAME "z" "seq(w!1)(1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (INST-CP -2 1) (("2" (REPLACES) (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKOLEM -1 "z_id") (("2" (HIDE -6) (("2" (INST -6 "z_id") (("1" (INST -5 "0") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (REPLACES) (("1" (EXPAND "node") (("1" (REVEAL -7) (("1" (REPLACES) (("1" (SPLIT -4) (("1" (GRIND) NIL NIL) ("2" (INST -8 "z") (("2" (ASSERT) (("2" (LEMMA "member_iff_nth[T]") (("2" (INST -1 L Z) (("2" (ASSERT) (("2" (SKOLEM -1 "z_l_id") (("2" (INST -10 "z_l_id" "x") (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (SPLIT -10) (("1" (SKEEP) (("1" (INST 2 "j+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "(# length := w!1`length - 1, seq := (Lambda (i:below(w!1`length - 1)): w!1`seq(i+1)) #)") (("1" (ASSERT) (("1" (REVEAL -11) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (INST -3 "1+n") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) ";;; All paths starting at the node end in members of l")) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -5 "i-1" "x") (("1" (ASSERT) (("1" (SPLIT -5) (("1" (SKEEP) (("1" (INST 2 "j+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "no_repetitions?") (("3" (SKEEP) (("3" (EXPAND "nth") (("3" (GROUND) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (TYPEPRED "node_id") (("3" (REPLACES) (("3" (GROUND) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -2 * LR) (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (GROUND) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -2 * RL) (("1" (USE "member_iff_nth[T]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "i-1" "j-1") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "greater_marking_update") NIL NIL) ("3" (USE "suffix_supl[T]") (("3" (FLATTEN) (("3" (ASSERT) (("3" (HIDE -1 2) (("3" (INST 1 "cons(node,null)") (("3" (EXPAND "append") (("3" (EXPAND "append") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP*) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)(length(c_topological_sort.w), 1)" "below[w`length]"))) (|visit_TCC6| 0 (|visit_TCC3-1| |nil| 3817552266 ("" (SKEEP*) (("" (USE "perm_count_bound") (("" (EXPAND "size") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|perm_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(G1), 1), c_topological_sort.perm_count(data(G1), c_topological_sort.z`1))" "nat"))) (|visit_TCC7| 0 (|visit_TCC2-1| |nil| 3817537046 ("" (SKEEP*) (("" (USE "temp_count_bound") (("" (EXPAND "size") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temp_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(G1), 1), c_topological_sort.temp_count(data(G1), c_topological_sort.z`1))" "nat"))) (|visit_TCC8| 0 (|visit_TCC5-1| |nil| 3817552266 ("" (SKEEP*) (("" (USE "perm_count_bound") (("" (EXPAND "size") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|perm_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.perm_count(data(c_topological_sort.G), c_topological_sort.m))" "nat"))) (|visit_TCC9| 0 (|visit_TCC3-1| |nil| 3817537046 ("" (SKEEP*) (("" (USE "temp_count_bound") (("" (EXPAND "size") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|temp_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|visit| SUBTYPE "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.temp_count(data(c_topological_sort.G), c_topological_sort.m))" "nat"))) (|visit_TCC10| 0 (|visit_TCC2-1| |nil| 3817468360 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "c_topological_sort.node" "Vert(c_topological_sort.G)"))) (|visit_TCC11| 0 (|visit_TCC11-2| "" 3884660869 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "l") (("" (ASSERT) (("" (EXPAND "nth" +) (("" (SPLIT) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (EXPAND "topological_list?") (("1" (SPLIT 1) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP*) (("2" (EXPAND "nth" -1) (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (COMMENT "All paths starting at the node end in members of l") (("1" (FLATTEN) (("1" (ASSERT) (("1" (TYPEPRED "adjs") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (CASE "w!1`length = 2") (("1" (HIDE -2 -3 -8) (("1" (REPLACE -11 * LR) (("1" (HIDE -11) (("1" (SWAP-REL -10) (("1" (REPLACES) (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "0") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "verts_in?") (("1" (INST -2 "1") (("1" (EXPAND "digraph_verts") (("1" (EXPAND "vert") (("1" (REPLACES) (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (SKOLEM -1 "x_id") (("1" (EXPAND "node") (("1" (INST -5 "x_id") (("1" (REPLACES) (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (INST -5 "x") (("2" (ASSERT) (("2" (LEMMA "member_iff_nth[T]") (("2" (INST -1 "l" "x") (("2" (ASSERT) (("2" (SKOLEM -1 "x_l_id") (("2" (INST 1 "x_l_id+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (REPLACE -12 * LR) (("2" (HIDE -12) (("2" (REPLACE -3 * LR) (("2" (HIDE -3) (("2" (SWAP-REL -10) (("2" (NAME "z" "seq(w!1)(1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (INST-CP -2 "1") (("2" (REPLACES) (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKOLEM -1 "z_id") (("2" (HIDE -6) (("2" (INST -6 "z_id") (("1" (INST -5 "0") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (REPLACES) (("1" (EXPAND "node") (("1" (REVEAL -7) (("1" (REPLACES) (("1" (SPLIT -4) (("1" (GRIND) NIL NIL) ("2" (INST -8 "z") (("2" (ASSERT) (("2" (LEMMA "member_iff_nth[T]") (("2" (INST -1 "l" "z") (("2" (ASSERT) (("2" (SKOLEM -1 "z_l_id") (("2" (INST -10 "z_l_id" "x") (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (SPLIT -10) (("1" (SKEEP) (("1" (INST 2 "j+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "(# length := w!1`length - 1, seq := (Lambda (i:below(w!1`length - 1)): w!1`seq(i+1)) #)") (("1" (ASSERT) (("1" (REVEAL -11) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (INST -3 "1+n") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) ";;; All paths starting at the node end in members of l")) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -5 "i-1" "x") (("1" (ASSERT) (("1" (SPLIT -5) (("1" (SKEEP) (("1" (INST 2 "j+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "no_repetitions?") (("3" (SKEEP) (("3" (EXPAND "nth") (("3" (GROUND) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (TYPEPRED "node_id") (("3" (REPLACES) (("3" (GROUND) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -2 * LR) (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (GROUND) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -2 * RL) (("1" (USE "member_iff_nth[T]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "i-1" "j-1") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "greater_marking_update") NIL NIL) ("3" (USE "suffix_supl[T]") (("3" (FLATTEN) (("3" (ASSERT) (("3" (HIDE -1 2) (("3" (INST 1 "cons(node,null)") (("3" (EXPAND "append") (("3" (EXPAND "append") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP*) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "IN_2(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.permanent], list_adt[Vert(c_topological_sort.G)].cons(c_topological_sort.node, c_topological_sort.l))" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")) (|visit_TCC11-1| "" 3884645888 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "l") (("" (ASSERT) (("" (EXPAND "nth" +) (("" (SPLIT) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (EXPAND "topological_list?") (("1" (SPLIT 1) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP*) (("2" (EXPAND "nth" -1) (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (COMMENT "All paths starting at the node end in members of l") (("1" (FLATTEN) (("1" (ASSERT) (("1" (TYPEPRED "adjs") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (CASE "w!1`length = 2") (("1" (HIDE -2 -3 -8) (("1" (REPLACE -11 * LR) (("1" (HIDE -11) (("1" (SWAP-REL -10) (("1" (REPLACES) (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 0) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "verts_in?") (("1" (INST -2 1) (("1" (EXPAND "digraph_verts") (("1" (EXPAND "vert") (("1" (REPLACES) (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (SKOLEM -1 "x_id") (("1" (EXPAND "node") (("1" (INST -5 "x_id") (("1" (REPLACES) (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (INST -5 "x") (("2" (ASSERT) (("2" (LEMMA "member_iff_nth[T]") (("2" (INST -1 L X) (("2" (ASSERT) (("2" (SKOLEM -1 "x_l_id") (("2" (INST 1 "x_l_id+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (REPLACE -12 * LR) (("2" (HIDE -12) (("2" (REPLACE -3 * LR) (("2" (HIDE -3) (("2" (SWAP-REL -10) (("2" (NAME "z" "seq(w!1)(1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (INST-CP -2 1) (("2" (REPLACES) (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKOLEM -1 "z_id") (("2" (HIDE -6) (("2" (INST -6 "z_id") (("1" (INST -5 "0") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (REPLACES) (("1" (EXPAND "node") (("1" (REVEAL -7) (("1" (REPLACES) (("1" (SPLIT -4) (("1" (GRIND) NIL NIL) ("2" (INST -8 "z") (("2" (ASSERT) (("2" (LEMMA "member_iff_nth[T]") (("2" (INST -1 L Z) (("2" (ASSERT) (("2" (SKOLEM -1 "z_l_id") (("2" (INST -10 "z_l_id" "x") (("2" (REPLACE -1 * LR) (("2" (ASSERT) (("2" (SPLIT -10) (("1" (SKEEP) (("1" (INST 2 "j+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "(# length := w!1`length - 1, seq := (Lambda (i:below(w!1`length - 1)): w!1`seq(i+1)) #)") (("1" (ASSERT) (("1" (REVEAL -11) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (INST -3 "1+n") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) ";;; All paths starting at the node end in members of l")) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -5 "i-1" "x") (("1" (ASSERT) (("1" (SPLIT -5) (("1" (SKEEP) (("1" (INST 2 "j+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "no_repetitions?") (("3" (SKEEP) (("3" (EXPAND "nth") (("3" (GROUND) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (TYPEPRED "node_id") (("3" (REPLACES) (("3" (GROUND) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -2 * LR) (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (GROUND) (("1" (INST? -) (("1" (ASSERT) (("1" (REPLACE -2 * RL) (("1" (USE "member_iff_nth[T]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "i-1" "j-1") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "greater_marking_update") NIL NIL) ("3" (USE "suffix_supl[T]") (("3" (FLATTEN) (("3" (ASSERT) (("3" (HIDE -1 2) (("3" (INST 1 "cons(node,null)") (("3" (EXPAND "append") (("3" (EXPAND "append") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP*) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "below(length(cons[Vert(G)](node, l)))" |c_topological_sort| NIL) (|j| SKOLEM-CONST-DECL "below(length(l))" |c_topological_sort| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|node| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|x_l_id| SKOLEM-CONST-DECL "below(length(l))" |c_topological_sort| NIL) (|l| SKOLEM-CONST-DECL "(topperm_list(G, m))" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|x_id| SKOLEM-CONST-DECL "below(length(data(G)))" |c_topological_sort| NIL) (|member_iff_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|z_id| SKOLEM-CONST-DECL "below(length(data(G)))" |c_topological_sort| NIL) (|w!1| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" |c_topological_sort| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|j| SKOLEM-CONST-DECL "below(length(l))" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|greater_marking_update| FORMULA-DECL NIL |c_topological_sort| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|suffix_supl| FORMULA-DECL NIL |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|visit| SUBTYPE "IN_2(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.permanent], list_adt[Vert(c_topological_sort.G)].cons(c_topological_sort.node, c_topological_sort.l))" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")) (|visit_TCC6-1| |nil| 3817468360 ("" (SKEEP*) (("" (SPLIT) (("1" (REPLACE -4 * LR) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP*) (("2" (CASE "edge?(G)(node,child)") (("1" (LIFT-IF -) (("1" (ASSERT) (("1" (TYPEPRED "node_id") (("1" (INST - "y") (("1" (GROUND) (("1" (REPLACE -5 * RL) (("1" (REPLACE -1 * LR) (("1" (REPLACE -7 * RL) (("1" (REPLACE -1 * RL) (("1" (INST 3 "gen_seq2(G, node, child)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST 3 "add1(w, child)") (("1" (GRIND) NIL NIL) ("2" (USE "walk?_add1") (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "adjs") (("2" (INST -2 "child_id") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "IN_2(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.permanent], list_adt[Vert(c_topological_sort.G)].cons(c_topological_sort.node, c_topological_sort.l))" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}"))) (|visit_TCC12| 0 (|visit_TCC12-1| "" 3884660894 ("" (SKEEP*) (("" (SPLIT 1) (("1" (SKEEP*) (("1" (TYPEPRED "x") (("1" (TYPEPRED "adjs") (("1" (INST - "x") (("1" (ASSERT) (("1" (EXPAND "member") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "adjs") (("2" (INST -3 "x") (("2" (ASSERT) (("2" (REPLACE -6 -3 LR) (("2" (EXPAND "member" -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "c_topological_sort.adjsp" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")) (|visit_TCC4-1| |nil| 3817468360 ("" (SKEEP*) (("" (SPLIT 1) (("1" (SKEEP*) (("1" (TYPEPRED "x") (("1" (TYPEPRED "adjs") (("1" (INST - X) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "adjs") (("2" (INST -3 "x") (("2" (ASSERT) (("2" (REPLACE -6 -3 LR) (("2" (EXPAND "member" -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "c_topological_sort.adjsp" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}"))) (|visit_TCC13| 0 (|visit_TCC5-1| |nil| 3817468360 ("" (SKEEP*) (("" (REPLACES) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| TERMINATION "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m, c_topological_sort.l, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)" "NIL"))) (|visit_TCC14| 0 (|visit_TCC17-1| |nil| 3846587962 ("" (ASSERT) (("" (SKEEP) (("" (SPLIT) (("1" (USE "walk?_add1") (("1" (ASSERT) (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (FLATTEN) (("1" (EXPAND "vert") (("1" (EXPAND "edge?") (("1" (EXPAND "digraph_edges") (("1" (TYPEPRED "w") (("1" (REPLACES) (("1" (TYPEPRED "adjs") (("1" (INST -2 CHILD_ID) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (GROUND) (("1" (REPLACES) (("1" (EXPAND "in_path?") (("1" (INST 1 "length(w)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "in_path?") (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST 1 I) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w") (("3" (EXPAND "in_path?") (("3" (SKEEP) (("3" (EXPAND "add1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "IN_1(walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child))" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}"))) (|visit_TCC15| 0 (|visit_TCC15-1| "" 3884660923 ("" (SKEEP*) (("" (TYPEPRED "l") (("" (EXPAND "topperm_list") (("" (EXPAND "permanent_list?") (("" (EXPAND "topological_list?") (("" (SPLIT) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP*) (("2" (INST - "i" "x") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "c_topological_sort.l" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary]))")) (|visit_TCC11-1| |nil| 3817561836 ("" (SKEEP*) (("" (TYPEPRED "l") (("" (EXPAND "topperm_list") (("" (EXPAND "permanent_list?") (("" (EXPAND "topological_list?") (("" (SPLIT) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP*) (("2" (INST - I X) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|l| SKOLEM-CONST-DECL "(topperm_list(G, m))" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|child_id| SKOLEM-CONST-DECL "VertID(G)" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "c_topological_sort.l" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary]))"))) (|visit_TCC16| 0 (|visit_TCC7-1| |nil| 3817468360 ("" (SKEEP*) (("" (REPLACES) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "c_topological_sort.child_id" "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}"))) (|visit_TCC17| 0 (|visit_TCC17-2| "" 3884660975 ("" (ASSERT) (("" (SKEEP) (("" (SPLIT) (("1" (USE "walk?_add1") (("1" (ASSERT) (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (FLATTEN) (("1" (EXPAND "vert") (("1" (EXPAND "edge?") (("1" (EXPAND "digraph_edges") (("1" (TYPEPRED "w") (("1" (REPLACES) (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (GROUND) (("1" (REPLACES) (("1" (EXPAND "in_path?") (("1" (INST 1 "length(w)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "in_path?") (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST 1 "i") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w") (("3" (EXPAND "in_path?") (("3" (SKEEP) (("3" (EXPAND "add1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child)" "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}")) (|visit_TCC17-1| |nil| 3884635235 ("" (ASSERT) (("" (SKEEP) (("" (SPLIT) (("1" (USE "walk?_add1") (("1" (ASSERT) (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (FLATTEN) (("1" (EXPAND "vert") (("1" (EXPAND "edge?") (("1" (EXPAND "digraph_edges") (("1" (TYPEPRED "w") (("1" (REPLACES) (("1" (TYPEPRED "adjs") (("1" (INST -2 CHILD_ID) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (GROUND) (("1" (REPLACES) (("1" (EXPAND "in_path?") (("1" (INST 1 "length(w)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "in_path?") (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST 1 I) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w") (("3" (EXPAND "in_path?") (("3" (SKEEP) (("3" (EXPAND "add1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|child| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|child_id| SKOLEM-CONST-DECL "VertID(G)" |c_topological_sort| NIL) (|w| SKOLEM-CONST-DECL "{w: Walk(G) |
   seq(w)(length(w) - 1) = node(G)(node_id) AND
    FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)}" |c_topological_sort| NIL) (|node_id| SKOLEM-CONST-DECL "{id: VertID(G) | NOT permanent?(m(node(G)(id)))}" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|walk?_add1| FORMULA-DECL NIL |walks_| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child)" "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}"))) (|visit_TCC18| 0 (|visit_TCC16-1| |nil| 3846645969 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "child_id") (("" (TYPEPRED "adjs") (("" (REPLACES) (("" (EXPAND "every") (("" (EXPAND "size") (("" (TYPEPRED "G") (("" (EXPAND "cdigraph") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "c_topological_sort.child_id" "below[length[list[nat]](adjs(G))]"))) (|visit_TCC19| 0 (|visit_TCC19-1| "" 3884661040 ("" (SKEEP*) (("" (TYPEPRED "nth[list[nat]](adjs(G), child_id)") (("1" (ASSERT) (("1" (SPLIT) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKEEP) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (INST -1 "i") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "node") (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (FLATTEN) (("1" (EXPAND "list_of_idxs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "edge?") (("2" (EXPAND "digraph_edges") (("2" (EXPAND "edges") (("2" (ASSERT) (("2" (EXPAND "vert") (("2" (EXPAND "node") (("2" (SPLIT 1) (("1" (USE "member_iff_nth[T]") (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "member_iff_nth[T]") (("2" (REWRITE "idx_nth_no_rep") (("1" (REWRITE "idx_nth_no_rep") (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REPLACE -4 * RL) (("3" (SKEEP) (("3" (EXPAND "edge?") (("3" (EXPAND "digraph_edges") (("3" (EXPAND "edges") (("3" (FLATTEN) (("3" (ASSERT) (("3" (REPLACE -7 * LR) (("3" (EXPAND "node") (("3" (ASSERT) (("3" (USE "idx_nth_no_rep[T]") (("1" (REPLACE -1 * LR) (("1" (USE "idx_nth_no_rep[T]" ("l" "data(G)" "i" "child_id")) (("1" (REPLACE -1 * LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "child_id") (("2" (EXPAND "size") (("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id)" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.child_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")) (|visit_TCC15-1| |nil| 3846601620 ("" (SKEEP*) (("" (TYPEPRED "nth[list[nat]](adjs(G), child_id)") (("1" (ASSERT) (("1" (SPLIT) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKEEP) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (INST -1 "i") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "node") (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (FLATTEN) (("1" (EXPAND "list_of_idxs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "edge?") (("2" (EXPAND "digraph_edges") (("2" (EXPAND "edges") (("2" (ASSERT) (("2" (EXPAND "vert") (("2" (EXPAND "node") (("2" (SPLIT 1) (("1" (USE "member_iff_nth[T]") (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "member_iff_nth[T]") (("2" (REWRITE "idx_nth_no_rep") (("1" (REWRITE "idx_nth_no_rep") (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REPLACE -4 * RL) (("3" (SKEEP) (("3" (EXPAND "edge?") (("3" (EXPAND "digraph_edges") (("3" (EXPAND "edges") (("3" (FLATTEN) (("3" (ASSERT) (("3" (REPLACE -7 * LR) (("3" (EXPAND "node") (("3" (ASSERT) (("3" (USE "idx_nth_no_rep[T]") (("1" (REPLACE -1 * LR) (("1" (USE "idx_nth_no_rep[T]" (L "data(G)" I CHILD_ID)) (("1" (REPLACE -1 * LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "child_id") (("2" (EXPAND "size") (("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|every_nth| FORMULA-DECL NIL |list_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|member_iff_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|idx_nth_no_rep| FORMULA-DECL NIL |more_list_props| |structures|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|visit| SUBTYPE "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id)" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.child_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")) (|visit_TCC8-1| |nil| 3817468360 ("" (SKEEP*) (("" (TYPEPRED "nth[list[nat]](adjs(G), child_id)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKEEP) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (INST -1 "i") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "node") (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (FLATTEN) (("1" (EXPAND "list_of_idxs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "edge?") (("2" (EXPAND "digraph_edges") (("2" (EXPAND "edges") (("2" (ASSERT) (("2" (EXPAND "vert") (("2" (EXPAND "node") (("2" (SPLIT 1) (("1" (USE "member_iff_nth[T]") (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "member_iff_nth[T]") (("2" (REWRITE "idx_nth_no_rep") (("1" (REWRITE "idx_nth_no_rep") (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REPLACE -4 * RL) (("3" (SKEEP) (("3" (EXPAND "edge?") (("3" (EXPAND "digraph_edges") (("3" (EXPAND "edges") (("3" (FLATTEN) (("3" (ASSERT) (("3" (REPLACE -7 * LR) (("3" (EXPAND "node") (("3" (ASSERT) (("3" (USE "idx_nth_no_rep[T]") (("1" (REPLACE -1 * LR) (("1" (USE "idx_nth_no_rep[T]" (L "data(G)" I CHILD_ID)) (("1" (REPLACE -1 * LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "child_id") (("2" (EXPAND "size") (("2" (TYPEPRED "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id)" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.child_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}"))) (|visit_TCC20| 0 (|visit_tCC14-opt| "no case at the begining" 3817556888 ("" (SKEEP*) (("" (USE "lex3_lt") (("1" (REPLACE -1 * LR) (("1" (HIDE -1) (("1" (FLATTEN) (("1" (USE "perm_count_same2") (("1" (ASSERT) (("1" (USE "lex2_lt") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "temp_count_incr") (("1" (INST? -) (("1" (ASSERT) (("1" (TYPEPRED "G") (("1" (EXPAND "cdigraph") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (USE "temp_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (USE "perm_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (USE "temp_count_bound") (("4" (EXPAND "size") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "perm_count_bound") (("5" (EXPAND "size") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|child| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|lex3_lt| FORMULA-DECL NIL |lex3| NIL) (|perm_count_same2| FORMULA-DECL NIL |c_topological_sort| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|temp_count_incr| FORMULA-DECL NIL |c_topological_sort| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|temp_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|perm_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|visit| TERMINATION "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.child_id, walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child), list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id))" "NIL")) (|visit_TCC9-1| |nil| 3817468360 ("" (SKEEP*) (("" (CASE "temp_count(data(G), m WITH [child := temporary]) > temp_count(data(G), m)") (("1" (USE "lex2_lt") (("1" (REPLACE -1 * LR) (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (USE "temp_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "temp_count_incr") (("2" (INST? -) (("2" (ASSERT) (("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (ASSERT) (("2" (TYPEPRED "node_id") (("2" (INST -2 "child") (("2" (ASSERT) (("2" (SPLIT -2) (("1" (REPLACE -1 * LR) (("1" (LEMMA "dag_no_self_loops") (("1" (INST -1 "G" "(node, child)") (("1" (ASSERT) (("1" (REPLACE -9 * RL) (("1" (REPLACE -1 * LR) (("1" (EXPAND "vert") (("1" (EXPAND "list_of_idxs") (("1" (HIDE -7) (("1" (LEMMA "idx_nth_no_rep[T]") (("1" (INST -1 "data(G)" "child_id") (("1" (REPLACE -11 * LR) (("1" (EXPAND "node") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (HIDE 2) (("1" (TYPEPRED "child_id") (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (EXPAND "edge?") (("1" (EXPAND "digraph_edges") (("1" (EXPAND "edges") (("1" (REPLACE -12 * LR) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "child_id") (("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REPLACE -9 * RL) (("2" (INST -7 "add1(w, child)") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST -8 "0" "w`length") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "add1") (("1" (EXPAND "walk_from?") (("1" (EXPAND "from?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "add1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "add1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "walk?_add1") (("2" (ASSERT) (("2" (EXPAND "walk_from?") (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (REPLACE -2 * LR) (("2" (TYPEPRED "adjs") (("2" (INST -2 "child_id") (("2" (ASSERT) (("2" (REPLACE -11 * RL) (("2" (REPLACE -13 * RL) (("2" (EXPAND "vert") (("2" (ASSERT) (("2" (REPLACE -11 * LR) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| TERMINATION "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.child_id, walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child), list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id))" "NIL"))) (|visit_TCC21| 0 (|visit_TCC10-1| |nil| 3817468360 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|visit| SUBTYPE "IN_1(c_topological_sort.loop)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}"))) (|visit_TCC22| 0 (|visit_TCC22-1| "" 3884646685 ("" (SKEEP*) (("" (TYPEPRED " v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACES) (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC14") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC15") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|from?| CONST-DECL "bool" |walks_| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|visit_TCC19| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC17| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|visit_TCC14| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|visit| SUBTYPE "c_topological_sort.lp" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))")) (|visit_TCC16-1| |nil| 3817561836 ("" (SKEEP*) (("" (TYPEPRED " v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACES) (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "visit_TCC18") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC16") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC13") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC14") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "c_topological_sort.lp" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))"))) (|visit_TCC23| 0 (|visit_TCC23-2| "" 3884661615 ("" (SKEEP*) (("" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id)) ") (("1" (ASSERT) (("1" (REPLACE -6 * LR) (("1" (REPLACE -4 * RL) (("1" (REPLACE -2 * RL) (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (REPLACE -8 * RL) (("1" (FLATTEN) (("1" (DELETE -11 -12 -10) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (INST-CP -1 "child") (("1" (INST -1 "node") (("1" (ASSERT) (("1" (INST -8 "node") (("1" (ASSERT) (("1" (EXPAND "topological_list?") (("1" (CASE "node /= child") (("1" (FLATTEN) (("1" (ASSERT) (("1" (USE "member_iff_nth" ("t" "node")) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -4 "i" "child") (("1" (TYPEPRED "adjs") (("1" (DELETE -1 -3) (("1" (INST -1 "child_id") (("1" (REPLACE -13 * LR) (("1" (ASSERT) (("1" (SPLIT -5) (("1" (SKEEP) (("1" (CASE-REPLACE "j=0") (("1" (CASE-REPLACE "i=0") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "gen_seq2(G, node, child)") (("1" (GRIND) NIL NIL) ("2" (USE "edge_to_walk") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "lp") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (TYPEPRED "node_id") (("2" (TYPEPRED "adjs") (("2" (INST -3 "child_id") (("2" (ASSERT) (("2" (REPLACE -15 * RL) (("2" (TYPEPRED "w") (("2" (INST -4 "node") (("2" (ASSERT) (("2" (EXPAND "in_path?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC16") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC15") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "c_topological_sort.node_id" "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}")) (|visit_TCC23-1| "" 3884648307 ("" (SKEEP*) (("" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id)) ") (("1" (ASSERT) (("1" (REPLACE -6 * LR) (("1" (REPLACE -4 * RL) (("1" (REPLACE -2 * RL) (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (REPLACE -8 * RL) (("1" (FLATTEN) (("1" (DELETE -11 -12 -10) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (INST-CP -1 "child") (("1" (INST -1 "node") (("1" (ASSERT) (("1" (INST -8 "node") (("1" (ASSERT) (("1" (EXPAND "topological_list?") (("1" (CASE "node /= child") (("1" (FLATTEN) (("1" (ASSERT) (("1" (USE "member_iff_nth" (T NODE)) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -4 "i" CHILD) (("1" (TYPEPRED "adjs") (("1" (DELETE -1 -3) (("1" (INST -1 "child_id") (("1" (REPLACE -13 * LR) (("1" (ASSERT) (("1" (SPLIT -5) (("1" (SKEEP) (("1" (CASE-REPLACE "j=0") (("1" (CASE-REPLACE "i=0") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "gen_seq2(G, node, child)") (("1" (GRIND) NIL NIL) ("2" (USE "edge_to_walk") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "lp") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (TYPEPRED "node_id") (("2" (TYPEPRED "adjs") (("2" (INST -3 "child_id") (("2" (ASSERT) (("2" (REPLACE -15 * RL) (("2" (TYPEPRED "w") (("2" (INST -4 "node") (("2" (ASSERT) (("2" (EXPAND "in_path?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC16") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC15") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|from?| CONST-DECL "bool" |walks_| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|member_iff_nth| FORMULA-DECL NIL |more_list_props| |structures|) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|lp| SKOLEM-CONST-DECL "list[Vert(G)]" |c_topological_sort| NIL) (|node| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|child| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|edge_to_walk| FORMULA-DECL NIL |walks_| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|visit_TCC19| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC17| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC16| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|visit| SUBTYPE "c_topological_sort.node_id" "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}")) (|visit_TCC21-1| |nil| 3846645969 ("" (SKEEP*) (("" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id)) ") (("1" (ASSERT) (("1" (REPLACE -6 * LR) (("1" (REPLACE -4 * RL) (("1" (REPLACE -2 * RL) (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (REPLACE -8 * RL) (("1" (FLATTEN) (("1" (DELETE -11 -12 -10) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (INST-CP -1 "child") (("1" (INST -1 "node") (("1" (ASSERT) (("1" (INST -8 "node") (("1" (ASSERT) (("1" (EXPAND "topological_list?") (("1" (CASE "node /= child") (("1" (FLATTEN) (("1" (ASSERT) (("1" (USE "member_iff_nth" (T NODE)) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -4 "i" CHILD) (("1" (TYPEPRED "adjs") (("1" (DELETE -1 -3) (("1" (INST -1 "child_id") (("1" (REPLACE -13 * LR) (("1" (ASSERT) (("1" (SPLIT -5) (("1" (SKEEP) (("1" (CASE-REPLACE "j=0") (("1" (CASE-REPLACE "i=0") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "gen_seq2(G, node, child)") (("1" (GRIND) NIL NIL) ("2" (USE "edge_to_walk") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "lp") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (TYPEPRED "node_id") (("2" (TYPEPRED "adjs") (("2" (INST -3 "child_id") (("2" (ASSERT) (("2" (REPLACE -15 * RL) (("2" (TYPEPRED "w") (("2" (INST -4 "node") (("1" (ASSERT) (("1" (EXPAND "in_path?") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC18") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC16") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC15") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC14") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "c_topological_sort.node_id" "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}"))) (|visit_TCC24| 0 (|visit_TCC24-2| "" 3884661939 ("" (SKEEP*) (("" (CASE "child /= node") (("1" (FLATTEN) (("1" (TYPEPRED "v(G)(m WITH [child := temporary], l, child_id, add1(w,child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (REPLACE -7 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -12 * RL) (("1" (REPLACE -13 * RL) (("1" (DELETE -11 -12 -13) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (TYPEPRED "w") (("1" (REPLACE -13 * RL) (("1" (REPLACE -15 * RL) (("1" (SKEEP) (("1" (CASE "child = x") (("1" (REPLACE -1 * RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "greater_marking") (("2" (INST -8 "x") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT 3) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (INST -5 "x") (("2" (ASSERT) (("2" (DELETE -3) (("2" (DELETE -8 -9) (("2" (CASE "permanent?(mp(x))") (("1" (EXPAND "topological_list?") (("1" (INST -6 "x") (("1" (ASSERT) (("1" (INST -11 "x") (("1" (ASSERT) (("1" (TYPEPRED "l") (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (DELETE -1 -3 -4) (("1" (EXPAND "permanent_list?") (("1" (INST -1 "x") (("1" (ASSERT) (("1" (SKOLEM -11 "w1") (("1" (INST -7 0 "x") (("1" (ASSERT) (("1" (REPLACE -12 * LR) (("1" (SPLIT -7) (("1" (SKEEP) (("1" (REVEAL -1) (("1" (INST -1 "0" "x") (("1" (SPLIT -1) (("1" (SKEEP) (("1" (CASE-REPLACE "j!1 = j") (("1" (DELETE -1) (("1" (DELETE -1) (("1" (REVEAL -1) (("1" (INST -1 "j" "child") (("1" (SPLIT -1) (("1" (SKEEP) (("1" (CASE-REPLACE "j_1 = 0") (("1" (GRIND) NIL NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2 3 4 5 6) (("2" (REPLACE -2 * RL) (("2" (EXPAND "in_path?") (("2" (DELETE -1) (("2" (SKOLEM -4 "i_wx") (("2" (NAME "l_w" "length(w)") (("2" (REPLACE -1 * LR) (("2" (NAME "l_wp" "l_w - i_wx + 1") (("2" (INST 1 "(# length := l_wp, seq := lambda (k: below(l_wp)) : if (k < (l_wp - 1)) then w`seq(k+i_wx) else child endif #)") (("1" (GRIND) NIL NIL) ("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (EXPAND "walk?") (("2" (SPLIT) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 ("i_wx" "+n")) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "n=l_wp -2") (("1" (ASSERT) (("1" (DELETE -2) (("1" (REPLACES) (("1" (ASSERT) (("1" (DELETE -1) (("1" (DELETE -1) (("1" (ASSERT) (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKEEP) (("3" (TYPEPRED "i_wx") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC14") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC15") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 * LR) (("2" (CASE-REPLACE "node_id = child_id") (("1" (TYPEPRED "adjs") (("1" (INST -3 "child_id") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (TYPEPRED "w") (("1" (INST -4 "node") (("1" (ASSERT) (("1" (EXPAND "in_path?") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (EXPAND "no_repetitions?") (("2" (INST -3 "child_id" "node_id") (("1" (ASSERT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "node_id") (("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "child_id") (("3" (EXPAND "size") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|visit| SUBTYPE "c_topological_sort.w" "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.mp(x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}")) (|visit_TCC24-1| "" 3884649182 ("" (SKEEP*) (("" (CASE "child /= node") (("1" (FLATTEN) (("1" (TYPEPRED "v(G)(m WITH [child := temporary], l, child_id, add1(w,child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (REPLACE -7 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -12 * RL) (("1" (REPLACE -13 * RL) (("1" (DELETE -11 -12 -13) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (TYPEPRED "w") (("1" (REPLACE -13 * RL) (("1" (REPLACE -15 * RL) (("1" (SKEEP) (("1" (CASE "child = x") (("1" (REPLACE -1 * RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "greater_marking") (("2" (INST -8 "x") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT 3) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (INST -5 "x") (("2" (ASSERT) (("2" (DELETE -3) (("2" (DELETE -8 -9) (("2" (CASE "permanent?(mp(x))") (("1" (EXPAND "topological_list?") (("1" (INST -6 "x") (("1" (ASSERT) (("1" (INST -11 "x") (("1" (ASSERT) (("1" (TYPEPRED "l") (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (DELETE -1 -3 -4) (("1" (EXPAND "permanent_list?") (("1" (INST -1 "x") (("1" (ASSERT) (("1" (SKOLEM -11 W1) (("1" (INST -7 0 X) (("1" (ASSERT) (("1" (REPLACE -12 * LR) (("1" (SPLIT -7) (("1" (SKEEP) (("1" (REVEAL -1) (("1" (INST -1 0 X) (("1" (SPLIT -1) (("1" (SKEEP) (("1" (CASE-REPLACE "j!1 = j") (("1" (DELETE -1) (("1" (DELETE -1) (("1" (REVEAL -1) (("1" (INST -1 "j" CHILD) (("1" (SPLIT -1) (("1" (SKEEP) (("1" (CASE-REPLACE "j_1 = 0") (("1" (GRIND) NIL NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2 3 4 5 6) (("2" (REPLACE -2 * RL) (("2" (EXPAND "in_path?") (("2" (DELETE -1) (("2" (SKOLEM -4 "i_wx") (("2" (NAME "l_w" "length(w)") (("2" (REPLACE -1 * LR) (("2" (NAME "l_wp" "l_w - i_wx + 1") (("2" (INST 1 "(# length := l_wp, seq := lambda (k: below(l_wp)) : if (k < (l_wp - 1)) then w`seq(k+i_wx) else child endif #)") (("1" (GRIND) NIL NIL) ("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (EXPAND "walk?") (("2" (SPLIT) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 (I_WX +N)) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "n=l_wp -2") (("1" (ASSERT) (("1" (DELETE -2) (("1" (REPLACES) (("1" (ASSERT) (("1" (DELETE -1) (("1" (DELETE -1) (("1" (ASSERT) (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKEEP) (("3" (TYPEPRED "i_wx") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC14") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC15") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 * LR) (("2" (CASE-REPLACE "node_id = child_id") (("1" (TYPEPRED "adjs") (("1" (INST -3 "child_id") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (TYPEPRED "w") (("1" (INST -4 "node") (("1" (ASSERT) (("1" (EXPAND "in_path?") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (EXPAND "no_repetitions?") (("2" (INST -3 "child_id" "node_id") (("1" (ASSERT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "node_id") (("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "child_id") (("3" (EXPAND "size") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|l_wp| SKOLEM-CONST-DECL "int" |c_topological_sort| NIL) (|i_wx| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|w| SKOLEM-CONST-DECL "{w: Walk(G) |
   seq(w)(length(w) - 1) = node(G)(node_id) AND
    FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)}" |c_topological_sort| NIL) (|node_id| SKOLEM-CONST-DECL "{id: VertID(G) | NOT permanent?(m(node(G)(id)))}" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|child| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|visit_TCC19| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC17| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|visit_TCC14| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|child_id| SKOLEM-CONST-DECL "VertID(G)" |c_topological_sort| NIL) (|node| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|visit| SUBTYPE "c_topological_sort.w" "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.mp(x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}")) (|visit_TCC15-1| |nil| 3817539461 ("" (SKEEP*) (("" (CASE "child /= node") (("1" (FLATTEN) (("1" (TYPEPRED "v(G)(m WITH [child := temporary], l, child_id, add1(w,child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (REPLACE -7 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -12 * RL) (("1" (REPLACE -13 * RL) (("1" (DELETE -11 -12 -13) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (EXPAND "permanent_list?") (("1" (TYPEPRED "w") (("1" (REPLACE -13 * RL) (("1" (REPLACE -15 * RL) (("1" (SKEEP) (("1" (CASE "child = x") (("1" (REPLACE -1 * RL) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "greater_marking") (("2" (INST -8 "x") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT 3) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (INST -5 "x") (("2" (ASSERT) (("2" (DELETE -3) (("2" (DELETE -8 -9) (("2" (CASE "permanent?(mp(x))") (("1" (EXPAND "topological_list?") (("1" (INST -6 "x") (("1" (ASSERT) (("1" (INST -11 "x") (("1" (ASSERT) (("1" (TYPEPRED "l") (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (DELETE -1 -3 -4) (("1" (EXPAND "permanent_list?") (("1" (INST -1 "x") (("1" (ASSERT) (("1" (SKOLEM -11 W1) (("1" (INST -7 0 X) (("1" (ASSERT) (("1" (REPLACE -12 * LR) (("1" (SPLIT -7) (("1" (SKEEP) (("1" (REVEAL -1) (("1" (INST -1 0 X) (("1" (SPLIT -1) (("1" (SKEEP) (("1" (CASE-REPLACE "j!1 = j") (("1" (DELETE -1) (("1" (DELETE -1) (("1" (REVEAL -1) (("1" (INST -1 "j" CHILD) (("1" (SPLIT -1) (("1" (SKEEP) (("1" (CASE-REPLACE "j_1 = 0") (("1" (GRIND) NIL NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2 3 4 5 6) (("2" (REPLACE -2 * RL) (("2" (EXPAND "in_path?") (("2" (DELETE -1) (("2" (SKOLEM -4 "i_wx") (("2" (NAME "l_w" "length(w)") (("2" (REPLACE -1 * LR) (("2" (NAME "l_wp" "l_w - i_wx + 1") (("2" (INST 1 "(# length := l_wp, seq := lambda (k: below(l_wp)) : if (k < (l_wp - 1)) then w`seq(k+i_wx) else child endif #)") (("1" (GRIND) NIL NIL) ("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (EXPAND "walk?") (("2" (SPLIT) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "finseq_appl") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 (I_WX +N)) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "n=l_wp -2") (("1" (ASSERT) (("1" (DELETE -2) (("1" (REPLACES) (("1" (ASSERT) (("1" (DELETE -1) (("1" (DELETE -1) (("1" (ASSERT) (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (SKEEP) (("3" (TYPEPRED "i_wx") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "no_repetitions?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC18") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC16") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC13") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC14") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 * LR) (("2" (CASE-REPLACE "node_id = child_id") (("1" (TYPEPRED "adjs") (("1" (INST -3 "child_id") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (TYPEPRED "w") (("1" (INST -4 "node") (("1" (ASSERT) (("1" (EXPAND "in_path?") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (EXPAND "no_repetitions?") (("2" (INST -3 "child_id" "node_id") (("1" (ASSERT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "node_id") (("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "child_id") (("3" (EXPAND "size") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "c_topological_sort.w" "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.mp(x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}"))) (|visit_TCC25| 0 (|visit_TCC25-1| "" 3884649408 ("" (SKEEP*) (("" (SPLIT 1) (("1" (SKEEP*) (("1" (TYPEPRED "adjs") (("1" (INST -2 "x") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REPLACE -2 * RL) (("2" (TYPEPRED "adjs") (("2" (INST -3 "x") (("2" (ASSERT) (("2" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACE -10 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -16 * RL) (("1" (REPLACE -17 * RL) (("1" (DELETE -16 -17) (("1" (SPLIT -9) (("1" (TYPEPRED "adjs") (("1" (REPLACES) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "greater_marking") (("2" (INST -3 "node(G)(x)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC15") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|visit_TCC19| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC17| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|visit| SUBTYPE "c_topological_sort.adjsp" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")) (|visit_TCC11-1| |nil| 3817468360 ("" (SKEEP*) (("" (SPLIT 1) (("1" (SKEEP*) (("1" (TYPEPRED "adjs") (("1" (INST -2 "x") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REPLACE -2 * RL) (("2" (TYPEPRED "adjs") (("2" (INST -3 "x") (("2" (ASSERT) (("2" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACE -10 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -16 * RL) (("1" (REPLACE -17 * RL) (("1" (DELETE -16 -17) (("1" (SPLIT -9) (("1" (TYPEPRED "adjs") (("1" (REPLACES) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "greater_marking") (("2" (INST -3 "node(G)(x)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC18") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC16") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC14") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "c_topological_sort.adjsp" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}"))) (|visit_TCC26| 0 (|visit_TCC26-1| "" 3884649614 ("" (SKEEP*) (("" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -12 * RL) (("1" (REPLACE -13 * RL) (("1" (DELETE -12 -13) (("1" (USE "lex3_lt") (("1" (REPLACE -1 * LR) (("1" (FLATTEN) (("1" (DELETE -1) (("1" (ASSERT) (("1" (USE "lex2_lt") (("1" (REPLACE -1 * LR) (("1" (DELETE -1) (("1" (ASSERT) (("1" (LEMMA "greater_marking_temp_count") (("1" (INST -1 "data(G)" "mp" "m WITH [ child := temporary]") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "greater_marking_perm_count") (("1" (INST -1 "data(G)" "mp" "m WITH [ child := temporary]" "child") (("1" (REPLACE -10 * LR) (("1" (LEMMA "perm_count_same2") (("1" (INST -1 "data(G)" "m" "child") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "temp_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (USE "perm_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (USE "temp_count_bound") (("4" (EXPAND "size") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "perm_count_bound") (("5" (EXPAND "size") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC15") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC15") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|from?| CONST-DECL "bool" |walks_| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|perm_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|lex2_lt| FORMULA-DECL NIL |lex2| NIL) (|greater_marking_temp_count| FORMULA-DECL NIL |c_topological_sort| NIL) (|greater_marking_perm_count| FORMULA-DECL NIL |c_topological_sort| NIL) (|perm_count_same2| FORMULA-DECL NIL |c_topological_sort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|temp_count_bound| FORMULA-DECL NIL |c_topological_sort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|mp| SKOLEM-CONST-DECL "[T -> mark]" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (|lex3_lt| FORMULA-DECL NIL |lex3| NIL) (|visit_TCC19| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC17| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|visit_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|visit| TERMINATION "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)" "NIL")) (|visit_TCC12-1| |nil| 3817468360 ("" (SKEEP*) (("" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -12 * RL) (("1" (REPLACE -13 * RL) (("1" (DELETE -12 -13) (("1" (USE "lex3_lt") (("1" (REPLACE -1 * LR) (("1" (FLATTEN) (("1" (DELETE -1) (("1" (ASSERT) (("1" (USE "lex2_lt") (("1" (REPLACE -1 * LR) (("1" (DELETE -1) (("1" (ASSERT) (("1" (LEMMA "greater_marking_temp_count") (("1" (INST -1 "data(G)" "mp" "m WITH [ child := temporary]") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "greater_marking_perm_count") (("1" (INST -1 "data(G)" "mp" "m WITH [ child := temporary]" "child") (("1" (REPLACE -10 * LR) (("1" (LEMMA "perm_count_same2") (("1" (INST -1 "data(G)" "m" "child") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "temp_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "temp_count_bound") (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (USE "perm_count_bound") (("3" (EXPAND "size") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (USE "temp_count_bound") (("4" (EXPAND "size") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "perm_count_bound") (("5" (EXPAND "size") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "visit_TCC18") (("2" (GRIND) NIL NIL)) NIL) ("3" (USE "visit_TCC16") (("3" (GRIND) NIL NIL)) NIL) ("4" (USE "visit_TCC14") (("4" (GRIND) NIL NIL)) NIL) ("5" (USE "visit_TCC14") (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| TERMINATION "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)" "NIL"))) (|visit_TCC27| 0 (|visit_TCC27-1| "" 3884650266 ("" (SKEEP*) (("" (ASSERT) (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (REPLACE -8 * RL) (("1" (FLATTEN) (("1" (TYPEPRED "v(G)(mp, lp, node_id, w, adjsp)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (NAME-REPLACE "mpp" "OUT_2(v(G)(mp, lp, node_id, w, adjsp))`1") (("1" (NAME-REPLACE "lpp" "OUT_2(v(G)(mp, lp, node_id, w, adjsp))`2") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "greater_marking") (("2" (SKOLEM 1 "x") (("2" (INST -2 "x") (("2" (INST -8 "x") (("2" (ASSERT) (("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_supl[T]") (("3" (INST-CP -1 "l" "lp") (("3" (INST-CP -1 "lp" "lpp") (("3" (INST -1 "l" "lpp") (("3" (ASSERT) (("3" (SKEEP*) (("3" (INST 1 "append(L, L!1)") (("3" (REWRITE "append_assoc[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL) ("5" (SKEEP) (("5" (INST -6 "x") (("5" (ASSERT) (("5" (INST -12 "x") (("5" (ASSERT) (("5" (SPLIT -6) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (SPLIT -12) (("1" (ASSERT) (("1" (REPLACE -1 * RL) (("1" (REPLACE -16 * LR) (("1" (INST 3 "gen_seq2(G, node, x)") (("1" (GRIND) NIL NIL) ("2" (USE "edge_to_walk") (("2" (ASSERT) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (TYPEPRED "adjs") (("3" (REPLACE -4 1 LR) (("3" (EXPAND "node" 1 1) (("3" (REWRITE "idx_nth_no_rep[T]") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "edge?") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4 5 6) (("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM -1 "w1") (("2" (INST 3 "(# length := length(w1) + 1, seq := lambda (k:below(length(w1)+1)) : if (k=0) then node else w1`seq(k-1) endif #)") (("1" (GRIND) NIL NIL) ("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?") (("2" (SPLIT) (("1" (SKOLEM 1 "k") (("1" (ASSERT) (("1" (TYPEPRED "w1") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w1") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (SKEEP) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -1 * LR) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -6 * LR) (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (REPLACE -23 * LR) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "n-1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (PROPAX) NIL NIL)) NIL) ("2" (USE "visit_TCC23") (("2" (USE "visit_TCC24") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (USE "visit_TCC24") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (USE "visit_TCC25") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (USE "visit_TCC24") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE 1 2) (("4" (USE "visit_TCC23") (("4" (GRIND) NIL NIL)) NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (USE "visit_TCC22") (("2" (USE "visit_TCC19") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (USE "visit_TCC24") (("3" (USE "visit_TCC17") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "visit_TCC16") (("4" (HIDE 2 3) (("4" (USE "visit_TCC15") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|visit_TCC16| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC17| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC19| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC22| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC25| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC23| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|visit_TCC24| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|lpp| SKOLEM-CONST-DECL "list[Vert(G)]" |c_topological_sort| NIL) (|node_id| SKOLEM-CONST-DECL "{id: VertID(G) | NOT permanent?(m(node(G)(id)))}" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "marking" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|suffix_supl| FORMULA-DECL NIL |more_list_props| |structures|) (|node| SKOLEM-CONST-DECL "{v: T | member(v, data(G))}" |c_topological_sort| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|x| SKOLEM-CONST-DECL "T" |c_topological_sort| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|idx_nth_no_rep| FORMULA-DECL NIL |more_list_props| |structures|) (|edge_to_walk| FORMULA-DECL NIL |walks_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|w1| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" |c_topological_sort| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|n| SKOLEM-CONST-DECL "nat" |c_topological_sort| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|add1| CONST-DECL "prewalk" |walks_| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|temp_count| CONST-DECL "nat" |c_topological_sort| NIL) (|perm_count| CONST-DECL "nat" |c_topological_sort| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|lex3| CONST-DECL "ordinal" |lex3| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|visit| SUBTYPE "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")) (|visit_TCC23-1| |nil| 3846607699 ("" (SKEEP*) (("" (ASSERT) (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))") (("1" (REPLACE -6 * LR) (("1" (ASSERT) (("1" (REPLACE -7 * RL) (("1" (REPLACE -8 * RL) (("1" (FLATTEN) (("1" (TYPEPRED "v(G)(mp, lp, node_id, w, adjsp)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (NAME-REPLACE "mpp" "OUT_2(v(G)(mp, lp, node_id, w, adjsp))`1") (("1" (NAME-REPLACE "lpp" "OUT_2(v(G)(mp, lp, node_id, w, adjsp))`2") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "greater_marking") (("2" (SKOLEM 1 X) (("2" (INST -2 "x") (("2" (INST -8 X) (("2" (ASSERT) (("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_supl[T]") (("3" (INST-CP -1 L LP) (("3" (INST-CP -1 LP LPP) (("3" (INST -1 L LPP) (("3" (ASSERT) (("3" (SKEEP*) (("3" (INST 1 "append(L, L!1)") (("3" (REWRITE "append_assoc[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL) ("5" (SKEEP) (("5" (INST -6 X) (("5" (ASSERT) (("5" (INST -12 X) (("5" (ASSERT) (("5" (SPLIT -6) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (SPLIT -12) (("1" (ASSERT) (("1" (REPLACE -1 * RL) (("1" (REPLACE -16 * LR) (("1" (INST 3 "gen_seq2(G, node, x)") (("1" (GRIND) NIL NIL) ("2" (USE "edge_to_walk") (("2" (ASSERT) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (TYPEPRED "adjs") (("3" (REPLACE -4 1 LR) (("3" (EXPAND "node" 1 1) (("3" (REWRITE "idx_nth_no_rep[T]") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "edge?") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3 4 5 6) (("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM -1 "w1") (("2" (INST 3 "(# length := length(w1) + 1, seq := lambda (k:below(length(w1)+1)) : if (k=0) then node else w1`seq(k-1) endif #)") (("1" (GRIND) NIL NIL) ("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?") (("2" (SPLIT) (("1" (SKOLEM 1 K) (("1" (ASSERT) (("1" (TYPEPRED "w1") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w1") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (SKEEP) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -1 * LR) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -6 * LR) (("1" (TYPEPRED "adjs") (("1" (INST -2 "child_id") (("1" (ASSERT) (("1" (REPLACE -23 * LR) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "n-1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (PROPAX) NIL NIL)) NIL) ("2" (USE "visit_TCC23") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (USE "visit_TCC23") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (USE "visit_TCC24") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (USE "visit_TCC23") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE 1 2) (("4" (USE "visit_TCC22") (("4" (GRIND) NIL NIL)) NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (USE "visit_TCC21") (("2" (USE "visit_TCC18") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (USE "visit_TCC23") (("3" (USE "visit_TCC16") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "visit_TCC15") (("4" (HIDE 2 3) (("4" (USE "visit_TCC14") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|visit| SUBTYPE "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}"))) (|topological_sort_aux_TCC1| 0 (|topological_sort_aux_TCC1-1| |nil| 3846738806 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.i" "below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))"))) (|topological_sort_aux_TCC2| 0 (|topological_sort_aux_TCC2-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (USE "suffix_supl[T]") (("2" (ASSERT) (("2" (INST 1 "null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "l") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|suffix_supl| FORMULA-DECL NIL |more_list_props| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "IN_2(c_topological_sort.m, c_topological_sort.l)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}"))) (|topological_sort_aux_TCC3| 0 (|topological_sort_aux_TCC3-1| |nil| 3846738806 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_sort_aux| SUBTYPE "(number_fields.-)(c_topological_sort.n, 1)" "below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))"))) (|topological_sort_aux_TCC4| 0 (|topological_sort_aux_TCC4-1| |nil| 3846738806 ("" (GRIND) NIL NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_sort_aux| TERMINATION "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)" "NIL"))) (|topological_sort_aux_TCC5| 0 (|topological_sort_aux_TCC5-2| "" 3884661976 ("" (SKEEP*) (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "v(G)(n - 1, m, l)") (("2" (NAME-REPLACE "res" "OUT_2(v(G)(n - 1, m, l))") (("1" (ASSERT) (("1" (GROUND) (("1" (SKEEP) (("1" (INST -4 "i") (("1" (ASSERT) (("1" (TYPEPRED "i") (("1" (CASE "i = n") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|topological_sort_aux| SUBTYPE "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")) (|topological_sort_aux_TCC5-1| |nil| 3846738806 ("" (SKEEP*) (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "v(G)(n - 1, m, l)") (("2" (NAME-REPLACE "res" "OUT_2(v(G)(n - 1, m, l))") (("1" (ASSERT) (("1" (GROUND) (("1" (SKEEP) (("1" (INST -4 I) (("1" (ASSERT) (("1" (TYPEPRED "i") (("1" (CASE "i = n") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|res| SKOLEM-CONST-DECL "[non_temporary_marking, list[Vert(G)]]" |c_topological_sort| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|n| SKOLEM-CONST-DECL "below(size[T](G))" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "upto(n)" |c_topological_sort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}"))) (|topological_sort_aux_TCC6| 0 (|topological_sort_aux_TCC6-2| "" 3884662013 ("" (SKEEP) (("" (TYPEPRED "l") (("" (EXPAND "topperm_list") (("" (ASSERT) (("" (FLATTEN) (("" (GROUND) (("" (EXPAND "permanent_list?") (("" (SKEEP) (("" (INST -2 "x") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|topological_sort_aux| SUBTYPE "c_topological_sort.l" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary]))")) (|topological_sort_aux_TCC6-1| |nil| 3846738806 ("" (SKEEP) (("" (TYPEPRED "l") (("" (EXPAND "topperm_list") (("" (ASSERT) (("" (FLATTEN) (("" (GROUND) (("" (EXPAND "permanent_list?") (("" (SKEEP) (("" (INST -2 X) (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.l" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary]))"))) (|topological_sort_aux_TCC7| 0 (|topological_sort_aux_TCC7-1| |nil| 3846738806 ("" (SKEEP*) (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.n" "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}"))) (|topological_sort_aux_TCC8| 0 (|topological_sort_aux_TCC8-1| |nil| 3846738806 ("" (SKEEP*) (("" (GRIND) NIL NIL)) NIL) ((|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.node" "(c_digraphs_imp[c_topological_sort.T].digraph_verts(c_topological_sort.G))"))) (|topological_sort_aux_TCC9| 0 (|topological_sort_aux_TCC9-1| |nil| 3846738806 ("" (SKEEP*) (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "m") (("3" (INST -1 "x") (("3" (LIFT-IF) (("3" (ASSERT) (("3" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "in_path?") (("1" (INST 1 0) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "in_path?") (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (ASSERT) (("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].gen_seq1(c_topological_sort.G, c_topological_sort.node)" "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}"))) (|topological_sort_aux_TCC10| 0 (|topological_sort_aux_TCC10-1| |nil| 3846738806 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.n" "below[length[list[nat]](adjs(G))]"))) (|topological_sort_aux_TCC11| 0 (|topological_sort_aux_TCC11-2| "" 3884662076 ("" (SKEEP*) (("" (TYPEPRED "n") (("" (TYPEPRED "G") (("" (EXPAND "cdigraph") (("" (FLATTEN) (("" (INST - "n") (("1" (INST - "n") (("1" (TYPEPRED "(nth[list[nat]](adjs(G), n))") (("1" (SPLIT 2) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (DELETE 2) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (DELETE -2) (("1" (SKEEP) (("1" (INST -1 "i") (("1" (FLATTEN) (("1" (GROUND) (("1" (EXPAND "list_of_idxs") (("1" (INST -7 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "edge?") (("2" (EXPAND "digraph_edges") (("2" (EXPAND "edges") (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (EXPAND "vert") (("2" (EXPAND "node") (("2" (REWRITE "member_iff_nth[T]") (("2" (INST 1 "x") (("2" (EXPAND "list_of_idxs") (("2" (USE "member_iff_nth[nat]" ("t" "x")) (("2" (ASSERT) (("2" (SKOLEM -1 "x_id") (("2" (INST -5 "x_id") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "node") (("3" (REWRITE "idx_nth_no_rep") (("3" (REWRITE "idx_nth_no_rep") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "x") (("3" (DELETE 2) (("3" (DELETE -3) (("3" (EXPAND "edge?") (("3" (EXPAND "digraph_edges") (("3" (EXPAND "edges") (("3" (FLATTEN) (("3" (EXPAND "node") (("3" (REWRITE "idx_nth_no_rep") (("3" (REWRITE "idx_nth_no_rep") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|topological_sort_aux| SUBTYPE "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.n)" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.n) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")) (|topological_sort_aux_TCC11-1| |nil| 3846738806 ("" (SKEEP*) (("" (TYPEPRED "n") (("" (TYPEPRED "G") (("" (EXPAND "cdigraph") (("" (FLATTEN) (("" (INST - N) (("1" (INST - N) (("1" (TYPEPRED "(nth[list[nat]](adjs(G), n))") (("1" (SPLIT 2) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (DELETE 2) (("1" (USE "every_nth[number]") (("1" (ASSERT) (("1" (DELETE -2) (("1" (SKEEP) (("1" (INST -1 I) (("1" (FLATTEN) (("1" (GROUND) (("1" (EXPAND "list_of_idxs") (("1" (INST -7 I) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "edge?") (("2" (EXPAND "digraph_edges") (("2" (EXPAND "edges") (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (EXPAND "vert") (("2" (EXPAND "node") (("2" (REWRITE "member_iff_nth[T]") (("2" (INST 1 X) (("2" (EXPAND "list_of_idxs") (("2" (USE "member_iff_nth[nat]" (T X)) (("2" (ASSERT) (("2" (SKOLEM -1 "x_id") (("2" (INST -5 "x_id") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "node") (("3" (REWRITE "idx_nth_no_rep") (("3" (REWRITE "idx_nth_no_rep") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "x") (("3" (DELETE 2) (("3" (DELETE -3) (("3" (EXPAND "edge?") (("3" (EXPAND "digraph_edges") (("3" (EXPAND "edges") (("3" (FLATTEN) (("3" (EXPAND "node") (("3" (REWRITE "idx_nth_no_rep") (("3" (REWRITE "idx_nth_no_rep") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|n| SKOLEM-CONST-DECL "below(size[T](G))" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|x| SKOLEM-CONST-DECL "VertID(G)" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|member_iff_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|idx_nth_no_rep| FORMULA-DECL NIL |more_list_props| |structures|) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|every_nth| FORMULA-DECL NIL |list_props| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.n)" "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.n) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}"))) (|topological_sort_aux_TCC12| 0 (|topological_sort_aux_TCC12-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "IN_1(c_topological_sort.loop)" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}"))) (|topological_sort_aux_TCC13| 0 (|topological_sort_aux_TCC13-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))") (("" (REPLACE -3 * LR) (("" (ASSERT) (("" (FLATTEN) (("" (GROUND) (("1" (EXPAND "greater_marking") (("1" (SKOLEM 1 X) (("1" (INST -2 X) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l") (("2" (REPLACE -11 * LR) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (REPLACE -12 * LR) (("2" (CASE "i = 0") (("1" (REPLACE -1 * LR) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|n| SKOLEM-CONST-DECL "below(size[T](G))" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "upto(n)" |c_topological_sort| NIL) (|m| SKOLEM-CONST-DECL "non_temporary_marking" |c_topological_sort| NIL) (|l| SKOLEM-CONST-DECL "(topperm_list(G, m))" |c_topological_sort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|res| SKOLEM-CONST-DECL "[[T -> mark], list[Vert(G)]]" |c_topological_sort| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|visit| DEF-DECL "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "IN_2(c_topological_sort.res):: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]]" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}"))) (|topological_sort_aux_TCC14| 0 (|topological_sort_aux_TCC14-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "(number_fields.-)(c_topological_sort.n, 1)" "below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))"))) (|topological_sort_aux_TCC15| 0 (|topological_sort_aux_TCC15-2| "" 3884662101 ("" (SKEEP*) (("" (TYPEPRED "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))") (("" (ASSERT) (("" (REPLACE -3 * LR) (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -9 * RL) (("" (REPLACE -10 * RL) (("" (HIDE -8 -9 -10) (("" (TYPEPRED "m") (("" (INST -1 "x") (("" (EXPAND "greater_marking") (("" (INST -2 "x") (("" (FLATTEN) (("" (ASSERT) (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|topological_sort_aux| SUBTYPE "c_topological_sort.mp" "non_temporary_marking")) (|topological_sort_aux_TCC15-1| |nil| 3846738806 ("" (SKEEP*) (("" (TYPEPRED "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))") (("" (ASSERT) (("" (REPLACE -3 * LR) (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -9 * RL) (("" (REPLACE -10 * RL) (("" (HIDE -8 -9 -10) (("" (TYPEPRED "m") (("" (INST -1 X) (("" (EXPAND "greater_marking") (("" (INST -2 X) (("" (FLATTEN) (("" (ASSERT) (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|from?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|visit| DEF-DECL "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.mp" "non_temporary_marking"))) (|topological_sort_aux_TCC16| 0 (|topological_sort_aux_TCC16-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))") (("" (REPLACE -3 * LR) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|visit| DEF-DECL "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.lp" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))"))) (|topological_sort_aux_TCC17| 0 (|topological_sort_aux_TCC17-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| TERMINATION "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp)" "NIL"))) (|topological_sort_aux_TCC18| 0 (|topological_sort_aux_TCC18-2| "" 3884664458 ("" (SKEEP*) (("" (ASSERT) (("" (LIFT-IF) (("" (GROUND) (("" (TYPEPRED " visit(G)
               (m WITH [node := temporary], l, n, gen_seq1(G, node),
                nth(adjs(G), n))") (("" (REPLACE -3 * LR) (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -9 * RL) (("" (REPLACE -10 * RL) (("" (HIDE -8 -9 -10) (("" (TYPEPRED "v(G)(n - 1, mp, lp)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (NAME-REPLACE "mpp" "OUT_2(v(G)(n - 1, mp, lp))`1") (("1" (NAME-REPLACE "lpp" "OUT_2(v(G)(n - 1, mp, lp))`2") (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL) ("4" (EXPAND "greater_marking") (("4" (SKOLEM 1 "x") (("4" (INST - "x") (("4" (INST -10 "x") (("4" (LIFT-IF) (("4" (ASSERT) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (USE "suffix_supl" ("l1" "l") ("l2" "lpp")) (("5" (ASSERT) (("5" (LEMMA "suffix_supl[T]") (("5" (INST -1 "l" "lp") (("5" (ASSERT) (("5" (SKEEP) (("5" (LEMMA "suffix_supl[T]") (("5" (INST -1 "lp" "lpp") (("5" (ASSERT) (("5" (SKEEP) (("5" (INST 1 "append(L!1, L)") (("1" (REWRITE "append_assoc[T]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "lp") (("2" (LEMMA "every_append[T]") (("2" (INST -1 "vert?(G)" "L" "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "lpp") (("3" (LEMMA "every_append[T]") (("3" (INST -1 "vert?(G)" "L!1" "lp") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (INST -6 "i") (("6" (CASE "i = n") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "topological_sort_aux_TCC15") (("3" (INST -1 "G" "n" "m" "l" "node") (("3" (ASSERT) (("3" (INST -1 "res") (("3" (ASSERT) (("3" (INST -1 "mp" "lp") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|topological_sort_aux| SUBTYPE "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp):: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]]" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")) (|topological_sort_aux_TCC18-1| |nil| 3846738806 ("" (SKEEP*) (("" (ASSERT) (("" (LIFT-IF) (("" (GROUND) (("" (TYPEPRED " visit(G)
               (m WITH [node := temporary], l, n, gen_seq1(G, node),
                nth(adjs(G), n))") (("" (REPLACE -3 * LR) (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -9 * RL) (("" (REPLACE -10 * RL) (("" (HIDE -8 -9 -10) (("" (TYPEPRED "v(G)(n - 1, mp, lp)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (NAME-REPLACE "mpp" "OUT_2(v(G)(n - 1, mp, lp))`1") (("1" (NAME-REPLACE "lpp" "OUT_2(v(G)(n - 1, mp, lp))`2") (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL) ("4" (EXPAND "greater_marking") (("4" (SKOLEM 1 X) (("4" (INST - X) (("4" (INST -10 X) (("4" (LIFT-IF) (("4" (ASSERT) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (USE "suffix_supl" (L1 L) (L2 LPP)) (("5" (ASSERT) (("5" (LEMMA "suffix_supl[T]") (("5" (INST -1 L LP) (("5" (ASSERT) (("5" (SKEEP) (("5" (LEMMA "suffix_supl[T]") (("5" (INST -1 LP LPP) (("5" (ASSERT) (("5" (SKEEP) (("5" (INST 1 "append(L!1, L)") (("1" (REWRITE "append_assoc[T]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "lp") (("2" (LEMMA "every_append[T]") (("2" (INST -1 "vert?(G)" L L) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "lpp") (("3" (LEMMA "every_append[T]") (("3" (INST -1 "vert?(G)" L!1 LP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (INST -6 I) (("6" (CASE "i = n") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "topological_sort_aux_TCC15") (("3" (INST -1 G N M L NODE) (("3" (ASSERT) (("3" (INST -1 RES) (("3" (ASSERT) (("3" (INST -1 "mp" LP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|lpp| SKOLEM-CONST-DECL "list[Vert(G)]" |c_topological_sort| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|n| SKOLEM-CONST-DECL "below(size[T](G))" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "upto(n)" |c_topological_sort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|suffix_supl| FORMULA-DECL NIL |more_list_props| |structures|) (L!1 SKOLEM-CONST-DECL "list[T]" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (L SKOLEM-CONST-DECL "list[T]" |c_topological_sort| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|every_append| FORMULA-DECL NIL |list_props| NIL) (|topological_sort_aux_TCC15| SUBTYPE-TCC NIL |c_topological_sort| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|temporary| ADT-CONSTRUCTOR-DECL "(temporary?)" |c_topological_sort| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|visit| DEF-DECL "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" |c_topological_sort| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Adjs| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|in_path?| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|permanent?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|VertID| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort_aux| SUBTYPE "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp):: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]]" "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}"))) (|member_length| 0 (|member_length-2| "" 3884664547 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l1")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST-CP -3 "x") (("2" (ASSERT) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) (("2" (EXPAND "member" -4 1) (("2" (USE "expand_list_app[T]") (("2" (ASSERT) (("2" (SKOLEM -1 ("l2_1" "l2_2")) (("2" (INST -2 "append(l2_1, l2_2)") (("2" (ASSERT) (("2" (REPLACE -1 1 LR) (("2" (REWRITE "length_append[T]") (("2" (REWRITE "length_append[T]") (("2" (REWRITE "length_append[T]") (("2" (ASSERT) (("2" (USE "no_rep_cdr[T]" ("l" "l1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REPLACE -2 -5 LR) (("2" (SKOLEM 2 "a") (("2" (INST -4 "a") (("2" (FLATTEN) (("2" (EXPAND "member" -5 1) (("2" (ASSERT) (("2" (LEMMA "member_append_fi[T]") (("2" (INST -1 "a" "l2_1" "append((: x :), l2_2)") (("2" (ASSERT) (("2" (USE "member_append_l[T]" ("l1" "l2_1")) (("2" (ASSERT) (("2" (EXPAND "append" -1) (("2" (EXPAND "member" -1) (("2" (EXPAND "append" -1) (("2" (USE "member_append_r[T]" ("l2" "l2_2")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|member_length-1| |nil| 3846750948 ("" (INDUCT L1) (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l1")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST-CP -3 "x") (("2" (ASSERT) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) (("2" (EXPAND "member" -4 1) (("2" (USE "expand_list_app[T]") (("2" (ASSERT) (("2" (SKOLEM -1 ("l2_1" "l2_2")) (("2" (INST -2 "append(l2_1, l2_2)") (("2" (ASSERT) (("2" (REPLACE -1 1 LR) (("2" (REWRITE "length_append[T]") (("2" (REWRITE "length_append[T]") (("2" (REWRITE "length_append[T]") (("2" (ASSERT) (("2" (USE "no_rep_cdr[T]" (L L1)) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REPLACE -2 -5 LR) (("2" (SKOLEM 2 "a") (("2" (INST -4 "a") (("2" (FLATTEN) (("2" (EXPAND "member" -5 1) (("2" (ASSERT) (("2" (LEMMA "member_append_fi[T]") (("2" (INST -1 "a" "l2_1" "append((: x :), l2_2)") (("2" (ASSERT) (("2" (USE "member_append_l[T]" (L1 L2_1)) (("2" (ASSERT) (("2" (EXPAND "append" -1) (("2" (EXPAND "member" -1) (("2" (EXPAND "append" -1) (("2" (USE "member_append_r[T]" (L2 L2_2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expand_list_app| FORMULA-DECL NIL |more_list_props| |structures|) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|no_rep_cdr| FORMULA-DECL NIL |more_list_props| |structures|) (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|) (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|) (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|topological_sort_TCC1| 0 (|topological_sort_TCC2-1| |nil| 3846749251 ("" (SKEEP) (("" (SKOLEM-TYPEPRED) (("" (EXPAND "vert?") (("" (EXPAND "size") (("" (EXPAND "length") (("" (LIFT-IF) (("" (EXPAND "digraph_verts") (("" (EXPAND "vert") (("" (EXPAND "member") (("" (ASSERT) (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|topological_sort| SUBTYPE "0" "below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))"))) (|topological_sort_TCC2| 0 (|topological_sort_TCC3-1| |nil| 3846749251 ("" (GRIND) (("1" (EXPAND "length") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (G!1 SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|topological_ordering?| CONST-DECL "bool" |c_topological_sort| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL)) NIL (|topological_sort| SUBTYPE "LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): 0" "(c_topological_sort.topological_ordering?(c_topological_sort.G))"))) (|topological_sort_TCC3| 0 (|topological_sort_TCC5-1| |nil| 3846749251 ("" (SKEEP) (("" (ASSERT) (("" (EXPAND "is_dag") (("" (SKEEP) (("" (EXPAND "path?") (("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (TYPEPRED "w") (("" (EXPAND "walk?") (("" (FLATTEN) (("" (EXPAND "verts_in?") (("" (INST -2 0) (("" (EXPAND "digraph_verts") (("" (EXPAND "vert") (("" (EXPAND "size") (("" (EXPAND "length") (("" (EXPAND "member") (("" (LIFT-IF) (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|is_dag| CONST-DECL "bool" |c_topological_sort| NIL)) NIL (|topological_sort| SUBTYPE "IN_2(LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): 0)" "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}"))) (|topological_sort_TCC4| 0 (|topological_sort_TCC4-1| |nil| 3846749251 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_sort| SUBTYPE "(number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1)" "below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))"))) (|topological_sort_TCC5| 0 (|topological_sort_TCC1-1| |nil| 3846749251 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|empty_marking| CONST-DECL "marking" |c_topological_sort| NIL)) NIL (|topological_sort| SUBTYPE "c_topological_sort.empty_marking" "non_temporary_marking"))) (|topological_sort_TCC6| 0 (|topological_sort_TCC6-1| |nil| 3846749251 ("" (GRIND) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (G!1 SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|empty_marking| CONST-DECL "marking" |c_topological_sort| NIL) (|permanent_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|topological_sort| SUBTYPE "list_adt[c_topological_sort.T].null" "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.empty_marking))"))) (|topological_sort_TCC7| 0 (|topological_sort_TCC7-1| |nil| 3846749251 ("" (SKEEP*) (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "is_dag") (("1" (INST -2 "OUT_1(topological_sort_aux(G)(size[T](G) - 1, empty_marking, null[T]))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "topological_sort_aux(G)
                                                 (size[T](G) - 1,
                                                  empty_marking,
                                                  null[T])") (("2" (ASSERT) (("2" (FLATTEN) (("2" (NAME-REPLACE "lp" "OUT_2(topological_sort_aux(G)(size[T](G) - 1, empty_marking, null[T]))`2") (("2" (NAME-REPLACE "mp" "OUT_2(topological_sort_aux(G)(size[T](G) - 1, empty_marking, null[T]))`1") (("2" (GROUND) (("1" (EXPAND "topperm_list") (("1" (FLATTEN) (("1" (CASE "length(lp) >= size(G)") (("1" (CASE "length(lp) <= size(G)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (EXPAND "size") (("2" (USE "member_length" (L1 LP)) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "lp") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (USE "every_nth[T]") (("2" (ASSERT) (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -2 I) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "member_length" (L1 "data(G)")) (("2" (ASSERT) (("2" (TYPEPRED "G") (("2" (EXPAND "cdigraph") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "size") (("2" (ASSERT) (("2" (SKEEP) (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -12 I) (("1" (ASSERT) (("1" (EXPAND "node") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 I) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|topological_sort_aux| DEF-DECL "{res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          LET (mp, lp) = res IN
            topperm_list(G, mp)(lp) ∧
             greater_marking(mp, m) ∧
              suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)
     ENDCASES}" |c_topological_sort| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|empty_marking| CONST-DECL "marking" |c_topological_sort| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|is_dag| CONST-DECL "bool" |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort| SUBTYPE "IN_1(c_topological_sort.loop):: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))]" "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}"))) (|topological_sort_TCC8| 0 (|topological_sort_TCC8-1| |nil| 3847900230 ("" (SKEEP*) (("" (TYPEPRED "topological_sort_aux(G)(size(G) - 1, empty_marking, null)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -5 * LR) (("1" (ASSERT) (("1" (REPLACE -6 * RL) (("1" (REPLACE -7 * RL) (("1" (TYPEPRED "x") (("1" (EXPAND "vert?") (("1" (EXPAND "digraph_verts") (("1" (EXPAND "vert") (("1" (USE "member_iff_nth[T]") (("1" (ASSERT) (("1" (SKOLEM -1 "idx_x") (("1" (INST -6 "idx_x") (("1" (EXPAND "node") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "idx_x") (("2" (EXPAND "size") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|topological_sort_aux| DEF-DECL "{res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          LET (mp, lp) = res IN
            topperm_list(G, mp)(lp) ∧
             greater_marking(mp, m) ∧
              suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)
     ENDCASES}" |c_topological_sort| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|empty_marking| CONST-DECL "marking" |c_topological_sort| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|member_iff_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|idx_x| SKOLEM-CONST-DECL "below(length[T](data(G)))" |c_topological_sort| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort| SUBTYPE "c_topological_sort.x" "{a: c_topological_sort.T | list_props[c_topological_sort.T].member(a, c_topological_sort.l)}"))) (|topological_sort_TCC9| 0 (|topological_sort_TCC9-2| "" 3884664788 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "is_dag") (("" (SKEEP) (("" (EXPAND "path?") (("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (TYPEPRED "topological_sort_aux(G)(size(G) - 1, empty_marking, null)") (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -5 * LR) (("" (ASSERT) (("" (REPLACE -6 * RL) (("" (REPLACE -7 * RL) (("" (EXPAND "topperm_list") (("" (FLATTEN) (("" (EXPAND "topological_list?") (("" (HIDE -1 -4 -5) (("" (CASE "i < j") (("1" (INST - "idx(l, w`seq(i))" "w`seq(j)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "no_repetitions?") (("1" (INST - "j_1" "idx(l, w`seq(i))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "(#length := j-i+1 , seq := Lambda (k:upto(j-i)): w`seq(i+k)  #)") (("1" (EXPAND "from?") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (EXPAND "finseq_appl") (("2" (GROUND) (("1" (SKEEP) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (INST -2 "i_1+i") (("1" (EXPAND "digraph_verts") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -3 "n+i") (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -2 "i") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -7 "i_1") (("1" (ASSERT) (("1" (EXPAND "node") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j < i") (("1" (INST - "idx(l, w`seq(j))" "w`seq(i)") (("1" (SPLIT -) (("1" (SKEEP) (("1" (EXPAND "no_repetitions?") (("1" (INST - "j_1" "idx(l, w`seq(j))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (INST 1 "(#length := i-j+1 , seq := Lambda (k:upto(i-j)): w`seq(j+k)  #)") (("1" (EXPAND "from?") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (SPLIT 1) (("1" (SKEEP) (("1" (INST -2 " i_1+j") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -4 "n+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (FLATTEN) (("2" (INST -2 "j") (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -7 "i!1") (("1" (ASSERT) (("1" (EXPAND "node") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|topological_sort| SUBTYPE "IN_2(LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): (number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), more_list_props[c_topological_sort.T].idx(c_topological_sort.l, x))):: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))]" "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}")) (|topological_sort_TCC9-1| |nil| 3847900230 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "is_dag") (("" (SKEEP) (("" (EXPAND "path?") (("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (TYPEPRED "topological_sort_aux(G)(size(G) - 1, empty_marking, null)") (("" (ASSERT) (("" (FLATTEN) (("" (REPLACE -5 * LR) (("" (ASSERT) (("" (REPLACE -6 * RL) (("" (REPLACE -7 * RL) (("" (EXPAND "topperm_list") (("" (FLATTEN) (("" (EXPAND "topological_list?") (("" (HIDE -1 -4 -5) (("" (CASE "i < j") (("1" (INST - "idx(l, w`seq(i))" "w`seq(j)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "no_repetitions?") (("1" (INST - "j_1" "idx(l, w`seq(i))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "(#length := j-i+1 , seq := Lambda (k:upto(j-i)): w`seq(i+k)  #)") (("1" (EXPAND "from?") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (EXPAND "finseq_appl") (("2" (GROUND) (("1" (SKEEP) (("1" (TYPEPRED "w") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (INST -2 "i_1+i") (("1" (EXPAND "digraph_verts") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -3 "n+i") (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -2 I) (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -7 "i_1") (("1" (ASSERT) (("1" (EXPAND "node") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j < i") (("1" (INST - "idx(l, w`seq(j))" "w`seq(i)") (("1" (SPLIT -) (("1" (SKEEP) (("1" (EXPAND "no_repetitions?") (("1" (INST - "j_1" "idx(l, w`seq(j))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (INST 1 "(#length := i-j+1 , seq := Lambda (k:upto(i-j)): w`seq(j+k)  #)") (("1" (EXPAND "from?") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (SPLIT 1) (("1" (SKEEP) (("1" (INST -2 " i_1+j") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -4 "n+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (FLATTEN) (("2" (INST -2 J) (("2" (EXPAND "digraph_verts") (("2" (EXPAND "vert") (("2" (USE "member_iff_nth[T]") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -7 "i!1") (("1" (ASSERT) (("1" (EXPAND "node") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|non_temporary_marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Vert| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|mark| TYPE-DECL NIL |c_topological_sort| NIL) (|marking| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|topperm_list| CONST-DECL "bool" |c_topological_sort| NIL) (|temporary?| ADT-RECOGNIZER-DECL "[mark -> boolean]" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|greater_marking| CONST-DECL "bool" |c_topological_sort| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|node| CONST-DECL "{v: T | member(v, data(cd))}" |c_digraphs_def| NIL) (|topological_sort_aux| DEF-DECL "{res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          LET (mp, lp) = res IN
            topperm_list(G, mp)(lp) ∧
             greater_marking(mp, m) ∧
              suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)
     ENDCASES}" |c_topological_sort| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|empty_marking| CONST-DECL "marking" |c_topological_sort| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(data(G)))" |c_topological_sort| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|l| SKOLEM-CONST-DECL "list[Vert(G)]" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|idx| DEF-DECL "{i: below(length(l)) | nth(l, i) = a}" |more_list_props| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|from?| CONST-DECL "bool" |walks_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member_iff_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|i_1| SKOLEM-CONST-DECL "below(length(data(G)))" |c_topological_sort| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| NIL) (|topological_list?| CONST-DECL "bool" |c_topological_sort| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|is_dag| CONST-DECL "bool" |c_topological_sort| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|topological_sort| SUBTYPE "IN_2(LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): (number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), more_list_props[c_topological_sort.T].idx(c_topological_sort.l, x))):: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))]" "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}"))) (|topological_sort_exists| 0 (|topological_sort_exists-2| "" 3884664836 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "topological_sort(G)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (INST 1 "OUT_2(topological_sort(G))") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "is_dag") (("2" (LEMMA "topological_ordering_path") (("2" (INST -1 "G" "f" "_" "_" "_" "_") (("2" (SKEEP) (("2" (TYPEPRED "w") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "i < j") (("1" (INST - "j-i-1" "w" "i" "j") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "j < i") (("1" (INST -4 "i-j-1" "w" "j" "i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|topological_sort_exists-1| |nil| 3846753478 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "topological_sort(G)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (INST 1 "OUT_2(topological_sort(G))") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "is_dag") (("2" (LEMMA "topological_ordering_path") (("2" (INST -1 "G" "f" "_" "_" "_" "_") (("2" (SKEEP) (("2" (TYPEPRED "w") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (SKEEP) (("2" (CASE "i < j") (("1" (INST - "j-i-1" W I J) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "j < i") (("1" (INST -4 "i-j-1" W J I) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|topological_sort| CONST-DECL "{res: [loop(G) + (topological_ordering?(G))] | IN?_2(res) ⇔ is_dag(G)}" |c_topological_sort| NIL) (|is_dag| CONST-DECL "bool" |c_topological_sort| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|topological_ordering?| CONST-DECL "bool" |c_topological_sort| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| NIL) (< CONST-DECL "bool" |reals| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|loop| TYPE-EQ-DECL NIL |c_topological_sort| NIL) (|path?| CONST-DECL "bool" |paths_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |c_topological_sort| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|topological_ordering_path| FORMULA-DECL NIL |c_topological_sort| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|i| SKOLEM-CONST-DECL "below(length(w))" |c_topological_sort| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" |c_topological_sort| NIL) (G SKOLEM-CONST-DECL "c_digraph[T]" |c_topological_sort| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) SHOSTAK)))(|c_topological_sort_example| (G1_TCC1 0 (G1_TCC1-1 |nil| 3817967284 ("" (EXPAND "cdigraph") (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (CASE "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) (("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "no_repetitions?") (("3" (SKEEP) (("3" (CASE "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8") (("1" (CASE "j = 0 OR j = 1 OR j = 2 OR j = 3 OR j = 4 OR j = 5 OR j = 6 OR j = 7 OR j = 8") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "j") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (CASE "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "nth") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "nth") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (G1 SUBTYPE "(# data := (: 0, 1, 2, 3, 4, 5, 6, 7, 8 :), adjs := (: (: 1 :), (: :), (: 0, 3, 4 :), (: 0, 7, 8 :), (: 1 :), (: :), (: 1 :), (: 8 :), (: 1 :) :) #)" "c_digraph[nat]"))) (G2_TCC1 0 (G2_TCC1-1 |nil| 3846753477 ("" (EXPAND "cdigraph") (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (CASE "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) (("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (TYPEPRED "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "no_repetitions?") (("3" (SKEEP) (("3" (CASE "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8") (("1" (CASE "j = 0 OR j = 1 OR j = 2 OR j = 3 OR j = 4 OR j = 5 OR j = 6 OR j = 7 OR j = 8") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "j") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (CASE "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "nth") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) (("1" (EXPAND "nth") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "nth") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (G2 SUBTYPE "(# data := (: 0, 1, 2, 3, 4, 5, 6, 7, 8 :), adjs := (: (: 1 :), (: 7 :), (: 0, 3, 4 :), (: 0, 7, 8 :), (: 1 :), (: :), (: 1 :), (: 8 :), (: 1 :) :) #)" "c_digraph[nat]"))))
