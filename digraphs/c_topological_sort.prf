(c_topological_sort
 (temp_count_same 0
  (temp_count_same-1 nil 3817487138
   ("" (induct l)
    (("1" (skeep)
      (("1" (expand "member")
        (("1" (expand "temp_count")
          (("1" (expand "filter") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("y" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "m" "x")
            (("2" (expand "member" 1)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "temp_count")
                    (("2" (expand "filter" 3)
                      (("2" (expand "length" 3 (1 3))
                        (("2" (lift-if)
                          (("2" (replace -1 * LR)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "o ")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "o ")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (length def-decl "nat" list_props nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (temp_count_incr 0
  (temp_count_incr-1 nil 3817485056
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("y" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "m" "x")
            (("2" (expand "member" -2)
              (("2" (case "not member(x, l)")
                (("1" (split -2)
                  (("1" (hide -2)
                    (("1" (lemma "temp_count_same")
                      (("1" (inst? - (l l))
                        (("1" (assert)
                          (("1" (expand "temp_count")
                            (("1" (expand "filter" 3)
                              (("1"
                                (expand "length" 3 (1 3))
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (replace -2 * LR)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "o ")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "temp_count")
                    (("2" (expand "filter" 2)
                      (("2" (expand "length" 2 (1 3))
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (split -2)
                                (("1"
                                  (replace -1 * LR)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "o ")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (expand
                                                   "no_repetitions?")
                                                  (("1"
                                                    (lemma
                                                     "member_nth[T]")
                                                    (("1"
                                                      (inst? -)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "0"
                                                             "i+1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 +)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 +)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (expand "no_repetitions?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "j")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "i")
                                              (("2"
                                                (inst - "i+1" "j+1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       +)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "i")
                                                  (("3"
                                                    (expand "length" +)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length(l))" c_topological_sort nil)
    (i skolem-const-decl "below(length(l))" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "below(length(l))" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (l skolem-const-decl "list[T]" c_topological_sort nil)
    (y skolem-const-decl "T" c_topological_sort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth formula-decl nil more_list_props structures)
    (temp_count_same formula-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "T3" function_props nil)
    (/= const-decl "boolean" notequal nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (temp_count_bound 0
  (temp_count_bound-1 nil 3817537046
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "m")
            (("2" (expand "temp_count")
              (("2" (expand "filter" 1)
                (("2" (expand "length" 1 (1 3))
                  (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_same 0
  (perm_count_same-1 nil 3817552361
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst? -)
            (("2" (assert)
              (("2" (expand "member" 1)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "perm_count")
                      (("2" (expand "filter" 3)
                        (("2" (expand "length" 3 (1 3))
                          (("2" (replace -1 * LR)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "o ")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_same2 0
  (perm_count_same2-1 nil 3817557917
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((O const-decl "T3" function_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_incr 0
  (perm_count_incr-1 nil 3817556954
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((O const-decl "T3" function_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_bound 0
  (perm_count_bound-1 nil 3817552878
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((O const-decl "T3" function_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (greater_marking_update 0
  (greater_marking_update-1 nil 3817539462
   ("" (expand "greater_marking")
    (("" (skeep*)
      (("" (split)
        (("1" (flatten) (("1" (lift-if) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (flatten) (("2" (lift-if) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (greater_marking const-decl "bool" c_topological_sort nil))
   shostak))
 (greater_marking_temp_count 0
  (greater_marking_temp_count-1 nil 3817544045
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst? -)
            (("2" (assert)
              (("2" (expand "temp_count")
                (("2" (expand "filter" 1)
                  (("2" (expand "length" 1 (1 3))
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("2"
                                    (expand "greater_marking")
                                    (("2"
                                      (inst -3 "x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "o ")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "T3" function_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (greater_marking_perm_count 0
  (greater_marking_perm_count-1 nil 3817552899
   (""
    (case "FORALL (l: list[T]) (m1, m2: marking) (x: T):
        greater_marking(m1, m2) ⇒ perm_count(l, m1) >= perm_count(l, m2)")
    (("1" (induct l)
      (("1" (skeep) (("1" (skolem 1 "y") (("1" (grind) nil nil)) nil))
        nil)
       ("2" (skolem 1 ("x" "l"))
        (("2" (flatten)
          (("2" (skeep)
            (("2" (skolem 1 "y")
              (("2" (inst -1 "m1" "m2")
                (("2" (inst -1 "y")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "perm_count")
                          (("2" (expand "filter" 2)
                            (("2" (expand "length" 2 (1 3))
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (expand "member" -3)
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (expand "o" 2 (1 2 7))
                                              (("1"
                                                (inst
                                                 -5
                                                 "l"
                                                 "m1"
                                                 "m2"
                                                 "x")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct l)
        (("1" (grind) nil nil)
         ("2" (skolem 1 ("x" "l"))
          (("2" (flatten)
            (("2" (skeep)
              (("2" (skolem 1 "y")
                (("2" (inst -1 "m1" "m2")
                  (("2" (inst -1 "y")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "perm_count")
                          (("2" (expand "filter" 1)
                            (("2" (expand "length" 1 (1 3))
                              (("2"
                                (expand "greater_marking")
                                (("2"
                                  (inst -2 "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (expand "o ")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "o ")
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (expand "o ")
                                              (("3" (propax) nil nil))
                                              nil)
                                             ("4"
                                              (expand "o ")
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (> const-decl "bool" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (O const-decl "T3" function_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (filter def-decl "list[T]" filters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm_count const-decl "nat" c_topological_sort nil))
   shostak))
 (visit_TCC1 0
  (visit_TCC1-1 nil 3817552266
   ("" (skeep*)
    (("" (use "perm_count_bound")
      (("" (assert) (("" (expand "size") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((perm_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.perm_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC2 0
  (visit_TCC1-1 nil 3817537046
   ("" (skeep*)
    (("" (use "temp_count_bound")
      (("" (assert) (("" (expand "size") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((temp_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.temp_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC3 0
  (visit_TCC3-1 nil 3817552266
   ("" (skeep*)
    (("" (use "perm_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((perm_count_bound formula-decl nil c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(G1), 1), c_topological_sort.perm_count(data(G1), c_topological_sort.z`1))"
    "nat")))
 (visit_TCC4 0
  (visit_TCC2-1 nil 3817537046
   ("" (skeep*)
    (("" (use "temp_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((temp_count_bound formula-decl nil c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(G1), 1), c_topological_sort.temp_count(data(G1), c_topological_sort.z`1))"
    "nat")))
 (visit_TCC5 0
  (visit_TCC5-1 nil 3817552266
   ("" (skeep*)
    (("" (use "perm_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((perm_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.perm_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC6 0
  (visit_TCC3-1 nil 3817537046
   ("" (skeep*)
    (("" (use "temp_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((temp_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.temp_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC7 0
  (visit_TCC2-1 nil 3817468360 ("" (subtype-tcc) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (visit subtype "c_topological_sort.node"
    "c_topological_sort.Vert(c_topological_sort.G)")))
 (visit_TCC8 0
  (visit_TCC5-1 nil 3817539461
   ("" (skeep*)
    (("" (typepred "l")
      (("" (split)
        (("1" (expand "topperm_list")
          (("1" (flatten)
            (("1" (expand "permanent_list?")
              (("1" (expand "topological_list?")
                (("1" (split 1)
                  (("1" (skeep)
                    (("1" (expand "member" 1)
                      (("1" (inst? -)
                        (("1" (lift-if) (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (expand "nth" -1)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (typepred "adjs")
                                (("1"
                                  (expand "from?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "w`length = 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6 * LR)
                                              (("1"
                                                (replace -7 * LR)
                                                (("1"
                                                  (inst 1 "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (name "z" "seq(w)(1)")
                                        (("1"
                                          (name
                                           "z_id"
                                           "idx(data(G), z)")
                                          (("1"
                                            (inst -5 "z_id")
                                            (("1"
                                              (typepred "w")
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -3 "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -10
                                                             *
                                                             LR)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               *
                                                               LR)
                                                              (("1"
                                                                (typepred
                                                                 "z_id")
                                                                (("1"
                                                                  (expand
                                                                   "node")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     *
                                                                     LR)
                                                                    (("1"
                                                                      (replace
                                                                       -18
                                                                       *
                                                                       LR)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -10)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -15
                                                                             "z")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "member_iff_nth[T]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -1
                                                                                     "z_l_id")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -17
                                                                                       "z_l_id"
                                                                                       "x")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         *
                                                                                         LR)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -17)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "j+1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               1
                                                                                               "(# length := w`length - 1, seq := (Lambda (i:below(w`length - 1)): w`seq(i+1)) #)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "w")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "walk?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "verts_in?")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "finseq_appl")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "1+n")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred "w")
                                              (("2"
                                                (expand "walk?")
                                                (("2"
                                                  (expand "verts_in?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -2 "1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           *
                                                           LR)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst -4 "i-1" "x")
                              (("1"
                                (assert)
                                (("1"
                                  (split -4)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 2 "j+1")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "no_repetitions?")
                    (("3" (skeep)
                      (("3" (expand "nth" -1)
                        (("3" (lift-if)
                          (("3" (assert)
                            (("3" (lift-if)
                              (("3"
                                (ground)
                                (("1"
                                  (inst -4 "node")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "member_iff_nth[T]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -4 "node")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use "member_iff_nth[T]")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (inst -5 "i-1" "j-1")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "greater_marking_update") nil nil)
         ("3" (use "suffix_supl[T]")
          (("3" (flatten)
            (("3" (assert)
              (("3" (hide -1 2)
                (("3" (inst 1 "cons(node,null)")
                  (("3" (expand "append")
                    (("3" (expand "append") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (assert) (("4" (assert) nil nil)) nil)
         ("5" (skeep)
          (("5" (expand "member" -1) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (greater_marking_update formula-decl nil c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (j skolem-const-decl "below(length(l))" c_topological_sort nil)
    (l skolem-const-decl "(topperm_list(G, m))" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (z_id skolem-const-decl
     "{i: below(length[T](data(G))) | nth[T](data(G), i) = z}"
     c_topological_sort nil)
    (z skolem-const-decl "T" c_topological_sort nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (i skolem-const-decl "below(length(cons[Vert(G)](node, l)))"
       c_topological_sort nil)
    (j skolem-const-decl "below(length(l))" c_topological_sort nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.permanent], list_adt[c_topological_sort.Vert(c_topological_sort.G)].cons(c_topological_sort.node, c_topological_sort.l))"
    "{res: [c_topological_sort.marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] |    c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2) ∧ c_topological_sort.greater_marking(res`1, c_topological_sort.m) ∧ more_list_props[c_topological_sort.Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, res`2) ∧ c_topological_sort.permanent?(res`1(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id))) ∧ FORALL x: booleans.⇒(list_props[c_topological_sort.T].member(c_topological_sort.x, res`2), booleans.⇒((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_topological_sort.x)))))}")))
 (visit_TCC9 0
  (visit_TCC4-1 nil 3817468360
   ("" (skeep*)
    (("" (split 1)
      (("1" (skeep*)
        (("1" (typepred "x")
          (("1" (typepred "adjs")
            (("1" (inst - x)
              (("1" (assert)
                (("1" (expand "member")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "adjs")
          (("2" (inst -3 "x")
            (("2" (assert)
              (("2" (replace -6 -3 LR)
                (("2" (expand "member" -3) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VertID type-eq-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (mark type-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype "c_topological_sort.adjsp"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.⇒(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (visit_TCC10 0
  (visit_TCC5-1 nil 3817468360 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (< def-decl "bool" ordinals nil) (nth def-decl "T" list_props nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (m!1 skolem-const-decl "marking" c_topological_sort nil)
    (node_id!1 skolem-const-decl "{i: VertID(G!1) |
   NOT permanent?(m!1(node(G!1)(i))) ∧
    FORALL y:
      m!1(y) = temporary ⇒
       node(G!1)(i) = y ∨ EXISTS (w: Walk(G!1)): from?(w, y, node(G!1)(i))}"
     c_topological_sort nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m, c_topological_sort.l, c_topological_sort.node_id, c_topological_sort.adjsp)"
    "nil")))
 (visit_TCC11 0
  (visit_TCC11-1 nil 3817561836 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (node_id!1 skolem-const-decl "{i: VertID(G!1) |
   NOT permanent?(m!1(node(G!1)(i))) ∧
    FORALL y:
      m!1(y) = temporary ⇒
       node(G!1)(i) = y ∨ EXISTS (w: Walk(G!1)): from?(w, y, node(G!1)(i))}"
     c_topological_sort nil)
    (m!1 skolem-const-decl "marking" c_topological_sort nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (visit subtype "c_topological_sort.l"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary]))")))
 (visit_TCC12 0
  (visit_TCC6-1 nil 3817468360
   ("" (skeep*)
    (("" (split)
      (("1" (replace -4 * LR) (("1" (assert) nil nil)) nil)
       ("2" (skeep*)
        (("2" (case "edge?(G)(node,child)")
          (("1" (lift-if -)
            (("1" (assert)
              (("1" (typepred "node_id")
                (("1" (inst - "y")
                  (("1" (ground)
                    (("1" (replace -5 * RL)
                      (("1" (replace -1 * LR)
                        (("1" (replace -7 * RL)
                          (("1" (replace -1 * RL)
                            (("1" (inst 3 "gen_seq2(G, node, child)")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil)
                               ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst 3 "add1(w, child)")
                        (("1" (grind) nil nil)
                         ("2" (use "walk?_add1")
                          (("2" (expand "from?")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "adjs")
            (("2" (inst -2 "child_id") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (walk?_add1 formula-decl nil walks_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (add1 const-decl "prewalk" walks_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype "c_topological_sort.child_id"
    "{i: c_topological_sort.VertID(c_topological_sort.G) | booleans.∧((booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))), FORALL y: booleans.⇒(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_topological_sort.y) = c_topological_sort.temporary, booleans.∨(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i) = c_topological_sort.y, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.y, c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))))}")))
 (visit_TCC13 0
  (visit_TCC7-1 nil 3817468360 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (node_id!1 skolem-const-decl "{i: VertID(G!1) |
   NOT permanent?(m!1(node(G!1)(i))) ∧
    FORALL y:
      m!1(y) = temporary ⇒
       node(G!1)(i) = y ∨ EXISTS (w: Walk(G!1)): from?(w, y, node(G!1)(i))}"
     c_topological_sort nil)
    (m!1 skolem-const-decl "marking" c_topological_sort nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (visit subtype "c_topological_sort.child_id"
    "below[length[list[nat]](adjs(G))]")))
 (visit_TCC14 0
  (visit_TCC8-1 nil 3817468360
   ("" (skeep*)
    (("" (typepred "nth[list[nat]](adjs(G), child_id)")
      (("1" (assert)
        (("1" (split 2)
          (("1" (use "every_nth[number]")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (use "every_nth[number]")
                    (("1" (assert)
                      (("1" (inst -1 "i")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "node")
                              (("1"
                                (typepred "G")
                                (("1"
                                  (expand "cdigraph")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "list_of_idxs")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "edge?")
              (("2" (expand "digraph_edges")
                (("2" (expand "edges")
                  (("2" (assert)
                    (("2" (expand "vert")
                      (("2" (expand "node")
                        (("2" (split 1)
                          (("1" (use "member_iff_nth[T]")
                            (("1" (grind) nil nil)) nil)
                           ("2" (lemma "member_iff_nth[T]")
                            (("2" (rewrite "idx_nth_no_rep")
                              (("1"
                                (rewrite "idx_nth_no_rep")
                                (("1"
                                  (typepred "G")
                                  (("1"
                                    (expand "cdigraph")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "G")
                                (("2"
                                  (expand "cdigraph")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (replace -4 * RL)
              (("3" (skeep)
                (("3" (expand "edge?")
                  (("3" (expand "digraph_edges")
                    (("3" (expand "edges")
                      (("3" (flatten)
                        (("3" (assert)
                          (("3" (replace -7 * LR)
                            (("3" (expand "node")
                              (("3"
                                (assert)
                                (("3"
                                  (use "idx_nth_no_rep[T]")
                                  (("1"
                                    (replace -1 * LR)
                                    (("1"
                                      (use
                                       "idx_nth_no_rep[T]"
                                       (l "data(G)" i child_id))
                                      (("1"
                                        (replace -1 * LR)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "G")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "G")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "child_id")
        (("2" (expand "size")
          (("2" (typepred "G") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (every_nth formula-decl nil list_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id)"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.child_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.⇒(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (visit_TCC15 0
  (visit_tCC14-opt "no case at the begining" 3817556888
   ("" (skeep*)
    (("" (use "lex3_lt")
      (("1" (replace -1 * LR)
        (("1" (hide -1)
          (("1" (flatten)
            (("1" (use "perm_count_same2")
              (("1" (assert)
                (("1" (use "lex2_lt")
                  (("1" (replace -1 * LR)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (lemma "temp_count_incr")
                          (("1" (inst? -)
                            (("1" (assert)
                              (("1"
                                (typepred "G")
                                (("1"
                                  (expand "cdigraph")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "node_id")
                                        (("1"
                                          (inst -2 "child")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -10 * RL)
                                              (("1"
                                                (case
                                                 "edges(G)(node, child)")
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (hide +)
                                                    (("1"
                                                      (lemma
                                                       "dag_no_self_loops")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         G
                                                         "(node,child)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (hide +)
                                                      (("2"
                                                        (inst
                                                         -8
                                                         "add1(w, child)")
                                                        (("1"
                                                          (expand
                                                           "add1")
                                                          (("1"
                                                            (expand
                                                             "path?")
                                                            (("1"
                                                              (expand
                                                               "walk?")
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("1"
                                                                    (expand
                                                                     "from?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -13
                                                                             "0"
                                                                             "w`length")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "walk?_add1")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "G"
                                                             w
                                                             child)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "from?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           *
                                                                           LR)
                                                                          (("2"
                                                                            (typepred
                                                                             "adjs")
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "child_id")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "edge?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "digraph_edges")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "edges")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "adjs")
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "child_id")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "edge?")
                                                        (("2"
                                                          (expand
                                                           "digraph_edges")
                                                          (("2"
                                                            (expand
                                                             "edges")
                                                            (("2"
                                                              (replace
                                                               -13
                                                               *
                                                               LR)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -13
                                                                     *
                                                                     RL)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "temp_count_bound")
                    (("2" (expand "size") (("2" (assert) nil nil))
                      nil))
                    nil)
                   ("3" (use "temp_count_bound")
                    (("3" (expand "size") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "temp_count_bound")
        (("2" (expand "size") (("2" (assert) nil nil)) nil)) nil)
       ("3" (use "perm_count_bound")
        (("3" (expand "size") (("3" (assert) nil nil)) nil)) nil)
       ("4" (use "temp_count_bound")
        (("4" (expand "size") (("4" (assert) nil nil)) nil)) nil)
       ("5" (use "perm_count_bound")
        (("5" (expand "size") (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((lex3_lt formula-decl nil lex3 nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (member def-decl "bool" list_props nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (perm_count_same2 formula-decl nil c_topological_sort nil)
    (lex2_lt formula-decl nil lex2 nil)
    (temp_count_incr formula-decl nil c_topological_sort nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (dag_no_self_loops formula-decl nil dags_ nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (walk?_add1 formula-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (add1 const-decl "prewalk" walks_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (temp_count_bound formula-decl nil c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm_count_bound formula-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.child_id, list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id))"
    "nil"))
  (visit_TCC9-1 nil 3817468360
   ("" (skeep*)
    ((""
      (case "temp_count(data(G), m WITH [child := temporary]) > temp_count(data(G), m)")
      (("1" (use "lex2_lt")
        (("1" (replace -1 * LR) (("1" (assert) nil nil)) nil)
         ("2" (use "temp_count_bound")
          (("2" (expand "size") (("2" (assert) nil nil)) nil)) nil)
         ("3" (use "temp_count_bound")
          (("3" (expand "size") (("3" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma "temp_count_incr")
          (("2" (inst? -)
            (("2" (assert)
              (("2" (typepred "G")
                (("2" (expand "cdigraph")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (typepred "node_id")
                        (("2" (inst -2 "child")
                          (("2" (assert)
                            (("2" (split -2)
                              (("1"
                                (replace -1 * LR)
                                (("1"
                                  (lemma "dag_no_self_loops")
                                  (("1"
                                    (inst -1 "G" "(node, child)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -9 * RL)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (expand "vert")
                                            (("1"
                                              (expand "list_of_idxs")
                                              (("1"
                                                (hide -7)
                                                (("1"
                                                  (lemma
                                                   "idx_nth_no_rep[T]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "data(G)"
                                                     "child_id")
                                                    (("1"
                                                      (replace
                                                       -11
                                                       *
                                                       LR)
                                                      (("1"
                                                        (expand "node")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           LR)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (typepred
                                                                 "child_id")
                                                                (("1"
                                                                  (typepred
                                                                   "adjs")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "child_id")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (expand
                                                                           "digraph_edges")
                                                                          (("1"
                                                                            (expand
                                                                             "edges")
                                                                            (("1"
                                                                              (replace
                                                                               -12
                                                                               *
                                                                               LR)
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "child_id")
                                                        (("2"
                                                          (expand
                                                           "size")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (replace -9 * RL)
                                  (("2"
                                    (inst -7 "add1(w, child)")
                                    (("1"
                                      (expand "path?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -8 "0" "w`length")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (expand "add1")
                                                (("1"
                                                  (expand "walk_from?")
                                                  (("1"
                                                    (expand "from?")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "add1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "add1")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "walk?_add1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "walk_from?")
                                          (("2"
                                            (expand "from?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (replace -2 * LR)
                                                (("2"
                                                  (typepred "adjs")
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "child_id")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -11
                                                         *
                                                         RL)
                                                        (("2"
                                                          (replace
                                                           -13
                                                           *
                                                           RL)
                                                          (("2"
                                                            (expand
                                                             "vert")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -11
                                                                 *
                                                                 LR)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (temp_count_bound formula-decl nil c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (walk_from? const-decl "bool" walks_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (lex2_lt formula-decl nil lex2 nil)
    (temp_count_incr formula-decl nil c_topological_sort nil)
    (dag_no_self_loops formula-decl nil dags_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (vert const-decl "bool" c_digraphs_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (walk?_add1 formula-decl nil walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (from? const-decl "bool" walks_ nil)
    (add1 const-decl "prewalk" walks_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.child_id, list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id))"
    "nil")))
 (visit_TCC16 0
  (visit_TCC16-1 nil 3817561836
   ("" (skeep*)
    ((""
      (typepred " v(G)
          (m WITH [child := temporary], l, child_id, nth(adjs(G), child_id))")
      (("1" (replace -9 * RL) (("1" (assert) nil nil)) nil)
       ("2" (lemma "visit_TCC14")
        (("2" (inst? -) (("2" (assert) nil nil)) nil)) nil)
       ("3" (lemma "visit_TCC12")
        (("3" (inst? -)
          (("3" (inst? -)
            (("3" (inst -1 "l" "node") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (typepred "l")
        (("4" (hide 3)
          (("4" (assert)
            (("4" (expand "topperm_list")
              (("4" (flatten)
                (("4" (expand "permanent_list?")
                  (("4" (split 1)
                    (("1" (skeep)
                      (("1" (lift-if 1)
                        (("1" (assert)
                          (("1" (inst -2 "x")
                            (("1" (flatten) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (visit_TCC12 subtype-tcc nil c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.lp"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))")))
 (visit_TCC17 0
  (visit_TCC10-1 nil 3817468360
   ("" (skeep*)
    (("" (replace -1 * RL)
      ((""
        (typepred "v(G)
                      (m WITH [child := temporary], l, child_id, nth(adjs(G), child_id))")
        (("1" (replace -9 * RL)
          (("1" (assert)
            (("1" (split 2)
              (("1" (typepred "node_id")
                (("1" (typepred "l")
                  (("1" (expand "topperm_list")
                    (("1" (flatten)
                      (("1" (expand "permanent_list?")
                        (("1" (inst -2 "node")
                          (("1" (inst - "node")
                            (("1" (inst - "node")
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "node")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -13)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "adjs")
                                          (("1"
                                            (inst -2 "child_id")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (lemma
                                                   "dag_no_self_loops")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     G
                                                     "(node, child)")
                                                    (("1"
                                                      (expand
                                                       "digraph_edges")
                                                      (("1"
                                                        (expand
                                                         "edges")
                                                        (("1"
                                                          (expand
                                                           "edge?")
                                                          (("1"
                                                            (expand
                                                             "digraph_edges")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (hide +)
                                          (("2"
                                            (typepred "adjs")
                                            (("2"
                                              (inst -2 "child_id")
                                              (("2"
                                                (split -2)
                                                (("1"
                                                  (typepred "G")
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "add1(w, child)")
                                                    (("1"
                                                      (expand "path?")
                                                      (("1"
                                                        (expand
                                                         "finseq_appl")
                                                        (("1"
                                                          (expand
                                                           "add1")
                                                          (("1"
                                                            (expand
                                                             "walk?")
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (expand
                                                                 "verts_in?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "0"
                                                                     "w`length")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "walk?_add1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "from?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "vert")
                                                                (("2"
                                                                  (use
                                                                   "member_iff_nth[T]")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "greater_marking")
                  (("2" (inst-cp -3 "y")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (typepred "node_id")
                            (("2" (inst -2 "y")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "visit_TCC14")
          (("2"
            (inst -1 "G" "m" "l" "node_id" "adjs" "node" "child_id"
             "adjsp" "child")
            (("2" (assert) nil nil)) nil))
          nil)
         ("3" (lemma "visit_TCC12")
          (("3"
            (inst -1 "G" "m" "l" "node_id" "adjs" "node" "child_id"
             "adjsp" "child")
            (("3" (assert) nil nil)) nil))
          nil)
         ("4" (typepred "l")
          (("4" (expand "topperm_list")
            (("4" (hide 3)
              (("4" (flatten)
                (("4" (expand "permanent_list?")
                  (("4" (assert)
                    (("4" (skeep) (("4" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((visit_TCC12 subtype-tcc nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (dag_no_self_loops formula-decl nil dags_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (walk?_add1 formula-decl nil walks_ nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (add1 const-decl "prewalk" walks_ nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.node_id"
    "{i: c_topological_sort.VertID(c_topological_sort.G) | booleans.∧((booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))), FORALL y: booleans.⇒(c_topological_sort.mp(c_topological_sort.y) = c_topological_sort.temporary, booleans.∨(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i) = c_topological_sort.y, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.y, c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))))}")))
 (visit_TCC18 0
  (visit_TCC11-1 nil 3817468360
   ("" (skeep*)
    (("" (split 2)
      (("1" (skeep*)
        (("1" (typepred "adjs")
          (("1" (inst -2 "x") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "adjs")
          (("2" (inst -3 "x")
            (("2" (assert)
              (("2" (split -3)
                (("1" (grind) nil nil)
                 ("2"
                  (typepred "v(G)
              (m WITH [child := temporary], l, child_id, nth(adjs(G), child_id))")
                  (("1" (replace -13 * RL)
                    (("1" (assert)
                      (("1" (expand "greater_marking")
                        (("1" (inst -2 "node(G)(x)")
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "visit_TCC14")
                    (("2"
                      (inst -1 "G" "m" "l" "node_id" "adjs" "node"
                       "child_id" "adjsp" "child")
                      (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (lemma "visit_TCC12")
                    (("3"
                      (inst -1 "G" "m" "l" "node_id" "adjs" "node"
                       "child_id" "adjsp" "child")
                      (("3" (assert) nil nil)) nil))
                    nil)
                   ("4" (typepred "l")
                    (("4" (expand "topperm_list")
                      (("4" (assert)
                        (("4" (flatten)
                          (("4" (assert)
                            (("4" (expand "permanent_list?")
                              (("4"
                                (skolem 1 y)
                                (("4"
                                  (lift-if 1)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (ground)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Adjs type-eq-decl nil c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (member def-decl "bool" list_props nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (nth def-decl "T" list_props nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (visit_TCC12 subtype-tcc nil c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.adjsp"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.⇒(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (visit_TCC19 0
  (visit_TCC12-1 nil 3817468360
   ("" (skeep*)
    ((""
      (typepred "v(G)
                (m WITH [child := temporary], l, child_id, nth(adjs(G), child_id))")
      (("1" (replace -9 * RL)
        (("1" (assert)
          (("1" (use "lex3_lt")
            (("1" (replace -1 * LR)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert)
                    (("1" (replace -8 * RL)
                      (("1" (typepred "l")
                        (("1" (expand "topperm_list")
                          (("1" (flatten)
                            (("1" (expand "permanent_list?")
                              (("1"
                                (inst - "child")
                                (("1"
                                  (inst - "child")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 5)
                                      (("1"
                                        (use "lex2_lt")
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "greater_marking_temp_count")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "data(G)"
                                                     "mp"
                                                     "m WITH [ child := temporary]")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "greater_marking_perm_count")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "data(G)"
                                                             "mp"
                                                             "m WITH [ child := temporary]"
                                                             "child")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "perm_count_same2")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "data(G)"
                                                                     "m"
                                                                     "child")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "temp_count_bound")
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (use "temp_count_bound")
                                          (("3"
                                            (expand "size")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "temp_count_bound")
              (("2" (expand "size") (("2" (assert) nil nil)) nil)) nil)
             ("3" (use "perm_count_bound")
              (("3" (expand "size") (("3" (assert) nil nil)) nil)) nil)
             ("4" (use "temp_count_bound")
              (("4" (expand "size") (("4" (assert) nil nil)) nil)) nil)
             ("5" (use "perm_count_bound")
              (("5" (expand "size") (("5" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "visit_TCC14")
        (("2"
          (inst -1 "G" "m" "l" "node_id" "adjs" "node" "child_id"
           "adjsp" "child")
          (("2" (assert) nil nil)) nil))
        nil)
       ("3" (replace -3 * RL)
        (("3" (lemma "visit_TCC12")
          (("3"
            (inst -1 "G" "m" "l" "node_id" "adjs" "node" "child_id"
             "adjsp" "child")
            (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (typepred "l")
        (("4" (expand "topperm_list")
          (("4" (assert)
            (("4" (flatten)
              (("4" (assert)
                (("4" (expand "permanent_list?")
                  (("4" (skeep)
                    (("4" (inst -2 "x")
                      (("4" (hide 3)
                        (("4" (lift-if 1)
                          (("4" (assert)
                            (("4" (flatten) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (perm_count_bound formula-decl nil c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (temp_count_bound formula-decl nil c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (greater_marking_temp_count formula-decl nil c_topological_sort
     nil)
    (greater_marking_perm_count formula-decl nil c_topological_sort
     nil)
    (perm_count_same2 formula-decl nil c_topological_sort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2_lt formula-decl nil lex2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (mp skolem-const-decl "marking" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (lex3_lt formula-decl nil lex3 nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (visit_TCC12 subtype-tcc nil c_topological_sort nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.adjsp)"
    "nil")))
 (visit_TCC20 0
  (visit_TCC15-1 nil 3817539461
   ("" (skeep*)
    ((""
      (typepred "v(G)
              (m WITH [child := temporary], l, child_id, nth(adjs(G), child_id))")
      (("1" (replace -9 * RL)
        (("1" (assert)
          (("1" (typepred "v(G)(mp, lp, node_id, adjsp)")
            (("1" (name "m1" "v(G)(mp, lp, node_id, adjsp)`1")
              (("1" (name "l1" "v(G)(mp, lp, node_id, adjsp)`2")
                (("1" (replace -1 * LR)
                  (("1" (replace -2 * LR)
                    (("1" (split 2)
                      (("1" (propax) nil nil)
                       ("2" (expand "greater_marking")
                        (("2" (skolem 1 "x")
                          (("2" (inst - "x")
                            (("2" (inst - "x")
                              (("2"
                                (inst - "x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (rewrite "suffix_supl[T]")
                        (("3" (lemma "suffix_supl[T]")
                          (("3" (inst-cp -1 "lp" "l1")
                            (("3" (inst -1 "l" "lp")
                              (("3"
                                (assert)
                                (("3"
                                  (skolem -1 "l2")
                                  (("3"
                                    (skolem -2 "l3")
                                    (("3"
                                      (inst 1 "append(l3, l2)")
                                      (("3"
                                        (rewrite "append_assoc[T]")
                                        (("3"
                                          (replace -1 * LR)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (propax) nil nil)
                       ("5" (skeep)
                        (("5" (inst -13 "x")
                          (("5" (assert)
                            (("5" (inst -8 "x")
                              (("5"
                                (assert)
                                (("5"
                                  (replace -14 * RL)
                                  (("5"
                                    (replace -16 * RL)
                                    (("5"
                                      (split -8)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (split -13)
                                          (("1"
                                            (replace -1 * LR)
                                            (("1"
                                              (typepred "adjs")
                                              (("1"
                                                (inst -2 "child_id")
                                                (("1"
                                                  (replace -17 * LR)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       -2)
                                                      (("1"
                                                        (inst
                                                         3
                                                         "gen_seq2(G, node, child)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma "walk_merge")
                                              (("2"
                                                (inst
                                                 -1
                                                 "G"
                                                 "gen_seq2(G, node, child)"
                                                 "w"
                                                 "node"
                                                 "x"
                                                 "child")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 3 "p")
                                                          (("1"
                                                            (typepred
                                                             "p")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "walk_from?")
                                                            (("2"
                                                              (expand
                                                               "from?")
                                                              (("2"
                                                                (expand
                                                                 "walk?")
                                                                (("2"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("2"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "adjs")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "child_id")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -18
                                                                               *
                                                                               LR)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vert")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "walk_from?")
                                                      (("2"
                                                        (expand
                                                         "from?")
                                                        (("2"
                                                          (expand
                                                           "gen_seq2")
                                                          (("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (expand
                                                               "verts_in?")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "adjs")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "child_id")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -19
                                                                               *
                                                                               LR)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "walk_from?")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "visit_TCC19")
              (("2" (assert)
                (("2" (inst? -)
                  (("2" (inst? -)
                    (("2" (inst? -)
                      (("2" (inst? -)
                        (("2" (assert)
                          (("2" (inst -1 "mp" "lp")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "visit_TCC18")
              (("3" (inst? -)
                (("3" (inst? -)
                  (("3" (inst? -)
                    (("3" (assert)
                      (("3" (inst -1 "mp" "lp")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (lemma "visit_TCC17")
              (("4" (inst? -)
                (("4" (assert)
                  (("4" (inst? -)
                    (("4" (inst? -)
                      (("4" (assert)
                        (("4" (inst? -) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "visit_TCC14")
        (("2" (inst? -)
          (("2" (inst? -)
            (("2" (inst? -)
              (("2" (inst -1 "l") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (lemma "visit_TCC12")
        (("3" (inst? -)
          (("3" (inst? -)
            (("3" (inst? -)
              (("3" (inst -1 "l") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("4" (typepred "l")
        (("4" (hide 3)
          (("4" (expand "topperm_list")
            (("4" (flatten)
              (("4" (assert)
                (("4" (expand "permanent_list?")
                  (("4" (skeep)
                    (("4" (inst? -)
                      (("4" (assert)
                        (("4" (lift-if)
                          (("4" (assert) (("4" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (visit_TCC17 subtype-tcc nil c_topological_sort nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC19 termination-tcc nil c_topological_sort nil)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (walk_merge formula-decl nil walks_ nil)
    (p skolem-const-decl "prewalk
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make]" c_topological_sort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk_from? const-decl "bool" walks_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (visit_TCC12 subtype-tcc nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.adjsp)"
    "{res: [c_topological_sort.marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] |    c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2) ∧ c_topological_sort.greater_marking(res`1, c_topological_sort.m) ∧ more_list_props[c_topological_sort.Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, res`2) ∧ c_topological_sort.permanent?(res`1(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id))) ∧ FORALL x: booleans.⇒(list_props[c_topological_sort.T].member(c_topological_sort.x, res`2), booleans.⇒((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_topological_sort.x)))))}")))
 (topological_sort_aux_TCC1 0
  (topological_sort_aux_TCC1-1 nil 3817629671 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.i"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_aux_TCC2 0
  (topological_sort_aux_TCC2-1 nil 3817629671
   ("" (skeep*)
    (("" (typepred "l")
      (("" (assert)
        (("" (typepred "m")
          (("" (use "suffix_reflexive[T]")
            (("" (assert)
              (("" (split)
                (("1" (expand "greater_marking")
                  (("1" (skeep)
                    (("1" (split)
                      (("1" (flatten) nil nil) ("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -8 * LR)
                  (("2" (replace -8 * RL)
                    (("2" (skolem-typepred)
                      (("2" (assert)
                        (("2" (replace -9 * LR) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix_reflexive formula-decl nil more_list_props structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "(c_topological_sort.m, c_topological_sort.l)"
    "{res: [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] | booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2), booleans.∧(c_topological_sort.greater_marking(res`1, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, res`2), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), res`2))))}")))
 (topological_sort_aux_TCC3 0
  (topological_sort_aux_TCC3-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype
    "(number_fields.-)(c_topological_sort.n, 1)"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_aux_TCC4 0
  (topological_sort_aux_TCC4-1 nil 3817629671
   ("" (termination-tcc) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux termination
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)"
    "nil")))
 (topological_sort_aux_TCC5 0
  (topological_sort_aux_TCC5-1 nil 3817629671
   ("" (skeep*)
    (("" (typepred "v(G)(n - 1, m, l)")
      (("1" (assert)
        (("1" (skeep)
          (("1" (case "i = n")
            (("1" (assert)
              (("1" (replace -1 * LR)
                (("1" (typepred "l")
                  (("1" (expand "topperm_list")
                    (("1" (flatten)
                      (("1" (expand "permanent_list?")
                        (("1" (inst -2 "node")
                          (("1" (assert)
                            (("1" (inst -6 "node")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "greater_marking")
                                  (("1"
                                    (inst -8 "node")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length def-decl "nat" list_props nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (i skolem-const-decl "upto(n)" c_topological_sort nil)
    (v skolem-const-decl "[G1:
   dag[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
       digraph_make] ->
   [d1:
      {z:
         [below(size(G1)), m: non_temporary_marking,
          (topperm_list(G1, m))] |
         z`1 < n} ->
      {res: [non_temporary_marking, list[Vert(G1)]] |
         topperm_list(G1, res`1)(res`2) ∧
          greater_marking(res`1, d1`2) ∧
           suffix?(d1`3, res`2) ∧
            FORALL (i: upto(d1`1)): member(node(G1)(i), res`2)}]]"
     c_topological_sort nil)
    (m skolem-const-decl "non_temporary_marking" c_topological_sort
     nil)
    (l skolem-const-decl "(topperm_list(G, m))" c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)"
    "{res: [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] | booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2), booleans.∧(c_topological_sort.greater_marking(res`1, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, res`2), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), res`2))))}")))
 (topological_sort_aux_TCC6 0
  (topological_sort_aux_TCC6-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (nth def-decl "T" list_props nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.l"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary]))")))
 (topological_sort_aux_TCC7 0
  (topological_sort_aux_TCC7-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.n"
    "{i: c_topological_sort.VertID(c_topological_sort.G) | booleans.∧((booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))), FORALL y: booleans.⇒(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_topological_sort.y) = c_topological_sort.temporary, booleans.∨(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i) = c_topological_sort.y, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.y, c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))))}")))
 (topological_sort_aux_TCC8 0
  (topological_sort_aux_TCC8-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.n"
    "below[length[list[nat]](adjs(G))]")))
 (topological_sort_aux_TCC9 0
  (topological_sort_aux_TCC9-1 nil 3817629671
   ("" (skeep*)
    (("" (typepred "nth[list[nat]](adjs(G), n)")
      (("1" (assert)
        (("1" (split 2)
          (("1" (use "every_nth[number]")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (use "every_nth[number]")
                    (("1" (assert)
                      (("1" (inst -1 "i")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (typepred "G")
                              (("1"
                                (expand "cdigraph")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "list_of_idxs")
                                    (("1"
                                      (inst -2 "n")
                                      (("1" (inst -2 "i") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "edge?")
              (("2" (expand "digraph_edges")
                (("2" (expand "edges")
                  (("2" (expand "vert")
                    (("2" (assert)
                      (("2" (expand "node")
                        (("2" (assert)
                          (("2" (split)
                            (("1" (use "member_iff_nth[T]")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1" (inst 1 "x") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "member_iff_nth[T]")
                              (("2"
                                (rewrite "idx_nth_no_rep")
                                (("1"
                                  (rewrite "idx_nth_no_rep")
                                  (("1"
                                    (typepred "G")
                                    (("1"
                                      (expand "cdigraph")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "G")
                                  (("2"
                                    (expand "cdigraph")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "edge?")
              (("3" (expand "digraph_edges")
                (("3" (expand "edges")
                  (("3" (assert)
                    (("3" (flatten)
                      (("3" (replace -5 * RL)
                        (("3" (lemma "idx_nth_no_rep[T]")
                          (("3" (inst -1 "data(G)" x)
                            (("1" (expand "node")
                              (("1"
                                (replace -1 * LR)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "idx_nth_no_rep[T]")
                                    (("1"
                                      (inst -1 "data(G)" "n")
                                      (("1"
                                        (replace -7 * LR)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "G")
                                        (("2"
                                          (expand "cdigraph")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "x")
                                (("2"
                                  (expand "size")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "G")
                              (("3"
                                (expand "cdigraph")
                                (("3" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (typepred "n")
          (("2" (typepred "G")
            (("2" (expand "cdigraph")
              (("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "size") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_nth formula-decl nil list_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (member_iff_nth formula-decl nil more_list_props structures)
    (VertID type-eq-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (x skolem-const-decl "VertID(G)" c_topological_sort nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.n)"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.n) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.⇒(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (topological_sort_aux_TCC10 0
  (topological_sort_aux_TCC10-1 nil 3817629671
   ("" (skeep*)
    (("" (assert)
      ((""
        (typepred "visit(G)
                                     (m WITH [node := temporary], l, n,
                                      nth[list[nat]](adjs(G), n))")
        (("1"
          (name-replace "m'"
           "visit(G)(m WITH [node := temporary], l, n, nth[list[nat]](adjs(G), n))`1")
          (("1"
            (name-replace "l'"
             "visit(G)(m WITH [node := temporary], l, n, nth[list[nat]](adjs(G), n))`2")
            (("1" (assert)
              (("1" (split 2)
                (("1" (skeep)
                  (("1" (expand "greater_marking")
                    (("1" (inst -3 "x")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (lift-if 1)
                            (("1" (assert)
                              (("1"
                                (typepred "m")
                                (("1"
                                  (typepred "l")
                                  (("1"
                                    (expand "topperm_list")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "permanent_list?")
                                        (("1"
                                          (inst - "x")
                                          (("1"
                                            (inst - "x")
                                            (("1"
                                              (inst - "x")
                                              (("1"
                                                (inst - "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "greater_marking")
                  (("2" (skeep)
                    (("2" (inst -2 "node!1")
                      (("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (lift-if -) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (ground)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skolem-typepred 1)
                  (("3" (replace -8 * LR)
                    (("3" (assert)
                      (("3" (case "i!1 = 0")
                        (("1" (replace -1 * LR) (("1" (grind) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2 3)
          (("2" (lemma "topological_sort_aux_TCC9")
            (("2" (inst? -)
              (("2" (inst? -) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (typepred "n")
          (("3" (expand "size")
            (("3" (typepred "G")
              (("3" (expand "cdigraph") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("4" (hide 2 3)
          (("4" (skeep)
            (("4" (typepred "m")
              (("4" (inst -1 y)
                (("4" (assert)
                  (("4" (lift-if -1) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (hide 2 3)
          (("5" (typepred "l")
            (("5" (expand "topperm_list")
              (("5" (flatten)
                (("5" (assert)
                  (("5" (expand "permanent_list?")
                    (("5" (skeep)
                      (("5" (inst -2 x)
                        (("5" (flatten)
                          (("5" (lift-if 1) (("5" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((topological_sort_aux_TCC9 subtype-tcc nil c_topological_sort nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (from? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (visit def-decl "{res: [marking, list[Vert(G)]] |
   LET (mp, lp) = res IN
     LET node = node(G)(node_id) IN
          topperm_list(G, mp)(lp) ∧ greater_marking(mp, m) ∧ suffix?(l, lp)
        ∧ permanent?(mp(node))
        ∧ FORALL x:
            member(x, lp) ⇒
             NOT member(x, l) ⇒
              (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x))}"
     c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.n, list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.n))"
    "{res: [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] | booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2), booleans.∧(c_topological_sort.greater_marking(res`1, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, res`2), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), res`2))))}")))
 (topological_sort_aux_TCC11 0
  (topological_sort_aux_TCC11-1 nil 3817629671
   ("" (skeep*)
    (("" (typepred "l")
      (("" (expand "topperm_list")
        (("" (flatten)
          (("" (assert)
            (("" (expand "permanent_list?")
              (("" (skeep)
                (("" (inst -2 "x")
                  (("" (lift-if)
                    (("" (assert)
                      (("" (flatten) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.l"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary]))")))
 (topological_sort_aux_TCC12 0
  (topological_sort_aux_TCC12-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.n"
    "{i: c_topological_sort.VertID(c_topological_sort.G) | booleans.∧((booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))), FORALL y: booleans.⇒(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_topological_sort.y) = c_topological_sort.temporary, booleans.∨(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i) = c_topological_sort.y, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.y, c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i)))))}")))
 (topological_sort_aux_TCC13 0
  (topological_sort_aux_TCC13-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.n"
    "below[length[list[nat]](adjs(G))]")))
 (topological_sort_aux_TCC14 0
  (topological_sort_aux_TCC14-1 nil 3817629671
   ("" (skeep*)
    (("" (typepred "nth[list[nat]](adjs(G), n)")
      (("1" (assert)
        (("1" (split 3)
          (("1" (use "every_nth[number]")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (use "every_nth[number]")
                    (("1" (assert)
                      (("1" (inst -1 "i")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (typepred "G")
                              (("1"
                                (expand "cdigraph")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "list_of_idxs")
                                    (("1"
                                      (inst -2 "n")
                                      (("1" (inst -2 "i") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "edge?")
              (("2" (expand "digraph_edges")
                (("2" (expand "edges")
                  (("2" (expand "vert")
                    (("2" (assert)
                      (("2" (expand "node")
                        (("2" (assert)
                          (("2" (split)
                            (("1" (use "member_iff_nth[T]")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1" (inst 1 "x") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "member_iff_nth[T]")
                              (("2"
                                (rewrite "idx_nth_no_rep")
                                (("1"
                                  (rewrite "idx_nth_no_rep")
                                  (("1"
                                    (typepred "G")
                                    (("1"
                                      (expand "cdigraph")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "G")
                                  (("2"
                                    (expand "cdigraph")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "edge?")
              (("3" (expand "digraph_edges")
                (("3" (expand "edges")
                  (("3" (flatten)
                    (("3" (typepred "G")
                      (("3" (expand "cdigraph")
                        (("3" (flatten)
                          (("3" (lemma "idx_nth_no_rep[T]")
                            (("3" (inst-cp -1 "data(G)" "n")
                              (("1"
                                (expand "node")
                                (("1"
                                  (replace -2 * LR)
                                  (("1"
                                    (inst -1 "data(G)" "x")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "n")
                                (("2"
                                  (expand "size")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (hide 4)
          (("2" (typepred "G")
            (("2" (typepred "n")
              (("2" (expand "size")
                (("2" (expand "cdigraph")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_nth formula-decl nil list_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (member_iff_nth formula-decl nil more_list_props structures)
    (VertID type-eq-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.n)"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.n) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.⇒(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (topological_sort_aux_TCC15 0
  (topological_sort_aux_TCC15-1 nil 3817629671
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (path? const-decl "bool" paths_ nil)
    (dag type-eq-decl nil dags_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype
    "(number_fields.-)(c_topological_sort.n, 1)"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_aux_TCC16 0
  (topological_sort_aux_TCC16-1 nil 3817629671
   ("" (skeep*)
    ((""
      (typepred
       "visit(G)(m WITH [node := temporary], l, n, nth(adjs(G), n))")
      (("" (replace -7 * RL)
        (("" (assert)
          (("" (typepred "m")
            (("" (expand "greater_marking")
              (("" (inst -3 "x")
                (("" (flatten)
                  (("" (assert)
                    (("" (lift-if 1)
                      (("" (assert) (("" (inst -1 "x") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (visit def-decl "{res: [marking, list[Vert(G)]] |
   LET (mp, lp) = res IN
     LET node = node(G)(node_id) IN
          topperm_list(G, mp)(lp) ∧ greater_marking(mp, m) ∧ suffix?(l, lp)
        ∧ permanent?(mp(node))
        ∧ FORALL x:
            member(x, lp) ⇒
             NOT member(x, l) ⇒
              (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x))}"
     c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.mp"
    "non_temporary_marking")))
 (topological_sort_aux_TCC17 0
  (topological_sort_aux_TCC17-1 nil 3817629671
   ("" (skeep*)
    ((""
      (typepred
       "visit(G)(m WITH [node := temporary], l, n, nth(adjs(G), n))")
      (("" (replace -7 * RL)
        (("" (assert)
          (("" (typepred "l")
            (("" (expand "topological_list?")
              (("" (skeep)
                (("" (use "suffix_supl[T]")
                  (("" (assert)
                    (("" (skeep)
                      (("" (replace -1 -14 RL)
                        (("" (lemma "nth_append[T]")
                          (("" (inst-cp -1 "L" "l" "i")
                            (("" (inst -1 "L" "l" "j")
                              ((""
                                (lemma "length_append[T]")
                                ((""
                                  (inst -1 "L" "l")
                                  ((""
                                    (replace -1 * RL)
                                    ((""
                                      (assert)
                                      ((""
                                        (lift-if -2)
                                        ((""
                                          (lift-if -3)
                                          ((""
                                            (split -2)
                                            (("1"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -2 * LR)
                                                  (("1"
                                                    (replace -4 * LR)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (comment
                                                         "i < L and j < L -> i and j both newly added elements")
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          ";;; i < L and j < L -> i and j both newly added elements"))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (comment
                                                     "i > L and j < L -> exists a walk from node to i")
                                                    (("2"
                                                      (postpone)
                                                      nil
                                                      ";;; i > L and j < L -> exists a walk from node to i"))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1 * LR)
                                                    (("2"
                                                      (replace -2 * LR)
                                                      (("2"
                                                        (inst
                                                         -7
                                                         "i-length(L)"
                                                         "j-length(L)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (visit def-decl "{res: [marking, list[Vert(G)]] |
   LET (mp, lp) = res IN
     LET node = node(G)(node_id) IN
          topperm_list(G, mp)(lp) ∧ greater_marking(mp, m) ∧ suffix?(l, lp)
        ∧ permanent?(mp(node))
        ∧ FORALL x:
            member(x, lp) ⇒
             NOT member(x, l) ⇒
              (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x))}"
     c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.lp"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))")))
 (topological_sort_aux_TCC18 0
  (topological_sort_aux_TCC18-1 nil 3817629671
   ("" (termination-tcc) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux termination
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp)"
    "nil")))
 (topological_sort_aux_TCC19 0
  (topological_sort_aux_TCC19-1 nil 3817629671
   ("" (skeep*)
    ((""
      (typepred
       "visit(G)(m WITH [node := temporary], l, n, nth(adjs(G), n))")
      (("" (replace -7 * RL)
        (("" (assert)
          (("" (typepred "v(G)(n - 1, mp, lp)")
            (("1" (name "m1" "v(G)(n - 1, mp, lp)`1")
              (("1" (name "l1" "v(G)(n - 1, mp, lp)`2")
                (("1" (replace -1 * LR)
                  (("1" (replace -2 * LR)
                    (("1" (typepred " v(G)(n - 1, mp, lp)")
                      (("1" (replace -5 * LR)
                        (("1" (replace -6 * LR)
                          (("1" (assert)
                            (("1" (split 3)
                              (("1"
                                (expand "greater_marking")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst - "node!1")
                                    (("1"
                                      (inst -12 "node!1")
                                      (("1"
                                        (ground)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil)
                                         ("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "suffix_supl[T]")
                                  (("2"
                                    (inst-cp -1 "lp" "l1")
                                    (("2"
                                      (inst -1 "l" "lp")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -2 -4)
                                            (("2"
                                              (skolem -1 ("L1"))
                                              (("2"
                                                (skolem -2 ("L2"))
                                                (("2"
                                                  (replace -2 * RL)
                                                  (("2"
                                                    (replace -1 * RL)
                                                    (("2"
                                                      (lemma
                                                       "append_assoc[T]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           *
                                                           RL)
                                                          (("2"
                                                            (lemma
                                                             "suffix_supl[T]")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "topperm_list")
                (("2" (expand "greater_marking")
                  (("2" (inst -3 "x")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (typepred "m")
                          (("2" (inst -1 "x") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (visit def-decl "{res: [marking, list[Vert(G)]] |
   LET (mp, lp) = res IN
     LET node = node(G)(node_id) IN
          topperm_list(G, mp)(lp) ∧ greater_marking(mp, m) ∧ suffix?(l, lp)
        ∧ permanent?(mp(node))
        ∧ FORALL x:
            member(x, lp) ⇒
             NOT member(x, l) ⇒
              (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x))}"
     c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (from? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (l1 skolem-const-decl "list[Vert(G)]" c_topological_sort nil)
    (i!1 skolem-const-decl "upto(n)" c_topological_sort nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp)"
    "{res: [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] | booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2), booleans.∧(c_topological_sort.greater_marking(res`1, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.Vert(c_topological_sort.G)].suffix?(c_topological_sort.l, res`2), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), res`2))))}")))
 (member_length 0
  (member_length-1 nil 3817818717
   ("" (induct l1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l1"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst-cp -3 "x")
            (("2" (assert)
              (("2" (expand "length" 1 2)
                (("2" (assert)
                  (("2" (expand "member" -4 1)
                    (("2" (use "expand_list_app[T]")
                      (("2" (assert)
                        (("2" (skolem -1 ("l2_1" "l2_2"))
                          (("2" (inst -2 "append(l2_1, l2_2)")
                            (("2" (assert)
                              (("2"
                                (replace -1 1 LR)
                                (("2"
                                  (rewrite "length_append[T]")
                                  (("2"
                                    (rewrite "length_append[T]")
                                    (("2"
                                      (rewrite "length_append[T]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "no_rep_cdr[T]" (l l1))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2 -5 LR)
                                                  (("2"
                                                    (skolem 2 "a")
                                                    (("2"
                                                      (inst -4 "a")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           -5
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "member_append_fi[T]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "l2_1"
                                                                 "append((: x :), l2_2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "member_append_l[T]"
                                                                     (l1
                                                                      l2_1))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "append"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             -1)
                                                                            (("2"
                                                                              (use
                                                                               "member_append_r[T]"
                                                                               (l2
                                                                                l2_2))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expand_list_app formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (no_rep_cdr formula-decl nil more_list_props structures)
    (member_append_fi formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (topological_sort_TCC1 0
  (topological_sort_TCC1-1 nil 3817817938 ("" (grind) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort subtype "c_topological_sort.empty_marking"
    "non_temporary_marking")))
 (topological_sort_TCC2 0
  (topological_sort_TCC2-1 nil 3817817938 ("" (grind) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort subtype "list_adt[c_topological_sort.T].null"
    "list[Vert(G)]")))
 (topological_sort_TCC3 0
  (topological_sort_TCC3-1 nil 3817817938 ("" (grind) nil nil)
   ((dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort subtype
    "(c_topological_sort.empty_marking, list_adt[c_topological_sort.T].null)"
    "{res: [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] | booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2), booleans.∧(list_props[c_topological_sort.Vert(c_topological_sort.G)].length(res`2) = c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), FORALL (i: naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), res`2)))}")))
 (topological_sort_TCC4 0
  (topological_sort_TCC4-1 nil 3817817938
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort subtype
    "(number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1)"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_TCC5 0
  (topological_sort_TCC5-1 nil 3817817938 ("" (grind) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort subtype "c_topological_sort.empty_marking"
    "non_temporary_marking")))
 (topological_sort_TCC6 0
  (topological_sort_TCC6-1 nil 3817817938 ("" (grind) nil nil)
   ((dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort subtype "list_adt[c_topological_sort.T].null"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.empty_marking))")))
 (topological_sort_TCC7 0
  (topological_sort_TCC7-1 nil 3817817938
   ("" (skeep*)
    ((""
      (typepred "topological_sort_aux(G)
                                           (size[T](G) - 1,
                                            empty_marking,
                                            null[T])")
      (("1"
        (name-replace "m" "topological_sort_aux(G)
                                               (size[T](G) - 1,
                                                empty_marking,
                                                null[T])`1")
        (("1"
          (name-replace "l" "topological_sort_aux(G)
                                               (size[T](G) - 1,
                                                empty_marking,
                                                null[T])`2")
          (("1" (expand "greater_marking")
            (("1" (expand "empty_marking")
              (("1" (assert)
                (("1" (expand "node")
                  (("1" (lemma "member_length")
                    (("1" (inst -1 "l" "data(G)")
                      (("1" (expand "topperm_list")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (lemma "member_length")
                              (("1"
                                (inst -1 "data(G)" "l")
                                (("1"
                                  (typepred "G")
                                  (("1"
                                    (expand "cdigraph")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "size")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem 2 "a")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (typepred
                                                           "l")
                                                          (("1"
                                                            (expand
                                                             "vert")
                                                            (("1"
                                                              (lemma
                                                               "every_forall[T]")
                                                              (("1"
                                                                (inst?
                                                                 -)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "idx[T](l, a)")
                                                                    (("1"
                                                                      (typepred
                                                                       "idx(l, a)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skolem 1 "a")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -13
                                                         "idx[T](data(G), a)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skolem 1 "i")
                                                (("2"
                                                  (inst -13 "i")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
       ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
       ("4" (assert) nil nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (topological_sort_aux def-decl
     "{res: [non_temporary_marking, list[Vert(G)]] |
   LET (mp, lp) = res IN
     topperm_list(G, mp)(lp) ∧
      greater_marking(mp, m) ∧
       suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)}"
     c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every_forall formula-decl nil more_list_props structures)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
    digraph_size[T], digraph_make[T]]" c_topological_sort nil)
    (a skolem-const-decl "T" c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_length formula-decl nil c_topological_sort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort subtype
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.empty_marking, list_adt[c_topological_sort.T].null)"
    "{res: [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list] | booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, res`1)(res`2), booleans.∧(list_props[c_topological_sort.Vert(c_topological_sort.G)].length(res`2) = c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), FORALL (i: naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), res`2)))}")))
 (topological_sort_exists 0
  (topological_sort_exists-1 nil 3817907007
   ("" (skeep)
    (("" (typepred "topological_sort(G)")
      (("" (name-replace "m" "topological_sort(G)`1")
        (("" (name-replace "l" "topological_sort(G)`2")
          (("" (expand "topperm_list")
            (("" (flatten)
              (("" (inst 1 "lambda (x:vert(G)): idx[T](l, x)")
                (("1" (split 1)
                  (("1" (expand "bijective?")
                    (("1" (split 1)
                      (("1" (expand "injective?")
                        (("1" (lemma "idx_inj[T]")
                          (("1" (skeep)
                            (("1" (inst? -) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "surjective?")
                        (("2" (expand "size")
                          (("2" (skeep)
                            (("2" (inst -5 "y")
                              (("2"
                                (expand "node")
                                (("2"
                                  (use "member_iff_nth[T]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "x")
                                      (("2"
                                        (inst 1 "nth(l, y)")
                                        (("1"
                                          (use "idx_nth_no_rep[T]")
                                          nil
                                          nil)
                                         ("2"
                                          (typepred "y")
                                          (("2"
                                            (expand "size")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem 1 ("x" "y"))
                    (("2" (flatten)
                      (("2" (expand "topological_list?")
                        (("2" (inst -3 "idx[T](l, x)" "y")
                          (("2" (split -3)
                            (("1" (skeep)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "idx[T](l, y)")
                                  (("1"
                                    (replace -3 + LR)
                                    (("1"
                                      (use "idx_nth_no_rep[T]")
                                      (("1"
                                        (replace -1 * LR)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "idx[T](l,x) = j")
                                            (("1"
                                              (replace -1 * LR)
                                              (("1"
                                                (lemma
                                                 "dag_no_self_loops")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "(x, y)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "gen_seq2(G, x, y)")
                              (("1" (grind) nil nil)
                               ("2"
                                (expand "walk?")
                                (("2"
                                  (expand "gen_seq2")
                                  (("2"
                                    (expand "finseq_appl")
                                    (("2"
                                      (expand "verts_in?")
                                      (("2"
                                        (skeep)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil)
                 ("4" (skeep)
                  (("4" (typepred "x")
                    (("4" (expand "vert?")
                      (("4" (expand "digraph_verts")
                        (("4" (expand "vert")
                          (("4" (inst -6 "idx[T](data(G), x)")
                            (("1" (grind) nil nil)
                             ("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((topological_sort const-decl
     "{res: [non_temporary_marking, list[Vert(G)]] |
   LET (m, l) = res IN
     topperm_list(G, m)(l) ∧
      length(l) = size(G) ∧
       FORALL (i: below(size(G))): member(node(G)(i), l)}"
     c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (¬ const-decl "[bool -> bool]" booleans nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x skolem-const-decl
     "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (idx_inj formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (injective? const-decl "bool" functions nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (y skolem-const-decl "below(size(G))" c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (surjective? const-decl "bool" functions nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (x skolem-const-decl "(vert(G))" c_topological_sort nil)
    (y skolem-const-decl "(vert(G))" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (dag_no_self_loops formula-decl nil dags_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (l skolem-const-decl "list[Vert(G)]" c_topological_sort nil)
    (G skolem-const-decl
     "dag[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
    digraph_make]" c_topological_sort nil)
    (bijective? const-decl "bool" functions nil)
    (edge? const-decl "bool" digraphs_ nil)
    (topological_ordering type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (nth def-decl "T" list_props nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures))
   shostak)))
(c_topological_sort_example
 (G1_TCC1 0
  (G1_TCC1-1 nil 3817967284
   ("" (split)
    (("1" (expand "cdigraph")
      (("1" (expand "length")
        (("1" (expand "length")
          (("1" (expand "length")
            (("1" (expand "length")
              (("1" (expand "length")
                (("1" (expand "length")
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (expand "length")
                          (("1" (split 1)
                            (("1" (skolem-typepred)
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "length")
                                    (("1"
                                      (expand "length")
                                      (("1"
                                        (expand "length")
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (expand "length")
                                            (("1"
                                              (expand "length")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (case "i!1 = 0")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "i!1 = 1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "i!1 = 2")
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (expand
                                                             "nth")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "i!1 = 3")
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (grind)
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "i!1 = 4")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "i!1 = 5")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "i!1 = 6")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "i!1 = 7")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "i!1 = 8")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "no_repetitions?")
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (expand "length")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (expand "length")
                                            (("2"
                                              (expand "length")
                                              (("2"
                                                (expand "length")
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lift-if
                                                                         *)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nth")
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nth")
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("2"
                                                                                                                                    (lift-if)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "nth")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (lift-if)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("2"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("2"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("2"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (ground)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skolem-typepred 1)
                              (("3"
                                (expand "length")
                                (("3"
                                  (expand "length")
                                  (("3"
                                    (expand "length")
                                    (("3"
                                      (expand "length")
                                      (("3"
                                        (expand "length")
                                        (("3"
                                          (expand "length")
                                          (("3"
                                            (expand "length")
                                            (("3"
                                              (expand "length")
                                              (("3"
                                                (expand "length")
                                                (("3"
                                                  (expand "length")
                                                  (("3"
                                                    (expand
                                                     "no_repetitions?")
                                                    (("3"
                                                      (skolem-typepred)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (case
                                                           "i!1 = 0")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "i!1 = 1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "i!1 = 2")
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "i!1 = 3")
                                                                (("1"
                                                                  (grind)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (expand
                                                                               "nth")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "nth")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "nth")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (lift-if)
                                                                                  (("3"
                                                                                    (ground)
                                                                                    (("3"
                                                                                      (lift-if)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "i!1 = 4")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "i!1 = 5")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "i!1 = 6")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "i!1 = 7")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "i!1 = 8")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "w")
        (("2" (expand "walk?")
          (("2" (expand "verts_in?")
            (("2" (expand "digraph_verts")
              (("2" (expand "vert")
                (("2" (expand "edge?")
                  (("2" (expand "digraph_edges")
                    (("2" (expand "edges")
                      (("2" (expand "vert")
                        (("2" (expand "finseq_appl")
                          (("2" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (G1 subtype
    "(# data := (: 0, 1, 2, 3, 4, 5, 6, 7, 8 :), adjs := (: (: 1 :), (: :), (: 0, 3, 4 :), (: 0, 7, 8 :), (: 1 :), (: :), (: 1 :), (: 8 :), (: 1 :) :) #)"
    "dag[nat, digraph_type[nat], digraph_verts[nat], digraph_edges[nat], digraph_size[nat], digraph_make[nat]]"))))

