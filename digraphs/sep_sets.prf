(sep_sets
 (del_verts_TCC1 0
  (del_verts_TCC1-1 nil 3253624237
   ("" (skosimp*)
    (("" (lemma "finite_subset[edgetype[T]]")
      (("" (inst?)
        (("" (inst - "edges(G!1)")
          (("" (assert) (("" (hide 2) (("" (grind) nil nil)) nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (T formal-type-decl nil sep_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (in? const-decl "bool" pairs structures)
    (pair type-eq-decl nil pairs structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (del_verts subtype
    "{e | booleans.AND(edges(sep_sets.G)(sep_sets.e), (FORALL v: booleans.IMPLIES(sep_sets.V(sep_sets.v), (booleans.NOT)(pairs[sep_sets.T].in?(sep_sets.v, sep_sets.e)))))}"
    "finite_set[[T, T]]")))
 (del_verts_TCC2 0
  (del_verts_TCC2-1 nil 3307703846
   ("" (skosimp*)
    (("" (expand "difference")
      (("" (expand "member")
        (("" (expand "in?")
          (("" (copy -2)
            (("" (inst?)
              (("" (assert)
                (("" (inst - "e!1`2")
                  (("" (assert)
                    (("" (typepred "G!1")
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (in? const-decl "bool" pairs structures)
    (T formal-type-decl nil sep_sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   nil
   (del_verts subtype
    "(# vert := sets[sep_sets.T].difference(vert(sep_sets.G), sep_sets.V), edges := {e | booleans.AND(edges(sep_sets.G)(sep_sets.e), (FORALL v: booleans.IMPLIES(sep_sets.V(sep_sets.v), (booleans.NOT)(pairs[sep_sets.T].in?(sep_sets.v, sep_sets.e)))))} #)"
    "digraph[T]")))
 (sep_set_exists 0
  (sep_set_exists-2 nil 3560852019
   ("" (skosimp*)
    (("" (case "s!1 = t!1 OR edge?(G!1)(s!1,t!1)")
      (("1" (inst 1 "vert(G!1)") (("1" (ground) nil nil)) nil)
       ("2" (inst 2 "{t: T | vert(G!1)(t)  AND t /= s!1 AND t /= t!1}")
        (("2" (prop)
          (("1" (lemma "finite_subset[T]")
            (("1" (inst?)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 4 5)
            (("2" (expand "separates")
              (("2" (skosimp*)
                (("2" (expand* "walk_from?" "from?")
                  (("2" (flatten)
                    (("2" (case "length(w!1) = 1")
                      (("1" (replace -1)
                        (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil)
                       ("2" (case-replace "length(w!1) = 2")
                        (("1" (assert)
                          (("1" (expand "walk?")
                            (("1" (flatten)
                              (("1" (inst -5 "0")
                                (("1" (assert)
                                  (("1" (expand "del_verts")
                                    (("1" (expand "edge?")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "FORALL (i: below(length(w!1))): seq(w!1)(i) = s!1 OR seq(w!1)(i) = t!1")
                          (("1" (expand "walk?")
                            (("1" (flatten)
                              (("1" (hide -5)
                                (("1" (expand "verts_in?")
                                  (("1" (expand "del_verts")
                                    (("1" (expand "difference")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lemma "prewalk_across")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst -5 "i!1+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -3)
                                                            (("1"
                                                              (replace -6)
                                                              (("1"
                                                                (expand
                                                                 "edge?")
                                                                (("1"
                                                                  (reveal -3)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (expand
                                                                           "del_verts")
                                                                          (("1"
                                                                            (expand
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "walk_verts_in")
                            (("2" (inst?)
                              (("1" (split -1)
                                (("1" (hide -4)
                                  (("1" (expand "verts_in?")
                                    (("1" (expand "del_verts")
                                      (("1"
                                        (expand "difference")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (expand "edge?")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2" (hide -1 -2 -3 2 3 4 5 6)
                                (("2" (lemma "finite_subset[T]")
                                  (("2" (inst?)
                                    (("2" (inst -1 "vert(G!1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (from? const-decl "bool" walks_ nil)
    (walk_from? const-decl "bool" walks_ nil)
    (walk_verts_in formula-decl nil walks_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prewalk_across formula-decl nil walks_ nil)
    (difference const-decl "set" sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_difference application-judgement "finite_set[T]" sep_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (del_verts const-decl "digraph[T]" sep_sets nil)
    (walk? const-decl "bool" walks_ nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (separates const-decl "bool" sep_sets nil)
    (seps type-eq-decl nil sep_sets nil) (TRUE const-decl "bool" booleans nil)
    (G!1 skolem-const-decl "digraph[T]" sep_sets nil)
    (t!1 skolem-const-decl "T" sep_sets nil)
    (s!1 skolem-const-decl "T" sep_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil sep_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil)
  (sep_set_exists-1 nil 3253624237
   ("" (skosimp*)
    (("" (case "s!1 = t!1 OR edge?(G!1)(s!1,t!1)")
      (("1" (inst 1 "vert(G!1)") (("1" (ground) nil)))
       ("2" (inst 2 "{t: T | vert(G!1)(t)  AND t /= s!1 AND t /= t!1}")
        (("2" (prop)
          (("1" (lemma "finite_subset[T]")
            (("1" (inst?)
              (("1" (inst?)
                (("1" (assert) (("1" (hide 2 3 4) (("1" (grind) nil)))))))))))
           ("2" (hide 4 5)
            (("2" (expand "separates")
              (("2" (skosimp*)
                (("2" (expand "walk_from?")
                  (("2" (flatten)
                    (("2" (case "length(w!1) = 1")
                      (("1" (replace -1)
                        (("1" (hide -1) (("1" (assert) nil)))))
                       ("2" (case-replace "length(w!1) = 2")
                        (("1" (assert)
                          (("1" (expand "walk?")
                            (("1" (flatten)
                              (("1" (inst -5 "0")
                                (("1" (assert)
                                  (("1" (expand "del_verts")
                                    (("1" (expand "edge?")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (assert) nil)))))))))))))))))
                         ("2"
                          (case "FORALL (i: below(length(w!1))): seq(w!1)(i) = s!1 OR seq(w!1)(i) = t!1")
                          (("1" (expand "walk?")
                            (("1" (flatten)
                              (("1" (hide -5)
                                (("1" (expand "verts_in?")
                                  (("1" (expand "del_verts")
                                    (("1" (expand "difference")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lemma "prewalk_across")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst -5 "i!1+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -3)
                                                            (("1"
                                                              (replace -6)
                                                              (("1"
                                                                (expand
                                                                 "edge?")
                                                                (("1"
                                                                  (reveal -3)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (expand
                                                                           "del_verts")
                                                                          (("1"
                                                                            (expand
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (propax)
                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                           ("2" (lemma "walk_verts_in")
                            (("2" (inst?)
                              (("1" (split -1)
                                (("1" (hide -4)
                                  (("1" (expand "verts_in?")
                                    (("1" (expand "del_verts")
                                      (("1"
                                        (expand "difference")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil)))))))))))))))))
                                 ("2" (propax) nil)))
                               ("2" (hide -1 -2 -3 2 3 4 5 6)
                                (("2" (lemma "finite_subset[T]")
                                  (("2" (inst?)
                                    (("2" (inst -1 "vert(G!1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (grind)
                                            nil))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (min_sep_set_TCC1 0
  (min_sep_set_TCC1-2 "" 3790101473
   ("" (skosimp*) (("" (lemma "sep_set_exists") (("" (inst?) nil nil)) nil))
    nil)
   ((sep_set_exists formula-decl nil sep_sets nil)
    (T formal-type-decl nil sep_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil))
   shostak
   (min_sep_set assuming
    "ints@abstract_min[sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): finite_sets[sep_sets.T].card(v)), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): booleans.TRUE)].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)"))
  (min_sep_set_TCC1-1 nil 3253624237
   ("" (skosimp*) (("" (lemma "sep_set_exists") (("" (inst?) nil)))) nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil))
   nil
   (min_sep_set assuming
    "ints@abstract_min[sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): finite_sets[sep_sets.T].card(v)), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): booleans.TRUE)].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (min_sep_set_edge 0
  (min_sep_set_edge-2 "" 3790101473
   ("" (skosimp*)
    (("" (expand "separable?")
      (("" (expand "min_sep_set")
        ((""
          (lemma "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          ((""
            (typepred
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("" (expand "minimal?")
              (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((separable? const-decl "bool" sep_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (seps type-eq-decl nil sep_sets nil)
    (separates const-decl "bool" sep_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sep_sets nil)
    (min_in formula-decl nil abstract_min ints)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minimal? const-decl "bool" abstract_min ints)
    (min const-decl "{S: T | minimal?(S)}" abstract_min ints)
    (min_sep_set const-decl "finite_set[T]" sep_sets nil))
   shostak)
  (min_sep_set_edge-1 nil 3253624237
   ("" (skosimp*)
    (("" (expand "separable?")
      (("" (expand "min_sep_set")
        ((""
          (lemma "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          (("1"
            (typepred
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("1" (expand "minimal?")
              (("1" (assert) (("1" (flatten) (("1" (assert) nil)))))))
             ("2" (lemma "sep_set_exists")
              (("2" (inst?)
                (("2" (assert) (("2" (skosimp*) (("2" (inst?) nil)))))))))))
           ("2" (lemma "sep_set_exists") (("2" (inst?) nil))))))))))
    nil)
   ((card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (min_in formula-decl nil abstract_min ints)
    (minimal? const-decl "bool" abstract_min ints)
    (min const-decl "{S: T | minimal?(S)}" abstract_min ints))
   nil))
 (min_sep_set_card 0
  (min_sep_set_card-2 nil 3560852136
   ("" (skosimp*)
    (("" (expand "min_sep_set")
      ((""
        (lemma "min_is_min[seps(G!1, s!1, t!1),
                  (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                  (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
        (("1" (inst -1 "V!1")
          (("1" (beta) (("1" (propax) nil nil)) nil)
           ("2" (hide 2)
            (("2" (ground)
              (("1" (expand "separates")
                (("1" (flatten)
                  (("1" (inst 4 "gen_seq1(G!1,s!1)")
                    (("1" (expand* "walk_from?" "from?")
                      (("1" (expand "gen_seq1")
                        (("1" (expand "walk?")
                          (("1" (expand "verts_in?")
                            (("1" (skosimp*)
                              (("1" (expand "del_verts")
                                (("1" (expand "difference")
                                  (("1" (expand "member")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "separates")
                (("2" (flatten)
                  (("2" (inst 4 "gen_seq2(G!1,s!1,t!1)")
                    (("2" (expand* "walk_from?" "from?")
                      (("2" (expand "gen_seq2")
                        (("2" (expand "del_verts")
                          (("2" (expand "walk?")
                            (("2" (split 4)
                              (("1" (expand "verts_in?")
                                (("1" (skosimp*)
                                  (("1" (expand "difference")
                                    (("1" (expand "member")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2" (expand "finseq_appl")
                                  (("2" (expand "edge?")
                                    (("2" (assert)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "in?")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "sep_set_exists") (("2" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((min_sep_set const-decl "finite_set[T]" sep_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (seps type-eq-decl nil sep_sets nil)
    (separates const-decl "bool" sep_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sep_sets nil)
    (min_is_min formula-decl nil abstract_min ints)
    (G!1 skolem-const-decl "digraph[T]" sep_sets nil)
    (s!1 skolem-const-decl "(vert(G!1))" sep_sets nil)
    (t!1 skolem-const-decl "(vert(G!1))" sep_sets nil)
    (V!1 skolem-const-decl "finite_set[T]" sep_sets nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (finite_difference application-judgement "finite_set[T]" sep_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" pairs structures)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (del_verts const-decl "digraph[T]" sep_sets nil)
    (member const-decl "bool" sets nil) (difference const-decl "set" sets nil)
    (walk? const-decl "bool" walks_ nil)
    (walk_from? const-decl "bool" walks_ nil)
    (from? const-decl "bool" walks_ nil)
    (sep_set_exists formula-decl nil sep_sets nil))
   nil)
  (min_sep_set_card-1 nil 3253624237
   ("" (skosimp*)
    (("" (expand "min_sep_set")
      ((""
        (lemma "min_is_min[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
        (("1" (inst -1 "V!1")
          (("1" (beta) (("1" (assert) nil)))
           ("2" (hide 2)
            (("2" (ground)
              (("1" (expand "separates")
                (("1" (flatten)
                  (("1" (inst 4 "gen_seq1(G!1,s!1)")
                    (("1" (expand "walk_from?")
                      (("1" (expand "gen_seq1")
                        (("1" (expand "walk?")
                          (("1" (expand "verts_in?")
                            (("1" (skosimp*)
                              (("1" (expand "del_verts")
                                (("1" (expand "difference")
                                  (("1" (expand "member")
                                    (("1" (propax) nil)))))))))))))))))))))))
               ("2" (expand "separates")
                (("2" (flatten)
                  (("2" (inst 4 "gen_seq2(G!1,s!1,t!1)")
                    (("2" (expand "walk_from?")
                      (("2" (expand "gen_seq2")
                        (("2" (expand "del_verts")
                          (("2" (expand "walk?")
                            (("2" (split 4)
                              (("1" (expand "verts_in?")
                                (("1" (skosimp*)
                                  (("1" (expand "difference")
                                    (("1" (expand "member")
                                      (("1" (ground) nil)))))))))
                               ("2" (skosimp*)
                                (("2" (expand "finseq_appl")
                                  (("2" (expand "edge?")
                                    (("2" (assert)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "in?")
                                          (("2"
                                            (ground)
                                            nil)))))))))))))))))))))))))))))))))))
         ("2" (lemma "sep_set_exists") (("2" (inst?) nil))))))))
    nil)
   ((in? const-decl "bool" pairs structures)
    (min_is_min formula-decl nil abstract_min ints))
   nil))
 (min_sep_set_seps 0
  (min_sep_set_seps-2 "" 3790101475
   ("" (skosimp*)
    (("" (expand "separable?")
      (("" (flatten)
        ((""
          (lemma "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          ((""
            (typepred
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("" (assert)
              (("" (expand "min_sep_set") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((separable? const-decl "bool" sep_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (seps type-eq-decl nil sep_sets nil)
    (separates const-decl "bool" sep_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sep_sets nil)
    (min_in formula-decl nil abstract_min ints)
    (min_sep_set const-decl "finite_set[T]" sep_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minimal? const-decl "bool" abstract_min ints)
    (min const-decl "{S: T | minimal?(S)}" abstract_min ints))
   shostak)
  (min_sep_set_seps-1 nil 3253624237
   ("" (skosimp*)
    (("" (expand "separable?")
      (("" (flatten)
        ((""
          (lemma "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          (("1"
            (typepred
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("1" (assert)
              (("1" (expand "min_sep_set") (("1" (propax) nil)))))
             ("2" (skosimp*) (("2" (inst?) nil)))))
           ("2" (lemma "sep_set_exists") (("2" (inst?) nil))))))))))
    nil)
   ((card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (min_in formula-decl nil abstract_min ints)
    (minimal? const-decl "bool" abstract_min ints)
    (min const-decl "{S: T | minimal?(S)}" abstract_min ints))
   nil))
 (min_sep_set_vert 0
  (min_sep_set_vert-3 "" 3790101475
   ("" (skosimp*)
    ((""
      (typepred
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
               (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("" (hide -1 -2 -3)
        (("" (expand "minimal?")
          (("" (inst -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (rewrite "card_remove[T]")
              (("1" (assert)
                (("1" (expand "min_sep_set" -1) (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (split 1)
              (("1" (flatten)
                (("1" (lemma "min_sep_set_edge")
                  (("1" (inst?)
                    (("1" (split -1)
                      (("1" (replace -1) (("1" (propax) nil nil)) nil)
                       ("2" (hide -1)
                        (("2" (expand "separable?")
                          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (ground)
                  (("2" (lemma "min_sep_set_seps")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "separates")
                          (("2" (flatten)
                            (("2" (expand "remove")
                              (("2" (expand "member")
                                (("2" (assert)
                                  (("2" (skosimp*)
                                    (("2" (inst 3 "w!1")
                                      (("2"
                                        (expand* "walk_from?" "from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "walk?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 3)
                                                  (("1"
                                                    (hide -4)
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (expand "del_verts")
                                                          (("1"
                                                            (expand
                                                             "difference")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "del_verts")
                                                            (("2"
                                                              (expand "edge?")
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst
                                                                           -7
                                                                           "v!2")
                                                                          (("2"
                                                                            (expand
                                                                             "in?")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -7)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case-replace
                                                                                   "v!1 = v!2")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     1
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (reveal
                                                                                       -9)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "verts_in?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "del_verts")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "difference")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{S: T | minimal?(S)}" abstract_min ints)
    (minimal? const-decl "bool" abstract_min ints)
    (TRUE const-decl "bool" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (seps type-eq-decl nil sep_sets nil)
    (separates const-decl "bool" sep_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil sep_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_remove application-judgement "finite_set[T]" sep_sets nil)
    (s!1 skolem-const-decl "T" sep_sets nil)
    (t!1 skolem-const-decl "T" sep_sets nil)
    (G!1 skolem-const-decl "digraph[T]" sep_sets nil)
    (remove const-decl "set" sets nil)
    (v!1 skolem-const-decl "T" sep_sets nil)
    (min_sep_set const-decl "finite_set[T]" sep_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (min_sep_set_edge formula-decl nil sep_sets nil)
    (separable? const-decl "bool" sep_sets nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (in? const-decl "bool" pairs structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finite_difference application-judgement "finite_set[T]" sep_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (difference const-decl "set" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (del_verts const-decl "digraph[T]" sep_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (walk_from? const-decl "bool" walks_ nil)
    (from? const-decl "bool" walks_ nil) (member const-decl "bool" sets nil)
    (min_sep_set_seps formula-decl nil sep_sets nil))
   shostak)
  (min_sep_set_vert-2 nil 3560852169
   ("" (skosimp*)
    ((""
      (typepred
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
               (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("1" (hide -1 -2 -3)
        (("1" (expand "minimal?")
          (("1" (inst -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (rewrite "card_remove[T]")
              (("1" (assert)
                (("1" (expand "min_sep_set" -1) (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (split 1)
              (("1" (flatten)
                (("1" (lemma "min_sep_set_edge")
                  (("1" (inst?)
                    (("1" (split -1)
                      (("1" (replace -1) (("1" (propax) nil nil)) nil)
                       ("2" (hide -1)
                        (("2" (expand "separable?")
                          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (ground)
                  (("2" (lemma "min_sep_set_seps")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "separates")
                          (("2" (flatten)
                            (("2" (expand "remove")
                              (("2" (expand "member")
                                (("2" (assert)
                                  (("2" (skosimp*)
                                    (("2" (inst 3 "w!1")
                                      (("2"
                                        (expand* "walk_from?" "from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "walk?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 3)
                                                  (("1"
                                                    (hide -4)
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (expand "del_verts")
                                                          (("1"
                                                            (expand
                                                             "difference")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "i!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "edge?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "del_verts")
                                                            (("2"
                                                              (expand "edge?")
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst
                                                                           -7
                                                                           "v!2")
                                                                          (("2"
                                                                            (expand
                                                                             "in?")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -7)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case-replace
                                                                                   "v!1 = v!2")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     1
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (reveal
                                                                                       -9)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "verts_in?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "del_verts")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "difference")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "sep_set_exists") (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   ((min const-decl "{S: T | minimal?(S)}" abstract_min ints)
    (minimal? const-decl "bool" abstract_min ints)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (in? const-decl "bool" pairs structures)
    (walk? const-decl "bool" walks_ nil)
    (walk_from? const-decl "bool" walks_ nil)
    (from? const-decl "bool" walks_ nil)
    (card_remove formula-decl nil finite_sets nil))
   nil)
  (min_sep_set_vert-1 nil 3253624237
   ("" (skosimp*)
    ((""
      (typepred
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
             (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("1" (hide -1 -2 -3)
        (("1" (expand "minimal?")
          (("1" (inst -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (rewrite "card_remove[T]")
              (("1" (assert)
                (("1" (expand "min_sep_set" -1)
                  (("1" (assert) (("1" (postpone) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (split 1)
              (("1" (flatten)
                (("1" (lemma "min_sep_set_edge")
                  (("1" (inst?)
                    (("1" (split -1)
                      (("1" (replace -1) (("1" (propax) nil nil)) nil)
                       ("2" (hide -1)
                        (("2" (expand "separable?")
                          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (ground)
                  (("2" (lemma "min_sep_set_seps")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "separates")
                          (("2" (flatten)
                            (("2" (expand "remove")
                              (("2" (expand "member")
                                (("2" (assert)
                                  (("2" (skosimp*)
                                    (("2" (inst 3 "w!1")
                                      (("2"
                                        (expand "walk_from?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "walk?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 3)
                                                  (("1"
                                                    (hide -4)
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (expand "del_verts")
                                                          (("1"
                                                            (expand
                                                             "difference")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "i!1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "del_verts")
                                                            (("2"
                                                              (expand "edge?")
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "v!2")
                                                                        (("2"
                                                                          (expand
                                                                           "in?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -7)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case-replace
                                                                                 "v!1 = v!2")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   1
                                                                                   2
                                                                                   3
                                                                                   4
                                                                                   5)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -9)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "verts_in?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "del_verts")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "difference")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "sep_set_exists") (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   ((min const-decl "{S: T | minimal?(S)}" abstract_min ints)
    (minimal? const-decl "bool" abstract_min ints)
    (in? const-decl "bool" pairs structures))
   nil))
 (ends_not_in_min_sep_set 0
  (ends_not_in_min_sep_set-2 "" 3790101476
   ("" (skosimp*)
    (("" (lemma "min_sep_set_seps")
      (("" (inst?)
        (("" (assert)
          (("" (expand "separates")
            (("" (flatten) (("" (hide 3) (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_sep_set_seps formula-decl nil sep_sets nil)
    (separates const-decl "bool" sep_sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil sep_sets nil))
   shostak)
  (ends_not_in_min_sep_set-1 nil 3253624237
   ("" (skosimp*)
    (("" (lemma "min_sep_set_seps")
      (("" (inst?)
        (("" (assert)
          (("" (expand "separates")
            (("" (flatten) (("" (hide 3) (("" (ground) nil))))))))))))))
    nil)
   ((digraph type-eq-decl nil digraph_def nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (walk?_del_verts_not 0
  (walk?_del_verts_not-2 "" 3790101476
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (split +)
        (("1" (flatten)
          (("1" (hide -2)
            (("1" (expand "verts_in?")
              (("1" (skosimp*)
                (("1" (expand "del_verts")
                  (("1" (expand "intersection")
                    (("1" (expand "empty?")
                      (("1" (expand "difference")
                        (("1" (expand "member")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "verts_of")
                                    (("1" (inst?)
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "edge?")
            (("2" (inst?)
              (("2" (assert)
                (("2" (assert)
                  (("2" (expand "del_verts")
                    (("2" (expand "empty?")
                      (("2" (expand "intersection")
                        (("2" (expand "member")
                          (("2" (skosimp*)
                            (("2" (inst?)
                              (("2" (expand "in?")
                                (("2" (expand "verts_of")
                                  (("2" (assert)
                                    (("2" (split -3)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (intersection const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil sep_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (verts_of const-decl "finite_set[T]" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (del_verts const-decl "digraph[T]" sep_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finite_intersection1 application-judgement "finite_set[T]" sep_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in? const-decl "bool" pairs structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   shostak)
  (walk?_del_verts_not-1 nil 3253624237
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (split +)
        (("1" (flatten)
          (("1" (hide -2)
            (("1" (expand "verts_in?")
              (("1" (skosimp*)
                (("1" (expand "del_verts")
                  (("1" (expand "intersection")
                    (("1" (expand "empty?")
                      (("1" (expand "difference")
                        (("1" (expand "member")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "verts_of")
                                    (("1" (inst?)
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (propax)
                                          nil)))))))))))))))))))))))))))))))))
         ("2" (skosimp*)
          (("2" (expand "edge?")
            (("2" (inst?)
              (("2" (assert)
                (("2" (assert)
                  (("2" (expand "del_verts")
                    (("2" (expand "empty?")
                      (("2" (expand "intersection")
                        (("2" (expand "member")
                          (("2" (skosimp*)
                            (("2" (inst?)
                              (("2" (expand "in?")
                                (("2" (expand "verts_of")
                                  (("2" (assert)
                                    (("2" (split -3)
                                      (("1" (inst?) (("1" (assert) nil)))
                                       ("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (in? const-decl "bool" pairs structures)
    (edge? const-decl "bool" digraphs_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (verts_of const-decl "finite_set[T]" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (adj_verts_TCC1 0
  (adj_verts_TCC1-2 "" 3790101477
   ("" (skosimp*)
    (("" (lemma "finite_subset[T]")
      (("" (inst?)
        (("" (inst -1 "vert(G!1)")
          (("" (assert)
            (("" (hide 2) (("" (typepred "G!1") (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil sep_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in? const-decl "bool" pairs structures)
    (pair type-eq-decl nil pairs structures)
    (incident_edges const-decl "finite_set[edgetype[T]]" digraph_deg nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (adj_verts subtype
    "{v: sep_sets.T | EXISTS (e: digraphs_utils[sep_sets.T].edgetype): booleans.AND(digraph_deg[sep_sets.T].incident_edges(sep_sets.s, sep_sets.G)(e), booleans.AND(pairs[sep_sets.T].in?(v, e), (booleans.NOT)(v = sep_sets.s)))}"
    "finite_set[T]"))
  (adj_verts_TCC1-1 nil 3253624237
   ("" (skosimp*)
    (("" (lemma "finite_subset[T]")
      (("" (inst?)
        (("" (inst -1 "vert(G!1)")
          (("" (assert)
            (("" (hide 2) (("" (typepred "G!1") (("" (grind) nil))))))))))))))
    nil)
   ((finite_subset formula-decl nil finite_sets nil)
    (in? const-decl "bool" pairs structures)
    (pair type-eq-decl nil pairs structures)
    (incident_edges const-decl "finite_set[edgetype[T]]" digraph_deg nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs_utils nil))
   nil
   (adj_verts subtype
    "{v: sep_sets.T | EXISTS (e: digraphs_utils[sep_sets.T].edgetype): booleans.AND(digraph_deg[sep_sets.T].incident_edges(sep_sets.s, sep_sets.G)(e), booleans.AND(pairs[sep_sets.T].in?(v, e), (booleans.NOT)(v = sep_sets.s)))}"
    "finite_set[T]"))))

