(|sep_sets|
 (|del_verts_TCC1| 0
  (|del_verts_TCC1-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (LEMMA "finite_subset[edgetype[T]]")
      (("" (INST?)
        (("" (INST - "edges(G!1)")
          (("" (ASSERT) (("" (HIDE 2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|pair| TYPE-EQ-DECL NIL |pairs| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|del_verts| SUBTYPE
    "{e | booleans.AND(edges(sep_sets.G)(sep_sets.e), (FORALL v: booleans.IMPLIES(sep_sets.V(sep_sets.v), (booleans.NOT)(pairs[sep_sets.T].in?(sep_sets.v, sep_sets.e)))))}"
    "finite_set[[T, T]]")))
 (|del_verts_TCC2| 0
  (|del_verts_TCC2-1| |nil| 3307703846
   ("" (SKOSIMP*)
    (("" (EXPAND "difference")
      (("" (EXPAND "member")
        (("" (EXPAND "in?")
          (("" (COPY -2)
            (("" (INST?)
              (("" (ASSERT)
                (("" (INST - "e!1`2")
                  (("" (ASSERT)
                    (("" (TYPEPRED "G!1")
                      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|difference| CONST-DECL "set" |sets| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   NIL
   (|del_verts| SUBTYPE
    "(# vert := sets[sep_sets.T].difference(vert(sep_sets.G), sep_sets.V), edges := {e | booleans.AND(edges(sep_sets.G)(sep_sets.e), (FORALL v: booleans.IMPLIES(sep_sets.V(sep_sets.v), (booleans.NOT)(pairs[sep_sets.T].in?(sep_sets.v, sep_sets.e)))))} #)"
    "digraph[T]")))
 (|sep_set_exists| 0
  (|sep_set_exists-2| |nil| 3560852019
   ("" (SKOSIMP*)
    (("" (CASE "s!1 = t!1 OR edge?(G!1)(s!1,t!1)")
      (("1" (INST 1 "vert(G!1)") (("1" (GROUND) NIL NIL)) NIL)
       ("2" (INST 2 "{t: T | vert(G!1)(t)  AND t /= s!1 AND t /= t!1}")
        (("2" (PROP)
          (("1" (LEMMA "finite_subset[T]")
            (("1" (INST?)
              (("1" (INST?)
                (("1" (ASSERT) (("1" (HIDE 2 3 4) (("1" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 4 5)
            (("2" (EXPAND "separates")
              (("2" (SKOSIMP*)
                (("2" (EXPAND* "walk_from?" "from?")
                  (("2" (FLATTEN)
                    (("2" (CASE "length(w!1) = 1")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                       ("2" (CASE-REPLACE "length(w!1) = 2")
                        (("1" (ASSERT)
                          (("1" (EXPAND "walk?")
                            (("1" (FLATTEN)
                              (("1" (INST -5 "0")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "del_verts")
                                    (("1" (EXPAND "edge?")
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2"
                          (CASE
                              "FORALL (i: below(length(w!1))): seq(w!1)(i) = s!1 OR seq(w!1)(i) = t!1")
                          (("1" (EXPAND "walk?")
                            (("1" (FLATTEN)
                              (("1" (HIDE -5)
                                (("1" (EXPAND "verts_in?")
                                  (("1" (EXPAND "del_verts")
                                    (("1" (EXPAND "difference")
                                      (("1" (EXPAND "member")
                                        (("1" (LEMMA "prewalk_across")
                                          (("1" (INST?)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "finseq_appl")
                                                (("1" (SKOSIMP*)
                                                  (("1" (INST -5 "i!1+1")
                                                    (("1" (ASSERT)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          (("1" (REPLACE -3)
                                                            (("1" (REPLACE -6)
                                                              (("1"
                                                                (EXPAND
                                                                 "edge?")
                                                                (("1"
                                                                  (REVEAL -3)
                                                                  (("1"
                                                                    (INST -1
                                                                     "i!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "edge?")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "del_verts")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "walk_verts_in")
                            (("2" (INST?)
                              (("1" (SPLIT -1)
                                (("1" (HIDE -4)
                                  (("1" (EXPAND "verts_in?")
                                    (("1" (EXPAND "del_verts")
                                      (("1" (EXPAND "difference")
                                        (("1" (EXPAND "member")
                                          (("1" (SKOSIMP*)
                                            (("1" (EXPAND "edge?")
                                              (("1" (ASSERT)
                                                (("1" (INST?)
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (HIDE -1 -2 -3 2 3 4 5 6)
                                (("2" (LEMMA "finite_subset[T]")
                                  (("2" (INST?)
                                    (("2" (INST -1 "vert(G!1)")
                                      (("2" (ASSERT)
                                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|from?| CONST-DECL "bool" |walks_| NIL)
    (|walk_from?| CONST-DECL "bool" |walks_| NIL)
    (|walk_verts_in| FORMULA-DECL NIL |walks_| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prewalk_across| FORMULA-DECL NIL |walks_| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|del_verts| CONST-DECL "digraph[T]" |sep_sets| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL NIL NIL
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL))
   NIL)
  (|sep_set_exists-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (CASE "s!1 = t!1 OR edge?(G!1)(s!1,t!1)")
      (("1" (INST 1 "vert(G!1)") (("1" (GROUND) NIL)))
       ("2" (INST 2 "{t: T | vert(G!1)(t)  AND t /= s!1 AND t /= t!1}")
        (("2" (PROP)
          (("1" (LEMMA "finite_subset[T]")
            (("1" (INST?)
              (("1" (INST?)
                (("1" (ASSERT) (("1" (HIDE 2 3 4) (("1" (GRIND) NIL)))))))))))
           ("2" (HIDE 4 5)
            (("2" (EXPAND "separates")
              (("2" (SKOSIMP*)
                (("2" (EXPAND "walk_from?")
                  (("2" (FLATTEN)
                    (("2" (CASE "length(w!1) = 1")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1) (("1" (ASSERT) NIL)))))
                       ("2" (CASE-REPLACE "length(w!1) = 2")
                        (("1" (ASSERT)
                          (("1" (EXPAND "walk?")
                            (("1" (FLATTEN)
                              (("1" (INST -5 "0")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "del_verts")
                                    (("1" (EXPAND "edge?")
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (ASSERT) NIL)))))))))))))))))
                         ("2"
                          (CASE
                              "FORALL (i: below(length(w!1))): seq(w!1)(i) = s!1 OR seq(w!1)(i) = t!1")
                          (("1" (EXPAND "walk?")
                            (("1" (FLATTEN)
                              (("1" (HIDE -5)
                                (("1" (EXPAND "verts_in?")
                                  (("1" (EXPAND "del_verts")
                                    (("1" (EXPAND "difference")
                                      (("1" (EXPAND "member")
                                        (("1" (LEMMA "prewalk_across")
                                          (("1" (INST?)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "finseq_appl")
                                                (("1" (SKOSIMP*)
                                                  (("1" (INST -5 "i!1+1")
                                                    (("1" (ASSERT)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          (("1" (REPLACE -3)
                                                            (("1" (REPLACE -6)
                                                              (("1"
                                                                (EXPAND
                                                                 "edge?")
                                                                (("1"
                                                                  (REVEAL -3)
                                                                  (("1"
                                                                    (INST -1
                                                                     "i!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "edge?")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "del_verts")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "finseq_appl")
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL)))))))))))))))))))))))))))))))))))))))))))))))))))
                           ("2" (LEMMA "walk_verts_in")
                            (("2" (INST?)
                              (("1" (SPLIT -1)
                                (("1" (HIDE -4)
                                  (("1" (EXPAND "verts_in?")
                                    (("1" (EXPAND "del_verts")
                                      (("1" (EXPAND "difference")
                                        (("1" (EXPAND "member")
                                          (("1" (SKOSIMP*)
                                            (("1" (INST?)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  NIL)))))))))))))))))
                                 ("2" (PROPAX) NIL)))
                               ("2" (HIDE -1 -2 -3 2 3 4 5 6)
                                (("2" (LEMMA "finite_subset[T]")
                                  (("2" (INST?)
                                    (("2" (INST -1 "vert(G!1)")
                                      (("2" (ASSERT)
                                        (("2" (HIDE 2)
                                          (("2" (GRIND)
                                            NIL))))))))))))))))))))))))))))))))))))))))
    NIL)
   NIL NIL))
 (|min_sep_set_TCC1| 0
  (|min_sep_set_TCC1-2| "" 3790101473
   ("" (SKOSIMP*) (("" (LEMMA "sep_set_exists") (("" (INST?) NIL NIL)) NIL))
    NIL)
   ((|sep_set_exists| FORMULA-DECL NIL |sep_sets| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL))
   SHOSTAK
   (|min_sep_set| ASSUMING
    "ints@abstract_min[seps(sep_sets.G, sep_sets.s, sep_sets.t), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): finite_sets[sep_sets.T].card(v)), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): booleans.TRUE)].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)"))
  (|min_sep_set_TCC1-1| |nil| 3253624237
   ("" (SKOSIMP*) (("" (LEMMA "sep_set_exists") (("" (INST?) NIL)))) NIL)
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL))
   NIL
   (|min_sep_set| ASSUMING
    "ints@abstract_min[seps(sep_sets.G, sep_sets.s, sep_sets.t), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): finite_sets[sep_sets.T].card(v)), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): booleans.TRUE)].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (|min_sep_set_edge| 0
  (|min_sep_set_edge-2| "" 3790101473
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (EXPAND "min_sep_set")
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          ((""
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("" (EXPAND "minimal?")
              (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|min_in| FORMULA-DECL NIL |abstract_min| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|)
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL))
   SHOSTAK)
  (|min_sep_set_edge-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (EXPAND "min_sep_set")
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          (("1"
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("1" (EXPAND "minimal?")
              (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL)))))))
             ("2" (LEMMA "sep_set_exists")
              (("2" (INST?)
                (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST?) NIL)))))))))))
           ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL))))))))))
    NIL)
   ((|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|min_in| FORMULA-DECL NIL |abstract_min| |ints|)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|))
   NIL))
 (|min_sep_set_card| 0
  (|min_sep_set_card-2| |nil| 3560852136
   ("" (SKOSIMP*)
    (("" (EXPAND "min_sep_set")
      ((""
        (LEMMA "min_is_min[seps(G!1, s!1, t!1),
                  (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                  (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
        (("1" (INST -1 "V!1")
          (("1" (HIDE 2)
            (("1" (GROUND)
              (("1" (EXPAND "separates")
                (("1" (FLATTEN)
                  (("1" (INST 4 "gen_seq1(G!1,s!1)")
                    (("1" (EXPAND* "walk_from?" "from?")
                      (("1" (EXPAND "gen_seq1")
                        (("1" (EXPAND "walk?")
                          (("1" (EXPAND "verts_in?")
                            (("1" (SKOSIMP*)
                              (("1" (EXPAND "del_verts")
                                (("1" (EXPAND "difference")
                                  (("1" (EXPAND "member")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "separates")
                (("2" (FLATTEN)
                  (("2" (INST 4 "gen_seq2(G!1,s!1,t!1)")
                    (("2" (EXPAND* "walk_from?" "from?")
                      (("2" (EXPAND "gen_seq2")
                        (("2" (EXPAND "del_verts")
                          (("2" (EXPAND "walk?")
                            (("2" (SPLIT 4)
                              (("1" (EXPAND "verts_in?")
                                (("1" (SKOSIMP*)
                                  (("1" (EXPAND "difference")
                                    (("1" (EXPAND "member")
                                      (("1" (GROUND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "finseq_appl")
                                  (("2" (EXPAND "edge?")
                                    (("2" (ASSERT)
                                      (("2" (SKOSIMP*)
                                        (("2" (EXPAND "in?")
                                          (("2" (GROUND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|min_is_min| FORMULA-DECL NIL |abstract_min| |ints|)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|gen_seq2| CONST-DECL "Seq(G)" |walks_| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finite_difference| APPLICATION-JUDGEMENT "finite_set[T]" |sep_sets| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|Seq| TYPE-EQ-DECL NIL |walks_| NIL)
    (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL)
    (|del_verts| CONST-DECL "digraph[T]" |sep_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|walk_from?| CONST-DECL "bool" |walks_| NIL)
    (|from?| CONST-DECL "bool" |walks_| NIL)
    (G!1 SKOLEM-CONST-DECL "digraph[T]" |sep_sets| NIL)
    (|s!1| SKOLEM-CONST-DECL "(vert(G!1))" |sep_sets| NIL)
    (|t!1| SKOLEM-CONST-DECL "(vert(G!1))" |sep_sets| NIL)
    (V!1 SKOLEM-CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (|sep_set_exists| FORMULA-DECL NIL |sep_sets| NIL)
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL))
   NIL)
  (|min_sep_set_card-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (EXPAND "min_sep_set")
      ((""
        (LEMMA "min_is_min[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
        (("1" (INST -1 "V!1")
          (("1" (BETA) (("1" (ASSERT) NIL)))
           ("2" (HIDE 2)
            (("2" (GROUND)
              (("1" (EXPAND "separates")
                (("1" (FLATTEN)
                  (("1" (INST 4 "gen_seq1(G!1,s!1)")
                    (("1" (EXPAND "walk_from?")
                      (("1" (EXPAND "gen_seq1")
                        (("1" (EXPAND "walk?")
                          (("1" (EXPAND "verts_in?")
                            (("1" (SKOSIMP*)
                              (("1" (EXPAND "del_verts")
                                (("1" (EXPAND "difference")
                                  (("1" (EXPAND "member")
                                    (("1" (PROPAX) NIL)))))))))))))))))))))))
               ("2" (EXPAND "separates")
                (("2" (FLATTEN)
                  (("2" (INST 4 "gen_seq2(G!1,s!1,t!1)")
                    (("2" (EXPAND "walk_from?")
                      (("2" (EXPAND "gen_seq2")
                        (("2" (EXPAND "del_verts")
                          (("2" (EXPAND "walk?")
                            (("2" (SPLIT 4)
                              (("1" (EXPAND "verts_in?")
                                (("1" (SKOSIMP*)
                                  (("1" (EXPAND "difference")
                                    (("1" (EXPAND "member")
                                      (("1" (GROUND) NIL)))))))))
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "finseq_appl")
                                  (("2" (EXPAND "edge?")
                                    (("2" (ASSERT)
                                      (("2" (SKOSIMP*)
                                        (("2" (EXPAND "in?")
                                          (("2" (GROUND)
                                            NIL)))))))))))))))))))))))))))))))))))
         ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL))))))))
    NIL)
   ((|in?| CONST-DECL "bool" |pairs| |structures|)
    (|min_is_min| FORMULA-DECL NIL |abstract_min| |ints|))
   NIL))
 (|min_sep_set_seps| 0
  (|min_sep_set_seps-2| "" 3790101475
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (FLATTEN)
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          ((""
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("" (ASSERT)
              (("" (EXPAND "min_sep_set") (("" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|min_in| FORMULA-DECL NIL |abstract_min| |ints|)
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|))
   SHOSTAK)
  (|min_sep_set_seps-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (FLATTEN)
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          (("1"
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("1" (ASSERT) (("1" (EXPAND "min_sep_set") (("1" (PROPAX) NIL)))))
             ("2" (SKOSIMP*) (("2" (INST?) NIL)))))
           ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL))))))))))
    NIL)
   ((|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|min_in| FORMULA-DECL NIL |abstract_min| |ints|)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|))
   NIL))
 (|min_sep_set_vert| 0
  (|min_sep_set_vert-3| "" 3790101475
   ("" (SKOSIMP*)
    ((""
      (TYPEPRED
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
               (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("" (HIDE -1 -2 -3)
        (("" (EXPAND "minimal?")
          (("" (INST -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (REWRITE "card_remove[T]")
              (("1" (ASSERT)
                (("1" (EXPAND "min_sep_set" -1) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (LEMMA "min_sep_set_edge")
                  (("1" (INST?)
                    (("1" (SPLIT -1)
                      (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (HIDE -1)
                        (("2" (EXPAND "separable?")
                          (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (GROUND)
                  (("2" (LEMMA "min_sep_set_seps")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "separates")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "remove")
                              (("2" (EXPAND "member")
                                (("2" (ASSERT)
                                  (("2" (SKOSIMP*)
                                    (("2" (INST 3 "w!1")
                                      (("2" (EXPAND* "walk_from?" "from?")
                                        (("2" (FLATTEN)
                                          (("2" (EXPAND "walk?")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "verts_in?")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (EXPAND "del_verts")
                                                          (("1"
                                                            (EXPAND
                                                             "difference")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST -3 "i!1")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "edge?")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -3)
                                                    (("2" (SKOSIMP*)
                                                      (("2" (INST?)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND
                                                             "del_verts")
                                                            (("2"
                                                              (EXPAND "edge?")
                                                              (("2"
                                                                (EXPAND
                                                                 "finseq_appl")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (INST
                                                                           -7
                                                                           "v!2")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "in?")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (SPLIT
                                                                                 -7)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (CASE-REPLACE
                                                                                   "v!1 = v!2")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -3
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     1
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (REVEAL
                                                                                       -9)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "verts_in?")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "del_verts")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "difference")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (SPLIT
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (INST?)
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST?)
                                                                                                    (("2"
                                                                                                      (FLATTEN)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL NIL NIL NIL
    (|remove| CONST-DECL "set" |sets| NIL) NIL
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|min_sep_set_edge| FORMULA-DECL NIL |sep_sets| NIL)
    (|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|del_verts| CONST-DECL "digraph[T]" |sep_sets| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|walk_from?| CONST-DECL "bool" |walks_| NIL)
    (|from?| CONST-DECL "bool" |walks_| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|min_sep_set_seps| FORMULA-DECL NIL |sep_sets| NIL))
   SHOSTAK)
  (|min_sep_set_vert-2| |nil| 3560852169
   ("" (SKOSIMP*)
    ((""
      (TYPEPRED
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
               (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("1" (HIDE -1 -2 -3)
        (("1" (EXPAND "minimal?")
          (("1" (INST -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (REWRITE "card_remove[T]")
              (("1" (ASSERT)
                (("1" (EXPAND "min_sep_set" -1) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (LEMMA "min_sep_set_edge")
                  (("1" (INST?)
                    (("1" (SPLIT -1)
                      (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (HIDE -1)
                        (("2" (EXPAND "separable?")
                          (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (GROUND)
                  (("2" (LEMMA "min_sep_set_seps")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "separates")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "remove")
                              (("2" (EXPAND "member")
                                (("2" (ASSERT)
                                  (("2" (SKOSIMP*)
                                    (("2" (INST 3 "w!1")
                                      (("2" (EXPAND* "walk_from?" "from?")
                                        (("2" (FLATTEN)
                                          (("2" (EXPAND "walk?")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "verts_in?")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (EXPAND "del_verts")
                                                          (("1"
                                                            (EXPAND
                                                             "difference")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST -3 "i!1")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "edge?")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -3)
                                                    (("2" (SKOSIMP*)
                                                      (("2" (INST?)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND
                                                             "del_verts")
                                                            (("2"
                                                              (EXPAND "edge?")
                                                              (("2"
                                                                (EXPAND
                                                                 "finseq_appl")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (INST
                                                                           -7
                                                                           "v!2")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "in?")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (SPLIT
                                                                                 -7)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (CASE-REPLACE
                                                                                   "v!1 = v!2")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -3
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     1
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (REVEAL
                                                                                       -9)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "verts_in?")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "del_verts")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "difference")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (SPLIT
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (INST?)
                                                                                                    (("1"
                                                                                                      (FLATTEN)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST?)
                                                                                                    (("2"
                                                                                                      (FLATTEN)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|walk_from?| CONST-DECL "bool" |walks_| NIL)
    (|from?| CONST-DECL "bool" |walks_| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL))
   NIL)
  (|min_sep_set_vert-1| |nil| 3253624237
   ("" (SKOSIMP*)
    ((""
      (TYPEPRED
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
             (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("1" (HIDE -1 -2 -3)
        (("1" (EXPAND "minimal?")
          (("1" (INST -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (REWRITE "card_remove[T]")
              (("1" (ASSERT)
                (("1" (EXPAND "min_sep_set" -1)
                  (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (LEMMA "min_sep_set_edge")
                  (("1" (INST?)
                    (("1" (SPLIT -1)
                      (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (HIDE -1)
                        (("2" (EXPAND "separable?")
                          (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (GROUND)
                  (("2" (LEMMA "min_sep_set_seps")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "separates")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "remove")
                              (("2" (EXPAND "member")
                                (("2" (ASSERT)
                                  (("2" (SKOSIMP*)
                                    (("2" (INST 3 "w!1")
                                      (("2" (EXPAND "walk_from?")
                                        (("2" (FLATTEN)
                                          (("2" (EXPAND "walk?")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "verts_in?")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (EXPAND "del_verts")
                                                          (("1"
                                                            (EXPAND
                                                             "difference")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST -3 "i!1")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -3)
                                                    (("2" (SKOSIMP*)
                                                      (("2" (INST?)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND
                                                             "del_verts")
                                                            (("2"
                                                              (EXPAND "edge?")
                                                              (("2"
                                                                (EXPAND
                                                                 "finseq_appl")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (SKOSIMP*)
                                                                      (("2"
                                                                        (INST
                                                                         -7
                                                                         "v!2")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "in?")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (SPLIT
                                                                               -7)
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (CASE-REPLACE
                                                                                 "v!1 = v!2")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1
                                                                                   -3
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   1
                                                                                   2
                                                                                   3
                                                                                   4
                                                                                   5)
                                                                                  (("1"
                                                                                    (REVEAL
                                                                                     -9)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "verts_in?")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "del_verts")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "difference")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "member")
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               -3)
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (FLATTEN)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (INST?)
                                                                                                (("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|in?| CONST-DECL "bool" |pairs| |structures|))
   NIL))
 (|ends_not_in_min_sep_set| 0
  (|ends_not_in_min_sep_set-2| "" 3790101476
   ("" (SKOSIMP*)
    (("" (LEMMA "min_sep_set_seps")
      (("" (INST?)
        (("" (ASSERT)
          (("" (EXPAND "separates")
            (("" (FLATTEN) (("" (HIDE 3) (("" (GROUND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|min_sep_set_seps| FORMULA-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL))
   SHOSTAK)
  (|ends_not_in_min_sep_set-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (LEMMA "min_sep_set_seps")
      (("" (INST?)
        (("" (ASSERT)
          (("" (EXPAND "separates")
            (("" (FLATTEN) (("" (HIDE 3) (("" (GROUND) NIL))))))))))))))
    NIL)
   ((|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   NIL))
 (|walk?_del_verts_not| 0
  (|walk?_del_verts_not-2| "" 3790101476
   ("" (SKOSIMP*)
    (("" (EXPAND "walk?")
      (("" (SPLIT +)
        (("1" (FLATTEN)
          (("1" (HIDE -2)
            (("1" (EXPAND "verts_in?")
              (("1" (SKOSIMP*)
                (("1" (EXPAND "del_verts")
                  (("1" (EXPAND "intersection")
                    (("1" (EXPAND "empty?")
                      (("1" (EXPAND "difference")
                        (("1" (EXPAND "member")
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "verts_of")
                                    (("1" (INST?)
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (EXPAND "edge?")
            (("2" (INST?)
              (("2" (ASSERT)
                (("2" (ASSERT)
                  (("2" (EXPAND "del_verts")
                    (("2" (EXPAND "empty?")
                      (("2" (EXPAND "intersection")
                        (("2" (EXPAND "member")
                          (("2" (SKOSIMP*)
                            (("2" (INST?)
                              (("2" (EXPAND "in?")
                                (("2" (EXPAND "verts_of")
                                  (("2" (ASSERT)
                                    (("2" (SPLIT -3)
                                      (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (INST?) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|walk?| CONST-DECL "bool" |walks_| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|verts_of| CONST-DECL "finite_set[T]" |walks_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|del_verts| CONST-DECL "digraph[T]" |sep_sets| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL))
   SHOSTAK)
  (|walk?_del_verts_not-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (EXPAND "walk?")
      (("" (SPLIT +)
        (("1" (FLATTEN)
          (("1" (HIDE -2)
            (("1" (EXPAND "verts_in?")
              (("1" (SKOSIMP*)
                (("1" (EXPAND "del_verts")
                  (("1" (EXPAND "intersection")
                    (("1" (EXPAND "empty?")
                      (("1" (EXPAND "difference")
                        (("1" (EXPAND "member")
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "verts_of")
                                    (("1" (INST?)
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (PROPAX)
                                          NIL)))))))))))))))))))))))))))))))))
         ("2" (SKOSIMP*)
          (("2" (EXPAND "edge?")
            (("2" (INST?)
              (("2" (ASSERT)
                (("2" (ASSERT)
                  (("2" (EXPAND "del_verts")
                    (("2" (EXPAND "empty?")
                      (("2" (EXPAND "intersection")
                        (("2" (EXPAND "member")
                          (("2" (SKOSIMP*)
                            (("2" (INST?)
                              (("2" (EXPAND "in?")
                                (("2" (EXPAND "verts_of")
                                  (("2" (ASSERT)
                                    (("2" (SPLIT -3)
                                      (("1" (INST?) (("1" (ASSERT) NIL)))
                                       ("2" (INST?)
                                        (("2" (ASSERT)
                                          NIL))))))))))))))))))))))))))))))))))))))
    NIL)
   ((|walk?| CONST-DECL "bool" |walks_| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|verts_of| CONST-DECL "finite_set[T]" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]"
     |digraphs_imp| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp|
     NIL)
    (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   NIL))
 (|adj_verts_TCC1| 0
  (|adj_verts_TCC1-2| "" 3790101477
   ("" (SKOSIMP*)
    (("" (LEMMA "finite_subset[T]")
      (("" (INST?)
        (("" (INST -1 "vert(G!1)")
          (("" (ASSERT)
            (("" (HIDE 2) (("" (TYPEPRED "G!1") (("" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|pair| TYPE-EQ-DECL NIL |pairs| |structures|)
    (|incident_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|adj_verts| SUBTYPE
    "{v: sep_sets.T | EXISTS (e: digraphs_utils[sep_sets.T].edgetype): booleans.AND(digraph_deg[sep_sets.T].incident_edges(sep_sets.s, sep_sets.G)(e), booleans.AND(pairs[sep_sets.T].in?(v, e), (booleans.NOT)(v = sep_sets.s)))}"
    "finite_set[T]"))
  (|adj_verts_TCC1-1| |nil| 3253624237
   ("" (SKOSIMP*)
    (("" (LEMMA "finite_subset[T]")
      (("" (INST?)
        (("" (INST -1 "vert(G!1)")
          (("" (ASSERT)
            (("" (HIDE 2) (("" (TYPEPRED "G!1") (("" (GRIND) NIL))))))))))))))
    NIL)
   ((|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|in?| CONST-DECL "bool" |pairs| |structures|)
    (|pair| TYPE-EQ-DECL NIL |pairs| |structures|)
    (|incident_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL))
   NIL
   (|adj_verts| SUBTYPE
    "{v: sep_sets.T | EXISTS (e: digraphs_utils[sep_sets.T].edgetype): booleans.AND(digraph_deg[sep_sets.T].incident_edges(sep_sets.s, sep_sets.G)(e), booleans.AND(pairs[sep_sets.T].in?(v, e), (booleans.NOT)(v = sep_sets.s)))}"
    "finite_set[T]"))))

