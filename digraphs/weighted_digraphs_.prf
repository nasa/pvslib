(|weighted_digraphs_| (|IMP_weighted_digraphs_abs_TCC1| 0 (|IMP_weighted_digraphs_abs_TCC1-1| |nil| 3658163726 ("" (USE "concretedigraph_implements_abstractdigraph") NIL NIL) ((|concretedigraph_implements_abstractdigraph| FORMULA-DECL NIL |weighted_digraphs_| NIL)) NIL (|IMP_weighted_digraphs_abs| ASSUMING "weighted_digraphs_abs[weighted_digraphs_.T, weighted_digraphs_.Weight, weighted_digraphs_.add_w, weighted_digraphs_.zero_w, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make, weighted_digraphs_.wdg, weighted_digraphs_.dg, weighted_digraphs_.get_wgt, weighted_digraphs_.WeightsMap, weighted_digraphs_.weighted_edge?, weighted_digraphs_.get_weight, weighted_digraphs_.weight_map?, weighted_digraphs_.make_wdg].weighted_digraphs_abs" "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[weighted_digraphs_abs.T, weighted_digraphs_abs.ConcreteDigraph, weighted_digraphs_abs.vert, weighted_digraphs_abs.edges, weighted_digraphs_abs.size, weighted_digraphs_abs.make].correct_implementation"))) (|wgt_aux_TCC1| 0 (|wgt_aux_TCC1-1| |nil| 3560186128 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|wgt_aux| SUBTYPE "(number_fields.-)(weighted_digraphs_.j, 1)" "below(length(weighted_digraphs_.w))"))) (|wgt_aux_TCC2| 0 (|wgt_aux_TCC2-1| |nil| 3560186128 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|wgt_aux| TERMINATION "weighted_digraphs_.wgt_aux(weighted_digraphs_.G, weighted_digraphs_.w)(weighted_digraphs_.i, (number_fields.-)(weighted_digraphs_.j, 1))" "NIL"))) (|wgt_aux_TCC3| 0 (|wgt_aux_TCC3-1| |nil| 3560186128 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|wgt_aux| SUBTYPE "(finite_sequences[weighted_digraphs_.T].finseq_appl(weighted_digraphs_.w)((number_fields.-)(weighted_digraphs_.j, 1)), finite_sequences[weighted_digraphs_.T].finseq_appl(weighted_digraphs_.w)(weighted_digraphs_.j))" "(weighted_digraphs_.edges(weighted_digraphs_.dg(weighted_digraphs_.G)))"))) (|wgt_walk_TCC1| 0 (|wgt_walk_TCC1-1| |nil| 3560090441 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|wgt_walk| SUBTYPE "(number_fields.-)(length(weighted_digraphs_.w), 1)" "below(length(weighted_digraphs_.w))"))) (|wgt_aux_shift_walk| 0 (|wgt_aux_shift_walk-1| |nil| 3560346969 ("" (SKOSIMP) (("" (AUTO-REWRITE "finseq_appl") (("" (CASE "j1!1 <= i1!1 OR j2!1 <= i2!1") (("1" (SPLIT) (("1" (EXPAND "wgt_aux") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE 2) (("1" (EXPAND "^" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND* "^" "min" "empty_seq") NIL NIL) ("2" (EXPAND* "^" "min" "empty_seq") NIL NIL) ("3" (EXPAND* "^" "min") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "wgt_aux") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (HIDE 2) (("2" (EXPAND "^" -2 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND* "^" "min" "empty_seq") NIL NIL) ("2" (EXPAND* "^" "min" "empty_seq") NIL NIL) ("3" (EXPAND* "^" "min") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "^" -1) (("2" (ASSERT) (("2" (EXPAND "min") (("2" (FLATTEN) (("2" (CASE "FORALL (k:nat): i1!1 + k <= j1!1 IMPLIES
                                          wgt_aux(G!1, w1!1)(i1!1, i1!1 + k) =
                                          wgt_aux(G!1, w2!1)(i2!1, i2!1 + k)") (("1" (INST -1 "j1!1 - i1!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 4) (("2" (INDUCT "k") (("1" (ASSERT) (("1" (EXPAND "wgt_aux") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "wgt_aux" 1) (("2" (ASSERT) (("2" (REPLACES -1) (("2" (CASE "get_wgt(G!1,(w1!1`seq(i1!1 + j), w1!1`seq(1 + i1!1 + j))) =
                           get_wgt(G!1,(w2!1`seq(i2!1 + j), w2!1`seq(1 + i2!1 + j)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY -3) (("1" (INST-CP -1 "j") (("1" (INST -1 "j + 1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|j| SKOLEM-CONST-DECL "nat" |weighted_digraphs_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|get_wgt| FORMAL-CONST-DECL "[W: wdg, (edges(dg(W))) -> Weight]" |weighted_digraphs_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|i2!1| SKOLEM-CONST-DECL "nat" |weighted_digraphs_| NIL) (|w2!1| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G!1))" |weighted_digraphs_| NIL) (|i1!1| SKOLEM-CONST-DECL "nat" |weighted_digraphs_| NIL) (G!1 SKOLEM-CONST-DECL "wdg" |weighted_digraphs_| NIL) (|w1!1| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G!1))" |weighted_digraphs_| NIL) (|j1!1| SKOLEM-CONST-DECL "below(length(w1!1))" |weighted_digraphs_| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|wgt_aux_first_TCC1| 0 (|wgt_aux_first_TCC1-1| |nil| 3560676770 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|wgt_aux_first| SUBTYPE "weighted_digraphs_.i" "below[length(w)]"))) (|wgt_aux_first_TCC2| 0 (|wgt_aux_first_TCC2-1| |nil| 3579285665 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|wgt_aux_first| SUBTYPE "(number_fields.+)(weighted_digraphs_.i, 1)" "below[length(w)]"))) (|wgt_aux_first_TCC3| 0 (|wgt_aux_first_TCC3-1| |nil| 3579285665 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|wgt_aux_first| SUBTYPE "(finite_sequences[weighted_digraphs_.T].finseq_appl(weighted_digraphs_.w)(weighted_digraphs_.i), finite_sequences[weighted_digraphs_.T].finseq_appl(weighted_digraphs_.w)((number_fields.+)(weighted_digraphs_.i, 1)))" "(weighted_digraphs_.edges(weighted_digraphs_.dg(weighted_digraphs_.G)))"))) (|wgt_aux_first| 0 (|wgt_aux_first-1| |nil| 3560677429 ("" (AUTO-REWRITE "finseq_appl") (("" (INDUCT "j") (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "i!1 = j!1") (("1" (HIDE -2) (("1" (EXPAND "wgt_aux") (("1" (ASSERT) (("1" (EXPAND "wgt_aux") (("1" (REPLACES -1) (("1" (HIDE -) (("1" (TYPEPRED "zero_w") (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "G!1" "w!1" "i!1") (("2" (ASSERT) (("2" (EXPAND "wgt_aux" 2) (("2" (ASSERT) (("2" (TYPEPRED "add_w") (("2" (EXPAND "associative?") (("2" (INST-CP -1 "get_wgt(G!1,(w!1`seq(i!1), w!1`seq(1 + i!1)))" "wgt_aux(G!1, w!1)(1 + i!1, j!1)" "get_wgt(G!1,(w!1`seq(j!1), w!1`seq(1 + j!1)))") (("2" (REPLACE -2 2 RL) (("2" (REPLACE -3 2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED "w") (("3" (EXPAND* "walk?") (("3" (FLATTEN) (("3" (INST -3 "i") (("3" (ASSERT) (("3" (EXPAND "edge?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|add_w| FORMAL-CONST-DECL "{f: [[Weight, Weight] -> Weight] | associative?(f)}" |weighted_digraphs_| NIL) (|get_wgt| FORMAL-CONST-DECL "[W: wdg, (edges(dg(W))) -> Weight]" |weighted_digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|zero_w| FORMAL-CONST-DECL "{zero: Weight | identity?(add_w)(zero)}" |weighted_digraphs_| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|wgt_aux_split_TCC1| 0 (|wgt_aux_split_TCC1-1| |nil| 3560644096 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|wgt_aux_split| SUBTYPE "weighted_digraphs_.n" "below(length(weighted_digraphs_.w))"))) (|wgt_aux_split| 0 (|wgt_aux_split-2| |nil| 3660740237 ("" (AUTO-REWRITE "finseq_appl") (("" (INDUCT "n") (("1" (SKEEP) (("1" (CASE "i = 0") (("1" (REPLACE -1) (("1" (EXPAND "wgt_aux" 1 2) (("1" (TYPEPRED "zero_w") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "G!1" "w!1" "i!1" "j!2") (("2" (ASSERT) (("2" (CASE "i!1 = 1 + j!1") (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND "wgt_aux" 1 2) (("1" (TYPEPRED "zero_w") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "wgt_aux" 2 2) (("2" (LEMMA "wgt_aux_first") (("2" (INST -1 "G!1" "w!1" "j!1" "j!2") (("2" (ASSERT) (("2" (REPLACE -1 -2) (("2" (HIDE -1) (("2" (TYPEPRED "add_w") (("2" (EXPAND "associative?") (("2" (INST -1 "wgt_aux(G!1, w!1)(i!1, j!1)" "get_wgt(G!1,(w!1`seq(j!1), w!1`seq(1 + j!1)))" "wgt_aux(G!1, w!1)(1 + j!1, j!2)") (("2" (REPLACE -1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|add_w| FORMAL-CONST-DECL "{f: [[Weight, Weight] -> Weight] | associative?(f)}" |weighted_digraphs_| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|zero_w| FORMAL-CONST-DECL "{zero: Weight | identity?(add_w)(zero)}" |weighted_digraphs_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|get_wgt| FORMAL-CONST-DECL "[W: wdg, (edges(dg(W))) -> Weight]" |weighted_digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|wgt_aux_first| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL) (|wgt_aux_split-1| |nil| 3560644097 ("" (AUTO-REWRITE "finseq_appl") (("" (INDUCT "n") (("1" (SKEEP) (("1" (CASE "i = 0") (("1" (REPLACE -1) (("1" (EXPAND "wgt_aux" 1 2) (("1" (TYPEPRED "0") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "G!1" "w!1" "i!1" "j!2") (("2" (ASSERT) (("2" (CASE "i!1 = 1 + j!1") (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND "wgt_aux" 1 2) (("1" (TYPEPRED "0") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "wgt_aux" 2 2) (("2" (LEMMA "wgt_aux_first") (("2" (INST -1 "G!1" "w!1" "j!1" "j!2") (("2" (ASSERT) (("2" (REPLACE -1 -2) (("2" (HIDE -1) (("2" (TYPEPRED "+") (("2" (EXPAND "associative?") (("2" (INST -1 "wgt_aux(G!1, w!1)(i!1, j!1)" "get_wgt(G!1,(w!1`seq(j!1), w!1`seq(1 + j!1)))" "wgt_aux(G!1, w!1)(1 + j!1, j!2)") (("2" (REPLACE -1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|wgt_aux_sub_walk_TCC1| 0 (|wgt_aux_sub_walk_TCC1-1| |nil| 3560186371 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|wgt_aux_sub_walk| SUBTYPE "(number_fields.-)(weighted_digraphs_.j, weighted_digraphs_.i)" "below(length(finite_sequences[weighted_digraphs_.T].^(weighted_digraphs_.w, (weighted_digraphs_.i, weighted_digraphs_.j))))"))) (|wgt_aux_sub_walk_TCC2| 0 (|wgt_aux_sub_walk_TCC2-1| |nil| 3560186371 ("" (SKEEP) (("" (EXPAND "^" 1 1) (("" (ASSERT) (("" (EXPAND "min") (("" (REWRITE "walk?_caret") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|wgt_aux_sub_walk| SUBTYPE "finite_sequences[weighted_digraphs_.T].^(weighted_digraphs_.w, (weighted_digraphs_.i, weighted_digraphs_.j))" "Walk[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make](weighted_digraphs_.dg(weighted_digraphs_.G))"))) (|wgt_aux_sub_walk| 0 (|wgt_aux_sub_walk-1| |nil| 3560186373 ("" (AUTO-REWRITE "finseq_appl") (("" (INDUCT "j") (("1" (SKEEP) (("1" (EXPAND "wgt_aux") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "i!1 = j!1") (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND* "wgt_aux" "wgt_aux") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "G!1" "w!1" "i!1") (("2" (ASSERT) (("2" (EXPAND "wgt_aux" 2) (("2" (ASSERT) (("2" (EXPAND "^" 2 (2 3)) (("2" (REPLACE -1 2) (("2" (HIDE -1) (("2" (CASE "wgt_aux(G!1, w!1 ^ (i!1, j!1))(0, j!1 - i!1) =
            	        wgt_aux(G!1, w!1 ^ (i!1, 1 + j!1))(0, j!1 - i!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "wgt_aux_shift_walk") (("2" (INST -1 "G!1" "0" "0" "w!1 ^ (i!1, j!1)" "w!1 ^ (i!1, 1 + j!1)" "j!1 - i!1" "j!1 - i!1") (("2" (ASSERT) (("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND* "^" "min") NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (EXPAND* "^" "min") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (REWRITE "walk?_caret") (("3" (EXPAND* "^" "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (EXPAND* "^" "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|wgt_aux_shift_walk| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL)) SHOSTAK)) (|wgt_walk_to_aux| 0 (|wgt_walk_to_aux-2| "" 3790100666 ("" (SKEEP) (("" (EXPAND "wgt_walk") (("" (CASE "j = i") (("1" (EXPAND "^" 1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "j < i") (("1" (EXPAND "^" 2 2) (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "^" 3 2) (("2" (ASSERT) (("2" (EXPAND "min") (("2" (LEMMA "wgt_aux_sub_walk") (("2" (INST -1 "G" "w" "i" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| NIL) (< CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|wgt_aux_sub_walk| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|wgt_walk_to_aux-1| |nil| 3560642270 ("" (SKEEP) (("" (EXPAND "wgt_walk") (("" (CASE "j = i") (("1" (EXPAND "^" 1 2) (("1" (ASSERT) (("1" (EXPAND "min") (("1" (EXPAND "wgt_aux") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j < i") (("1" (EXPAND "^" 2 2) (("1" (EXPAND "min") (("1" (ASSERT) (("1" (EXPAND "empty_seq") (("1" (EXPAND "wgt_aux") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 3 2) (("2" (ASSERT) (("2" (EXPAND "min") (("2" (LEMMA "wgt_aux_sub_walk") (("2" (INST -1 "G" "w" "i" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|wgt_walk_decomposed_TCC1| 0 (|wgt_walk_decomposed_TCC1-1| |nil| 3560642802 ("" (SKEEP) (("" (EXPAND "^" 1 1) (("" (EXPAND "min") (("" (ASSERT) (("" (REWRITE "walk?_caret") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|wgt_walk_decomposed| SUBTYPE "finite_sequences[weighted_digraphs_.T].^(weighted_digraphs_.w, (0, weighted_digraphs_.j))" "Walk[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make](weighted_digraphs_.dg(weighted_digraphs_.G))"))) (|wgt_walk_decomposed_TCC2| 0 (|wgt_walk_decomposed_TCC2-1| |nil| 3560642802 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL)) NIL (|wgt_walk_decomposed| SUBTYPE "(number_fields.-)(length(weighted_digraphs_.w), 1)" "nat"))) (|wgt_walk_decomposed_TCC3| 0 (|wgt_walk_decomposed_TCC3-1| |nil| 3560642802 ("" (SKEEP) (("" (EXPAND "^" 1 1) (("" (ASSERT) (("" (EXPAND "min") (("" (REWRITE "walk?_caret") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|wgt_walk_decomposed| SUBTYPE "finite_sequences[weighted_digraphs_.T].^(weighted_digraphs_.w, (weighted_digraphs_.j, (number_fields.-)(length(weighted_digraphs_.w), 1)))" "Walk[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make](weighted_digraphs_.dg(weighted_digraphs_.G))"))) (|wgt_walk_decomposed| 0 (|wgt_walk_decomposed-2| |nil| 3660740279 ("" (SKEEP) (("" (CASE-REPLACE "length(w) = 1") (("1" (CASE-REPLACE "j = 0") (("1" (ASSERT) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "^" 1 (2 4)) (("1" (EXPAND "min") (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "wgt_aux") (("1" (TYPEPRED "zero_w") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "wgt_walk_to_aux") (("1" (REWRITE "wgt_walk_to_aux") (("1" (EXPAND "wgt_walk") (("1" (REWRITE "wgt_aux_split") NIL NIL)) NIL) ("2" (CASE-REPLACE "j = length(w) - 1") (("1" (HIDE - 1 2) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "^" 1 2) (("1" (EXPAND "min") (("1" (EXPAND "wgt_aux" 1 3) (("1" (TYPEPRED "zero_w") (("1" (EXPAND "identity?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "j = 0") (("1" (HIDE - 1 2) (("1" (EXPAND "wgt_walk" 1 2) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "min") (("1" (EXPAND "wgt_aux") (("1" (TYPEPRED "zero_w") (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (HIDE -1) (("1" (EXPAND "wgt_walk") (("1" (REWRITE "wgt_aux_sub_walk") (("1" (EXPAND "^" 1 3) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|add_w| FORMAL-CONST-DECL "{f: [[Weight, Weight] -> Weight] | associative?(f)}" |weighted_digraphs_| NIL) (|zero_w| FORMAL-CONST-DECL "{zero: Weight | identity?(add_w)(zero)}" |weighted_digraphs_| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|wgt_aux_sub_walk| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|wgt_aux_split| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|wgt_walk_to_aux| FORMULA-DECL NIL |weighted_digraphs_| NIL)) NIL) (|wgt_walk_decomposed-1| |nil| 3560642810 ("" (SKEEP) (("" (CASE-REPLACE "length(w) = 1") (("1" (CASE-REPLACE "j = 0") (("1" (ASSERT) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "^" 1 (2 4)) (("1" (EXPAND "min") (("1" (REPLACE -2) (("1" (ASSERT) (("1" (EXPAND "wgt_aux") (("1" (TYPEPRED "0") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "wgt_walk_to_aux") (("1" (REWRITE "wgt_walk_to_aux") (("1" (EXPAND "wgt_walk") (("1" (REWRITE "wgt_aux_split") NIL NIL)) NIL) ("2" (CASE-REPLACE "j = length(w) - 1") (("1" (HIDE - 1 2) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "^" 1 2) (("1" (EXPAND "min") (("1" (EXPAND "wgt_aux" 1 3) (("1" (TYPEPRED "0") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "j = 0") (("1" (HIDE - 1 2) (("1" (EXPAND "wgt_walk" 1 2) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "min") (("1" (EXPAND "wgt_aux") (("1" (TYPEPRED "0") (("1" (HIDE -2) (("1" (EXPAND "identity?") (("1" (INST?) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (HIDE -1) (("1" (EXPAND "wgt_walk") (("1" (REWRITE "wgt_aux_sub_walk") (("1" (EXPAND "^" 1 3) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|wgt_walk_edge_TCC1| 0 (|wgt_walk_edge_TCC1-1| |nil| 3582035697 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|wgt_walk_edge| SUBTYPE "0" "below[length(w)]"))) (|wgt_walk_edge_TCC2| 0 (|wgt_walk_edge_TCC2-1| |nil| 3582035697 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL)) NIL (|wgt_walk_edge| SUBTYPE "1" "below[length(w)]"))) (|wgt_walk_edge_TCC3| 0 (|wgt_walk_edge_TCC3-1| |nil| 3582035697 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|wgt_walk_edge| SUBTYPE "(finite_sequences[weighted_digraphs_.T].finseq_appl(weighted_digraphs_.w)(0), finite_sequences[weighted_digraphs_.T].finseq_appl(weighted_digraphs_.w)(1))" "(weighted_digraphs_.edges(weighted_digraphs_.dg(weighted_digraphs_.G)))"))) (|wgt_walk_edge| 0 (|wgt_walk_edge-2| |nil| 3660740316 ("" (SKOSIMP) (("" (EXPAND "finseq_appl") (("" (EXPAND "wgt_walk") (("" (REPLACE -1) (("" (ASSERT) (("" (EXPAND "wgt_aux") (("" (EXPAND "finseq_appl") (("" (EXPAND "wgt_aux") (("" (TYPEPRED "zero_w") (("" (EXPAND "identity?") (("" (ASSERT) (("" (INST -1 "get_wgt(G!1,(w!1`seq(0), w!1`seq(1)))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|get_wgt| FORMAL-CONST-DECL "[W: wdg, (edges(dg(W))) -> Weight]" |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|zero_w| FORMAL-CONST-DECL "{zero: Weight | identity?(add_w)(zero)}" |weighted_digraphs_| NIL) (|add_w| FORMAL-CONST-DECL "{f: [[Weight, Weight] -> Weight] | associative?(f)}" |weighted_digraphs_| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| NIL)) NIL) (|wgt_walk_edge-1| |nil| 3582035801 ("" (SKOSIMP) (("" (EXPAND "finseq_appl") (("" (EXPAND "wgt_walk") (("" (REPLACE -1) (("" (ASSERT) (("" (EXPAND "wgt_aux") (("" (EXPAND "finseq_appl") (("" (EXPAND "wgt_aux") (("" (TYPEPRED "0") (("" (EXPAND "identity?") (("" (ASSERT) (("" (INST -1 "get_wgt(G!1,(w!1`seq(0), w!1`seq(1)))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|wgt_comp_rest_TCC1| 0 (|wgt_comp_rest_TCC1-1| |nil| 3578753265 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|wgt_comp_rest| SUBTYPE "weighted_digraphs_.w1" "not_empty_seq[T]"))) (|wgt_comp_rest_TCC2| 0 (|wgt_comp_rest_TCC2-1| |nil| 3578753265 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|wgt_comp_rest| SUBTYPE "weighted_digraphs_.w2" "not_empty_seq[T]"))) (|wgt_comp_rest_TCC3| 0 (|wgt_comp_rest_TCC3-1| |nil| 3578753265 ("" (SKOSIMP) (("" (SPLIT) (("1" (EXPAND "o") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "last") (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "rest") (("2" (REWRITE "walk_o") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|walk_o| FORMULA-DECL NIL |walks_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|)) NIL (|wgt_comp_rest| SUBTYPE "finite_sequences[weighted_digraphs_.T].o(weighted_digraphs_.w1, seq_extras[weighted_digraphs_.T].rest(weighted_digraphs_.w2))" "Walk[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make](weighted_digraphs_.dg(weighted_digraphs_.G))"))) (|wgt_comp_rest| 0 (|wgt_comp_rest-2| |nil| 3660740352 ("" (SKEEP) (("" (CASE "length(w2) = 1") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (ASSERT) (("1" (REWRITE "seq_o_empty") (("1" (EXPAND "wgt_walk" 1 3) (("1" (EXPAND "wgt_aux") (("1" (TYPEPRED "zero_w") (("1" (EXPAND "identity?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "wgt_walk_decomposed") (("2" (INST -1 "G" "length(w1) - 1" "w1 o rest(w2)") (("2" (SPLIT -1) (("1" (CASE-REPLACE "(w1 o rest(w2)) ^ (0, length(w1) - 1) = w1") (("1" (CASE-REPLACE "(w1 o rest(w2)) ^
                          (length(w1) - 1, length(w1 o rest(w2)) - 1) = w2") (("1" (HIDE -1 -2 3) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2 3) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 3) (("3" (LEMMA "walk_o") (("3" (INST -1 "dg(G)" "w1" "w2") (("3" (TYPEPRED "w1" "w2") (("3" (ASSERT) (("3" (EXPAND* "last" "first") (("3" (EXPAND "finseq_appl") (("3" (ASSERT) (("3" (EXPAND "rest" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|seq_o_empty| FORMULA-DECL NIL |seq_extras| |structures|) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|add_w| FORMAL-CONST-DECL "{f: [[Weight, Weight] -> Weight] | associative?(f)}" |weighted_digraphs_| NIL) (|zero_w| FORMAL-CONST-DECL "{zero: Weight | identity?(add_w)(zero)}" |weighted_digraphs_| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|walk_o| FORMULA-DECL NIL |walks_| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|w2| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))" |weighted_digraphs_| NIL) (|w1| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))" |weighted_digraphs_| NIL) (G SKOLEM-CONST-DECL "wdg" |weighted_digraphs_| NIL) (|wgt_walk_decomposed| FORMULA-DECL NIL |weighted_digraphs_| NIL)) NIL) (|wgt_comp_rest-1| |nil| 3578753319 ("" (SKEEP) (("" (CASE "length(w2) = 1") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (ASSERT) (("1" (REWRITE "seq_o_empty") (("1" (EXPAND "wgt_walk" 1 3) (("1" (EXPAND "wgt_aux") (("1" (TYPEPRED "0") (("1" (EXPAND "identity?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "wgt_walk_decomposed") (("2" (INST -1 "G" "length(w1) - 1" "w1 o rest(w2)") (("2" (SPLIT -1) (("1" (CASE-REPLACE "(w1 o rest(w2)) ^ (0, length(w1) - 1) = w1") (("1" (CASE-REPLACE "(w1 o rest(w2)) ^
                  (length(w1) - 1, length(w1 o rest(w2)) - 1) = w2") (("1" (HIDE -1 -2 3) (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2 3) (("2" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 3) (("3" (LEMMA "walk_o") (("3" (INST -1 "dg(G)" "w1" "w2") (("3" (TYPEPRED "w1" "w2") (("3" (ASSERT) (("3" (EXPAND* "last" "first") (("3" (EXPAND "finseq_appl") (("3" (ASSERT) (("3" (EXPAND "rest" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|wgt_comp_TCC1| 0 (|wgt_comp_TCC1-1| |nil| 3660503996 ("" (SKEEP) (("" (USE "walk_o_edge") (("" (ASSERT) (("" (EXPAND "finseq_appl") (("" (SPLIT -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|walk_o_edge| FORMULA-DECL NIL |walks_| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|wgt_comp| SUBTYPE "finite_sequences[weighted_digraphs_.T].o(weighted_digraphs_.W1, weighted_digraphs_.W2)" "Walk[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make](weighted_digraphs_.dg(weighted_digraphs_.G))"))) (|wgt_comp_TCC2| 0 (|wgt_comp_TCC2-1| |nil| 3660503996 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|wgt_comp| SUBTYPE "seq_extras[weighted_digraphs_.T].last(weighted_digraphs_.W1)" "(weighted_digraphs_.vert(weighted_digraphs_.dg(weighted_digraphs_.G)))"))) (|wgt_comp_TCC3| 0 (|wgt_comp_TCC3-1| |nil| 3660503996 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|wgt_comp| SUBTYPE "seq_extras[weighted_digraphs_.T].first(weighted_digraphs_.W2)" "(weighted_digraphs_.vert(weighted_digraphs_.dg(weighted_digraphs_.G)))"))) (|wgt_comp_TCC4| 0 (|wgt_comp_TCC4-1| |nil| 3660503996 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|wgt_comp| SUBTYPE "walks_[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make].gen_seq2(weighted_digraphs_.dg(weighted_digraphs_.G), seq_extras[weighted_digraphs_.T].last(weighted_digraphs_.W1), seq_extras[weighted_digraphs_.T].first(weighted_digraphs_.W2))" "Walk[weighted_digraphs_.T, weighted_digraphs_.ConcreteDigraph, weighted_digraphs_.vert, weighted_digraphs_.edges, weighted_digraphs_.size, weighted_digraphs_.make](weighted_digraphs_.dg(weighted_digraphs_.G))"))) (|wgt_comp| 0 (|wgt_comp-3| "" 3884655995 ("" (SKEEP) (("" (LEMMA "wgt_comp_rest") (("" (INST - "G" "W1 o gen_seq1(dg(G), first(W2))" "W2") (("1" (EXPAND "last" -1) (("1" (EXPAND "o" -1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "o" -1 1) (("1" (EXPAND "gen_seq1" -1 1) (("1" (EXPAND "o" -1 1) (("1" (EXPAND "gen_seq1" -1 2) (("1" (EXPAND "gen_seq1" -1 1) (("1" (CASE-REPLACE "W1 o gen_seq1(dg(G), first(W2)) o rest(W2) = W1 o (gen_seq1(dg(G), first(W2)) o rest(W2))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(gen_seq1(dg(G), first(W2)) o rest(W2)) = W2") (("1" (REPLACE -2) (("1" (CASE "wgt_walk(G, W1 o gen_seq1(dg(G), first(W2))) = add_w(wgt_walk(G, W1), wgt_walk(G, gen_seq2(dg(G), last(W1), first(W2))))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "wgt_walk" 1) (("2" (HIDE -2) (("2" (EXPAND "o" 1 2) (("2" (EXPAND "gen_seq1" 1 2) (("2" (EXPAND "wgt_aux" 1 1) (("2" (EXPAND "gen_seq2" 1 2) (("2" (EXPAND "wgt_aux" 1 3) (("2" (EXPAND "wgt_aux" 1 3) (("2" (EXPAND "finseq_appl") (("2" (CASE-REPLACE "get_wgt(G,
                               ((W1 o gen_seq1(dg(G), first(W2)))`seq(W1`length - 1),
                                (W1 o gen_seq1(dg(G), first(W2)))`seq(W1`length)))
                           = add_w(zero_w,
                              get_wgt(G,
                                  (gen_seq2(dg(G), last(W1), first(W2))`seq(0),
                                   gen_seq2(dg(G), last(W1), first(W2))`seq(1))))") (("1" (HIDE -1) (("1" (LEMMA "wgt_aux_shift_walk") (("1" (INST - "G" "0" "0" " W1 o gen_seq1(dg(G), first(W2))" "W1" "W1`length -1" "length(W1)-1") (("1" (GROUND) (("1" (HIDE 2) (("1" (HIDE -) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1" 1 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (TYPEPRED "x!1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (EXPAND "first") (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (ASSERT) (("3" (TYPEPRED ("W2")) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (FLATTEN) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL) ("5" (TYPEPRED ("W2")) (("5" (EXPAND "walk?") (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (EXPAND "first") (("5" (EXPAND "finseq_appl") (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gen_seq1") (("3" (PROPAX) NIL NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) (("4" (EXPAND "first") (("4" (EXPAND "finseq_appl") (("4" (TYPEPRED ("W2")) (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (FLATTEN) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "first") (("6" (EXPAND "finseq_appl") (("6" (TYPEPRED ("W2")) (("6" (EXPAND "walk?") (("6" (EXPAND "verts_in?") (("6" (FLATTEN) (("6" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq2") (("2" (EXPAND "last") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (TYPEPRED "zero_w") (("2" (EXPAND "identity?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (- 2)) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (TYPEPRED ("W2")) (("1" (ASSERT) (("1" (EXPAND "empty_seq") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "gen_seq1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "min") (("3" (EXPAND "gen_seq1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (GROUND) (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "rest") (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED ("x!1")) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (EXPAND "empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x!1")) (("2" (EXPAND "o ") (("2" (EXPAND "rest") (("2" (EXPAND "^") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "empty_seq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE (-1 -2 2)) (("2" (LEMMA "o_assoc") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_o_edge") (("2" (INST?) (("2" (EXPAND "o" 1 1) (("2" (EXPAND "gen_seq1" 1 1) (("2" (GROUND) (("1" (HIDE (2 3)) (("1" (EXPAND "walk?") (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (EXPAND "gen_seq1") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|wgt_comp-2| |nil| 3660740468 ("" (SKEEP) (("" (LEMMA "wgt_comp_rest") (("" (INST - "G" "W1 o gen_seq1(dg(G), first(W2))" "W2") (("1" (EXPAND "last" -1) (("1" (EXPAND "o" -1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "o" -1 1) (("1" (EXPAND "gen_seq1" -1 1) (("1" (EXPAND "o" -1 1) (("1" (EXPAND "gen_seq1" -1 2) (("1" (EXPAND "gen_seq1" -1 1) (("1" (CASE-REPLACE "W1 o gen_seq1(dg(G), first(W2)) o rest(W2) = W1 o (gen_seq1(dg(G), first(W2)) o rest(W2))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(gen_seq1(dg(G), first(W2)) o rest(W2)) = W2") (("1" (REPLACE -2) (("1" (CASE "wgt_walk(G, W1 o gen_seq1(dg(G), first(W2))) = add_w(wgt_walk(G, W1), wgt_walk(G, gen_seq2(dg(G), last(W1), first(W2))))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "wgt_walk" 1) (("2" (HIDE -2) (("2" (EXPAND "o" 1 2) (("2" (EXPAND "gen_seq1" 1 2) (("2" (EXPAND "wgt_aux" 1 1) (("2" (EXPAND "gen_seq2" 1 2) (("2" (EXPAND "wgt_aux" 1 3) (("2" (EXPAND "wgt_aux" 1 3) (("2" (EXPAND "finseq_appl") (("2" (CASE-REPLACE "get_wgt(G,
                               ((W1 o gen_seq1(dg(G), first(W2)))`seq(W1`length - 1),
                                (W1 o gen_seq1(dg(G), first(W2)))`seq(W1`length)))
                           = add_w(zero_w,
                              get_wgt(G,
                                  (gen_seq2(dg(G), last(W1), first(W2))`seq(0),
                                   gen_seq2(dg(G), last(W1), first(W2))`seq(1))))") (("1" (HIDE -1) (("1" (LEMMA "wgt_aux_shift_walk") (("1" (INST - "G" "0" "0" " W1 o gen_seq1(dg(G), first(W2))" "W1" "W1`length -1" "length(W1)-1") (("1" (GROUND) (("1" (HIDE 2) (("1" (HIDE -) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1" 1 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (TYPEPRED "x!1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (EXPAND "first") (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (ASSERT) (("3" (TYPEPRED (W2)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (FLATTEN) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL) ("5" (TYPEPRED (W2)) (("5" (EXPAND "walk?") (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (EXPAND "first") (("5" (EXPAND "finseq_appl") (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gen_seq1") (("3" (PROPAX) NIL NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) (("4" (EXPAND "first") (("4" (EXPAND "finseq_appl") (("4" (TYPEPRED (W2)) (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (FLATTEN) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "first") (("6" (EXPAND "finseq_appl") (("6" (TYPEPRED (W2)) (("6" (EXPAND "walk?") (("6" (EXPAND "verts_in?") (("6" (FLATTEN) (("6" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq2") (("2" (EXPAND "last") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (TYPEPRED "zero_w") (("2" (EXPAND "identity?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (- 2)) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (TYPEPRED (W2)) (("1" (ASSERT) (("1" (EXPAND "empty_seq") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "gen_seq1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "min") (("3" (EXPAND "gen_seq1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (GROUND) (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "rest") (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (EXPAND "empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "o ") (("2" (EXPAND "rest") (("2" (EXPAND "^") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "empty_seq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE (-1 -2 2)) (("2" (LEMMA "o_assoc") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_o_edge") (("2" (INST?) (("2" (EXPAND "o" 1 1) (("2" (EXPAND "gen_seq1" 1 1) (("2" (GROUND) (("1" (HIDE (2 3)) (("1" (EXPAND "walk?") (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (EXPAND "gen_seq1") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|wgt_comp_rest| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|walk_o_edge| FORMULA-DECL NIL |walks_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rest| CONST-DECL "finseq" |seq_extras| |structures|) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| NIL) (|add_w| FORMAL-CONST-DECL "{f: [[Weight, Weight] -> Weight] | associative?(f)}" |weighted_digraphs_| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| NIL) (|Weight| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|wgt_aux_shift_walk| FORMULA-DECL NIL |weighted_digraphs_| NIL) (|zero_w| FORMAL-CONST-DECL "{zero: Weight | identity?(add_w)(zero)}" |weighted_digraphs_| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|get_wgt| FORMAL-CONST-DECL "[W: wdg, (edges(dg(W))) -> Weight]" |weighted_digraphs_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |weighted_digraphs_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |weighted_digraphs_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |weighted_digraphs_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |weighted_digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|wdg| FORMAL-TYPE-DECL NIL |weighted_digraphs_| NIL) (|dg| FORMAL-CONST-DECL "[wdg -> ConcreteDigraph]" |weighted_digraphs_| NIL) (G SKOLEM-CONST-DECL "wdg" |weighted_digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (W1 SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))" |weighted_digraphs_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (W2 SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))" |weighted_digraphs_| NIL)) NIL) (|wgt_comp-1| |nil| 3660504001 ("" (SKEEP) (("" (LEMMA "wgt_comp_rest") (("" (INST - "G" "W1 o gen_seq1(dg(G), first(W2))" "W2") (("1" (EXPAND "last" -1) (("1" (EXPAND "o" -1 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "o" -1 1) (("1" (EXPAND "gen_seq1" -1 1) (("1" (EXPAND "o" -1 1) (("1" (EXPAND "gen_seq1" -1 2) (("1" (EXPAND "gen_seq1" -1 1) (("1" (CASE-REPLACE "W1 o gen_seq1(dg(G), first(W2)) o rest(W2) = W1 o (gen_seq1(dg(G), first(W2)) o rest(W2))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(gen_seq1(dg(G), first(W2)) o rest(W2)) = W2") (("1" (REPLACE -2) (("1" (CASE "wgt_walk(G, W1 o gen_seq1(dg(G), first(W2))) = wgt_walk(G, W1) + wgt_walk(G, gen_seq2(dg(G), last(W1), first(W2)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "wgt_walk" 1) (("2" (HIDE -2) (("2" (EXPAND "o" 1 2) (("2" (EXPAND "gen_seq1" 1 2) (("2" (EXPAND "wgt_aux" 1 1) (("2" (EXPAND "gen_seq2" 1 2) (("2" (EXPAND "wgt_aux" 1 3) (("2" (EXPAND "wgt_aux" 1 3) (("2" (EXPAND "finseq_appl") (("2" (CASE-REPLACE "get_wgt(G,
                     ((W1 o gen_seq1(dg(G), first(W2)))`seq(W1`length - 1),
                      (W1 o gen_seq1(dg(G), first(W2)))`seq(W1`length)))
                 = (0 +
                    get_wgt(G,
                        (gen_seq2(dg(G), last(W1), first(W2))`seq(0),
                         gen_seq2(dg(G), last(W1), first(W2))`seq(1))))") (("1" (HIDE -1) (("1" (LEMMA "wgt_aux_shift_walk") (("1" (INST - "G" "0" "0" " W1 o gen_seq1(dg(G), first(W2))" "W1" "W1`length -1" "length(W1)-1") (("1" (GROUND) (("1" (HIDE 2) (("1" (HIDE -) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1" 1 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (TYPEPRED "x!1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (EXPAND "first") (("3" (ASSERT) (("3" (EXPAND "finseq_appl") (("3" (ASSERT) (("3" (TYPEPRED (W2)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (FLATTEN) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL) ("5" (TYPEPRED (W2)) (("5" (EXPAND "walk?") (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (EXPAND "first") (("5" (EXPAND "finseq_appl") (("5" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gen_seq1") (("3" (PROPAX) NIL NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) (("4" (EXPAND "first") (("4" (EXPAND "finseq_appl") (("4" (TYPEPRED (W2)) (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (FLATTEN) (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "first") (("6" (EXPAND "finseq_appl") (("6" (TYPEPRED (W2)) (("6" (EXPAND "walk?") (("6" (EXPAND "verts_in?") (("6" (FLATTEN) (("6" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq2") (("2" (EXPAND "last") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (TYPEPRED "0") (("2" (EXPAND "identity?") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (- 2)) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (TYPEPRED (W2)) (("1" (ASSERT) (("1" (EXPAND "empty_seq") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "gen_seq1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "min") (("3" (EXPAND "gen_seq1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (GROUND) (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "rest") (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "rest") (("1" (EXPAND "^") (("1" (EXPAND "empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "o ") (("2" (EXPAND "rest") (("2" (EXPAND "^") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "empty_seq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE (-1 -2 2)) (("2" (LEMMA "o_assoc") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_o_edge") (("2" (INST?) (("2" (EXPAND "o" 1 1) (("2" (EXPAND "gen_seq1" 1 1) (("2" (GROUND) (("1" (HIDE (2 3)) (("1" (EXPAND "walk?") (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (EXPAND "gen_seq1") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "first") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)))
