c_topological_sort[T: TYPE+]: THEORY
%
%  This theory defines the topological sort on acyclic graphs.
%  It revolves around the `visit` function that does a depth-first
%  search of the graph using a marking system with temporary and
%  permanent marks.
%  Contributed by:
%  Clément Blaudeau, Inria, France and EPFL, Switzerland and Ecole Polytechnique, France
%
BEGIN
   IMPORTING c_dags[T]

   G: VAR c_digraph
   x, y: VAR T
   n, k, i, j: VAR nat
   l: VAR list[T]

   Vert(G): TYPE = vert(G)
   VertID(G): TYPE = below(size(G))
   Adjs(G, (n: VertID(G))): TYPE =
         {l: list[VertID(G)] |
            FORALL (x: VertID(G)):
              member(x, l) IMPLIES edge?(G)(node(G)(n), node(G)(x))}
   is_dag(G): bool = (FORALL (w: Walk(G)): path?(G, w))
	 in_path?(G)(w: Walk(G), x): bool =
      EXISTS (i: below(length(w))): w`seq(i) = x

  % % -------------------------------------------------------------------------- %
  % % Topological ordering definition and lemma                               %
  % % -------------------------------------------------------------------------- %

  % A topological ordering: a bijective function decreasing along edges
   topological_ordering?(G: c_digraph)(f: [vert(G) -> below(size(G))]): bool =
       bijective?(f) AND
        FORALL (x, y: (vert(G))): edge?(G)(x, y) IMPLIES f(x) > f(y)

  % Topological orderings are also decreasing along paths (by induction)
   topological_ordering_path: LEMMA
     FORALL G,
            (f: (topological_ordering?(G))),
            (n: nat), (w: Walk(G)), (i, j: below(length(w))):
       (i + n + 1 = j IMPLIES f(w`seq(i)) > f(w`seq(j)))

  % -------------------------------------------------------------------------- %
  % Marking of a digraph                                                       %
  % -------------------------------------------------------------------------- %

  % When visiting the graph, marks are left to identify already visited nodes

   mark: DATATYPE
          BEGIN
           none: none?
           temporary: temporary?
           permanent: permanent?
          END mark

   marking: TYPE = [T -> mark]
   m: VAR marking
   empty_marking: marking = LAMBDA x: none
   non_temporary_marking: TYPE = {m | FORALL x: NOT temporary?(m(x))}

  % -------------------------------------------------------------------------- %
  % Counting temporary and permanent marks inside a marking                    %
  % -------------------------------------------------------------------------- %

  % To prove the termination of the `visit` function, a count of marked (both
	% permanent and temporary) nodes is used

   temp_count((l: list[T]), m): nat = length(filter[T](l, temporary? o m))
   perm_count((l: list[T]), m): nat = length(filter[T](l, permanent? o m))

   % Technical results
   temp_count_same: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       NOT member(x, l) IMPLIES
        temp_count(l, m WITH [x := temporary]) = temp_count(l, m)
   temp_count_incr: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       member(x, l) IMPLIES
        NOT temporary?(m(x)) IMPLIES
         no_repetitions?(l) IMPLIES
          temp_count(l, m WITH [x := temporary]) = 1 + temp_count(l, m)
   temp_count_bound: LEMMA
     FORALL (l: list[T]), (m: marking): temp_count(l, m) <= length(l)

   perm_count_same: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       NOT member(x, l) IMPLIES
        perm_count(l, m WITH [x := temporary]) = perm_count(l, m)
   perm_count_same2: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       NOT permanent?(m(x)) IMPLIES
        perm_count(l, m WITH [x := temporary]) = perm_count(l, m)
   perm_count_incr: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       perm_count(l, m WITH [x := temporary]) <= perm_count(l, m)
   perm_count_bound: LEMMA
     FORALL (l: list[T]), (m: marking): perm_count(l, m) <= length(l)

  % -------------------------------------------------------------------------- %
  % Comparison of markings                                                     %
  % -------------------------------------------------------------------------- %

  % As the marking gets updated during the visit of the graph, some properties
	% must be conserved : permanent marks are maintained, no new temporary marks
	% are made and no new node is left unmarked. A marking m1 greater than a
	% marking m2 basically have the same marks, only with some temporary ones
	% changed into permanent ones.

   greater_marking(m1, m2: marking): bool =
       FORALL (node: T):
         (permanent?(m2(node)) IMPLIES permanent?(m1(node))) ∧
          (temporary?(m1(node)) IMPLIES temporary?(m2(node))) ∧
           (none?(m1(node)) IMPLIES none?(m2(node)))

   % Technical results
   greater_marking_update: LEMMA
     FORALL (m: marking), (x: T):
       greater_marking(m WITH [x := permanent], m)
   greater_marking_temp_count: LEMMA
     FORALL (l: list[T]) (m1, m2: marking):
       greater_marking(m1, m2) IMPLIES
        temp_count(l, m1) <= temp_count(l, m2)
   greater_marking_perm_count: LEMMA
     FORALL (l: list[T]) (m1, m2: marking) (x: T):
       greater_marking(m1, m2) IMPLIES
        member(x, l) IMPLIES
         NOT permanent?(m2(x)) IMPLIES
          permanent?(m1(x)) IMPLIES perm_count(l, m1) > perm_count(l, m2)

  % -------------------------------------------------------------------------- %
  % Topological lists                                                          %
  % -------------------------------------------------------------------------- %

  % During the visit of the graph, nodes are added to a list once all the other
	% reachable nodes have already been marked permanently. Topological lists
	% capture the necessary properties

  % Link between a list and a marking
   permanent_list?(G, m)(l: list[Vert(G)]): bool =
       FORALL x: member(x, l) IFF permanent?(m(x))
   permanent_list(G, m): TYPE = (permanent_list?(G, m))

  % Key property: all reachable nodes (with non-trivial walks) are somewhere
	% higher in the list.
   topological_list?(G)(l: list[Vert(G)]): bool =
       FORALL (i: below(length(l))), x:
         (EXISTS (w: Walk(G)): from?(w, nth(l, i), x) ∧ w`length >= 2)
          IMPLIES (EXISTS (j: below(length(l))): x = nth(l, j) ∧ j > i)

  % Topological lists also have no repetitions
   topperm_list(G, m)(l: list[Vert(G)]): bool =
       permanent_list?(G, m)(l) ∧
        topological_list?(G)(l) ∧ no_repetitions?[T](l)

  % -------------------------------------------------------------------------- %
  % Visit (depth-first) function                                               %
  % -------------------------------------------------------------------------- %

  % The heart of the topological sort is the visit function. Its return type is
	% a sum between a walk and a pair (marking, topological list). If the visit
	% function returns a walk, its an explicit loop of the graph.

   loop(G): TYPE = {w: Walk(G) | NOT path?(G, w)}

  % auxiliar lemmas to prove TCCs (@M3)

  visit_aux_lem_d: lemma
  FORALL (G1: c_digraph[T],
          z:
            [m: marking, (topperm_list(G1, m)), node_id: {id: VertID(G1) | NOT permanent?(m(node(G1)(id)))}, {w: Walk(G1) | w`seq(w`length - 1) = node(G1)(node_id) AND FORALL (x: Vert(G1)): temporary?(m(x)) IFF in_path?(G1)(w, x)},
             {k: Adjs(G1, node_id) | FORALL (x: VertID(G1)): edge?(G1)(node(G1)(node_id), node(G1)(x)) IMPLIES member(x, k) ∨ permanent?(m(node(G1)(x)))}]):
    size[T](G1) + 1 - perm_count(G1`data, z`1) >= 0;

  visit_aux_lem_a: lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = temporary
     IMPLIES
     CASES IN_1(add1[T, digraph_type[T], digraph_verts, digraph_edges,
                     digraph_size, digraph_make]
                    (w, child))::[loop(G) + [marking, list[Vert(G)]]]
       OF IN_1(loop): TRUE,
          IN_2(res):
            (LET (mp, lp) = res IN
               LET node = node[T](G)(node_id) IN
                    topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                  ∧ suffix?[T](l, lp) ∧ permanent?(mp(node))
                  ∧ (FORALL x:
                       member[T](x, lp) IMPLIES
                        NOT member[T](x, l) IMPLIES
                         (x = node ∨
                           EXISTS (w:
                                     Walk[T,
                                          digraph_type[T],
                                          digraph_verts,
                                          digraph_edges,
                                          digraph_size,
                                          digraph_make](G)):
                             from?[T, digraph_type[T], digraph_verts,
                                   digraph_edges, digraph_size, digraph_make]
                                 (w, node, x)))
                  ∧ (nth[T](lp, 0) = node))
       ENDCASES;

  visit_aux_lem_1: lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = none
     IMPLIES topperm_list(G, m WITH [child := temporary])(l);

  visit_aux_lem_2: lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = none
     IMPLIES NOT permanent?(m WITH [child := temporary](node[T](G)(child_id)));

  visit_aux_lem_b : lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = none
     IMPLIES
     walk?[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
           digraph_size[T], digraph_make[T]]
         (G,
          add1[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
               digraph_make]
              (w, child))
      AND
      add1[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
           digraph_make]
          (w, child)`seq
          (add1[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
                digraph_make]
               (w, child)`length
            - 1)
       = node[T](G)(child_id)
       AND
       FORALL (x: Vert(G)):
         temporary?(m WITH [child := temporary](x)) IFF
          in_path?(G)
                  (add1[T, digraph_type[T], digraph_verts, digraph_edges,
                        digraph_size, digraph_make]
                       (w, child),
                   x);

  visit_aux_lem_3 : lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = none
     IMPLIES child_id < length[list[nat]](G`adjs);

  visit_aux_lem_4 : lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = none
     IMPLIES
     lex3(size[T](G) + 1 - perm_count(G`data, m WITH [child := temporary]),
          size[T](G) + 1 - temp_count(G`data, m WITH [child := temporary]),
          length(nth[list[nat]](G`adjs, child_id)))
      <
      lex3(size[T](G) + 1 - perm_count(G`data, m),
           size[T](G) + 1 - temp_count(G`data, m), length(adjs));

  visit_aux_lem_c : lemma
  FORALL (G: c_digraph[T], m: marking, l: (topperm_list(G, m)),
          node_id: {id: VertID(G) | NOT permanent?(m(node[T](G)(id)))},
          w:
            {w:
               Walk[T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make](G) |
               w`seq(w`length - 1) = node[T](G)(node_id) AND
                FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)},
          adjs:
            {k: Adjs(G, node_id) |
               FORALL (x: VertID(G)):
                 edge?[T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make]
                     (G)(node[T](G)(node_id), node[T](G)(x))
                  IMPLIES
                  member[VertID(G)](x, k) ∨ permanent?(m(node[T](G)(x)))},
          node: {v: T | member[T](v, G`data)}, child_id: VertID(G),
          adjsp: list[VertID(G)], child: {v: T | member[T](v, G`data)}):
    node = node(G)(node_id) AND
     adjs = cons(child_id, adjsp) AND
      child = node(G)(child_id) AND m(child) = none
     IMPLIES
     every[number]
         (LAMBDA (x: number):
                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
             AND integer_pred(x) AND (x >= 0) AND (x < size[T](G)))
         (nth[list[nat]](G`adjs, child_id))
      AND
      (FORALL (x: VertID(G)):
         member[VertID(G)](x, nth[list[nat]](G`adjs, child_id)) IMPLIES
          edge?[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
                digraph_make]
              (G)(node[T](G)(child_id), node[T](G)(x)))
       AND
       FORALL (x: VertID(G)):
         edge?[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
               digraph_make]
             (G)(node[T](G)(child_id), node[T](G)(x))
          IMPLIES
          member[VertID(G)](x, nth[list[nat]](G`adjs, child_id)) ∨
           permanent?(m WITH [child := temporary](node[T](G)(x)));

  % The body of the visit function is simple, but the type constraints capture
	% the necessary invariants, which are subtle.

   visit(G)
        (m: marking, l: (topperm_list(G, m)),
         node_id: {id: VertID(G) | NOT permanent?(m(node(G)(id)))},
         w:
           {w: Walk(G) |
              seq(w)(length(w) - 1) = node(G)(node_id) AND
               FORALL (x: Vert(G)):
                 temporary?(m(x)) IFF in_path?(G)(w, x)},
         adjs:
           {k: Adjs(G, node_id) |
              FORALL (x: VertID(G)):
                edge?(G)(node(G)(node_id), node(G)(x)) IMPLIES
                 member(x, k) ∨ permanent?(m(node(G)(x)))}): RECURSIVE
         {res: [loop(G) + [marking, list[Vert(G)]]] |
            CASES res
              OF IN_1(loop): TRUE,
                 IN_2(res):
                   (LET (mp, lp) = res IN
                      LET node = node(G)(node_id) IN
                        topperm_list(G, mp)(lp) ∧
                         greater_marking(mp, m) ∧
                          suffix?(l, lp) ∧
                           permanent?(mp(node)) ∧
                            (FORALL x:
                               member(x, lp) IMPLIES
                                NOT member(x, l) IMPLIES
                                 (x = node ∨
                                   EXISTS (w: Walk(G)): from?(w, node, x)))
                             ∧ (nth[T](lp, 0) = node))
              ENDCASES} =
     LET node = node(G)(node_id) IN
       CASES adjs
         OF null: IN_2(m WITH [node := permanent], cons(node, l)),
            cons(child_id, adjsp):
              LET child = node(G)(child_id) IN
                CASES m(child)
                  OF permanent: visit(G)(m, l, node_id, w, adjsp),
                     temporary: IN_1(add1(w, child)),
                     none:
                       CASES visit(G)
                                  (m WITH [child := temporary], l,
                                   child_id, add1(w, child),
                                   nth(adjs(G), child_id))
                         OF IN_1(loop): IN_1(loop),
                            IN_2(res):
                              LET (mp, lp) = res IN
                                visit(G)(mp, lp, node_id, w, adjsp)
                         ENDCASES
                  ENDCASES
         ENDCASES
      MEASURE lex3(size(G) + 1 - perm_count(data(G), m),
                   size(G) + 1 - temp_count(data(G), m), length(adjs))



  % -------------------------------------------------------------------------- %
  % Topological_sort (recursive call of visit function on all nodes)           %
  % -------------------------------------------------------------------------- %

  % The visit function does the topological sort of all the subgraph reachable
	% from a given node. To get a sort of the whole graph, an auxiliary function
	% recursively calls the visit function on unmarked nodes

   topological_sort_aux(G)
                       (n: below(size(G)), m: non_temporary_marking,
                        l: (topperm_list(G, m))): RECURSIVE
         {res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
            CASES res
              OF IN_1(loop): TRUE,
                 IN_2(res):
                   LET (mp, lp) = res IN
                     topperm_list(G, mp)(lp) ∧
                      greater_marking(mp, m) ∧
                       suffix?(l, lp) ∧
                        FORALL (i: upto(n)): member(node(G)(i), lp)
              ENDCASES} =
     LET node = node(G)(n) IN
       CASES m(node)
         OF permanent:
              IF n = 0 THEN IN_2(m, l)
              ELSE topological_sort_aux(G)(n - 1, m, l)
              ENDIF
         ELSE (CASES visit(G)
                          (m WITH [node := temporary], l, n,
                           gen_seq1(G, node), nth(adjs(G), n))
                 OF IN_1(loop): IN_1(loop),
                    IN_2(res):
                      IF (n = 0)
                        THEN IN_2(res)::
                               [loop(G) +
                                [non_temporary_marking, list[Vert(G)]]]
                      ELSE LET (mp, lp) = res IN
                             topological_sort_aux(G)(n - 1, mp, lp)::
                               [loop(G) +
                                [non_temporary_marking, list[Vert(G)]]]
                      ENDIF
                 ENDCASES)
         ENDCASES
      MEASURE n

   member_length: LEMMA
     FORALL (l1, l2: list[T]):
       no_repetitions?(l1) IMPLIES
        (FORALL x: member(x, l1) IMPLIES member(x, l2)) IMPLIES
         length(l2) >= length(l1)


   % The topological_sort function output either an explicit loop, or a topological sort
   topological_sort(G): {res: [loop(G) + (topological_ordering?(G))] |
                           IN?_2(res) ⇔ is_dag(G)} =
       IF (size(G) = 0) THEN IN_2(LAMBDA (x: Vert(G)): 0)
       ELSE CASES topological_sort_aux(G)(size(G) - 1, empty_marking, null)
              OF IN_1(loop): IN_1(loop)::[loop(G) + (topological_ordering?(G))],
                 IN_2(res):
                   LET (m, l) = res IN
                     IN_2(LAMBDA (x: Vert(G)): size(G) - idx(l,x))::[loop(G) + (topological_ordering?(G))]
              ENDCASES
       ENDIF

  % Main theorem: a graph is a dag iff it admits a topological ordering
   topological_sort_exists: THEOREM
     FORALL G:
       is_dag(G) IFF (EXISTS (f: (topological_ordering?(G))): TRUE)


END c_topological_sort




c_topological_sort_example: THEORY
BEGIN
   IMPORTING c_topological_sort[nat]

	 % A theory to test the topological sort, for instance with PVSio

   % DAG, we expect an ordering
   G1: c_digraph = (# data:= (:0, 1, 2, 3, 4, 5, 6, 7, 8:),
                adjs := (:
		        (:1:),       %0
			(: :),       %1
			(:0, 3, 4:), %2
			(:0, 7, 8:), %3
			(:1:),       %4
			(: :),       %5
			(:1:),       %6
			(:8:),       %7
			(:1:)        %8
		:) #)

   % Cyclic graph, we expect a loop
   G2: c_digraph = (# data:= (:0, 1, 2, 3, 4, 5, 6, 7, 8:),
                adjs := (:
		        (:1:),       %0
			(: 7 :),     %1
			(:0, 3, 4:), %2
			(:0, 7, 8:), %3
			(:1:),       %4
			(: :),       %5
			(:1:),       %6
			(:8:),       %7
			(:1:)        %8
		:) #)

END c_topological_sort_example
