%==============================================================================%
%                                                                              %
% Foundamental definitions for non-computational weighted digraphs.            %
%                                                                              %
%   Mariano Moscato        National Institute of Aerospace (US)   2015         %
%                                                                              %
%==============================================================================%
weighted_digraphs_def[
  T      : TYPE,
  Weight : TYPE,
  +      : {f : [[Weight, Weight] -> Weight] | associative?(f) },
  zero_ct: {zero: Weight | identity?(+)(zero)}]: THEORY
BEGIN

  % proof of correct interpretation
  IMPORTING digraphs_imp[T]

  wdg : TYPE = [#  dg : digraph_type,
                       wgt : [(edges(dg)) -> Weight] #]

  wgd_dg   : [wdg->digraph_type] = LAMBDA(w:wdg): dg(w)
  AUTO_REWRITE+ wgd_dg

  wgd_wgt  : [g:wdg->[(edges(wgd_dg(g))) -> Weight]] = LAMBDA(w:wdg): wgt(w)
  AUTO_REWRITE+ wgd_wgt

  get_wgt  : [W: wdg, (edges(dg(W))) -> Weight] =
   LAMBDA(W: wdg, e:(edges(dg(W)))):
     wgt(W)(e)

  IMPORTING structures@Maybe

  wgt_map  : TYPE = [[T,T]->Maybe[Weight]]

  map_key? : [wgt_map->[[T,T]->bool]] =
   LAMBDA(W:wgt_map):LAMBDA(e:[T,T]):
    some?(W(e))

  map_val  : [map:wgt_map,(map_key?(map))->Weight] =
   LAMBDA(map:wgt_map,key:(map_key?(map))):
    val(map(key))

  map4dg?  : [digraph_type->[wgt_map-> bool]] =
   LAMBDA(dg:digraph_type)(map:wgt_map):
    FORALL(e:(edges(dg))): map_key?(map)(e)

  make_wdg : [dg:digraph_type,map:(map4dg?(dg))->wdg] =
   LAMBDA(dg:digraph_type,map:(map4dg?(dg))):
    (# dg:=dg, wgt:=LAMBDA(e:(edges(dg))): map_val(map,e) #)

END weighted_digraphs_def
