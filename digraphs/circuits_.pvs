%==============================================================================%
%                                                                              %
% Definitions and properties about circuits for uninterpreted digraphs. A cir- %
% cuit is a walk where the endpoints are the same.                             %
%                                                                              %
% This theory is based on previous version of the theory circuits.pvs.         %
%                                                                              %
%   Andréia Borges Avelar  Universidade de Brasília (Brasil)      2014         %
%   Mauricio Ayala-Rincon  Universidade de Brasília (Brasil)      2014         %
%   Cesar Muñoz            NASA Langley Research Center (US)      2014         %
%   Mariano Moscato        National Institute of Aerospace (US)   2015         %
%   Aaron Dutle            NASA Langley Research Center (US)      2015         %
%                                                                              %
%==============================================================================%
circuits_[
 T    : TYPE,
 ConcreteDigraph: TYPE,
 vert : [ConcreteDigraph-> [T -> bool]],
 edges: [ConcreteDigraph -> [T,T -> bool]],
 size : [ConcreteDigraph -> nat],
 make : [ v:(is_finite[T]),
              {e: (is_finite[[T,T]]) | FORALL(x,y:T):
       	          e(x,y) IMPLIES v(x) AND v(y) } -> ConcreteDigraph]
]: THEORY
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a
    % correct interpretation for (uninterpreted) digraphs. That is checked using
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs_abs[T,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation
  ENDASSUMING

  AUTO_REWRITE+ concretedigraph_implements_abstractdigraph

  IMPORTING walks_[T, ConcreteDigraph,vert,edges,size,make],
            structures@seq_extras[T]


           G: VAR ConcreteDigraph
   w, w1, w2: VAR prewalk


% ------------------------------------------------------------------------------
%     Definitions
% ------------------------------------------------------------------------------

 pre_circuit?(G, w): bool =
   walk?(G,w) AND w(0) = w(length(w)-1)

 circuit?(G, w): bool =
   pre_circuit?(G,w) AND length(w) > 1

 circuit_at?(G, w, (v:vert(G))): bool =
   circuit?(G, w) AND w(0) = v

 loop?(G, w): bool =
   pre_circuit?(G, w) AND length(w) = 2

 eq_circuit?(G, w, w1): bool =
   circuit?(G, w) AND circuit?(G, w1) AND eq_prewalk?(rest(w), rest(w1))


% ------------------------------------------------------------------------------
%     Properties
% ------------------------------------------------------------------------------

 eq_circuit_length: LEMMA
   eq_circuit?(G, w1, w2) IMPLIES length(w1) = length(w2)

 eq_circuit_reflexive: LEMMA
   circuit?(G, w) IMPLIES eq_circuit?(G, w, w)

 eq_circuit_symmetric: LEMMA
   eq_circuit?(G, w1, w2) IMPLIES eq_circuit?(G, w2, w1)

 loop_is_circuit: LEMMA
   loop?(G, w) IMPLIES circuit?(G, w)

 equal_rest_equal_circuit: LEMMA
   circuit?(G, w1) AND circuit?(G, w2) AND rest(w1) = rest(w2)
   IMPLIES w1 = w2

 equal_eq_circuit: LEMMA
   eq_circuit?(G, w1, w2) AND rest(w1) = rest(w2)
   IMPLIES w1 = w2

 circuit_equal_fisrt: LEMMA
   circuit?(G, w1) AND circuit?(G, w2) AND circuit?(G, w1 o rest(w2))
   IMPLIES w1`seq(0) = w2`seq(0)

 comp_circuit_inter: LEMMA
   circuit?(G, w1 o rest(w2)) AND length(w2) > 1
   IMPLIES nonempty?(intersection(verts_of(w1), verts_of(w2)))

 eq_circuit_position: LEMMA
   eq_circuit?(G, w1, w2) IMPLIES
   EXISTS (i: below[length(w1)]): w2 = w1 ^ (i, length(w1) - 2) o w1 ^ (0, i)

 eq_circuit_edges: LEMMA
   eq_circuit?(G, w1, w2) IMPLIES edges_of(w1) = edges_of(w2)

 commuted_circuit: LEMMA
   FORALL (i : below[w`length]): circuit?(G, w)
   IMPLIES circuit?(G, w ^ (i, w`length-1) o w ^ (1,i))

 commuted_circuit_is_eq: LEMMA
   FORALL (i : below[w`length]): circuit?(G, w)
   IMPLIES eq_circuit?(G, w, w ^ (i, w`length-1) o w ^ (1,i))


 END circuits_
