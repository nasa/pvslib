%==============================================================================%
%                                                                              %
% This theory defines a computational representation of digraphs               %
%                                                                              %
%   Mariano Moscato        National Institute of Aerospace (US)   2015         %
%                                                                              %
%==============================================================================%
c_digraphs_def[T: TYPE]: THEORY
BEGIN
  IMPORTING structures@more_list_props,
  	    structures@permutations_list,
            structures@set_as_list[T],
            finite_sets@finite_cross,
            structures@set_as_list_props

  ComputableDigraph: TYPE = [# data: list[T],
  	    	               adjs: list[list[nat]] #]

  size(cd:ComputableDigraph): nat = length(data(cd))

  list_of_idxs(C:ComputableDigraph)(l:list[nat]): bool =
    FORALL(i:below(length(l))):nth(l,i)<size(C)

  loi_append: LEMMA FORALL(C:ComputableDigraph, l1,l2: list[nat]):
   list_of_idxs(C)(l1) AND
   list_of_idxs(C)(l2)
   IMPLIES list_of_idxs(C)(append(l1,l2))

  loi_permutation: LEMMA
   FORALL(C:ComputableDigraph, l1: list[nat], l2: (permutation_list(l1))):
    list_of_idxs(C)(l1) IMPLIES list_of_idxs(C)(l2)

  cdigraph(g: ComputableDigraph): bool =
    (length(data(g)) = length(adjs(g))) AND
    (FORALL(i:below(length(adjs(g)))): list_of_idxs(g)(nth(adjs(g),i))) AND
    no_repetitions?[T](data(g))
     % (this following restriction assures that no multiple edges
     %  are present in the computable representation.)
    AND FORALL(i:below(length(adjs(g)))): no_repetitions?[nat](nth(adjs(g),i))

  c_digraph: TYPE = (cdigraph)

  cd,cd1,cd2: VAR c_digraph

  empty?(cd): bool = length(data(cd)) = 0

  % ---------------------------------------------------------------------------%
  % Semantic equivalence between computable digraphs.                          %
  % ---------------------------------------------------------------------------%
  % Two computable (representations of) digraphs are semantically equivalent if
  % they consist of the same collection of vertices, linked in the same way.
  % Note that this concept is weaker than the equality.
  sem_eq(cd1,cd2): bool =
    permutation?(data(cd1), data(cd2)) AND
    FORALL(i:below(length(data(cd1)))):
      LET adjs_i_cd1 = nth(adjs(cd1),i),
      	  adjs_i_cd2 = nth(adjs(cd2),idx(data(cd2), nth(data(cd1),i)))
      IN permutation?( filter_idxs(data(cd1),adjs_i_cd1),
      	 	       filter_idxs(data(cd2), adjs_i_cd2) )

  edges_G: VAR finite_set[[T,T]]

  % -------------------------------------------------------------------------- %
  % Elementary functions and properties.                                       %
  % -------------------------------------------------------------------------- %
  % node assigned to the index i
  node(cd)(i:below(size(cd))): {v:T|member(v,data(cd))} = nth(data(cd),i)

  vert(cd)(x:T): bool = member(x,data(cd))

  vert_finite: LEMMA is_finite(vert(cd))
  AUTO_REWRITE+ vert_finite

  edges(cd)(x,y:T):bool = vert(cd)(x) AND vert(cd)(y) AND
  		    	  member(idx(data(cd),y), nth(adjs(cd),idx(data(cd),x)))
  AUTO_REWRITE+ edges

  edges_finite: LEMMA is_finite(edges(cd))
  AUTO_REWRITE+ edges_finite


  % -------------------------------------------------------------------------- %
  % List of edges of a cdigraph, represented as list[[T,T]].                   %
  % -------------------------------------------------------------------------- %
  edges_list_vert_adjs(cd,(v:(vert(cd))))
		      (adjs_v:list[nat] |
		         suffix?(adjs_v,nth(adjs(cd),idx(data(cd),v)))):
                                           RECURSIVE  { l : list[(edges(cd))] |
                  (FORALL(v_,w:T): member((v_,w),l) IFF v = v_ AND vert(cd)(w)
           AND member(idx(data(cd),w), adjs_v)) AND no_repetitions?[[T,T]](l)} =
    CASES adjs_v OF
      null: null,
      cons(a,adjs): cons((v,nth(data(cd),a)),edges_list_vert_adjs(cd,v)(adjs))
    ENDCASES
  MEASURE length(adjs_v)


  edges_list_vert(cd)(v:(vert(cd))):                  { l : list[(edges(cd))]|
              (FORALL(v_,w:T): member((v_,w),l) IFF v = v_ AND edges(cd)(v,w))
			                        AND no_repetitions?[[T,T]](l)} =
    edges_list_vert_adjs(cd,v)(nth(adjs(cd),idx(data(cd),v)))


  edges_list_verts(cd)(vs:list[(vert(cd))]|no_repetitions?[T](vs)): RECURSIVE
                                                      { l : list[(edges(cd))]|
          (FORALL(v,w:T): member((v,w),l) IFF member(v,vs) AND edges(cd)(v,w))
			                        AND no_repetitions?[[T,T]](l)} =
    CASES vs OF null: null,
      cons(w,ws): append[[T,T]](edges_list_vert(cd)(w),edges_list_verts(cd)(ws))
    ENDCASES
  MEASURE length(vs)

  edges_list(cd):   { l:list[(edges(cd))] | card(edges(cd)) = length[[T,T]](l)
  				AND (FORALL(e:(edges(cd))):member[[T,T]](e,l))
                                                AND no_repetitions?[[T,T]](l)} =
    edges_list_verts(cd)(data(cd))

  % ---------------------------------------------------------------------------%
  % Construction of computational digraphs given sets of edges and vertices    %
  % ---------------------------------------------------------------------------%
  edges_set_to_list_for( edges_G,
  		    (vertsl:(no_repetitions?[T])|
		      FORALL(x,y:T): edges_G(x,y)
		      		     IMPLIES member(x,vertsl) AND
			      		     member(y,vertsl)),
		    v: T | member(v,vertsl),
    		    E: finite_set[[T,T]] | subset?(E,edges_G) ) :
  RECURSIVE { adj_v: list[nat] |
                (FORALL(w:T): member(w,vertsl)
		              IMPLIES (member(idx(vertsl,w),adj_v)
			               IFF member((v,w),E)))
		AND (FORALL(i:below(length(adj_v))):nth(adj_v,i)<length(vertsl))
		AND no_repetitions?(adj_v) } =
    IF empty?(E) THEN null
    ELSE LET (v1,v2) = choose(E)
    	 IN IF v1=v
	 THEN cons( idx(vertsl,v2),
	       	    edges_set_to_list_for(edges_G,vertsl,v,rest(E)) )
  	 ELSE edges_set_to_list_for(edges_G,vertsl,v,rest(E)) ENDIF ENDIF
  MEASURE card(E)

  edges_set_to_list_rec( edges_G,
  		    (vertsl:(no_repetitions?[T])|
		       FORALL(x,y:T):edges_G(x,y) IMPLIES member(x,vertsl) AND
			      				  member(y,vertsl)) )
                  ( vs:list[T]|suffix?(vs,vertsl) ) :
  RECURSIVE { adjs: list[list[nat]] |
               length(vs) = length(adjs) AND
    	       (FORALL(i:below(length(vs)),j:below(length(vertsl))):
                  member(j,nth(adjs,i))
  		  IFF LET vi = nth(vertsl,i + length(vertsl)-length(vs)),
  		          vj = nth(vertsl,j) IN
  		      member((vi,vj),edges_G)) AND
  	       (FORALL(i:below(length(adjs)),j:below(length(nth(adjs,i)))):
                  nth(nth(adjs, i),j) < length(vertsl)) AND
  	       (FORALL(i:below(length(adjs))): no_repetitions?(nth(adjs,i))) } =
    CASES vs OF
      null: null,
      cons(v,vs_): cons( edges_set_to_list_for(edges_G,vertsl,v,edges_G) ,
      		   	 edges_set_to_list_rec(edges_G,vertsl)(vs_) )
    ENDCASES
  MEASURE length(vs)

  edges_set_to_list( edges_G,
  		    (vertsl:(no_repetitions?[T])|
		              FORALL(x,y:T):edges_G(x,y) IMPLIES member(x,vertsl) AND
			      				 	 member(y,vertsl)) ) :
  { adjs:list[list[nat]] |
                        length(adjs) = length(vertsl) AND
  		        (FORALL(i,j:below(length(vertsl))):
  			   member(j,nth(adjs,i))
  			     IFF LET vi = nth(vertsl,i), vj = nth(vertsl,j)
  				 IN member((vi,vj),edges_G)) AND
  			(FORALL(i:below(length(adjs)),j:below(length(nth(adjs,i)))):
  			   nth(nth(adjs, i),j) < length(vertsl)) AND
                        (FORALL(i:below(length(adjs))): no_repetitions?(nth(adjs,i))) } =
    edges_set_to_list_rec(edges_G,vertsl)(vertsl)

  make(v:finite_set[T], e: finite_set[[T,T]] |
  			     FORALL(x,y:T):
			       e(x,y)
			       IMPLIES v(x) AND v(y)): { cd: (cdigraph) |
  			                                   vert(cd) = v AND
							   edges(cd) = e } =
  (# data := set2list(v),
     adjs := edges_set_to_list(e, set2list(v)) #)

  % ---------------------------------------------------------------------------%
  % Construction of computational digraphs using atomic constructors.          %
  % ---------------------------------------------------------------------------%
  empty_cd: (cdigraph) = (# data := null, adjs := null  #)

  add_vert(cd, (v:T | NOT vert(cd)(v))): (cdigraph) =
    (# data := append(cd`data, (: v :)), adjs := append( cd`adjs, (: null[nat] :) ) #)

  add_edge(cd, (u: (vert(cd))), (v: (vert(cd))|NOT edges(cd)(u,v))): (cdigraph) =
    LET u_idx = idx(cd`data,u), v_idx = idx(cd`data,v) IN
    cd WITH [ adjs := update_list( cd`adjs, u_idx,
				   append( nth(cd`adjs,u_idx) , (: v_idx :)) ) ]

END c_digraphs_def
