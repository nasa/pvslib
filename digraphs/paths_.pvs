paths_[
 T              : TYPE,
 ConcreteDigraph: TYPE,
 vert           : [ConcreteDigraph-> [T -> bool]],
 edges          : [ConcreteDigraph -> [T,T -> bool]],
 size           : [ConcreteDigraph -> nat],
 make           : [ v:(is_finite[T]),
                   {e: (is_finite[[T,T]]) |
		     FORALL(x,y:T): e(x,y) IMPLIES v(x) AND v(y) }
		   -> ConcreteDigraph] ]: THEORY
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a
    % correct interpretation for (uninterpreted) digraphs. That is checked using
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs_abs[T,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation
  ENDASSUMING

  AUTO_REWRITE+ concretedigraph_implements_abstractdigraph

  IMPORTING walks_[T, ConcreteDigraph,vert,edges,size,make],
             structures@seq_extras[T]

   G: VAR ConcreteDigraph
   x,y,s,t: VAR T
   i,j: VAR nat
   p,ps: VAR prewalk

   path?(G,ps): bool = walk?(G,ps) AND (FORALL (i,j: below(length(ps))):
                                          i /= j IMPLIES ps(i) /= ps(j))

   Path(G): TYPE = {p: prewalk | path?(G,p)}

   path_from?(G,ps,s,t): bool = path?(G,ps) AND from?(ps,s,t)

   Path_from(G,s,t): TYPE = {p: prewalk | path_from?(G,p,s,t)}

   endpoint?(i: nat, w: prewalk): bool = (i = 0) OR (i = length(w)-1)

   path?_verts     : LEMMA path?(G,ps) IMPLIES verts_in?(G,ps)

   path_from_l     : LEMMA path_from?(G,ps,s,t) AND s /= t IMPLIES length(ps) >= 2

   path_from_in    : LEMMA path_from?(G, ps, s, t) IMPLIES
                          vert(G)(s) AND vert(G)(t)


   path?_caret     : LEMMA i <= j AND j < length(ps) AND path?(G,ps)
                            IMPLIES path?(G,ps^(i,j))

   path_from?_caret: LEMMA  i <= j AND j < length(ps) AND path_from?(G, ps, s, t)
                         IMPLIES path_from?(G, ps^(i, j),seq(ps)(i),seq(ps)(j))


%%%%%%%%%%%%%%%%%%%% NOT TRUE fpr directed graphs %%%%%%%%%%%%%%%%%%%
%
%   path?_rev       : LEMMA path?(G,ps) IMPLIES path?(G,rev(ps))


   path?_gen_seq2  : LEMMA vert(G)(x) AND vert(G)(y) AND x /= y AND
                            edge?(G)(x,y) IMPLIES path?(G,gen_seq2(G,x,y))

   path?_add1      : LEMMA path?(G,p) AND vert(G)(x)
                            AND edge?(G)(seq(p)(length(p)-1),x)
                            AND NOT verts_of(p)(x)
                            IMPLIES path?(G,add1(p,x))

   path?_trunc1      : LEMMA path?(G,p) AND length(p) > 1 IMPLIES
                            path_from?(G,trunc1(p),seq(p)(0),seq(p)(length(p)-2))


END paths_
