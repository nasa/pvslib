(|kinematics_gs_accel| (|gsAccel_equals_fnd| 0 (|gsAccel_equals_fnd-1| |nil| 3616242887 ("" (SKEEP) (("" (DECOMPOSE-EQUALITY) (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccel_fnd") (("1" (EXPAND "gsAccel_Pos_Calc") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (CASE-REPLACE "(vect2(so3) +
                    (norm(vect2(vo3)) * t + 1/2 * (a * t * t)) * (Hat(vect2(vo3))))`x = so3`x + vo3`x*t+ 1/2*(a*t*t)*Hat(vect2(vo3))`x") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Hat") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (FLATTEN) (("2" (GRIND) (("2" (EXPAND "zero") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccel") (("2" (EXPAND "gsAccel_fnd") (("2" (EXPAND "gsAccel_Pos_Calc") (("2" (EXPAND "gsAccelPos") (("2" (EXPAND "Vect3") (("2" (CASE-REPLACE "(vect2(so3) +
                    (norm(vect2(vo3)) * t + 1/2 * (a * t * t)) * (Hat(vect2(vo3))))`y = so3`y + vo3`y*t+ 1/2*(a*t*t)*Hat(vect2(vo3))`y") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "Hat") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (FLATTEN) (("2" (GRIND) (("2" (EXPAND "zero") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccel_fnd") (("1" (EXPAND "gsAccel_Vel_Calc") (("1" (CASE "vect2(vo3)= zero") (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST?) (("1" (FLATTEN) (("1" (EXPAND "zero") (("1" (EXPAND "gs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (FLATTEN) (("2" (EXPAND "zero") (("2" (EXPAND "gs") (("2" (EXPAND "mkTrkGsVs") (("2" (EXPAND "trk") (("2" (REWRITE "track.sin_track") (("1" (GRIND) NIL NIL) ("2" (EXPAND "/=") (("2" (EXPAND "zero") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccel") (("2" (EXPAND "gsAccel_fnd") (("2" (EXPAND "gsAccel_Vel_Calc") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (FLATTEN) (("2" (EXPAND "zero") (("2" (EXPAND "gs") (("2" (CASE-REPLACE "vect2(vo3)=zero") (("1" (EXPAND "zero") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "mkTrkGsVs") (("2" (EXPAND "trk") (("2" (EXPAND "zero") (("2" (REWRITE "track.cos_track") (("1" (GRIND) NIL NIL) ("2" (EXPAND "/=") (("2" (EXPAND "zero") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gsAccel_fnd| CONST-DECL "[Vect3, Vect3]" |gsAccel| NIL) (|gsAccel| CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|gs| CONST-DECL "nnreal" |Velocity| NIL) (|atan2| CONST-DECL "real" |atan2| |trig|) (|track| CONST-DECL "nnreal_lt_2pi" |track| NIL) (|trk| CONST-DECL "nnreal_lt_2pi" |track| NIL) (|vs| CONST-DECL "real" |Velocity| NIL) (|mkTrkGsVs| CONST-DECL "Velocity" |Velocity| NIL) (|gsAccel_Vel_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gsAccel_Pos_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (|norm_eq_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|comp_zero_y| FORMULA-DECL NIL |vectors_2D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_2D| |vectors|) (|Vect2| CONST-DECL "{vv: Vect2 | vv`x = x AND vv`y = y}" |util| NIL) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|Hat| CONST-DECL "{v: Vect2 |
   (v = zero IFF w = zero) AND
    (w /= zero IFF (norm(v) = 1 AND v = (1 / norm(w)) * w))}" |util| NIL) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|gsAccelPos| CONST-DECL "Vect3" |kinematics_gs_accel| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_track| FORMULA-DECL NIL |track| NIL) (|sin_track| FORMULA-DECL NIL |track| NIL) (|Nz_vect2| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) SHOSTAK)) (|reach_goal| 0 (|reach_goal-2| "" 3884831184 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (REWRITE "gsAccel_equals_fnd") (("" (EXPAND "gsAccel_fnd") (("" (EXPAND "gsAccel_Vel_Calc") (("" (EXPAND "gsAccelSplit") (("" (EXPAND "gs" 1) (("" (EXPAND "Hat") (("" (SIMPLIFY 2) (("" (CASE "(norm(vect2(vo3))=0)=FALSE") (("1" (REPLACE -1 2) (("1" (CASE-REPLACE "Vect3(sgn_1 * gsAccel!1 *
                         Vect2(vect2(vo3)`x / norm(vect2(vo3)),
                               vect2(vo3)`y / norm(vect2(vo3))),
                        0)`x
                   * gsAccelTime(vo3, goalGs, gsAccel!1) = sgn_1*vo3`x*abs(gs(vo3)-goalGs)/gs(vo3)") (("1" (CASE-REPLACE "Vect3(sgn_1 * gsAccel!1 *
                         Vect2(vect2(vo3)`x / norm(vect2(vo3)),
                               vect2(vo3)`y / norm(vect2(vo3))),
                        0)`y
                   * gsAccelTime(vo3, goalGs, gsAccel!1) = sgn_1*vo3`y*abs(gs(vo3)-goalGs)/gs(vo3)") (("1" (EXPAND "gs") (("1" (EXPAND "vect2") (("1" (NAME-REPLACE "nrmV" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "(# x := vo3`x + abs(nrmV - goalGs) * vo3`x * sgn_1 / nrmV,
              y := vo3`y + abs(nrmV - goalGs) * vo3`y * sgn_1 / nrmV #) = (goalGs/nrmV)*(# x:= vo3`x, y:=vo3`y #)") (("1" (REWRITE "norm_scal") (("1" (TYPEPRED ("nrmV")) (("1" (TYPEPRED ("goalGs")) (("1" (DIV-BY -2 "nrmV") (("1" (SIMPLIFY -2) (("1" (EXPAND "abs") (("1" (LIFT-IF 3) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "nrmV") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (CASE-REPLACE "(goalGs/nrmV) = 1+sgn_1*abs(nrmV-goalGs)/nrmV") (("1" (GROUND) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 2) (("2" (CASE-REPLACE "nrmV = goalGs") (("1" (GROUND) NIL NIL) ("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "Vect3") (("2" (EXPAND "Vect2") (("2" (EXPAND "gs") (("2" (EXPAND "gsAccelTime") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "gsAccelTime") (("2" (EXPAND "gs") (("2" (GROUND) (("2" (EXPAND "Vect2") (("2" (EXPAND "Vect3") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|reach_goal-1| |nil| 3616319721 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (REWRITE "gsAccel_equals_fnd") (("" (EXPAND "gsAccel_fnd") (("" (EXPAND "gsAccel_Vel_Calc") (("" (EXPAND "gsAccelSplit") (("" (EXPAND "gs" 1) (("" (EXPAND "Hat") (("" (SIMPLIFY 2) (("" (CASE "(norm(vect2(vo3))=0)=FALSE") (("1" (REPLACE -1 2) (("1" (CASE-REPLACE "Vect3(sgn_1 * gsAccel!1 *
                         Vect2(vect2(vo3)`x / norm(vect2(vo3)),
                               vect2(vo3)`y / norm(vect2(vo3))),
                        0)`x
                   * gsAccelTime(vo3, goalGs, gsAccel!1) = sgn_1*vo3`x*abs(gs(vo3)-goalGs)/gs(vo3)") (("1" (CASE-REPLACE "Vect3(sgn_1 * gsAccel!1 *
                         Vect2(vect2(vo3)`x / norm(vect2(vo3)),
                               vect2(vo3)`y / norm(vect2(vo3))),
                        0)`y
                   * gsAccelTime(vo3, goalGs, gsAccel!1) = sgn_1*vo3`y*abs(gs(vo3)-goalGs)/gs(vo3)") (("1" (EXPAND "gs") (("1" (EXPAND "vect2") (("1" (NAME-REPLACE "nrmV" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "(# x := vo3`x + abs(nrmV - goalGs) * vo3`x * sgn_1 / nrmV,
              y := vo3`y + abs(nrmV - goalGs) * vo3`y * sgn_1 / nrmV #) = (goalGs/nrmV)*(# x:= vo3`x, y:=vo3`y #)") (("1" (REWRITE "norm_scal") (("1" (TYPEPRED (NRMV)) (("1" (TYPEPRED (GOALGS)) (("1" (DIV-BY -2 "nrmV") (("1" (SIMPLIFY -2) (("1" (EXPAND "abs") (("1" (LIFT-IF 3) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "nrmV") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (CASE-REPLACE "(goalGs/nrmV) = 1+sgn_1*abs(nrmV-goalGs)/nrmV") (("1" (GROUND) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 2) (("2" (CASE-REPLACE "nrmV = goalGs") (("1" (GROUND) NIL NIL) ("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "Vect3") (("2" (EXPAND "Vect2") (("2" (EXPAND "gs") (("2" (EXPAND "gsAccelTime") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "gsAccelTime") (("2" (EXPAND "gs") (("2" (GROUND) (("2" (EXPAND "Vect2") (("2" (EXPAND "Vect3") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gs| CONST-DECL "nnreal" |Velocity| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Velocity| TYPE-EQ-DECL NIL |Velocity| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|gsAccelTime| CONST-DECL "real" |kinematics_gs_accel| NIL) (|gsAccel| CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|gsAccel_equals_fnd| FORMULA-DECL NIL |kinematics_gs_accel| NIL) (|gsAccel_Vel_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nrmV| SKOLEM-CONST-DECL "nnreal" |kinematics_gs_accel| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|norm_scal| FORMULA-DECL NIL |vectors_2D| |vectors|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|Vect2| CONST-DECL "{vv: Vect2 | vv`x = x AND vv`y = y}" |util| NIL) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (FALSE CONST-DECL "bool" |booleans| NIL) (|Hat| CONST-DECL "{v: Vect2 |
   (v = zero IFF w = zero) AND
    (w /= zero IFF (norm(v) = 1 AND v = (1 / norm(w)) * w))}" |util| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|gsAccel_fnd| CONST-DECL "[Vect3, Vect3]" |gsAccel| NIL)) SHOSTAK)) (|gsAccelUntil_checks| 0 (|gsAccelUntil_checks-4| "" 3884831493 ("" (SKEEP) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (CASE "FORALL (TK: real, GS:real, VS:real): gs(mkTrkGsVs(TK, GS, VS))=abs(GS)") (("1" (FLATTEN) (("1" (SPLIT 2) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "gsAccel") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gsAccelPos") (("1" (LEMMA "vectors_2D.scal_0") (("1" (INST -1 "(Hat(vect2(nsv`2)))") (("1" (REPLACE -1) (("1" (EXPAND "+ ") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Vect3") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "IF gs(nsv`2) = 0 THEN 0 ELSE gs(nsv`2) ENDIF = gs(nsv`2)") (("1" (LEMMA "reach_goal" ("so3" "so3" "vo3" "vo3" "goalGs" "goalGs" "gsAccel" "gsAccel!1")) (("1" (REPLACE -7 :DIR RL) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -6 :DIR RL) (("1" (REPLACE -7 :DIR RL) (("1" (SPLIT -1) (("1" (CASE-REPLACE "trk(vect2(nsv`2)) = track(vect2(nsv`2))") (("1" (EXPAND "nsv") (("1" (EXPAND "gsAccel") (("1" (CASE-REPLACE "vs(mkTrkGsVs(trk(vect2(vo3)), gs(vo3) + a * accelTime,
                                            vs(vo3))) = vs(vo3)") (("1" (INST -6 "trk(vect2(vo3))" " gs(vo3) + a * accelTime" "vs(vo3)") (("1" (CASE-REPLACE "abs(gs(vo3)+a*accelTime) = gs(vo3)+a*accelTime") (("1" (REPLACE -7) (("1" (CASE-REPLACE "track(vect2(mkTrkGsVs(trk(vect2(vo3)),
                                                         gs(vo3) + a * accelTime,
                                                         vs(vo3)))) = trk(vect2(vo3))") (("1" (HIDE 2) (("1" (EXPAND "trk") (("1" (CASE "vect2(vo3)/=zero") (("1" (CASE-REPLACE "IF vect2(vo3)`x = 0 AND vect2(vo3)`y = 0 THEN 0
                           ELSE track(vect2(vo3))
                           ENDIF = track(vect2(vo3))") (("1" (EXPAND "mkTrkGsVs") (("1" (EXPAND "vect2") (("1" (REWRITE "track.sin_track") (("1" (REWRITE "track.cos_track") (("1" (CASE-REPLACE "(# x
                                       := gs(vo3) * (vo3`x / norm((# x := vo3`x, y := vo3`y #)))
                                           +
                                           vo3`x / norm((# x := vo3`x, y := vo3`y #)) * a *
                                            accelTime,
                                     y
                                       := vo3`y / norm((# x := vo3`x, y := vo3`y #)) * gs(vo3) +
                                           vo3`y / norm((# x := vo3`x, y := vo3`y #)) * a *
                                            accelTime #) = ((gs(vo3)+a*accelTime)/norm((# x := vo3`x, y := vo3`y #)))*(# x := vo3`x, y := vo3`y #)") (("1" (CASE-REPLACE "gs(vo3)+a*accelTime = goalGs") (("1" (LEMMA "track.track_scal" ("c" "(goalGs / norm((# x := vo3`x, y := vo3`y #)))" "v" "(# x := vo3`x, y := vo3`y #)")) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED ("goalGs")) (("2" (TYPEPRED ("norm((# x := vo3`x, y := vo3`y #))")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (EXPAND "gs" 3) (("2" (EXPAND "vect2") (("2" (FLATTEN) (("2" (DIV-BY -5 "norm((# x := vo3`x, y := vo3`y #))") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (EXPAND "zero") (("2" (EXPAND "/=") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "/=") (("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "gs(vo3) + a * accelTime = goalGs") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "accelTime") (("2" (EXPAND "gsAccelTime") (("2" (EXPAND "sgn_1") (("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vs") (("2" (EXPAND "mkTrkGsVs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trk") (("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(gsAccel(so3, vo3, accelTime, a)`2)") (("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "nsv") (("1" (HIDE-ALL-BUT (-1 -2 -3 -4 -5)) (("1" (REPLACE -5) (("1" (SPLIT -4) (("1" (GROUND) NIL NIL) ("2" (EXPAND "zero") (("2" (GROUND) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (EXPAND "nsv" 1) (("3" (LEMMA "vectors_2D.norm_eq_0") (("3" (EXPAND "/=") (("3" (INST -1 "vect2(gsAccel(so3, vo3, accelTime, a)`2)") (("3" (FLATTEN) (("3" (HIDE -1) (("3" (PROP) (("3" (REPLACE -1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "gsAccelUntil") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -6 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (EXPAND "gsAccel") (("2" (INST-CP -2 "trk(vect2(vo3))" "                                   gs(vo3) + a * accelTime" "vs(vo3)") (("2" (REPLACE -3) (("2" (CASE-REPLACE "IF abs(gs(vo3) + a * accelTime) = 0 THEN 0
                                         ELSE abs(gs(vo3) + a * accelTime)
                                         ENDIF = abs(gs(vo3)+a*accelTime)") (("1" (INST -3 "trk(vect2(mkTrkGsVs(trk(vect2(vo3)),
                                                                   gs(vo3) + a * accelTime,
                                                                   vs(vo3))))" "                   abs(gs(vo3) + a * accelTime)" "                   vs(mkTrkGsVs(trk(vect2(vo3)), gs(vo3) + a * accelTime,
                                                            vs(vo3)))") (("1" (REPLACE -3) (("1" (EXPAND "accelTime") (("1" (EXPAND "gsAccelTime") (("1" (EXPAND "a") (("1" (HIDE -) (("1" (EXPAND "sgn_1") (("1" (EXPAND "abs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccelUntil") (("3" (EXPAND "gsAccel") (("3" (EXPAND "vs") (("3" (EXPAND "mkTrkGsVs") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (EXPAND "mkTrkGsVs") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (EXPAND "norm") (("2" (EXPAND "sqv") (("2" (EXPAND "*") (("2" (LEMMA "sin2_cos2") (("2" (INST -1 "TK") (("2" (EXPAND "sq") (("2" (MULT-BY -1 "GS*GS") (("2" (SIMPLIFY -1) (("2" (REPLACE -1) (("2" (LEMMA "sqrt_sq") (("2" (CASE-REPLACE "1*(GS*GS) = sq(abs(GS))") (("1" (INST?) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sq") (("2" (EXPAND "abs") (("2" (HIDE-ALL-BUT 1) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|gsAccelUntil_checks-3| |nil| 3616762344 ("" (SKEEP) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (CASE "FORALL (TK: real, GS:real, VS:real): gs(mkTrkGsVs(TK, GS, VS))=abs(GS)") (("1" (FLATTEN) (("1" (SPLIT 2) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "gsAccel") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gsAccelPos") (("1" (LEMMA "vectors_2D.scal_0") (("1" (INST -1 "(Hat(vect2(nsv`2)))") (("1" (REPLACE -1) (("1" (EXPAND "+ ") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Vect3") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "IF gs(nsv`2) = 0 THEN 0 ELSE gs(nsv`2) ENDIF = gs(nsv`2)") (("1" (LEMMA "reach_goal" ("so3" "so3" "vo3" "vo3" "goalGs" "goalGs" "gsAccel" "gsAccel!1")) (("1" (REPLACE -7 :DIR RL) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -6 :DIR RL) (("1" (REPLACE -7 :DIR RL) (("1" (SPLIT -1) (("1" (CASE-REPLACE "trk(vect2(nsv`2)) = track(vect2(nsv`2))") (("1" (EXPAND "nsv") (("1" (EXPAND "gsAccel") (("1" (CASE-REPLACE "vs(mkTrkGsVs(trk(vect2(vo3)), gs(vo3) + a * accelTime,
                                            vs(vo3))) = vs(vo3)") (("1" (INST -6 "trk(vect2(vo3))" " gs(vo3) + a * accelTime" "vs(vo3)") (("1" (CASE-REPLACE "abs(gs(vo3)+a*accelTime) = gs(vo3)+a*accelTime") (("1" (REPLACE -7) (("1" (CASE-REPLACE "track(vect2(mkTrkGsVs(trk(vect2(vo3)),
                                                         gs(vo3) + a * accelTime,
                                                         vs(vo3)))) = trk(vect2(vo3))") (("1" (HIDE 2) (("1" (EXPAND "trk") (("1" (CASE "vect2(vo3)/=zero") (("1" (CASE-REPLACE "IF vect2(vo3)`x = 0 AND vect2(vo3)`y = 0 THEN 0
                           ELSE track(vect2(vo3))
                           ENDIF = track(vect2(vo3))") (("1" (EXPAND "mkTrkGsVs") (("1" (EXPAND "vect2") (("1" (REWRITE "track.sin_track") (("1" (REWRITE "track.cos_track") (("1" (CASE-REPLACE "(# x
                                       := gs(vo3) * (vo3`x / norm((# x := vo3`x, y := vo3`y #)))
                                           +
                                           vo3`x / norm((# x := vo3`x, y := vo3`y #)) * a *
                                            accelTime,
                                     y
                                       := vo3`y / norm((# x := vo3`x, y := vo3`y #)) * gs(vo3) +
                                           vo3`y / norm((# x := vo3`x, y := vo3`y #)) * a *
                                            accelTime #) = ((gs(vo3)+a*accelTime)/norm((# x := vo3`x, y := vo3`y #)))*(# x := vo3`x, y := vo3`y #)") (("1" (CASE-REPLACE "gs(vo3)+a*accelTime = goalGs") (("1" (LEMMA "track.track_scal" ("c" "(goalGs / norm((# x := vo3`x, y := vo3`y #)))" "v" "(# x := vo3`x, y := vo3`y #)")) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED (GOALGS)) (("2" (TYPEPRED ("norm((# x := vo3`x, y := vo3`y #))")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (EXPAND "gs" 3) (("2" (EXPAND "vect2") (("2" (FLATTEN) (("2" (DIV-BY -5 "norm((# x := vo3`x, y := vo3`y #))") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (EXPAND "zero") (("2" (EXPAND "/=") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "/=") (("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST?) (("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "gs(vo3) + a * accelTime = goalGs") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "accelTime") (("2" (EXPAND "gsAccelTime") (("2" (EXPAND "sgn_1") (("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vs") (("2" (EXPAND "mkTrkGsVs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trk") (("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(gsAccel(so3, vo3, accelTime, a)`2)") (("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "nsv") (("1" (HIDE-ALL-BUT (-1 -2 -3 -4 -5)) (("1" (REPLACE -5) (("1" (SPLIT -4) (("1" (GROUND) NIL NIL) ("2" (EXPAND "zero") (("2" (GROUND) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (EXPAND "nsv" 1) (("3" (LEMMA "vectors_2D.norm_eq_0") (("3" (EXPAND "/=") (("3" (INST -1 "vect2(gsAccel(so3, vo3, accelTime, a)`2)") (("3" (FLATTEN) (("3" (HIDE -1) (("3" (PROP) (("3" (REPLACE -1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "gsAccelUntil") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -6 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (EXPAND "gsAccel") (("2" (INST-CP -2 "trk(vect2(vo3))" "                                   gs(vo3) + a * accelTime" "vs(vo3)") (("2" (REPLACE -3) (("2" (CASE-REPLACE "IF abs(gs(vo3) + a * accelTime) = 0 THEN 0
                                         ELSE abs(gs(vo3) + a * accelTime)
                                         ENDIF = abs(gs(vo3)+a*accelTime)") (("1" (INST -3 "trk(vect2(mkTrkGsVs(trk(vect2(vo3)),
                                                                   gs(vo3) + a * accelTime,
                                                                   vs(vo3))))" "                   abs(gs(vo3) + a * accelTime)" "                   vs(mkTrkGsVs(trk(vect2(vo3)), gs(vo3) + a * accelTime,
                                                            vs(vo3)))") (("1" (REPLACE -3) (("1" (EXPAND "accelTime") (("1" (EXPAND "gsAccelTime") (("1" (EXPAND "a") (("1" (HIDE -) (("1" (EXPAND "sgn_1") (("1" (EXPAND "abs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccelUntil") (("3" (EXPAND "gsAccel") (("3" (EXPAND "vs") (("3" (EXPAND "mkTrkGsVs") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (EXPAND "mkTrkGsVs") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (EXPAND "norm") (("2" (EXPAND "sqv") (("2" (EXPAND "*") (("2" (LEMMA "sin2_cos2") (("2" (INST -1 "TK") (("2" (EXPAND "sq") (("2" (MULT-BY -1 "GS*GS") (("2" (SIMPLIFY -1) (("2" (REPLACE -1) (("2" (LEMMA "sqrt_sq") (("2" (CASE-REPLACE "1*(GS*GS) = sq(abs(GS))") (("1" (INST?) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sq") (("2" (EXPAND "abs") (("2" (HIDE-ALL-BUT 1) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gs| CONST-DECL "nnreal" |Velocity| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Velocity| TYPE-EQ-DECL NIL |Velocity| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|gsAccelTime| CONST-DECL "real" |kinematics_gs_accel| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|gsAccelUntil| CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (|gsAccel| CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|mkTrkGsVs| CONST-DECL "Velocity" |Velocity| NIL) (|Nz_vect2| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|track| CONST-DECL "nnreal_lt_2pi" |track| NIL) (|a| SKOLEM-CONST-DECL "real" |kinematics_gs_accel| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sgn_1| SKOLEM-CONST-DECL "int" |kinematics_gs_accel| NIL) (|accelTime| SKOLEM-CONST-DECL "real" |kinematics_gs_accel| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|sin_track| FORMULA-DECL NIL |track| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|track_scal| FORMULA-DECL NIL |track| NIL) (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|vo3| SKOLEM-CONST-DECL "Vect3" |kinematics_gs_accel| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|norm_eq_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|cos_track| FORMULA-DECL NIL |track| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nsv| SKOLEM-CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (|reach_goal| FORMULA-DECL NIL |kinematics_gs_accel| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|Hat| CONST-DECL "{v: Vect2 |
   (v = zero IFF w = zero) AND
    (w /= zero IFF (norm(v) = 1 AND v = (1 / norm(w)) * w))}" |util| NIL) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (|scal_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|gsAccelPos| CONST-DECL "Vect3" |kinematics_gs_accel| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (< CONST-DECL "bool" |reals| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|nnreal_lt_2pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|trk| CONST-DECL "nnreal_lt_2pi" |track| NIL) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|vs| CONST-DECL "real" |Velocity| NIL) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|sin| CONST-DECL "real" |sincos_def| |trig|) (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sin2_cos2| FORMULA-DECL NIL |sincos_def| |trig|)) NIL) (|gsAccelUntil_checks-2| |nil| 3616760503 ("" (SKEEP) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (CASE "FORALL (TK: real, GS, VS:nnreal): gs(mkTrkGsVs(TK, GS, VS))=GS") (("1" (FLATTEN) (("1" (SPLIT 2) (("1" (POSTPONE) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "gsAccelUntil") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -6 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (EXPAND "gsAccel") (("2" (INST-CP -2 "trk(vect2(vo3))" "
                                   gs(vo3) + a * accelTime" "vs(vo3)") (("1" (REPLACE -3) (("1" (CASE-REPLACE "IF gs(vo3) + a * accelTime = 0 THEN 0
                   ELSE gs(vo3) + a * accelTime
                   ENDIF = gs(vo3)+a*accelTime") (("1" (INST -3 "trk(vect2(mkTrkGsVs(trk(vect2(vo3)),
                                       gs(vo3) + a * accelTime,
                                       vs(vo3))))" "
                   gs(vo3) + a * accelTime" "
                   vs(mkTrkGsVs(trk(vect2(vo3)), gs(vo3) + a * accelTime,
                                vs(vo3)))") (("1" (REPLACE -3) (("1" (EXPAND "accelTime") (("1" (EXPAND "gsAccelTime") (("1" (EXPAND "a") (("1" (EXPAND "abs") (("1" (EXPAND "sgn_1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 1 2 3)) (("1" (CASE-REPLACE "goalGs = gs(vo3)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccelUntil") (("3" (EXPAND "gsAccel") (("3" (EXPAND "vs") (("3" (EXPAND "mkTrkGsVs") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (EXPAND "mkTrkGsVs") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (EXPAND "norm") (("2" (EXPAND "sqv") (("2" (EXPAND "*") (("2" (LEMMA "trig_basic.sin2_cos2") (("2" (INST -1 "TK") (("2" (EXPAND "sq") (("2" (MULT-BY -1 "GS*GS") (("2" (SIMPLIFY -1) (("2" (REPLACE -1) (("2" (LEMMA "sqrt_sq") (("2" (CASE-REPLACE "1*(GS*GS) = sq(GS)") (("1" (INST?) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sq") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|gsAccelUntil_checks-1| |nil| 3616507255 ("" (SKEEP) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (CASE "FORALL (TK, GS, VS:real): gs(mkTrkGsVs(TK, GS, VS))=GS") (("1" (FLATTEN) (("1" (SPLIT 2) (("1" (POSTPONE) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "gsAccelUntil") (("2" (REPLACE -5 :DIR RL) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "IF gs(nsv`2) = 0 THEN 0 ELSE gs(nsv`2) ENDIF = gs(nsv`2)") (("1" (POSTPONE) NIL NIL) ("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccelUntil") (("3" (EXPAND "gsAccel") (("3" (EXPAND "vs") (("3" (EXPAND "mkTrkGsVs") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (EXPAND "mkTrkGsVs") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|gsAccelToRTA_TCC1| 0 (|gsAccelToRTA_TCC1-1| |nil| 3616432391 ("" (SKEEP) (("" (SKEEP) (("" (ASSERT) (("" (LIFT-IF -2) (("" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gsAccelToRTA| SUBTYPE "number_fields.*(kinematics_gs_accel.sgn, kinematics_gs_accel.gsAccel)" "nzreal"))) (|gsAccelToRTA_TCC2| 0 (|gsAccelToRTA_TCC2-3| "" 3804577743 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "gsAccelToRTA_possible") (("" (LIFT-IF -4) (("" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (SIMPLIFY -6) (("1" (CASE "(a / 2) * rta ^ 2 + gsIn * rta >= dist") (("1" (MULT-BY -1 "2*a") (("1" (EXPAND "discr") (("1" (HIDE (-2 -3 -4 -5 -6 -7)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(a / 2) * rta ^ 2 + gsIn * rta <= dist") (("1" (HIDE (-2 -3 -4 -5 -6)) (("1" (CASE "-2*a>=0") (("1" (MULT-BY -2 "-2*a") (("1" (EXPAND "discr") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal_min| APPLICATION-JUDGEMENT "{z: nzreal | z <= x AND z <= y}" |real_defs| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|a| SKOLEM-CONST-DECL "nzreal" |kinematics_gs_accel| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|discr| CONST-DECL "real" |quadratic| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|gsAccelToRTA_possible| CONST-DECL "[bool, nnreal]" |gsAccel| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK (|gsAccelToRTA| SUBTYPE "kinematics_gs_accel.C" "{c: reals.real | reals.>=(quadratic.discr(kinematics_gs_accel.A, kinematics_gs_accel.B, c), 0)}")) (|gsAccelToRTA_TCC2-2| |nil| 3765286303 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "gsAccelToRTA_possible") (("" (LIFT-IF -5) (("" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (SIMPLIFY -6) (("1" (CASE "(a / 2) * rta ^ 2 + gsIn * rta >= dist") (("1" (MULT-BY -1 "2*a") (("1" (EXPAND "discr") (("1" (HIDE (-2 -3 -4 -5 -6 -7)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(a / 2) * rta ^ 2 + gsIn * rta <= dist") (("1" (HIDE (-2 -3 -4 -5 -6)) (("1" (CASE "-2*a>=0") (("1" (MULT-BY -2 "-2*a") (("1" (EXPAND "discr") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|gsAccelToRTA| SUBTYPE "kinematics_gs_accel.C" "{c: reals.real | reals.>=(quadratic.discr(kinematics_gs_accel.A, kinematics_gs_accel.B, c), 0)}")) (|gsAccelToRTA_TCC2-1| |nil| 3616432391 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("" (LIFT-IF -2) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|gsAccelToRTA| SUBTYPE "kinematics_gs_accel.C" "{c: reals.real | reals.>=(quadratic.discr(kinematics_gs_accel.A, kinematics_gs_accel.B, c), 0)}"))) (|gsAccelToRTA_TCC3| 0 (|gsAccelToRTA_TCC3-1| |nil| 3765272604 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_min| APPLICATION-JUDGEMENT "{z: nzreal | z <= x AND z <= y}" |real_defs| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|gsAccelToRTA_possible| CONST-DECL "[bool, nnreal]" |gsAccel| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|gsAccelToRTA| SUBTYPE "(number_fields.-)(kinematics_gs_accel.sgn)" "Sign"))) (|gsAccelToRTA_checks_TCC1| 0 (|gsAccelToRTA_checks_TCC1-2| "" 3884831510 ("" (SKEEP) (("" (EXPAND "gs") (("" (EXPAND "vect2") (("" (LEMMA "vectors_2D.norm_eq_0") (("" (TYPEPRED ("vo3")) (("" (INST -2 "vect2(vo3)") (("" (FLATTEN) (("" (HIDE -2) (("" (PROP) (("" (EXPAND "vect2") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|gsAccelToRTA_checks| SUBTYPE "Velocity.gs(kinematics_gs_accel.vo3)" "posreal")) (|gsAccelToRTA_checks_TCC1-1| |nil| 3616838793 ("" (SKEEP) (("" (EXPAND "gs") (("" (EXPAND "vect2") (("" (LEMMA "vectors_2D.norm_eq_0") (("" (TYPEPRED (VO3)) (("" (INST -2 "vect2(vo3)") (("" (FLATTEN) (("" (HIDE -2) (("" (PROP) (("" (EXPAND "vect2") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gs| CONST-DECL "nnreal" |Velocity| NIL) (|norm_eq_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|)) NIL (|gsAccelToRTA_checks| SUBTYPE "Velocity.gs(kinematics_gs_accel.vo3)" "posreal"))) (|gsAccelToRTA_checks_TCC2| 0 (|gsAccelToRTA_checks_TCC2-4| "" 3884831595 ("" (SKEEP) (("" (CASE "gsTor`1>0") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (EXPAND "gsAccelToRTA") (("2" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1
                                                ELSE -1
                                                ENDIF*gsAccel!1") (("2" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (NAME-REPLACE "sgn" "IF dist / rta >= gs(vo3) THEN 1
                                             ELSE -1
                                             ENDIF") (("1" (CASE-REPLACE "-sgn = IF dist / rta >= gs(vo3) THEN -1
                                             ELSE 1
                                             ENDIF") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LIFT-IF -1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (CASE "discr(a/2, -a*rta, dist-gs(vo3)*rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (CASE-REPLACE "sgn =1") (("1" (MULT-BY -3 "gsAccel!1") (("1" (CASE "gs(vo3)>0") (("1" (ADD-FORMULAS -1 -2) (("1" (GROUND) (("1" (CASE-REPLACE "-(a*rta) = -a*rta") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vectors_2D.norm_eq_0" ("v" "vect2(vo3)")) (("2" (FLATTEN) (("2" (EXPAND "gs") (("2" (TYPEPRED ("vo3")) (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CANCEL-BY 1 "a/2") (("2" (CASE "dist/rta>=gs(vo3)") (("1" (CROSS-MULT -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "sgn=-1") (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, --1)") (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -6) (("2" (SIMPLIFY 3) (("2" (CASE "-rt>0") (("1" (MULT-BY -1 "gsAccel!1") (("1" (TYPEPRED ("gs(vo3)")) (("1" (ADD-FORMULAS -1 -2) (("1" (HIDE -5) (("1" (GROUND) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-BY -1 "gsAccel!1") (("2" (BOTH-SIDES "-" "gs(vo3)" -1) (("2" (HIDE -4) (("2" (CASE "min(rta, -gs(vo3) / a) * gsAccel!1 - gs(vo3)<=0") (("1" (CASE "rt * gsAccel!1 - gs(vo3) <0") (("1" (SPLIT-INEQ -2) (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "min(rta, -gs(vo3)/a)<= -gs(vo3)/a") (("1" (MULT-BY -1 "gsAccel!1") (("1" (EXPAND "a") (("1" (EXPAND "sgn") (("1" (REPLACE -3) (("1" (CASE-REPLACE "-gs(vo3) / (-1 * gsAccel!1) * gsAccel!1 = gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta" _ _ _) (("1" (INST -1 "sgn" _ _) (("1" (INST -1 "a" _) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2" _ _) (("1" (INST -1 "-a*rta" _) (("1" (INST -1 "dist-gs(vo3)*rta") NIL NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "sgn") (("3" (ASSERT) (("3" (EXPAND "a") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "TorPos") (("4" (PROPAX) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED ("vo3")) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|gsAccelToRTA_checks| SUBTYPE "kinematics_gs_accel.gsTor`1" "posreal")) (|gsAccelToRTA_checks_TCC2-3| "" 3884824095 ("" (SKEEP) (("" (CASE "gsTor`1>0") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (EXPAND "gsAccelToRTA") (("2" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1
                                                ELSE -1
                                                ENDIF*gsAccel!1") (("2" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (NAME-REPLACE "sgn" "IF dist / rta >= gs(vo3) THEN 1
                                             ELSE -1
                                             ENDIF") (("1" (CASE-REPLACE "-sgn = IF dist / rta >= gs(vo3) THEN -1
                                             ELSE 1
                                             ENDIF") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LIFT-IF -1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (CASE "discr(a/2, -a*rta, dist-gs(vo3)*rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (CASE-REPLACE "sgn =1") (("1" (MULT-BY -3 "gsAccel!1") (("1" (CASE "gs(vo3)>0") (("1" (ADD-FORMULAS -1 -2) (("1" (GROUND) (("1" (CASE-REPLACE "-(a*rta) = -a*rta") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vectors_2D.norm_eq_0" ("v" "vect2(vo3)")) (("2" (FLATTEN) (("2" (EXPAND "gs") (("2" (TYPEPRED (VO3)) (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CANCEL-BY 1 "a/2") (("2" (CASE "dist/rta>=gs(vo3)") (("1" (CROSS-MULT -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "sgn=-1") (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, --1)") (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -6) (("2" (SIMPLIFY 3) (("2" (CASE "-rt>0") (("1" (MULT-BY -1 "gsAccel!1") (("1" (TYPEPRED ("gs(vo3)")) (("1" (ADD-FORMULAS -1 -2) (("1" (HIDE -5) (("1" (GROUND) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-BY -1 "gsAccel!1") (("2" (BOTH-SIDES "-" "gs(vo3)" -1) (("2" (HIDE -4) (("2" (CASE "min(rta, -gs(vo3) / a) * gsAccel!1 - gs(vo3)<=0") (("1" (CASE "rt * gsAccel!1 - gs(vo3) <0") (("1" (SPLIT-INEQ -2) (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "min(rta, -gs(vo3)/a)<= -gs(vo3)/a") (("1" (MULT-BY -1 "gsAccel!1") (("1" (EXPAND "a") (("1" (EXPAND "sgn") (("1" (REPLACE -3) (("1" (CASE-REPLACE "-gs(vo3) / (-1 * gsAccel!1) * gsAccel!1 = gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta" _ _ _) (("1" (INST -1 "sgn" _ _) (("1" (INST -1 "a" _) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2" _ _) (("1" (INST -1 "-a*rta" _) (("1" (INST -1 "dist-gs(vo3)*rta") NIL NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "sgn") (("3" (ASSERT) (("3" (EXPAND "a") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "TorPos") (("4" (PROPAX) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gsAccelToRTA| CONST-DECL "[real, real]" |kinematics_gs_accel| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|gsAccelToRTA_possible| CONST-DECL "[bool, nnreal]" |gsAccel| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|discr| CONST-DECL "real" |quadratic| |reals|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Sign| TYPE-EQ-DECL NIL |sign| |reals|) (|TorPos| SKOLEM-CONST-DECL "[bool, nnreal]" |kinematics_gs_accel| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|norm_eq_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|vo3| SKOLEM-CONST-DECL "nzhVect3" |kinematics_gs_accel| NIL) (|dist| SKOLEM-CONST-DECL "posreal" |kinematics_gs_accel| NIL) (|rta| SKOLEM-CONST-DECL "posreal" |kinematics_gs_accel| NIL) (|a| SKOLEM-CONST-DECL "real" |kinematics_gs_accel| NIL) (|root| CONST-DECL "real" |quadratic| |reals|) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sgn| SKOLEM-CONST-DECL "int" |kinematics_gs_accel| NIL) (|zero_div| FORMULA-DECL NIL |extra_tegies| NIL) (|div_div1| FORMULA-DECL NIL |real_props| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (DIV_33 SKOLEM-CONST-DECL "real" |kinematics_gs_accel| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|both_sides_minus_lt1| FORMULA-DECL NIL |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|roots_ge_0| FORMULA-DECL NIL |quadratic| |reals|) (|gsAccelToRTA_TCC2| SUBTYPE-TCC NIL |kinematics_gs_accel| NIL) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gs| CONST-DECL "nnreal" |Velocity| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Velocity| TYPE-EQ-DECL NIL |Velocity| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) SHOSTAK (|gsAccelToRTA_checks| SUBTYPE "kinematics_gs_accel.gsTor`1" "posreal")) (|gsAccelToRTA_checks_TCC2-2| "" 3804604895 ("" (SKEEP) (("" (CASE "gsTor`1>0") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (EXPAND "gsAccelToRTA") (("2" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1
                                                ELSE -1
                                                ENDIF*gsAccel!1") (("2" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (NAME-REPLACE "sgn" "IF dist / rta >= gs(vo3) THEN 1
                                             ELSE -1
                                             ENDIF") (("1" (CASE-REPLACE "-sgn = IF dist / rta >= gs(vo3) THEN -1
                                             ELSE --1
                                             ENDIF") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LIFT-IF -1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (CASE "discr(a/2, -a*rta, dist-gs(vo3)*rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (CASE-REPLACE "sgn =1") (("1" (MULT-BY -3 "gsAccel!1") (("1" (CASE "gs(vo3)>0") (("1" (ADD-FORMULAS -1 -2) (("1" (GROUND) (("1" (CASE-REPLACE "-(a*rta) = -a*rta") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vectors_2D.norm_eq_0" ("v" "vect2(vo3)")) (("2" (FLATTEN) (("2" (EXPAND "gs") (("2" (TYPEPRED (VO3)) (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CANCEL-BY 1 "a/2") (("2" (CASE "dist/rta>=gs(vo3)") (("1" (CROSS-MULT -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "sgn=-1") (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, --1)") (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -6) (("2" (SIMPLIFY 3) (("2" (CASE "-rt>0") (("1" (MULT-BY -1 "gsAccel!1") (("1" (TYPEPRED ("gs(vo3)")) (("1" (ADD-FORMULAS -1 -2) (("1" (HIDE -5) (("1" (GROUND) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-BY -1 "gsAccel!1") (("2" (BOTH-SIDES "-" "gs(vo3)" -1) (("2" (HIDE -4) (("2" (CASE "min(rta, -gs(vo3) / a) * gsAccel!1 - gs(vo3)<=0") (("1" (CASE "rt * gsAccel!1 - gs(vo3) <0") (("1" (SPLIT-INEQ -2) (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "min(rta, -gs(vo3)/a)<= -gs(vo3)/a") (("1" (MULT-BY -1 "gsAccel!1") (("1" (EXPAND "a") (("1" (EXPAND "sgn") (("1" (REPLACE -3) (("1" (CASE-REPLACE "-gs(vo3) / (-1 * gsAccel!1) * gsAccel!1 = gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta" _ _ _) (("1" (INST -1 "sgn" _ _) (("1" (INST -1 "a" _) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2" _ _) (("1" (INST -1 "-a*rta" _) (("1" (INST -1 "dist-gs(vo3)*rta") NIL NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "sgn") (("3" (ASSERT) (("3" (EXPAND "a") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "TorPos") (("4" (PROPAX) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|gsAccelToRTA_checks| SUBTYPE "kinematics_gs_accel.gsTor`1" "posreal")) (|gsAccelToRTA_checks_TCC2-1| |nil| 3616838793 ("" (SKEEP) (("" (CASE "gsTor`1>0") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (EXPAND "gsAccelToRTA") (("2" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1
                                            ELSE -1
                                            ENDIF*gsAccel!1") (("2" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (NAME-REPLACE "sgn" "IF dist / rta >= gs(vo3) THEN 1
                                       ELSE -1
                                       ENDIF") (("1" (CASE-REPLACE "-sgn = IF dist / rta >= gs(vo3) THEN -1
                                       ELSE --1
                                       ENDIF") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LIFT-IF -1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (CASE "discr(a/2, -a*rta, dist-gs(vo3)*rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (CASE-REPLACE "sgn =1") (("1" (MULT-BY -3 "gsAccel!1") (("1" (CASE "gs(vo3)>0") (("1" (ADD-FORMULAS -1 -2) (("1" (GROUND) (("1" (CASE-REPLACE "-(a*rta) = -a*rta") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "vectors_2D.norm_eq_0" ("v" "vect2(vo3)")) (("2" (FLATTEN) (("2" (EXPAND "gs") (("2" (TYPEPRED (VO3)) (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CANCEL-BY 1 "a/2") (("2" (CASE "dist/rta>=gs(vo3)") (("1" (CROSS-MULT -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "sgn=-1") (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, --1)") (("1" (EXPAND "TorPos" -5) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACE -6) (("2" (SIMPLIFY 3) (("2" (CASE "-rt>0") (("1" (MULT-BY -1 "gsAccel!1") (("1" (TYPEPRED ("gs(vo3)")) (("1" (ADD-FORMULAS -1 -2) (("1" (HIDE -5) (("1" (GROUND) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-BY -1 "gsAccel!1") (("2" (BOTH-SIDES "-" "gs(vo3)" -1) (("2" (HIDE -4) (("2" (CASE "min(rta, -gs(vo3) / a) * gsAccel!1 - gs(vo3)<=0") (("1" (CASE "rt * gsAccel!1 - gs(vo3) <0") (("1" (SPLIT-INEQ -2) (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "min(rta, -gs(vo3)/a)<= -gs(vo3)/a") (("1" (MULT-BY -1 "gsAccel!1") (("1" (EXPAND "a") (("1" (EXPAND "sgn") (("1" (REPLACE -3) (("1" (CASE-REPLACE "-gs(vo3) / (-1 * gsAccel!1) * gsAccel!1 = gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (GROUND) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta") (("1" (INST -1 "sgn") (("1" (SPLIT -1) (("1" (INST -1 "a") (("1" (PROP) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2") (("1" (INST -1 "-a*rta") (("1" (INST -1 "dist-gs(vo3)*rta") NIL NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "TorPos") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (ASSERT) (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|gsAccelToRTA_checks| SUBTYPE "kinematics_gs_accel.gsTor`1" "posreal"))) (|gsAccelToRTA_checks| 0 (|gsAccelToRTA_checks-7| "" 3884831794 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                               gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE 1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "sin_track") (("2" (REWRITE "cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                   (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                          norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                       (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                             (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                                                                                                                                                                                      y := 1 * vo3`y #))
                                                                                                                                                                                               = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`x /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta,
                                                                                                                                                                                y
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`y /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (ASSERT) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`x /
                                                                                                                                                                                                       ((1 + a * rt / NRM) * norm(vect2(vo3))),
                                                                                                                                                                                                 y
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`y /
                                                                                                                                                                                                       ((1 + a * rt / NRM) *
                                                                                                                                                                                                         norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                                                                                                                                                                                                   vect2(vo3)
                                                                                                                                                                                                   +
                                                                                                                                                                                                   ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                                                                                                                                                                                                     (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                                                                                                                                                                                                    * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                                                                                                                                                                                                    + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`x,
                                                                                                                                                                                                  y
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
                                                                                                                                                                                                                 a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
                                                                                                                                                                                                                             rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
                                                                                                                                                                                                                             gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED ("dist")) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL NIL)) NIL) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("gsAccel!1")) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED ("gsAccel!1")) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "*") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (HIDE 2) (("3" (EXPAND "a") (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED ("gsAccel!1")) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (EXPAND "gsTor") (("2" (PROPAX) NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta" _ _ _) (("1" (INST -1 "sgn" _ _) (("1" (INST -1 "a" _) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2" "-a*rta" "dist - gs(vo3) * rta") (("1" (ASSERT) (("1" (EXPAND "a") (("1" (LIFT-IF -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (EXPAND "sgn") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "TorPos") (("4" (PROPAX) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED ("vo3")) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|gsAccelToRTA_checks-6| "" 3884827860 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                               gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE 1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "sin_track") (("2" (REWRITE "cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                   (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                          norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                       (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                             (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                                                                                                                                                                                      y := 1 * vo3`y #))
                                                                                                                                                                                               = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`x /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta,
                                                                                                                                                                                y
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`y /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (ASSERT) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`x /
                                                                                                                                                                                                       ((1 + a * rt / NRM) * norm(vect2(vo3))),
                                                                                                                                                                                                 y
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`y /
                                                                                                                                                                                                       ((1 + a * rt / NRM) *
                                                                                                                                                                                                         norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                                                                                                                                                                                                   vect2(vo3)
                                                                                                                                                                                                   +
                                                                                                                                                                                                   ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                                                                                                                                                                                                     (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                                                                                                                                                                                                    * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                                                                                                                                                                                                    + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`x,
                                                                                                                                                                                                  y
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
                                                                                                                                                                                                                 a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
                                                                                                                                                                                                                             rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
                                                                                                                                                                                                                             gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED (DIST)) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL NIL)) NIL) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED (GSACCEL!1)) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED (GSACCEL!1)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "*") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (HIDE 2) (("3" (EXPAND "a") (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (GSACCEL!1)) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (EXPAND "gsTor") (("2" (PROPAX) NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta" _ _ _) (("1" (INST -1 "sgn" _ _) (("1" (INST -1 "a" _) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2" "-a*rta" "dist - gs(vo3) * rta") (("1" (ASSERT) (("1" (EXPAND "a") (("1" (LIFT-IF -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (EXPAND "sgn") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "TorPos") (("4" (PROPAX) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gsAccelToRTA| CONST-DECL "[real, real]" |kinematics_gs_accel| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|Velocity| TYPE-EQ-DECL NIL |Velocity| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|gs| CONST-DECL "nnreal" |Velocity| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|gsAccelUntil| CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|discr| CONST-DECL "real" |quadratic| |reals|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sgn| SKOLEM-CONST-DECL "int" |kinematics_gs_accel| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign| TYPE-EQ-DECL NIL |sign| |reals|) (|gsAccelTime| CONST-DECL "real" |kinematics_gs_accel| NIL) (|TorPos| SKOLEM-CONST-DECL "[bool, nnreal]" |kinematics_gs_accel| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|gsAccel| CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|sin_track| FORMULA-DECL NIL |track| NIL) (|Nz_vect2| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gsAccelPos| CONST-DECL "Vect3" |kinematics_gs_accel| NIL) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|FinVect| SKOLEM-CONST-DECL "[Vect3, Vect3]" |kinematics_gs_accel| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|quadratic_eq_0| FORMULA-DECL NIL |quadratic| |reals|) (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|a| SKOLEM-CONST-DECL "real" |kinematics_gs_accel| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|scal_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NRM SKOLEM-CONST-DECL "nnreal" |kinematics_gs_accel| NIL) (SGN SKOLEM-CONST-DECL "int" |kinematics_gs_accel| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|both_sides_minus_ge1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_plus_ge2| FORMULA-DECL NIL |real_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|neg_times_ge| FORMULA-DECL NIL |real_props| NIL) (|root_eq_0| FORMULA-DECL NIL |quadratic| |reals|) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|norm_scal| FORMULA-DECL NIL |vectors_2D| |vectors|) (|rt| SKOLEM-CONST-DECL "real" |kinematics_gs_accel| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (|Vect2| CONST-DECL "{vv: Vect2 | vv`x = x AND vv`y = y}" |util| NIL) (|Hat| CONST-DECL "{v: Vect2 |
   (v = zero IFF w = zero) AND
    (w /= zero IFF (norm(v) = 1 AND v = (1 / norm(w)) * w))}" |util| NIL) (|vs| CONST-DECL "real" |Velocity| NIL) (|cos_track| FORMULA-DECL NIL |track| NIL) (|mkTrkGsVs| CONST-DECL "Velocity" |Velocity| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|norm_eq_0| FORMULA-DECL NIL |vectors_2D| |vectors|) (|trk| CONST-DECL "nnreal_lt_2pi" |track| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|gsTor| SKOLEM-CONST-DECL "[real, real]" |kinematics_gs_accel| NIL) (|gsAccelToRTA_checks_TCC2| SUBTYPE-TCC NIL |kinematics_gs_accel| NIL) (|root| CONST-DECL "real" |quadratic| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|roots_ge_0| FORMULA-DECL NIL |quadratic| |reals|) (|vo3| SKOLEM-CONST-DECL "nzhVect3" |kinematics_gs_accel| NIL) (|rta| SKOLEM-CONST-DECL "posreal" |kinematics_gs_accel| NIL) (|gsAccelToRTA_TCC2| SUBTYPE-TCC NIL |kinematics_gs_accel| NIL) (|gsAccelToRTA_possible| CONST-DECL "[bool, nnreal]" |gsAccel| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)) SHOSTAK) (|gsAccelToRTA_checks-5| "" 3804605604 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                               gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE --1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "sin_track") (("2" (REWRITE "cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                   (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                          norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                       (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                             (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                                                                                                                                                                                      y := 1 * vo3`y #))
                                                                                                                                                                                               = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`x /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta,
                                                                                                                                                                                y
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`y /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (ASSERT) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`x /
                                                                                                                                                                                                       ((1 + a * rt / NRM) * norm(vect2(vo3))),
                                                                                                                                                                                                 y
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`y /
                                                                                                                                                                                                       ((1 + a * rt / NRM) *
                                                                                                                                                                                                         norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                                                                                                                                                                                                   vect2(vo3)
                                                                                                                                                                                                   +
                                                                                                                                                                                                   ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                                                                                                                                                                                                     (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                                                                                                                                                                                                    * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                                                                                                                                                                                                    + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`x,
                                                                                                                                                                                                  y
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
                                                                                                                                                                                                                 a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
                                                                                                                                                                                                                             rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
                                                                                                                                                                                                                             gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED (DIST)) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL NIL)) NIL) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED (GSACCEL!1)) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED (GSACCEL!1)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "*") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (HIDE 2) (("3" (EXPAND "a") (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (GSACCEL!1)) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (EXPAND "gsTor") (("2" (PROPAX) NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta" _ _ _) (("1" (INST -1 "sgn" _ _) (("1" (INST -1 "a" _) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2" "-a*rta" "dist - gs(vo3) * rta") (("1" (ASSERT) (("1" (EXPAND "a") (("1" (LIFT-IF -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (EXPAND "sgn") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "TorPos") (("4" (PROPAX) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|gsAccelToRTA_checks-4| |nil| 3765287257 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                               gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE --1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "sin_track") (("2" (REWRITE "cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                   (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                          norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                       (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                                                                                                                             (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                                                                                                                                                                                      y := 1 * vo3`y #))
                                                                                                                                                                                               = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`x /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta,
                                                                                                                                                                                y
                                                                                                                                                                                  := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                                                                      (1 * vo3`y /
                                                                                                                                                                                        norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                                                                      * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (ASSERT) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`x /
                                                                                                                                                                                                       ((1 + a * rt / NRM) * norm(vect2(vo3))),
                                                                                                                                                                                                 y
                                                                                                                                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`y /
                                                                                                                                                                                                       ((1 + a * rt / NRM) *
                                                                                                                                                                                                         norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                                                                                                                                                                                                   vect2(vo3)
                                                                                                                                                                                                   +
                                                                                                                                                                                                   ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                                                                                                                                                                                                     (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                                                                                                                                                                                                    * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                                                                                                                                                                                                    + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`x,
                                                                                                                                                                                                  y
                                                                                                                                                                                                    := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                                                                                         * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                                                                                          (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
                                                                                                                                                                                                                 a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
                                                                                                                                                                                                                             rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
                                                                                                                                                                                                                             gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED (DIST)) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "a") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL NIL)) NIL) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED (GSACCEL!1)) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED (GSACCEL!1)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "*") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (HIDE 2) (("3" (EXPAND "a") (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (GSACCEL!1)) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "gsTor") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC2") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta") (("1" (INST -1 "sgn") (("1" (SPLIT -1) (("1" (INST -1 "a") (("1" (PROP) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2") (("1" (INST -1 "-a*rta") (("1" (INST -1 "dist - gs(vo3) * rta") NIL NIL) ("2" (ASSERT) (("2" (EXPAND "a") (("2" (LIFT-IF -1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "TorPos") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|gsAccelToRTA_checks-3| |nil| 3708766907 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                             gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE --1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "sin_track") (("2" (REWRITE "cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                  (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                                                                            norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                                                                                     (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                                                                                         (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                                                                                                                                  y := 1 * vo3`y #))
                                                                                                                                           = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (CASE-REPLACE "(# x
                                                                                                                            := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                (1 * vo3`x /
                                                                                                                                  norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                * rta,
                                                                                                                          y
                                                                                                                            := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                                                                                (1 * vo3`y /
                                                                                                                                  norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                                                                                * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                                                                                                                                           := ((1 + a * rt / NRM) * vect2(vo3))`x /
                                                                                                                                               ((1 + a * rt / NRM) * norm(vect2(vo3))),
                                                                                                                                         y
                                                                                                                                           := ((1 + a * rt / NRM) * vect2(vo3))`y /
                                                                                                                                               ((1 + a * rt / NRM) *
                                                                                                                                                 norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                                                                                                                                         vect2(vo3)
                                                                                                                                         +
                                                                                                                                         ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                                                                                                                                           (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                                                                                                                                          * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                                                                                                                                          + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                                                                                                                                        := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                              (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                             * vect2(vo3))`x,
                                                                                                                                      y
                                                                                                                                        := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                              (1 + a * rt / NRM) * (rta - rt))
                                                                                                                                             * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                                                                              (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
                                                                                                                                               a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
                                                                                                                                                       rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
                                                                                                                                                       gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED (DIST)) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL NIL)) NIL) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED (GSACCEL!1)) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED (GSACCEL!1)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "*") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (GSACCEL!1)) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "gsTor") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgn") (("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC1") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta") (("1" (INST -1 "sgn") (("1" (SPLIT -1) (("1" (INST -1 "a") (("1" (PROP) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2") (("1" (INST -1 "-a*rta") (("1" (INST -1 "dist - gs(vo3) * rta") NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "TorPos") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|gsAccelToRTA_checks-2| |nil| 3708426876 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                           gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE --1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL))))))))))))))) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "track_sin_track") (("2" (REWRITE "track.cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                                                 (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                                              norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                                                   (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                                                     (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                                                                              y := 1 * vo3`y #))
                                                                                       = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+") (("1" (CASE-REPLACE "(# x
                                                                      := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                          (1 * vo3`x /
                                                                            norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                          * rta,
                                                                    y
                                                                      := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                                                                          (1 * vo3`y /
                                                                            norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                                                                          * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL))))))))))) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL))))))))))))) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL))))))))))))))))))) ("2" (GROUND) NIL))))))) ("2" (PROPAX) NIL))))))))) ("2" (PROPAX) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (SPLIT) (("1" (PROPAX) NIL) ("2" (FLATTEN) NIL))) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))))) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL))) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL))))))) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (GROUND) NIL))))))))))))))))))))) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL))))))) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL))))))))))) ("2" (GROUND) NIL))))))) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`x /
                                                                                       ((1 + a * rt / NRM) * norm(vect2(vo3))),
                                                                                 y
                                                                                   := ((1 + a * rt / NRM) * vect2(vo3))`y /
                                                                                       ((1 + a * rt / NRM) *
                                                                                         norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                                                                               vect2(vo3)
                                                                               +
                                                                               ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                                                                                 (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                                                                                * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                                                                                + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                                                                            := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                  (1 + a * rt / NRM) * (rta - rt))
                                                                                 * vect2(vo3))`x,
                                                                          y
                                                                            := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                  (1 + a * rt / NRM) * (rta - rt))
                                                                                 * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                                                                                  (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
                                                                             a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
                                                                                 rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
                                                                                 gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED (DIST)) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL))))))))))))) ("2" (GROUND) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL))))))))))))))))) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (PROPAX) NIL))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL))))))))))) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL))))))))))))) ("2" (PROPAX) NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) NIL))))) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+") (("2" (PROPAX) NIL))))))))))))) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL))))))) ("3" (EXPAND "gs") (("3" (GROUND) NIL))))) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (PROPAX) NIL))))))))))))) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL))))) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL))))) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL) ("2" (GROUND) NIL))))))) ("2" (GROUND) NIL))) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL))))))) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL))))))))))))))))) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL))) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL) ("2" (FLATTEN) NIL))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL))))))))) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL) ("2" (FLATTEN) (("2" (TYPEPRED (GSACCEL!1)) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL))) ("2" (GROUND) NIL))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED (GSACCEL!1)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL))))) ("2" (GROUND) NIL))))))))) ("2" (PROPAX) NIL))))) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL) ("2" (PROPAX) NIL))))))))))))))))))))))))))))))))) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL))) ("2" (EXPAND "*") (("2" (GROUND) NIL))))))))))))) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL))) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL))))))))))))))))))))))))) ("2" (GROUND) NIL))) ("2" (GROUND) NIL))))))))))))) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL))))))))))))))))) ("2" (GROUND) NIL))))) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL))))))))))))))))))))))))))))) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL))) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL) ("2" (GROUND) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))))))))))))) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL) ("2" (TYPEPRED (GSACCEL!1)) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL))))) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL))))))))))))))))))))) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL) ("2" (GROUND) NIL) ("3" (EXPAND "gsTor") (("3" (PROPAX) NIL))))))))))))))))))) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL))))) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) NIL))))))))))) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL))) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))))))) ("3" (CANCEL-BY 1 "rta") NIL))))))) ("2" (PROPAX) NIL))) ("2" (EXPAND "sgn") (("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))))))))) ("2" (LEMMA "gsAccelToRTA_TCC1") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta") (("1" (INST -1 "sgn") (("1" (SPLIT -1) (("1" (INST -1 "a") (("1" (PROP) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2") (("1" (INST -1 "-a*rta") (("1" (INST -1 "dist - gs(vo3) * rta") NIL))))) ("2" (PROPAX) NIL) ("3" (EXPAND "TorPos") (("3" (PROPAX) NIL))))))) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL))))))))) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL))))))) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL) ("2" (GROUND) NIL))))))))))))))))))))))))))) ("2" (FLATTEN) NIL))))) ("2" (FLATTEN) NIL))))) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (PROPAX) NIL)))))))))))))))))))) NIL) NIL NIL) (|gsAccelToRTA_checks-1| |nil| 3616850121 ("" (SKEEP) (("" (SKOLETIN) (("" (FLATTEN) (("" (EXPAND "gsAccelToRTA") (("" (NAME-REPLACE "a" "IF dist / rta >= gs(vo3) THEN 1 ELSE -1 ENDIF *
                         gsAccel!1") (("" (NAME-REPLACE "sgn" "IF dist/rta>=gs(vo3) THEN 1 ELSE -1 ENDIF") (("" (CASE-REPLACE "IF dist / rta >= gs(vo3) THEN -1 ELSE --1 ENDIF = -sgn") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (NAME-REPLACE "TorPos" "gsAccelToRTA_possible(gs(vo3), rta, dist, a)") (("1" (HIDE -4) (("1" (HIDE 1) (("1" (CASE "discr(a/2, -a * rta, dist - gs(vo3) * rta)>=0") (("1" (LEMMA "roots_ge_0") (("1" (INST -1 "a/2" "-a*rta" "dist-gs(vo3)*rta" "sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (NAME-REPLACE "rt" "root(a / 2, -a * rta, dist - gs(vo3) * rta, -sgn)") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "rt = gsAccelTime(vo3, gsTor`1, gsAccel!1)") (("1" (EXPAND "gsAccelUntil") (("1" (EXPAND "TorPos" -4) (("1" (EXPAND "gsAccelToRTA_possible") (("1" (CASE "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF <= rta") (("1" (REPLACE -2 :DIR RL) (("1" (CASE "rt<rta") (("1" (NAME-REPLACE "SGN" "IF gsTor`1 >= gs(vo3) THEN 1 ELSE -1 ENDIF") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (NAME "nsv" "gsAccel(zero, vo3, rt, SGN*gsAccel!1)") (("2" (REPLACE -1) (("2" (NAME-REPLACE "FinVect" "gsAccel(nsv`1, nsv`2, rta - rt, 0)") (("2" (EXPAND "gsAccel") (("2" (CASE-REPLACE "(gs(vo3)=0)=FALSE") (("1" (EXPAND "trk") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (LEMMA "vectors_2D.norm_eq_0") (("1" (INST -1 "vect2(vo3)") (("1" (FLATTEN) (("1" (EXPAND "gs") (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "zero") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mkTrkGsVs") (("2" (REWRITE "sin_track") (("2" (REWRITE "cos_track") (("2" (EXPAND "vect2") (("2" (EXPAND "vs") (("2" (EXPAND "gs" -1) (("2" (EXPAND "vect2") (("2" (SIMPLIFY -1) (("2" (CASE "norm((# x := vo3`x, y := vo3`y #)) *
                (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (REPLACE -1) (("1" (CASE-REPLACE "vo3`y / norm((# x := vo3`x, y := vo3`y #)) *
                norm((# x := vo3`x, y := vo3`y #)) = vo3`y") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "zero") (("1" (EXPAND "vect2") (("1" (EXPAND "Hat") (("1" (HIDE (-1 -2)) (("1" (CASE-REPLACE "(norm((# x := vo3`x, y := vo3`y #)) = 0) = FALSE") (("1" (HIDE -1) (("1" (EXPAND "Vect2") (("1" (EXPAND "+
") (("1" (EXPAND "Vect3") (("1" (EXPAND "*") (("1" (CASE-REPLACE "norm((# x := vo3`x, y := vo3`y #)) *
                 (vo3`x / norm((# x := vo3`x, y := vo3`y #))) = vo3`x") (("1" (CASE-REPLACE " norm((# x := vo3`x, y := vo3`y #)) *
                 (vo3`y / norm((# x := vo3`x, y := vo3`y #))) = vo3`y") (("1" (HIDE (-1 -2)) (("1" (EXPAND "FinVect") (("1" (EXPAND "gsAccel") (("1" (EXPAND "gsAccelPos") (("1" (EXPAND "Vect3") (("1" (NAME-REPLACE "NRM" "norm((# x := vo3`x, y := vo3`y #))") (("1" (CASE-REPLACE "vect2(nsv`1) = (1/2*rt*rt*SGN*gsAccel!1/NRM +rt)*vect2(vo3)") (("1" (CASE-REPLACE "vect2(nsv`2) = (1+SGN*gsAccel!1*rt/NRM)*vect2(vo3)") (("1" (CASE-REPLACE "rt=0") (("1" (LEMMA "root_eq_0") (("1" (INST -1 "a/2" "-a * rta " " dist - gs(vo3) * rta" "-sgn") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "rt" -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "0/NRM = 0") (("1" (SIMPLIFY 2) (("1" (EXPAND "vect2") (("1" (EXPAND "*") (("1" (SIMPLIFY 2) (("1" (EXPAND "Hat") (("1" (CASE-REPLACE "(norm((# x := 1 * vo3`x,
                                          y := 1 * vo3`y #))
                                   = 0) = FALSE") (("1" (EXPAND "Vect2") (("1" (EXPAND "+
") (("1" (CASE-REPLACE "(# x
                := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                    (1 * vo3`x /
                      norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                    * rta,
              y
                := norm((# x := 1 * vo3`x, y := 1 * vo3`y #)) *
                    (1 * vo3`y /
                      norm((# x := 1 * vo3`x, y := 1 * vo3`y #)))
                    * rta #) = rta*vect2(vo3)") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "gs") (("1" (CASE-REPLACE "abs(rta) = rta") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (HIDE 4) (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "SGN = sgn") (("1" (CASE-REPLACE "sgn*gsAccel!1 = a") (("1" (HIDE -5) (("1" (CASE "1+a*rt/NRM = 0") (("1" (MULT-BY -1 "NRM") (("1" (SIMPLIFY -1) (("1" (CASE-REPLACE "a * rt / NRM * NRM = a*rt") (("1" (HIDE -1) (("1" (CASE-REPLACE "NRM = gs(vo3)") (("1" (HIDE -1) (("1" (CASE-REPLACE "rt = -gs(vo3)/a") (("1" (HIDE 3) (("1" (CASE "a>0") (("1" (CASE "rt<0") (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("gs(vo3)")) (("2" (DIV-BY -1 "a") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -13) (("2" (SPLIT -13) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "min(rta, -gs(vo3)/a)<=-gs(vo3)/a") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "min") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "NRM") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Hat") (("2" (CASE-REPLACE "(norm((1 + a * rt / NRM) * vect2(vo3)) = 0)=FALSE") (("1" (EXPAND "Vect2") (("1" (CASE "1+a*rt/NRM>0") (("1" (REWRITE "vectors_2D.norm_scal") (("1" (CASE-REPLACE "abs((1 + a * rt / NRM)) = (1+a*rt/NRM)") (("1" (CASE-REPLACE "(# x
                           := ((1 + a * rt / NRM) * vect2(vo3))`x /
                               ((1 + a * rt / NRM) * norm(vect2(vo3))),
                         y
                           := ((1 + a * rt / NRM) * vect2(vo3))`y /
                               ((1 + a * rt / NRM) *
                                 norm(vect2(vo3))) #) = (1/norm(vect2(vo3)))*vect2(vo3)") (("1" (CASE-REPLACE "((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) *
                     vect2(vo3)
                     +
                     ((1 + a * rt / NRM) * norm(vect2(vo3)) * rta -
                       (1 + a * rt / NRM) * norm(vect2(vo3)) * rt)
                      * ((1 / norm(vect2(vo3))) * vect2(vo3))) = ((1/2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt)
                      + (1+a*rt/NRM)*(rta-rt))*vect2(vo3)") (("1" (CASE-REPLACE "(# x
                := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                      (1 + a * rt / NRM) * (rta - rt))
                     * vect2(vo3))`x,
              y
                := (((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                      (1 + a * rt / NRM) * (rta - rt))
                     * vect2(vo3))`y #) = ((1 / 2 * (gsAccel!1 * rt * rt * sgn) / NRM + rt) +
                      (1 + a * rt / NRM) * (rta - rt))*vect2(vo3)") (("1" (LEMMA "quadratic_eq_0") (("1" (HIDE (-2 -3 -4)) (("1" (INST -1 "a / 2" " -a * rta" " dist - gs(vo3) * rta" "rt") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (REWRITE "vectors_2D.norm_scal") (("1" (EXPAND "vect2") (("1" (EXPAND "NRM") (("1" (CASE-REPLACE "norm((#x:=vo3`x, y:=vo3`y#))=gs(vo3)") (("1" (CASE-REPLACE "1/2 * (gsAccel!1 * rt * rt * sgn) / gs(vo3) -
           a * rt / gs(vo3) * rt = -a/2*sq(rt)/gs(vo3)") (("1" (HIDE -1) (("1" (CASE "gs(vo3) = abs(gs(vo3))") (("1" (REPLACE -1 5) (("1" (LEMMA "abs_mult") (("1" (INST -1 "-a / 2 * sq(rt) / abs(gs(vo3)) + a * rt / abs(gs(vo3)) * rta +
           rta " " gs(vo3)") (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -1) (("1" (CASE-REPLACE "(-a / 2 * sq(rt) / gs(vo3) + a * rt / gs(vo3) * rta + rta) *
           gs(vo3) = -a/2*sq(rt)+a*rt*rta+rta*gs(vo3)") (("1" (CASE "dist = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (TYPEPRED (DIST)) (("1" (REPLACE -3 -2) (("1" (CASE-REPLACE "abs(-a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)) = -a / 2 * sq(rt) + a * rt * rta + rta * gs(vo3)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a") (("2" (EXPAND "sq") (("2" (EXPAND "sgn") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (FLATTEN) (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "rt") (("3" (EXPAND "sgn") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (GROUND) (("2" (EXPAND "+
") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gs") (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (HIDE 6) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (MULT-BY -1 "NRM") (("2" (CASE-REPLACE "NRM = gs(vo3)") (("1" (SIMPLIFY -2) (("1" (CASE-REPLACE " gs(vo3) * (a * rt / gs(vo3))= a*rt") (("1" (HIDE 4) (("1" (CASE "a>0") (("1" (CASE "rt<=-gs(vo3)/a") (("1" (CASE "-gs(vo3)/a<0") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "rt>=gs(vo3)/(-a)") (("1" (CASE-REPLACE "gs(vo3)/(-a) = -gs(vo3)/a") (("1" (HIDE -1) (("1" (LIFT-IF -16) (("1" (SPLIT -16) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "NRM") (("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REWRITE "vectors_2D.norm_scal") (("2" (SIMPLIFY 1) (("2" (TYPEPRED ("gs(vo3)")) (("2" (SIMPLIFY -7) (("2" (CASE "abs(1+a*rt/NRM) /= 0 ") (("1" (EXPAND "gs") (("1" (REAL-PROPS) NIL NIL)) NIL) ("2" (EXPAND "/=") (("2" (EXPAND "abs") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sgn") (("2" (EXPAND "a") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "SGN") (("2" (REPLACE -11 1) (("2" (SIMPLIFY 1) (("2" (LIFT-IF 1) (("2" (HIDE (-1 -2 -3)) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" " gs(vo3)" -1) (("1" (SIMPLIFY -1) (("1" (EXPAND "sgn") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (LIFT-IF -1) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED (GSACCEL!1)) (("2" (CASE "rt>0") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (BOTH-SIDES "-" "gs(vo3)" 2) (("1" (SIMPLIFY 2) (("1" (CASE "rt>0") (("1" (TYPEPRED (GSACCEL!1)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vect2") (("2" (HIDE 3) (("2" (REPLACE -2 :DIR RL) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "*") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "*") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "vect2") (("2" (EXPAND "*") (("2" (SPLIT 1) (("1" (REPLACE -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (EXPAND "vect2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("vo3")) (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "gs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SPLIT-INEQ -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLIP-INEQ 2) (("2" (HIDE-ALL-BUT (-1 -2 -6 1)) (("2" (NAME-REPLACE "MIN" "IF a > 0 THEN rta ELSE min(rta, -gs(vo3) / a) ENDIF") (("2" (CASE "rt<=MIN") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccelTime") (("2" (REPLACE -4 1) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE "abs(-1 * (gsAccel!1 * rt * sgn)) = gsAccel!1*rt") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (GSACCEL!1)) (("2" (HIDE (-4 -5 -6 -7 2 3)) (("2" (EXPAND "abs") (("2" (EXPAND "sgn") (("2" (GRIND) (("1" (SPLIT-INEQ -4) (("1" (MULT-BY -2 "rt") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (MULT-BY -2 "rt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "gsAccelToRTA_checks_TCC2") (("3" (INST -1 "vo3" " dist" " rta" " gsAccel!1" " gsTor") (("3" (REVEAL 1) (("3" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "gsTor") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "dist/rta>=gs(vo3)") (("1" (CASE "a/2>=0") (("1" (CROSS-MULT -2) (("1" (MULT-BY -2 "a/2") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY 1) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (CASE "-a/2>0") (("1" (MULT-BY -2 "-a/2") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "a") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CANCEL-BY 1 "rta") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgn") (("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "gsAccelToRTA_TCC1") (("2" (INST -1 "gs(vo3)" "dist" "rta" "gsAccel!1" "dist/rta") (("1" (INST -1 "sgn") (("1" (SPLIT -1) (("1" (INST -1 "a") (("1" (PROP) (("1" (INST -1 "TorPos") (("1" (SPLIT -1) (("1" (INST -1 "a/2") (("1" (INST -1 "-a*rta") (("1" (INST -1 "dist - gs(vo3) * rta") NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "TorPos") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a") (("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gs") (("2" (LEMMA "vectors_2D.norm_eq_0") (("2" (INST -1 "vect2(vo3)") (("2" (TYPEPRED (VO3)) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "sgn") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
