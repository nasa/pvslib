(|vsAccel| (|accel_TCC1| 0 (|accel_TCC1-1| |nil| 3612193685 ("" (EXPAND "deriv_domain?") (("" (SKOSIMP*) (("" (INST 1 "e!1/2") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|accel| ASSUMING "analysis@integral_split_fun[real].integral_split_fun" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|accel_TCC2| 0 (|accel_TCC2-1| |nil| 3612193685 ("" (ASSUMING-TCC) NIL NIL) ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|accel| ASSUMING "analysis@integral_split_fun[real].integral_split_fun" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|accel_TCC3| 0 (|accel_TCC3-1| |nil| 3612193685 ("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST 1 "x!1+1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|accel| ASSUMING "analysis@integral_split_fun[real].integral_split_fun" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|L1_prep| 0 (|L1_prep-1| |nil| 3611481051 ("" (SKOSIMP*) (("" (EXPAND "accel") (("" (CASE " tStar!1<=t!1") (("1" (LEMMA "split_fun_Integrable[real]") (("1" (INST?) (("1" (LEMMA "Integral_const_fun[real]") (("1" (INST-CP -1 "a!1" "0" "tStar!1") (("1" (INST -1 "0" "tStar!1" "t!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "split_fun") (("2" (LEMMA "Integral_restr_eq[real]") (("1" (INST -1 "0" "t!1" "const_fun(a!1)" "LAMBDA (t: real):
                         IF (t <= tStar!1) THEN const_fun(a!1)(t)
                         ELSE const_fun(0)(t)
                         ENDIF") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (HIDE 3) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (LEMMA "Integral_const_fun[real]") (("3" (INST?) (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|accel| CONST-DECL "[real -> real]" |vsAccel| NIL) (|split_fun| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (|split_fun_Integrable| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|velo_TCC1| 0 (|velo_TCC1-1| |nil| 3611332305 ("" (LEMMA "L1_prep") (("" (SKOSIMP*) (("" (INST?) NIL NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|L1_prep| FORMULA-DECL NIL |vsAccel| NIL)) NIL (|velo| SUBTYPE "vsAccel.accel(vsAccel.tStar, vsAccel.a)" "Integrable_funs[real](0, vsAccel.t)"))) (L1_TCC1 0 (L1_TCC1-1 |nil| 3611480418 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (L1 SUBTYPE "vsAccel.t" "nnreal"))) (L1_TCC2 0 (L1_TCC2-1 |nil| 3611480418 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (L1 SUBTYPE "vsAccel.tStar" "nnreal"))) (L1 0 (L1-2 |nil| 3612193810 ("" (SKOSIMP*) (("" (EXPAND "velo") (("" (EXPAND "accel") (("" (LEMMA "Integral_split_fun[real]") (("" (INST -1 "const_fun(a!1)" "const_fun(0)" "0" "tmax!1" "tStar!1" "t!1") (("" (ASSERT) (("" (LEMMA "Integral_const_fun[real]") (("1" (INST-CP -1 "a!1" "0" "tStar!1") (("1" (INST -1 "0" "tStar!1" "tmax!1") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (CASE "t!1<=tStar!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "Integral_const_fun[real]") (("1" (INST - "a!1" "0" "t!1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -6) (("2" (LEMMA "Integral_const_fun[real]") (("2" (INST-CP -1 "a!1" "0" "tStar!1") (("2" (INST -1 "0" "tStar!1" "t!1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|velo| CONST-DECL "real" |vsAccel| NIL) (|Integral_split_fun| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|accel| CONST-DECL "[real -> real]" |vsAccel| NIL)) NIL) (L1-1 |nil| 3611332349 ("" (SKOSIMP*) (("" (EXPAND "velo") (("" (EXPAND "accel") (("" (LEMMA "Integral_split_fun") (("" (INST -1 "const_fun(a!1)" "const_fun(0)" "0" "tmax!1" "tStar!1" "t!1") (("" (ASSERT) (("" (LEMMA "Integral_const_fun[real]") (("1" (INST-CP -1 "a!1" "0" "tStar!1") (("1" (INST -1 "0" "tStar!1" "tmax!1") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (CASE "t!1<=tStar!1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (LEMMA "Integral_const_fun[real]") (("1" (INST - "a!1" "0" "t!1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -6) (("2" (LEMMA "Integral_const_fun[real]") (("2" (INST-CP -1 "a!1" "0" "tStar!1") (("2" (INST -1 "0" "tStar!1" "t!1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAccelUntil_Vel_TCC1| 0 (|vsAccelUntil_Vel_TCC1-2| "" 3790106857 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|vsAccelUntil_Vel| SUBTYPE "number_fields./((number_fields.-)(((number_fields.-)(vsAccel.vStar, vsAccel.v0`z))), vsAccel.accel)" "nnreal")) (|vsAccelUntil_Vel_TCC1-1| |nil| 3611923017 ("" (SKOSIMP*) (("" (MOVE-TERMS -1 R 1) (("" (DIV-BY -1 "accel!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|vsAccelUntil_Vel| SUBTYPE "number_fields./((number_fields.-)(((number_fields.-)(vsAccel.vStar, vsAccel.v0`z))), vsAccel.accel)" "nnreal"))) (|L2_prep_TCC1| 0 (|L2_prep_TCC1-1| |nil| 3611508156 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|L2_prep| ASSUMING "analysis@integral_def[nnreal].integral_def" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|L2_prep_TCC2| 0 (|L2_prep_TCC2-1| |nil| 3611508156 ("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST + "x!1+1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|L2_prep| ASSUMING "analysis@integral_def[nnreal].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|L2_prep| 0 (|L2_prep-3| "" 3884832023 ("" (SKOSIMP*) (("" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): IF (t<=tStar!1) THEN v0!1 + a!1*t ELSE v0!1+a!1*tStar!1 ENDIF" "velo(v0!1, tStar!1, a!1)") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "L1") (("2" (INST -1 "v0!1" "tStar!1" "x!1" "max(tStar!1, x!1)" "a!1") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "t!1<=tStar!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): v0!1 + a!1 * t" "LAMBDA (t: nnreal):
                                                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                    ELSE v0!1 + a!1 * tStar!1
                                                    ENDIF") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED ("x!1")) (("2" (HIDE (-3 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("2" (INST-CP -1 "0" "tStar!1" "LAMBDA (t:nnreal): v0!1 + a!1 * t" "LAMBDA (t: nnreal):
                                                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                    ELSE v0!1 + a!1 * tStar!1
                                                    ENDIF") (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -3 "tStar!1" "t!1" "LAMBDA (t:nnreal): v0!1 + a!1 * tStar!1" "LAMBDA (t: nnreal):
                                                            IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                            ELSE v0!1 + a!1 * tStar!1
                                                            ENDIF") (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (HIDE (-2 -4 3)) (("1" (LEMMA "Integral_split[nnreal]") (("1" (INST -1 "0" "tStar!1" "t!1" "LAMBDA (t: nnreal):
                                                                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                                    ELSE v0!1 + a!1 * tStar!1
                                                                    ENDIF") (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED ("x!1")) (("2" (HIDE (-4 -5 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "tStar!1" "t!1" "0" "v0!1 +a!1*tStar!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED ("x!1")) (("2" (HIDE (4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "tStar!1" "a!1" "v0!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|L2_prep-2| |nil| 3612193888 ("" (SKOSIMP*) (("" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): IF (t<=tStar!1) THEN v0!1 + a!1*t ELSE v0!1+a!1*tStar!1 ENDIF" "velo(v0!1, tStar!1, a!1)") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "L1") (("2" (INST -1 "v0!1" "tStar!1" "x!1" "max(tStar!1, x!1)" "a!1") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "t!1<=tStar!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): v0!1 + a!1 * t" "LAMBDA (t: nnreal):
                                                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                    ELSE v0!1 + a!1 * tStar!1
                                                    ENDIF") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (HIDE (-3 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("2" (INST-CP -1 "0" "tStar!1" "LAMBDA (t:nnreal): v0!1 + a!1 * t" "LAMBDA (t: nnreal):
                                                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                    ELSE v0!1 + a!1 * tStar!1
                                                    ENDIF") (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -3 "tStar!1" "t!1" "LAMBDA (t:nnreal): v0!1 + a!1 * tStar!1" "LAMBDA (t: nnreal):
                                                            IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                            ELSE v0!1 + a!1 * tStar!1
                                                            ENDIF") (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (HIDE (-2 -4 3)) (("1" (LEMMA "Integral_split[nnreal]") (("1" (INST -1 "0" "tStar!1" "t!1" "LAMBDA (t: nnreal):
                                                                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                                                                    ELSE v0!1 + a!1 * tStar!1
                                                                    ENDIF") (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (HIDE (-4 -5 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "tStar!1" "t!1" "0" "v0!1 +a!1*tStar!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (HIDE (4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "tStar!1" "a!1" "v0!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (L1 FORMULA-DECL NIL |vsAccel| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|accel| CONST-DECL "[real -> real]" |vsAccel| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|Integral_split| FORMULA-DECL NIL |integral| |analysis|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|velo| CONST-DECL "real" |vsAccel| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)) NIL) (|L2_prep-1| |nil| 3611508470 ("" (SKOSIMP*) (("" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): IF (t<=tStar!1) THEN v0!1 + a!1*t ELSE v0!1+a!1*tStar!1 ENDIF" "velo(v0!1, tStar!1, a!1)") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "L1") (("2" (INST -1 "v0!1" "tStar!1" "x!1" "max(tStar!1, x!1)" "a!1") (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "t!1<=tStar!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): v0!1 + a!1 * t" "LAMBDA (t: nnreal):
                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                    ELSE v0!1 + a!1 * tStar!1
                    ENDIF") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("2" (INST-CP -1 "0" "tStar!1" "LAMBDA (t:nnreal): v0!1 + a!1 * t" "LAMBDA (t: nnreal):
                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                    ELSE v0!1 + a!1 * tStar!1
                    ENDIF") (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -3 "tStar!1" "t!1" "LAMBDA (t:nnreal): v0!1 + a!1 * tStar!1" "LAMBDA (t: nnreal):
                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                    ELSE v0!1 + a!1 * tStar!1
                    ENDIF") (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (HIDE (-2 -4 3)) (("1" (LEMMA "Integral_split[nnreal]") (("1" (INST -1 "0" "tStar!1" "t!1" "LAMBDA (t: nnreal):
                    IF (t <= tStar!1) THEN v0!1 + a!1 * t
                    ELSE v0!1 + a!1 * tStar!1
                    ENDIF") (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "tStar!1" "t!1" "0" "v0!1 +a!1*tStar!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "tStar!1" "a!1" "v0!1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|posit_TCC1| 0 (|posit_TCC1-1| |nil| 3611508156 ("" (LEMMA "L2_prep") (("" (PROPAX) NIL NIL)) NIL) ((|L2_prep| FORMULA-DECL NIL |vsAccel| NIL)) NIL (|posit| SUBTYPE "vsAccel.velo(vsAccel.v0, vsAccel.tStar, vsAccel.a)" "Integrable_funs[nnreal](0, vsAccel.t)"))) (L2_TCC1 0 (L2_TCC1-1 |nil| 3611508156 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (L2 SUBTYPE "2" "{i: integers.int | booleans.OR(vsAccel.t /= 0, reals.>=(i, 0))}"))) (L2_TCC2 0 (L2_TCC2-1 |nil| 3611920661 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (L2 SUBTYPE "2" "{i: integers.int | booleans.OR(vsAccel.tStar /= 0, reals.>=(i, 0))}"))) (L2 0 (L2-3 "" 3884832102 ("" (SKOSIMP*) (("" (EXPAND "posit") (("" (LEMMA "L1") (("" (CASE "t!1<=tStar!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal): v0!1 + a!1 * x" "velo(v0!1, tStar!1, a!1)") (("1" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (REPLACE -3) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (GROUND) (("1" (GROUND) (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -2 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (TYPEPRED ("x!1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 2) (("2" (PROP) (("2" (HIDE 1) (("2" (LEMMA "Integral_split[nnreal]") (("1" (INST -1 "0" "tStar!1" "t!1" "velo(v0!1, tStar!1, a!1)") (("1" (LEMMA "L2_prep") (("1" (INST-CP -1 "v0!1" "tStar!1" "tStar!1" "a!1") (("1" (INST -1 "v0!1" "tStar!1" "t!1" "a!1") (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "t!1" "velo(v0!1, tStar!1, a!1)" "tStar!1" "t!1") (("1" (PROP) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "tStar!1" "velo(v0!1, tStar!1, a!1)" "LAMBDA (t: nnreal): v0!1 +a!1*t") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "tStar!1" "a!1" "v0!1") (("1" (HIDE (-7 -8 -2 -3 -5)) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "tStar!1" "t!1" "velo(v0!1, tStar!1, a!1)" "LAMBDA (t:nnreal): v0!1 + a!1 * tStar!1") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "tStar!1" "t!1" "0" "v0!1+a!1*tStar!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (REPLACE -8) (("1" (SIMPLIFY -) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (TYPEPRED ("x!1")) (("2" (PROP) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (LIFT-IF) (("4" (ASSERT) NIL NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL) ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL) ("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -6 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (PROP) (("1" (LIFT-IF) (("1" (TYPEPRED ("x!1")) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x!1")) (("2" (ASSERT) NIL NIL)) NIL) ("3" (TYPEPRED ("x!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (L2-2 |nil| 3612193957 ("" (SKOSIMP*) (("" (EXPAND "posit") (("" (LEMMA "L1") (("" (CASE "t!1<=tStar!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal): v0!1 + a!1 * x" "velo(v0!1, tStar!1, a!1)") (("1" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (REPLACE -3) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (GROUND) (("1" (GROUND) (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -2 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (TYPEPRED (X!1)) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 2) (("2" (PROP) (("2" (HIDE 1) (("2" (LEMMA "Integral_split[nnreal]") (("1" (INST -1 "0" "tStar!1" "t!1" "velo(v0!1, tStar!1, a!1)") (("1" (LEMMA "L2_prep") (("1" (INST-CP -1 "v0!1" "tStar!1" "tStar!1" "a!1") (("1" (INST -1 "v0!1" "tStar!1" "t!1" "a!1") (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "t!1" "velo(v0!1, tStar!1, a!1)" "tStar!1" "t!1") (("1" (PROP) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "tStar!1" "velo(v0!1, tStar!1, a!1)" "LAMBDA (t: nnreal): v0!1 +a!1*t") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "tStar!1" "a!1" "v0!1") (("1" (HIDE (-7 -8 -2 -3 -5)) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "tStar!1" "t!1" "velo(v0!1, tStar!1, a!1)" "LAMBDA (t:nnreal): v0!1 + a!1 * tStar!1") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "tStar!1" "t!1" "0" "v0!1+a!1*tStar!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (REPLACE -8) (("1" (SIMPLIFY -) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (TYPEPRED (X!1)) (("2" (PROP) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (LIFT-IF) (("4" (ASSERT) NIL NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL) ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL) ("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -6 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (PROP) (("1" (LIFT-IF) (("1" (TYPEPRED (X!1)) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X!1)) (("2" (ASSERT) NIL NIL)) NIL) ("3" (TYPEPRED (X!1)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posit| CONST-DECL "real" |vsAccel| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|velo| CONST-DECL "real" |vsAccel| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|tStar!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|t!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Integral_split| FORMULA-DECL NIL |integral| |analysis|) (|L2_prep| FORMULA-DECL NIL |vsAccel| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|Integrable?_inside| FORMULA-DECL NIL |integral| |analysis|) (L1 FORMULA-DECL NIL |vsAccel| NIL)) NIL) (L2-1 |nil| 3611914687 ("" (SKOSIMP*) (("" (EXPAND "posit") (("" (LEMMA "L1") (("" (CASE "t!1<=tStar!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal): v0!1 + a!1 * x" "velo(v0!1, tStar!1, a!1)") (("1" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (REPLACE -3) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -2 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (TYPEPRED (X!1)) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "t!1" "a!1" "v0!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 2) (("2" (PROP) (("2" (HIDE 1) (("2" (LEMMA "Integral_split[nnreal]") (("1" (INST -1 "0" "tStar!1" "t!1" "velo(v0!1, tStar!1, a!1)") (("1" (LEMMA "L2_prep") (("1" (INST-CP -1 "v0!1" "tStar!1" "tStar!1" "a!1") (("1" (INST -1 "v0!1" "tStar!1" "t!1" "a!1") (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "t!1" "velo(v0!1, tStar!1, a!1)" "tStar!1" "t!1") (("1" (PROP) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "tStar!1" "velo(v0!1, tStar!1, a!1)" "LAMBDA (t: nnreal): v0!1 +a!1*t") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "tStar!1" "a!1" "v0!1") (("1" (HIDE (-7 -8 -2 -3 -5)) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "tStar!1" "t!1" "velo(v0!1, tStar!1, a!1)" "LAMBDA (t:nnreal): v0!1 + a!1 * tStar!1") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "tStar!1" "t!1" "0" "v0!1+a!1*tStar!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (TYPEPRED (X!1)) (("2" (PROP) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (LIFT-IF) (("4" (ASSERT) NIL NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL) ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL) ("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -6 "v0!1" "tStar!1" "x!1" "tmax!1" "a!1") (("2" (PROP) (("1" (LIFT-IF) (("1" (TYPEPRED (X!1)) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X!1)) (("2" (ASSERT) NIL NIL)) NIL) ("3" (TYPEPRED (X!1)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAccelUntil_Pos_TCC1| 0 (|vsAccelUntil_Pos_TCC1-1| |nil| 3611997052 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|vsAccelUntil_Pos| SUBTYPE "number_fields./(((number_fields.-)(vsAccel.vStar, vsAccel.v0`z)), vsAccel.accel)" "nnreal"))) (|vsAccelUntil_Pos_TCC2| 0 (|vsAccelUntil_Pos_TCC2-1| |nil| 3611997052 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAccelUntil_Pos| SUBTYPE "number_fields./((number_fields.-)(((number_fields.-)(vsAccel.vStar, vsAccel.v0`z))), vsAccel.accel)" "nnreal"))) (|vsAccelRamp_Vel_TCC1| 0 (|vsAccelRamp_Vel_TCC1-1| |nil| 3612023476 ("" (SKOSIMP*) (("" (EXPAND "vsAccelRamp") (("" (LEMMA "integral_linear[real]") (("1" (INST -1 "0" "t!1" "a!1/tRamp!1" "0") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|)) NIL (|vsAccelRamp_Vel| SUBTYPE "vsAccel.vsAccelRamp(vsAccel.a, vsAccel.tRamp)" "Integrable_funs[real](0, vsAccel.t)"))) (|Int_ramp_vel_TCC1| 0 (|Int_ramp_vel_TCC1-1| |nil| 3612023476 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|Int_ramp_vel| SUBTYPE "2" "{i: integers.int | booleans.OR(vsAccel.t /= 0, reals.>=(i, 0))}"))) (|Int_ramp_vel| 0 (|Int_ramp_vel-2| "no" 3612194634 ("" (SKOSIMP*) (("" (EXPAND "vsAccelRamp_Vel") (("" (EXPAND "vsAccelRamp") (("" (LEMMA "integral_linear[real]") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "0" "x!1" "(a!1/tRamp!1)" "0") (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "0" "t!1" "(a!1/tRamp!1)" "0") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|vsAccelRamp_Vel| CONST-DECL "real" |vsAccel| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|a!1| SKOLEM-CONST-DECL "nzreal" |vsAccel| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|tRamp!1| SKOLEM-CONST-DECL "posreal" |vsAccel| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL)) NIL) (|no| "no" 3612194607 ("" (SKOSIMP*) (("" (EXPAND "vsAccelRamp_Vel") (("" (EXPAND "vsAccelRamp") (("" (LEMMA "integral_linear[nnreal]") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "0" "x!1" "(a!1/tRamp!1)" "0") (("1" (FLATTEN) (("1" (GRIND) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Int_ramp_vel-1| |nil| 3612025680 ("" (SKOSIMP*) (("" (EXPAND "vsAccelRamp_Vel") (("" (EXPAND "vsAccelRamp") (("" (LEMMA "integral_linear[nnreal]") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "0" "x!1" "(a!1/tRamp!1)" "0") (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "0" "t!1" "(a!1/tRamp!1)" "0") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|Int_ramp_vel2| 0 (|Int_ramp_vel2-2| |nil| 3612258994 ("" (SKOSIMP*) (("" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "a!1/tRamp!1" "0") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL) (|Int_ramp_vel2-1| |nil| 3612258323 ("" (SKOSIMP*) (("" (LEMMA "integral_linear[real]") (("1" (INST -1 "0" "t!1" "a!1/tRamp!1" "0") (("1" (GRIND) (("1" (EXPAND "vsAccelRamp") (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "vsAccelRamp") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAccelRamp_Pos_TCC1| 0 (|vsAccelRamp_Pos_TCC1-1| |nil| 3612023476 ("" (SKOSIMP*) (("" (LEMMA "Integral_sum[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x:nnreal): v0z!1" "vsAccelRamp_Vel(a!1, tRamp!1)") (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST -1 "v0z!1" "0" "t!1") (("1" (FLATTEN) (("1" (LEMMA "Int_ramp_vel") (("1" (INST -1 "a!1" "tRamp!1") (("1" (REPLACE -1) (("1" (LEMMA "integral_x_to_n[nnreal]") (("1" (INST -1 "0" "t!1" "2" "a!1/(2*tRamp!1)") (("1" (SPLIT -5) (("1" (FLATTEN) NIL NIL) ("2" (EXPAND "const_fun") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?" 1) (("2" (GROUND) (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Integral_sum| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|integral_x_to_n| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Int_ramp_vel| FORMULA-DECL NIL |vsAccel| NIL) (|vsAccelRamp_Vel| CONST-DECL "real" |vsAccel| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|vsAccelRamp_Pos| SUBTYPE "LAMBDA (x: real_types.nnreal): (number_fields.+)(vsAccel.v0z, vsAccel.vsAccelRamp_Vel(vsAccel.a, vsAccel.tRamp)(x))" "Integrable_funs[nnreal](0, vsAccel.t)"))) (|Int_ramp_pos_TCC1| 0 (|Int_ramp_pos_TCC1-1| |nil| 3612023476 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|Int_ramp_pos| SUBTYPE "3" "{i: integers.int | booleans.OR(vsAccel.t /= 0, reals.>=(i, 0))}"))) (|Int_ramp_pos| 0 (|Int_ramp_pos-2| "" 3790106875 ("" (SKOSIMP*) (("" (DECOMPOSE-EQUALITY 1) (("" (EXPAND "vsAccelRamp_Pos") (("" (LEMMA "Int_ramp_vel") (("" (INST -1 "a!1" "tRamp!1") (("" (LEMMA "Integral_sum[nnreal]") (("1" (INST -1 "0" "x!1" "vsAccelRamp_Vel(a!1, tRamp!1)" "LAMBDA (x:nnreal): v0z!1") (("1" (REPLACE -2) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "x!1" "0" "v0z!1") (("1" (LEMMA "integral_x_to_n[nnreal]") (("1" (INST -1 "0" "x!1" "2" "a!1/(2*tRamp!1)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|vsAccelRamp_Pos| CONST-DECL "real" |vsAccel| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|Int_ramp_vel| FORMULA-DECL NIL |vsAccel| NIL) (|Integral_sum| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integral_x_to_n| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|vsAccelRamp_Vel| CONST-DECL "real" |vsAccel| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK) (|Int_ramp_pos-1| |nil| 3612026020 ("" (SKOSIMP*) (("" (DECOMPOSE-EQUALITY 1) (("" (EXPAND "vsAccelRamp_Pos") (("" (LEMMA "Int_ramp_vel") (("" (INST -1 "a!1" "tRamp!1") (("" (LEMMA "Integral_sum[nnreal]") (("1" (INST -1 "0" "x!1" "vsAccelRamp_Vel(a!1, tRamp!1)" "LAMBDA (x:nnreal): v0z!1") (("1" (REPLACE -2) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "x!1" "0" "v0z!1") (("1" (LEMMA "integral_x_to_n[nnreal]") (("1" (INST -1 "0" "x!1" "2" "a!1/(2*tRamp!1)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAccelConst_Vel_TCC1| 0 (|vsAccelConst_Vel_TCC1-1| |nil| 3612023476 ("" (SKOSIMP*) (("" (LEMMA "integral_linear[real]") (("1" (INST -1 "t0!1" "t!1" "0" "a!1") (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (EXPAND "vsAccelConst") (("1" (FLATTEN) (("1" (SIMPLIFY -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL)) NIL (|vsAccelConst_Vel| SUBTYPE "vsAccel.vsAccelConst(vsAccel.a)" "Integrable_funs[real](vsAccel.t0, vsAccel.t)"))) (|Int_const_vel| 0 (|Int_const_vel-1| |nil| 3612027083 ("" (SKOSIMP*) (("" (EXPAND "vsAccelConst_Vel") (("" (EXPAND "vsAccelConst") (("" (LEMMA "integral_linear[real]") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "t0!1" "x!1" "0" "a!1") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "t0!1" "t!1" "0" "a!1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsAccelConst_Vel| CONST-DECL "real" |vsAccel| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|t0!1| SKOLEM-CONST-DECL "nnreal" |vsAccel| NIL) (|a!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL)) SHOSTAK)) (|Int_const_vel2| 0 (|Int_const_vel2-1| |nil| 3612267817 ("" (SKOSIMP*) (("" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "t0!1" "t!1" "0" "a!1") (("1" (SKOLETIN) (("1" (EXPAND "vsAccelConst") (("1" (SIMPLIFY -2) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SIMPLIFY -) (("1" (REPLACE -2) (("1" (REPLACE -4) (("1" (SIMPLIFY -) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|vsAccelConst_Pos_TCC1| 0 (|vsAccelConst_Pos_TCC1-1| |nil| 3612023476 ("" (SKOSIMP*) (("" (LEMMA "Integral_sum[nnreal]") (("1" (INST -1 "t0!1" "t!1" "LAMBDA (x: nnreal): v0z!1" "vsAccelConst_Vel(a!1, t0!1)") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "t0!1" "t!1" "0" "v0z!1") (("1" (LEMMA "Int_const_vel") (("1" (INST -1 "a!1" "t0!1") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "t0!1" "t!1" "a!1" "-a!1*t0!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (ASSERT) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "t0!1" "t!1" "a!1" "-a!1*t0!1+v0z!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Integral_sum| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|Int_const_vel| FORMULA-DECL NIL |vsAccel| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|vsAccelConst_Vel| CONST-DECL "real" |vsAccel| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|vsAccelConst_Pos| SUBTYPE "LAMBDA (x: real_types.nnreal): (number_fields.+)(vsAccel.v0z, vsAccel.vsAccelConst_Vel(vsAccel.a, vsAccel.t0)(x))" "Integrable_funs[nnreal](vsAccel.t0, vsAccel.t)"))) (|Int_const_pos| 0 (|Int_const_pos-1| |nil| 3612084250 ("" (SKOSIMP*) (("" (DECOMPOSE-EQUALITY) (("" (EXPAND "vsAccelConst_Pos") (("" (LEMMA "Int_const_vel") (("" (INST -1 "a!1" "t0!1") (("" (LEMMA "Integral_sum[nnreal]") (("1" (INST -1 "t0!1" "x!1" "vsAccelConst_Vel(a!1, t0!1)" "LAMBDA (x:nnreal): v0z!1") (("1" (REPLACE -2) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "t0!1" "x!1" "a!1" "-a!1*t0!1") (("1" (INST -1 "t0!1" "x!1" "0" "v0z!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (EXPAND "restrict") (("1" (REPLACE -4) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|vsAccelConst_Pos| CONST-DECL "real" |vsAccel| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|Int_const_vel| FORMULA-DECL NIL |vsAccel| NIL) (|Integral_sum| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|vsAccelConst_Vel| CONST-DECL "real" |vsAccel| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|sign_not_zero| 0 (|sign_not_zero-1| |nil| 3612273936 ("" (SKOSIMP*) (("" (EXPAND "Sign") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|Sign| CONST-DECL "real" |vsAccel| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sign_not_zero| SUBTYPE "vsAccel.Sign(vsAccel.a, vsAccel.b)" "nzreal"))) (|vsAUWRU_case1_acc_TCC1| 0 (|vsAUWRU_case1_acc_TCC1-2| "" 3790106881 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|vsAUWRU_case1_acc| ASSUMING "analysis@integral_split_fun[nnreal].integral_split_fun" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")) (|vsAUWRU_case1_acc_TCC1-1| |nil| 3612172317 ("" (SKOSIMP*) (("" (EXPAND "Sign") (("" (ASSERT) (("" (TYPEPRED (ACCEL!1)) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|vsAUWRU_case1_acc| ASSUMING "analysis@integral_split_fun[nnreal].integral_split_fun" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|case1_vel_prep| 0 (|case1_vel_prep-4| "" 3884832143 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelConst(0)" "LAMBDA (t: nnreal):
                          IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                          ELSE split_fun[nnreal](sqrt(2
                                              *
                                              (abs(goalVs!1 - v0z!1) * tRamp!1)
                                              /
                                              accel!1),
                                         vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                     *
                                                     accel!1,
                                                     tRamp!1),
                                         vsAccelConst(0))
                                        (t)
                          ENDIF") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (LIFT-IF 1) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "0" "0") (("2" (EXPAND "vsAccelConst") (("2" (ASSERT) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=tMax") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1)" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (EXPAND "split_fun") (("1" (LIFT-IF 2) (("1" (TYPEPRED ("x!1")) (("1" (PROP) (("1" (EXPAND "restrict") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (EXPAND "vsAccelRamp") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1" "0") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "split_fun[nnreal]( tMax, vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1), vsAccelConst(0))" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "Integral_split_fun[nnreal]") (("2" (INST -1 "LAMBDA(s:nnreal): vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                      tRamp!1)(s)" "                              LAMBDA(s:nnreal):vsAccelConst(0)(s)" "0" "t!1" "tMax" "t!1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (ASSERT) (("5" (EXPAND "vsAccelRamp") (("5" (LEMMA "integral_linear[nnreal]") (("5" (INST -1 "0" "tMax" "(Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1)" "0") (("5" (ASSERT) (("5" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "vsAccelRamp") (("6" (LEMMA "integral_linear[nnreal]") (("6" (INST -1 "tMax" "t!1" "0" "0") (("1" (ASSERT) (("1" (EXPAND "vsAccelConst") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|case1_vel_prep-3| "" 3790106884 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelConst(0)" "LAMBDA (t: nnreal):
                          IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                          ELSE split_fun[nnreal](sqrt(2
                                              *
                                              (abs(goalVs!1 - v0z!1) * tRamp!1)
                                              /
                                              accel!1),
                                         vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                     *
                                                     accel!1,
                                                     tRamp!1),
                                         vsAccelConst(0))
                                        (t)
                          ENDIF") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (LIFT-IF 1) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "0" "0") (("2" (EXPAND "vsAccelConst") (("2" (ASSERT) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=tMax") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1)" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (EXPAND "split_fun") (("1" (LIFT-IF 2) (("1" (TYPEPRED (X!1)) (("1" (PROP) (("1" (EXPAND "restrict") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (EXPAND "vsAccelRamp") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1" "0") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "split_fun[nnreal]( tMax, vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1), vsAccelConst(0))" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "Integral_split_fun[nnreal]") (("2" (INST -1 "LAMBDA(s:nnreal): vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                      tRamp!1)(s)" "                              LAMBDA(s:nnreal):vsAccelConst(0)(s)" "0" "t!1" "tMax" "t!1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (ASSERT) (("5" (EXPAND "vsAccelRamp") (("5" (LEMMA "integral_linear[nnreal]") (("5" (INST -1 "0" "tMax" "(Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1)" "0") (("5" (ASSERT) (("5" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "vsAccelRamp") (("6" (LEMMA "integral_linear[nnreal]") (("6" (INST -1 "tMax" "t!1" "0" "0") (("1" (ASSERT) (("1" (EXPAND "vsAccelConst") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|vsAUWRU_case1_acc| CONST-DECL "real" |vsAccel| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (< CONST-DECL "bool" |reals| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|tMax| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_split_fun| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|goalVs!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|v0z!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|restrict| CONST-DECL "R" |restrict| NIL) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL) (|split_fun| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_nat| FORMULA-DECL NIL |abs_lems| |reals|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|case1_vel_prep-2| |nil| 3612197628 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelConst(0)" "LAMBDA (t: nnreal):
                          IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                          ELSE split_fun[nnreal](sqrt(2
                                              *
                                              (abs(goalVs!1 - v0z!1) * tRamp!1)
                                              /
                                              accel!1),
                                         vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                     *
                                                     accel!1,
                                                     tRamp!1),
                                         vsAccelConst(0))
                                        (t)
                          ENDIF") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (LIFT-IF 1) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "0" "0") (("2" (EXPAND "vsAccelConst") (("2" (ASSERT) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL) ("3" (PROP) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=tMax") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1)" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (EXPAND "split_fun") (("1" (LIFT-IF 2) (("1" (TYPEPRED (X!1)) (("1" (PROP) (("1" (EXPAND "restrict") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (EXPAND "vsAccelRamp") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1" "0") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Sign") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "split_fun[nnreal]( tMax, vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1), vsAccelConst(0))" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "Integral_split_fun[nnreal]") (("2" (INST -1 "LAMBDA(s:nnreal): vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                      tRamp!1)(s)" "                              LAMBDA(s:nnreal):vsAccelConst(0)(s)" "0" "t!1" "tMax" "t!1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (ASSERT) (("5" (EXPAND "vsAccelRamp") (("5" (LEMMA "integral_linear[nnreal]") (("5" (INST -1 "0" "tMax" "(Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1)" "0") (("5" (ASSERT) (("5" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "vsAccelRamp") (("6" (LEMMA "integral_linear[nnreal]") (("6" (INST -1 "tMax" "t!1" "0" "0") (("1" (ASSERT) (("1" (EXPAND "vsAccelConst") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (EXPAND "Sign") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "Sign") (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|case1_vel_prep-1| |nil| 3612175046 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelConst(0)" "LAMBDA (t: nnreal):
                    IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                    ELSE split_fun(sqrt(2
                                        *
                                        (abs(goalVs!1 - v0z!1) * tRamp!1)
                                        /
                                        accel!1),
                                   vsAccelRamp(Sign(v0z!1, goalVs!1)
                                               *
                                               accel!1,
                                               tRamp!1),
                                   vsAccelConst(0))
                                  (t)
                    ENDIF") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (LIFT-IF 1) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "0" "0") (("2" (EXPAND "vsAccelConst") (("2" (ASSERT) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=tMax") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1)" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (EXPAND "split_fun") (("1" (LIFT-IF 2) (("1" (TYPEPRED (X!1)) (("1" (PROP) (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (EXPAND "vsAccelRamp") (("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1" "0") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Sign") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "split_fun( tMax, vsAccelRamp(Sign(v0z!1, goalVs!1)*accel!1, tRamp!1), vsAccelConst(0))" "vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (EXPAND "restrict") (("1" (EXPAND "vsAUWRU_case1_acc") (("1" (LIFT-IF 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "restrict") (("2" (LEMMA "Integral_split_fun[nnreal]") (("2" (INST -1 "LAMBDA(s:nnreal): vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                          tRamp!1)(s)" "
                              LAMBDA(s:nnreal):vsAccelConst(0)(s)" "0" "t!1" "tMax" "t!1") (("1" (PROP) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE (-2 4)) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (EXPAND "vsAccelRamp") (("6" (LEMMA "integral_linear[nnreal]") (("6" (INST -1 "0" "tMax" "(Sign(v0z!1, goalVs!1) * accel!1 / tRamp!1)" "0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "vsAccelConst") (("7" (LEMMA "integral_linear[nnreal]") (("7" (INST -1 "tMax" "t!1" "0" "0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (EXPAND "Sign") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Sign") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAUWRU_case1_vel_TCC1| 0 (|vsAUWRU_case1_vel_TCC1-1| |nil| 3612172317 ("" (SKOSIMP*) (("" (LEMMA "case1_vel_prep") (("" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "t!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|case1_vel_prep| FORMULA-DECL NIL |vsAccel| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAUWRU_case1_vel| SUBTYPE "vsAccel.vsAUWRU_case1_acc(vsAccel.v0z, vsAccel.goalVs, vsAccel.accel, vsAccel.tRamp)" "Integrable_funs[nnreal](0, vsAccel.t)"))) (|Integral_case1_vel| 0 (|Integral_case1_vel-2| "" 3884832203 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_vel") (("" (EXPAND "vsAUWRU_case1_acc") (("" (CASE "v0z!1=goalVs!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelConst(0)" "LAMBDA (t: nnreal):
                       IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                     ELSE split_fun[nnreal]
                                (sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                      accel!1),
                                 restrict[real, nnreal, real]
                                    (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                  *
                                                 accel!1,
                                                 tRamp!1)),
                                 restrict[real, nnreal, real](vsAccelConst(0)))
                               (t)
                       ENDIF") (("1" (PROP) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "restrict") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "0" "0") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SIMPLIFY -) (("1" (REPLACE -2) (("1" (SIMPLIFY -) (("1" (EXPAND "vsAccelConst") (("1" (SIMPLIFY) (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (HIDE (-1 -2 -3 -4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "restrict") (("2" (LIFT-IF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "t!1" "0" "0") (("3" (EXPAND "restrict") (("3" (EXPAND "vsAccelConst") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (SIMPLIFY -) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                          accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "restrict[real, nnreal, real]
                                       (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1,
                                                    tRamp!1))" "LAMBDA (t: nnreal):
                         IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                         ELSE split_fun[nnreal]
                                  (sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                         accel!1),
                                   restrict[real, nnreal, real]
                                       (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1,
                                                    tRamp!1)),
                                   restrict[real, nnreal, real](vsAccelConst(0)))
                                  (t)
                         ENDIF") (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1) * accel!1" "tRamp!1" "t!1") (("1" (FLATTEN) (("1" (PROP) (("1" (REPLACE -2) (("1" (EXPAND "restrict") (("1" (REPLACE -4) (("1" (LIFT-IF 2) (("1" (PROP) (("1" (HIDE (-2 -3 -4 -5)) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT-INEQ -5) (("2" (LEMMA "sq_sqrt") (("2" (MULT-EQ -2 -2) (("2" (INST -2 "2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / accel!1") (("2" (PROP) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (HIDE (-4 -5 -6 -7)) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "Sign") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 3)) (("2" (SKOSIMP*) (("2" (EXPAND "restrict") (("2" (LIFT-IF 1) (("2" (PROP) (("2" (EXPAND "split_fun") (("2" (LIFT-IF) (("2" (TYPEPRED ("x!1")) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Sign") (("2" (FLATTEN) (("2" (EXPAND "connected?") (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_split_fun[nnreal]") (("1" (INST -1 "restrict[real, nnreal, real]
                                       (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1,
                                                    tRamp!1))" "restrict[real, nnreal, real](vsAccelConst(0))" "0" "t!1" "sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                         accel!1)" "t!1") (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1)*accel!1" "tRamp!1" "sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                       accel!1)") (("1" (LEMMA "Int_const_vel2") (("1" (INST -1 "0" "sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                         accel!1)" "t!1") (("1" (FLATTEN) (("1" (PROP) (("1" (EXPAND "restrict") (("1" (LIFT-IF -2) (("1" (PROP) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "split_fun(sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                             accel!1),
                                       LAMBDA (s: nnreal):
                                         vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                     tRamp!1)
                                                    (s),
                                       LAMBDA (s: nnreal): vsAccelConst(0)(s))" "LAMBDA (t: nnreal):
                               IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                               ELSE split_fun[nnreal]
                                        (sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                               accel!1),
                                         LAMBDA (s: nnreal):
                                           vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                       tRamp!1)
                                                      (s),
                                         LAMBDA (s: nnreal): vsAccelConst(0)(s))
                                        (t)
                               ENDIF") (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (REPLACE -9) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "connected?") (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (EXPAND "restrict") (("6" (PROPAX) NIL NIL)) NIL) ("7" (EXPAND "restrict") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Integral_case1_vel-1| |nil| 3612174244 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_vel") (("" (EXPAND "vsAUWRU_case1_acc") (("" (CASE "v0z!1=goalVs!1") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "vsAccelConst(0)" "LAMBDA (t: nnreal):
                       IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                     ELSE split_fun[nnreal]
                                (sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                      accel!1),
                                 restrict[real, nnreal, real]
                                    (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                  *
                                                 accel!1,
                                                 tRamp!1)),
                                 restrict[real, nnreal, real](vsAccelConst(0)))
                               (t)
                       ENDIF") (("1" (PROP) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "restrict") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "0" "t!1" "0" "0") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SIMPLIFY -) (("1" (REPLACE -2) (("1" (SIMPLIFY -) (("1" (EXPAND "vsAccelConst") (("1" (SIMPLIFY) (("1" (REPLACE -4) (("1" (REPLACE -1) (("1" (HIDE (-1 -2 -3 -4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "restrict") (("2" (LIFT-IF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "0" "t!1" "0" "0") (("3" (EXPAND "restrict") (("3" (EXPAND "vsAccelConst") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (SIMPLIFY -) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                          accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "restrict[real, nnreal, real]
                                       (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1,
                                                    tRamp!1))" "LAMBDA (t: nnreal):
                         IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                         ELSE split_fun[nnreal]
                                  (sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                         accel!1),
                                   restrict[real, nnreal, real]
                                       (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1,
                                                    tRamp!1)),
                                   restrict[real, nnreal, real](vsAccelConst(0)))
                                  (t)
                         ENDIF") (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1) * accel!1" "tRamp!1" "t!1") (("1" (FLATTEN) (("1" (PROP) (("1" (REPLACE -2) (("1" (EXPAND "restrict") (("1" (REPLACE -4) (("1" (LIFT-IF 2) (("1" (PROP) (("1" (HIDE (-2 -3 -4 -5)) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT-INEQ -5) (("2" (LEMMA "sq_sqrt") (("2" (MULT-EQ -2 -2) (("2" (INST -2 "2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / accel!1") (("2" (PROP) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (HIDE (-4 -5 -6 -7)) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "Sign") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 3)) (("2" (SKOSIMP*) (("2" (EXPAND "restrict") (("2" (LIFT-IF 1) (("2" (PROP) (("2" (EXPAND "split_fun") (("2" (LIFT-IF) (("2" (TYPEPRED (X!1)) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "restrict") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Sign") (("2" (FLATTEN) (("2" (EXPAND "connected?") (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_split_fun[nnreal]") (("1" (INST -1 "restrict[real, nnreal, real]
                                       (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1,
                                                    tRamp!1))" "restrict[real, nnreal, real](vsAccelConst(0))" "0" "t!1" "sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                         accel!1)" "t!1") (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1)*accel!1" "tRamp!1" "sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                       accel!1)") (("1" (LEMMA "Int_const_vel2") (("1" (INST -1 "0" "sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                         accel!1)" "t!1") (("1" (FLATTEN) (("1" (PROP) (("1" (EXPAND "restrict") (("1" (LIFT-IF -2) (("1" (PROP) (("1" (REPLACE -4) (("1" (REPLACE -6) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "split_fun(sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                             accel!1),
                                       LAMBDA (s: nnreal):
                                         vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                     tRamp!1)
                                                    (s),
                                       LAMBDA (s: nnreal): vsAccelConst(0)(s))" "LAMBDA (t: nnreal):
                               IF v0z!1 = goalVs!1 THEN vsAccelConst(0)(t)
                               ELSE split_fun[nnreal]
                                        (sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) /
                                               accel!1),
                                         LAMBDA (s: nnreal):
                                           vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                                       tRamp!1)
                                                      (s),
                                         LAMBDA (s: nnreal): vsAccelConst(0)(s))
                                        (t)
                               ENDIF") (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (REPLACE -9) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "connected?") (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (EXPAND "restrict") (("6" (PROPAX) NIL NIL)) NIL) ("7" (EXPAND "restrict") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|vsAUWRU_case1_acc| CONST-DECL "real" |vsAccel| NIL) (<= CONST-DECL "bool" |reals| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|Int_ramp_vel2| FORMULA-DECL NIL |vsAccel| NIL) (|Int_const_vel2| FORMULA-DECL NIL |vsAccel| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_split_fun| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|split_fun| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|v0z!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|goalVs!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|case1_pos_prep| 0 (|case1_pos_prep-2| "" 3884832260 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):IF t< sqrt(2*tRamp!1*deltaV/accel!1) THEN
                    v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t^2/tRamp!1
                 ELSE  goalVs!1
     	    ENDIF" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (LEMMA "Integral_case1_vel") (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("1" (SKOLETIN) (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (LIFT-IF 2) (("1" (PROP) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=sqrt(2 * tRamp!1 * deltaV / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1" "LAMBDA (t: nnreal):
                            IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                              THEN v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1
                            ELSE goalVs!1
                            ENDIF") (("1" (PROP) (("1" (SKOSIMP*) (("1" (LIFT-IF 1) (("1" (TYPEPRED ("x!1")) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "integral_quadratic[nnreal]") (("2" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 / (2* tRamp!1)" "0" "v0z!1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("2" (LEMMA "Integral_split[nnreal]") (("2" (INST-CP -2 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "LAMBDA (t:nnreal):v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1" "LAMBDA (t: nnreal):
                            IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                              THEN v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1
                            ELSE goalVs!1
                            ENDIF") (("2" (PROP) (("1" (INST -4 "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t:nnreal): goalVs!1" "LAMBDA (t: nnreal):
                              IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                                THEN v0z!1 +
                                      (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                       tRamp!1
                              ELSE goalVs!1
                              ENDIF") (("1" (PROP) (("1" (INST -5 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t: nnreal):
                                IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                                  THEN v0z!1 +
                                        (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                         tRamp!1
                                ELSE goalVs!1
                                ENDIF") (("1" (PROP) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED ("x!1")) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "0" "goalVs!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (SIMPLIFY -1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED ("x!1")) (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_quadratic[nnreal]") (("3" (INST -1 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "Sign(v0z!1, goalVs!1) * accel!1 / (2* tRamp!1)" "0" "v0z!1") (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|case1_pos_prep-1| |nil| 3612274535 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):IF t< sqrt(2*tRamp!1*deltaV/accel!1) THEN
                    v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t^2/tRamp!1
                 ELSE  goalVs!1
     	    ENDIF" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (PROP) (("1" (SKOSIMP*) (("1" (LEMMA "Integral_case1_vel") (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("1" (SKOLETIN) (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (LIFT-IF 2) (("1" (PROP) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t!1<=sqrt(2 * tRamp!1 * deltaV / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (t:nnreal): v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1" "LAMBDA (t: nnreal):
                            IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                              THEN v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1
                            ELSE goalVs!1
                            ENDIF") (("1" (PROP) (("1" (SKOSIMP*) (("1" (LIFT-IF 1) (("1" (TYPEPRED (X!1)) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "integral_quadratic[nnreal]") (("2" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 / (2* tRamp!1)" "0" "v0z!1") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_restr_eq[nnreal]") (("2" (LEMMA "Integral_split[nnreal]") (("2" (INST-CP -2 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "LAMBDA (t:nnreal):v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1" "LAMBDA (t: nnreal):
                            IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                              THEN v0z!1 +
                                    (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                     tRamp!1
                            ELSE goalVs!1
                            ENDIF") (("2" (PROP) (("1" (INST -4 "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t:nnreal): goalVs!1" "LAMBDA (t: nnreal):
                              IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                                THEN v0z!1 +
                                      (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                       tRamp!1
                              ELSE goalVs!1
                              ENDIF") (("1" (PROP) (("1" (INST -5 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t: nnreal):
                                IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                                  THEN v0z!1 +
                                        (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                         tRamp!1
                                ELSE goalVs!1
                                ENDIF") (("1" (PROP) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED (X!1)) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "0" "goalVs!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (REPLACE -3) (("3" (SIMPLIFY -1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED (X!1)) (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_quadratic[nnreal]") (("3" (INST -1 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "Sign(v0z!1, goalVs!1) * accel!1 / (2* tRamp!1)" "0" "v0z!1") (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_case1_vel| FORMULA-DECL NIL |vsAccel| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs_nat| FORMULA-DECL NIL |abs_lems| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral_split| FORMULA-DECL NIL |integral| |analysis|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|integral_quadratic| FORMULA-DECL NIL |table_of_integrals| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|vsAUWRU_case1_pos_TCC1| 0 (|vsAUWRU_case1_pos_TCC1-1| |nil| 3612172317 ("" (SKOSIMP*) (("" (LEMMA "case1_pos_prep") (("" (INST -1 "v0z!1" "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "t!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|case1_pos_prep| FORMULA-DECL NIL |vsAccel| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAUWRU_case1_pos| SUBTYPE "vsAccel.vsAUWRU_case1_vel(vsAccel.v0z, vsAccel.goalVs, vsAccel.accel, vsAccel.tRamp)" "Integrable_funs[nnreal](0, vsAccel.t)"))) (|Integral_case1_pos_TCC1| 0 (|Integral_case1_pos_TCC1-1| |nil| 3612273936 ("" (SUBTYPE-TCC) NIL NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|Integral_case1_pos| SUBTYPE "3" "{i: integers.int | booleans.OR((booleans.NOT)(sqrt.sqrt(number_fields./(number_fields.*(2, number_fields.*(vsAccel.deltaV, vsAccel.tRamp)), vsAccel.accel)) = 0), reals.>=(i, 0))}"))) (|Integral_case1_pos| 0 (|Integral_case1_pos-5| "" 3884832321 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_pos") (("" (CASE "t!1 <  sqrt(2 * (deltaV * tRamp!1) / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t^2/tRamp!1" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 /( 2*  tRamp!1)" "0" "v0z!1") (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (PROP) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal):
                                         Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1) * x ^ 2 +
                                          v0z!1" " LAMBDA (t: nnreal):
                                         (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 / tRamp!1
                                          + v0z!1") (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -5) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_case1_vel") (("2" (SKOSIMP*) (("2" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("2" (ASSERT) (("2" (TYPEPRED ("x!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("3" (CASE-REPLACE "(LAMBDA (t: nnreal):
                            v0z!1 +
                             (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                              tRamp!1) = (LAMBDA (x: nnreal):
                            Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1) * x ^ 2
                             + 0 * x
                             + v0z!1)") (("3" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 2) (("2" (PROP) (("2" (LEMMA "Integral_split[nnreal]") (("1" (CASE-REPLACE "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1) = LAMBDA (t:nnreal):
       IF t< sqrt(2*tRamp!1*deltaV/accel!1) THEN
                      v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t^2/tRamp!1
                   ELSE
                      goalVs!1
       	    ENDIF") (("1" (HIDE -1) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST-CP -1 "0" "sqrt(2 * (deltaV * tRamp!1) / accel!1)" "LAMBDA(t:nnreal): v0z!1 +
                                 (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                  tRamp!1" "LAMBDA (t: nnreal):
                         IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                           THEN v0z!1 +
                                 (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                  tRamp!1
                         ELSE goalVs!1
                         ENDIF") (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                            v0z!1 +
                             (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                              tRamp!1) = LAMBDA (t: nnreal):
                            v0z!1 +
                             (Sign(v0z!1, goalVs!1) * accel!1 / (2*tRamp!1)) * t ^ 2") (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                              v0z!1 +
                               (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                tRamp!1) = LAMBDA (t: nnreal):
                              v0z!1 +
                               (Sign(v0z!1, goalVs!1) * accel!1 / (2*tRamp!1)) * t ^ 2") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "(Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))" "0" "v0z!1") (("1" (FLATTEN) (("1" (PROP) (("1" (INST -6 "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t:nnreal): goalVs!1" " LAMBDA (t: nnreal):
                             IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                               THEN v0z!1 +
                                     (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                      tRamp!1
                             ELSE goalVs!1
                             ENDIF") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "sqrt(2 * (deltaV * tRamp!1) / accel!1)" "t!1" "0" "goalVs!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (PROP) (("1" (INST -11 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t: nnreal):
                               IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                                 THEN v0z!1 +
                                       (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                        tRamp!1
                               ELSE goalVs!1
                               ENDIF") (("1" (PROP) (("1" (ASSERT) (("1" (REPLACE -2 :DIR RL) (("1" (ASSERT) (("1" (REPLACE -11) (("1" (REPLACE -9) (("1" (REPLACE -4) (("1" (REPLACE -7) (("1" (REPLACE -6) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED ("x!1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED ("x!1")) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (LEMMA "Integral_case1_vel") (("2" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("2" (SKOLETIN) (("2" (REPLACE -1) (("2" (GROUND) (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Integral_case1_pos-4| |nil| 3612534160 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_pos") (("" (CASE "t!1 <  sqrt(2 * (deltaV * tRamp!1) / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t^2/tRamp!1" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 /( 2*  tRamp!1)" "0" "v0z!1") (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (PROP) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal):
                                         Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1) * x ^ 2 +
                                          v0z!1" " LAMBDA (t: nnreal):
                                         (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 / tRamp!1
                                          + v0z!1") (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -5) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_case1_vel") (("2" (SKOSIMP*) (("2" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("2" (ASSERT) (("2" (TYPEPRED (X!1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("3" (CASE-REPLACE "(LAMBDA (t: nnreal):
                            v0z!1 +
                             (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                              tRamp!1) = (LAMBDA (x: nnreal):
                            Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1) * x ^ 2
                             + 0 * x
                             + v0z!1)") (("3" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 2) (("2" (PROP) (("2" (LEMMA "Integral_split[nnreal]") (("1" (CASE-REPLACE "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1) = LAMBDA (t:nnreal):
       IF t< sqrt(2*tRamp!1*deltaV/accel!1) THEN
                      v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t^2/tRamp!1
                   ELSE
                      goalVs!1
       	    ENDIF") (("1" (HIDE -1) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST-CP -1 "0" "sqrt(2 * (deltaV * tRamp!1) / accel!1)" "LAMBDA(t:nnreal): v0z!1 +
                                 (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                  tRamp!1" "LAMBDA (t: nnreal):
                         IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                           THEN v0z!1 +
                                 (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                  tRamp!1
                         ELSE goalVs!1
                         ENDIF") (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                            v0z!1 +
                             (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                              tRamp!1) = LAMBDA (t: nnreal):
                            v0z!1 +
                             (Sign(v0z!1, goalVs!1) * accel!1 / (2*tRamp!1)) * t ^ 2") (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                              v0z!1 +
                               (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                tRamp!1) = LAMBDA (t: nnreal):
                              v0z!1 +
                               (Sign(v0z!1, goalVs!1) * accel!1 / (2*tRamp!1)) * t ^ 2") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "(Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))" "0" "v0z!1") (("1" (FLATTEN) (("1" (PROP) (("1" (INST -6 "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t:nnreal): goalVs!1" " LAMBDA (t: nnreal):
                             IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                               THEN v0z!1 +
                                     (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                      tRamp!1
                             ELSE goalVs!1
                             ENDIF") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST -1 "sqrt(2 * (deltaV * tRamp!1) / accel!1)" "t!1" "0" "goalVs!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (PROP) (("1" (INST -11 "0" "sqrt(2 * tRamp!1 * deltaV / accel!1)" "t!1" "LAMBDA (t: nnreal):
                               IF t < sqrt(2 * tRamp!1 * deltaV / accel!1)
                                 THEN v0z!1 +
                                       (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 /
                                        tRamp!1
                               ELSE goalVs!1
                               ENDIF") (("1" (PROP) (("1" (ASSERT) (("1" (REPLACE -2 :DIR RL) (("1" (ASSERT) (("1" (REPLACE -11) (("1" (REPLACE -9) (("1" (REPLACE -4) (("1" (REPLACE -7) (("1" (REPLACE -6) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED (X!1)) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF 1) (("2" (TYPEPRED (X!1)) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (LEMMA "Integral_case1_vel") (("2" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("2" (SKOLETIN) (("2" (REPLACE -1) (("2" (GROUND) (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|vsAUWRU_case1_pos| CONST-DECL "real" |vsAccel| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral_case1_vel| FORMULA-DECL NIL |vsAccel| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|integral_quadratic| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_restr_eq| FORMULA-DECL NIL |integral| |analysis|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|Integral_split| FORMULA-DECL NIL |integral| |analysis|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL) (|Integral_case1_pos-3| |nil| 3612533910 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_pos") (("" (CASE "t!1 <  sqrt(2 * (deltaV * tRamp!1) / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t!1^2/tRamp!1" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 /( 2*  tRamp!1)" "0" "v0z!1") (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (PROP) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal):
                         Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1) * x ^ 2 +
                          v0z!1" " LAMBDA (t: nnreal):
                         (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t ^ 2 / tRamp!1
                          + v0z!1") (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -5) (("1" (GRIND) NIL))))) ("2" (POSTPONE) NIL))))))))))))))))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))))))))))) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL))))))) ("2" (POSTPONE) NIL)))))))) NIL) NIL NIL) (|Integral_case1_pos-2| |nil| 3612533130 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_pos") (("" (CASE "t!1 <  sqrt(2 * (deltaV * tRamp!1) / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t!1^2/tRamp!1" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 /( 2*  tRamp!1)" "0" "v0z!1") (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (PROP) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA (x: nnreal):
                 Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1) * x ^ 2 +
                  v0z!1" " LAMBDA (t: nnreal):
                 (Sign(v0z!1, goalVs!1) * accel!1 / 2) * t!1 ^ 2 / tRamp!1
                  + v0z!1") (("1" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -5) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|Integral_case1_pos-1| |nil| 3612531465 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (EXPAND "vsAUWRU_case1_pos") (("" (CASE "t!1 <=  sqrt(2 * (deltaV * tRamp!1) / accel!1)") (("1" (LEMMA "Integral_restr_eq[nnreal]") (("1" (INST -1 "0" "t!1" "LAMBDA(t:nnreal):v0z!1 + (Sign(v0z!1, goalVs!1)*accel!1/2)*t!1^2/tRamp!1" "vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "t!1" "Sign(v0z!1, goalVs!1) * accel!1 /( 2*  tRamp!1)" "0" "v0z!1") (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (PROP) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF 1) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAUWRU_acc_TCC1| 0 (|vsAUWRU_acc_TCC1-1| |nil| 3612608074 ("" (SKOSIMP*) (("" (EXPAND "deriv_domain?") (("" (SKOSIMP*) (("" (INST 2 "e!1/2") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAUWRU_acc| ASSUMING "analysis@integral_split_fun[nnreal].integral_split_fun" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|case2_vel_prep| 0 (|case2_vel_prep-1| |nil| 3612608078 ("" (SKOSIMP*) (("" (CASE "abs(goalVs!1-v0z!1)<=accel!1*tRamp!1/2") (("1" (CASE-REPLACE "vsAUWRU_acc(v0z!1, goalVs!1, accel!1, tRamp!1) =
     vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "case1_vel_prep") (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "t!1") (("1" (SKOLETIN) (("1" (SKOLETIN) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "vsAUWRU_acc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "vsAUWRU_acc(v0z!1, goalVs!1, accel!1, tRamp!1)= split_fun2[nnreal]
                                 (tRamp!1,
                                  (abs(goalVs!1 - v0z!1) +
                                    (accel!1 / 2) * tRamp!1)
                                   / accel!1,
                                  restrict[real, nnreal, real]
                                      (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                                   *
                                                   accel!1,
                                                   tRamp!1)),
                                  restrict[real, nnreal, real]
                                      (vsAccelConst(Sign(v0z!1, goalVs!1)
                                                    *
                                                    accel!1)),
                                  restrict[real, nnreal, real](vsAccelConst(0)))") (("1" (HIDE -1) (("1" (NAME "MAX" "max(t!1, max(tRamp!1,(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                                   accel!1))") (("1" (CASE "in_order?[nnreal](0, tRamp!1,  (abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1, MAX)") (("1" (EXPAND "restrict") (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1) * accel!1" "tRamp!1" "tRamp!1") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA "Int_const_vel2") (("1" (INST-CP -1 "Sign(v0z!1, goalVs!1) * accel!1" "tRamp!1" " (abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                                accel!1") (("1" (INST -1 "0" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                                accel!1" "MAX") (("1" (FLATTEN) (("1" (HIDE (-2 -4)) (("1" (LEMMA "split_fun2_Integrable[nnreal]") (("1" (INST -1 " LAMBDA (s: nnreal):
                                 vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                             tRamp!1)
                                            (s)" "                       LAMBDA (s: nnreal):
                                 vsAccelConst(Sign(v0z!1, goalVs!1) * accel!1)(s)" "                       LAMBDA (s: nnreal): vsAccelConst(0)(s) " "0" "MAX" "tRamp!1" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                                accel!1") (("1" (ASSERT) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "MAX" "split_fun2[nnreal]
                              (tRamp!1, (abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                                accel!1, LAMBDA (s: nnreal):
                                 vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1,
                                            tRamp!1)
                                            (s), LAMBDA (s: nnreal):
                                 vsAccelConst(Sign(v0z!1, goalVs!1) * accel!1)(s),
                              LAMBDA (s: nnreal): vsAccelConst(0)(s))" "0" "t!1") (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in_order?") (("2" (PROP) (("1" (CROSS-MULT 1) (("1" (HIDE 3) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "vsAUWRU_acc") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|case1_vel_prep| FORMULA-DECL NIL |vsAccel| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|vsAUWRU_case1_acc| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_acc| CONST-DECL "real" |vsAccel| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|Int_ramp_vel2| FORMULA-DECL NIL |vsAccel| NIL) (|Int_const_vel2| FORMULA-DECL NIL |vsAccel| NIL) (|Integrable?_inside| FORMULA-DECL NIL |integral| |analysis|) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|posreal_max| APPLICATION-JUDGEMENT "{z: posreal | z >= x AND z >= y}" |real_defs| NIL) (|split_fun2_Integrable| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|split_fun2| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|)) SHOSTAK)) (|vsAUWRU_vel_TCC1| 0 (|vsAUWRU_vel_TCC1-1| |nil| 3612613195 ("" (LEMMA "case2_vel_prep") (("" (PROPAX) NIL NIL)) NIL) ((|case2_vel_prep| FORMULA-DECL NIL |vsAccel| NIL)) NIL (|vsAUWRU_vel| SUBTYPE "vsAccel.vsAUWRU_acc(vsAccel.v0z, vsAccel.goalVs, vsAccel.accel, vsAccel.tRamp)" "Integrable_funs[nnreal](0, vsAccel.t)"))) (|Integral_AUWRU_vel_TCC1| 0 (|Integral_AUWRU_vel_TCC1-1| |nil| 3612614473 ("" (SKOSIMP*) (("" (EXPAND "deriv_domain?") (("" (SKOSIMP*) (("" (INST 2 "e!1/2") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|Integral_AUWRU_vel| ASSUMING "analysis@integral_split_fun[nnreal].integral_split_fun" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|Integral_AUWRU_vel| 0 (|Integral_AUWRU_vel-1| |nil| 3612616850 ("" (SKOSIMP*) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "vsAUWRU_vel") (("1" (EXPAND "vsAUWRU_case1_vel") (("1" (CASE " vsAUWRU_acc(v0z!1, goalVs!1, accel!1, tRamp!1) = vsAUWRU_case1_acc(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "vsAUWRU_case1_acc") (("2" (EXPAND "vsAUWRU_acc") (("2" (EXPAND "vsAUWRU_case1_acc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsAUWRU_vel") (("2" (CASE-REPLACE "vsAUWRU_acc(v0z!1, goalVs!1, accel!1, tRamp!1) = split_fun2[nnreal]
                          (tRamp!1,
                           (abs(goalVs!1 - v0z!1) +
                             (accel!1 / 2) * tRamp!1)
                            / accel!1,
                           restrict[real, nnreal, real]
                               (vsAccelRamp(Sign(v0z!1, goalVs!1)
                                            *
                                            accel!1,
                                            tRamp!1)),
                           restrict[real, nnreal, real]
                               (vsAccelConst(Sign(v0z!1, goalVs!1)
                                             *
                                             accel!1)),
                           restrict[real, nnreal, real](vsAccelConst(0)))") (("1" (HIDE -1) (("1" (NAME "MAX" "max(t!1, max(tRamp!1, (abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1))") (("1" (EXPAND "restrict") (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1)*accel!1" "tRamp!1" "tRamp!1") (("1" (LEMMA "Int_const_vel2") (("1" (INST-CP -1 "Sign(v0z!1, goalVs!1)*accel!1" "tRamp!1" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1") (("1" (INST -1 "0" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1" "MAX") (("1" (NAME-REPLACE "tMax" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1") (("1" (CASE "in_order?[nnreal](0, tRamp!1, tMax, MAX)") (("1" (LEMMA "Integral_split_fun2[nnreal]") (("1" (INST -1 "LAMBDA (s: nnreal):
                      vsAccelRamp(Sign(v0z!1, goalVs!1) * accel!1, tRamp!1)
                                 (s)" "
                    LAMBDA (s: nnreal):
                      vsAccelConst(Sign(v0z!1, goalVs!1) * accel!1)(s)" "
                    LAMBDA (s: nnreal): vsAccelConst(0)(s)" "0" "MAX" "tRamp!1" "tMax" "t!1") (("1" (FLATTEN) (("1" (PROP) (("1" (REPLACE -2) (("1" (LIFT-IF 2) (("1" (PROP) (("1" (LEMMA "Int_ramp_vel2") (("1" (INST -1 "Sign(v0z!1, goalVs!1)*accel!1" "tRamp!1" "t!1") (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (EXPAND "split_fun2") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Int_const_vel2") (("2" (INST -1 "Sign(v0z!1, goalVs!1)*accel!1" "tRamp!1" "t!1") (("2" (FLATTEN) (("2" (REPLACE -2) (("2" (REPLACE -12) (("2" (EXPAND "split_fun2") (("2" (LIFT-IF 1) (("2" (PROP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "Int_const_vel2") (("3" (INST -1 "0" "tMax" "t!1") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (REPLACE -9) (("3" (REPLACE -11) (("3" (EXPAND "split_fun2") (("3" (LIFT-IF 2) (("3" (PROP) (("3" (EXPAND "tMax") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in_order?") (("2" (PROP) (("1" (ASSERT) (("1" (EXPAND "tMax") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsAUWRU_acc") (("2" (HIDE 3) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "connected?") (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|goalVs!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|v0z!1| SKOLEM-CONST-DECL "real" |vsAccel| NIL) (|accel!1| SKOLEM-CONST-DECL "posreal" |vsAccel| NIL) (|tRamp!1| SKOLEM-CONST-DECL "posreal" |vsAccel| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|Integral_split_fun2| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_max| APPLICATION-JUDGEMENT "{z: posreal | z >= x AND z >= y}" |real_defs| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|tMax| SKOLEM-CONST-DECL "posreal" |vsAccel| NIL) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|Int_const_vel2| FORMULA-DECL NIL |vsAccel| NIL) (|Int_ramp_vel2| FORMULA-DECL NIL |vsAccel| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|vsAccelConst| CONST-DECL "real" |vsAccel| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|split_fun2| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|vsAUWRU_vel| CONST-DECL "real" |vsAccel| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|vsAUWRU_acc| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_case1_acc| CONST-DECL "real" |vsAccel| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|case2_pos_prep| 0 (|case2_pos_prep-2| |nil| 3612623112 ("" (SKOSIMP*) (("" (CASE "abs(goalVs!1-v0z!1)<=accel!1*tRamp!1/2") (("1" (CASE-REPLACE " vsAUWRU_vel(v0z!1, goalVs!1, accel!1, tRamp!1) =  vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "case1_pos_prep") (("1" (INST -1 "v0z!1" "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "vsAUWRU_vel") (("2" (EXPAND "vsAUWRU_case1_vel") (("2" (EXPAND "vsAUWRU_acc") (("2" (EXPAND "vsAUWRU_case1_acc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE " vsAUWRU_vel(v0z!1, goalVs!1, accel!1, tRamp!1) =
                        split_fun2[nnreal](tRamp!1, (abs(goalVs!1-v0z!1) +(accel!1/2)*tRamp!1)/accel!1,
                 LAMBDA(s:nnreal): v0z!1+(Sign(v0z!1, goalVs!1)*accel!1/(2*tRamp!1))*s^2,
                 LAMBDA(s:nnreal): v0z!1+Sign(v0z!1, goalVs!1)*accel!1*(s-tRamp!1/2),
                 LAMBDA(s:nnreal): goalVs!1)") (("1" (HIDE -1) (("1" (NAME-REPLACE "tMax" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                              accel!1") (("1" (NAME "Max" "max(t!1, max(tRamp!1, tMax))") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "tRamp!1" "(Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))" "0" "v0z!1") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "tRamp!1" "tMax" "Sign(v0z!1, goalVs!1) * accel!1" "-Sign(v0z!1, goalVs!1) * accel!1*tRamp!1/2 +v0z!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -3 "tMax" "Max" "0" "goalVs!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "in_order?[nnreal](0, tRamp!1, tMax, Max)") (("1" (LEMMA "Integral_split_fun2[nnreal]") (("1" (INST -1 "LAMBDA (x: nnreal):
                              (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1)) *
                               x ^ 2
                               + 0 * x
                               + v0z!1" "f" "f_1" "0" "Max" "tRamp!1" "tMax" "t!1") (("1" (PROP) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "Max" "split_fun2(tRamp!1, tMax,
                                         LAMBDA (x: nnreal):
                                           (Sign(v0z!1, goalVs!1) * accel!1 /
                                             (2 * tRamp!1))
                                            * x ^ 2
                                            + 0 * x
                                            + v0z!1,
                                         f, f_1)" "0" "t!1") (("1" (PROP) (("1" (CASE-REPLACE "split_fun2(tRamp!1, tMax,
                                             LAMBDA (x: nnreal):
                                               (Sign(v0z!1, goalVs!1) * accel!1 /
                                                 (2 * tRamp!1))
                                                * x ^ 2
                                                + 0 * x
                                                + v0z!1,
                                             f, f_1) = split_fun2[nnreal]
                                      (tRamp!1, tMax,
                                       LAMBDA (s: nnreal):
                                         v0z!1 +
                                          (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))
                                           * s ^ 2,
                                       LAMBDA (s: nnreal):
                                         v0z!1 +
                                          Sign(v0z!1, goalVs!1) * accel!1 *
                                           (s - tRamp!1 / 2),
                                       LAMBDA (s: nnreal): goalVs!1)") (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in_order?") (("2" (SPLIT) (("1" (EXPAND "tMax") (("1" (GRIND-REALS) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "Integral_AUWRU_vel") (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("1" (LIFT-IF -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|vsAUWRU_case1_acc| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_acc| CONST-DECL "real" |vsAccel| NIL) (|case1_pos_prep| FORMULA-DECL NIL |vsAccel| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_vel| CONST-DECL "real" |vsAccel| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Integral_AUWRU_vel| FORMULA-DECL NIL |vsAccel| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|Integrable?_inside| FORMULA-DECL NIL |integral| |analysis|) (|Integral_split_fun2| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|posreal_max| APPLICATION-JUDGEMENT "{z: posreal | z >= x AND z >= y}" |real_defs| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|tMax| SKOLEM-CONST-DECL "posreal" |vsAccel| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|integral_quadratic| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|split_fun2| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|)) NIL) (|case2_pos_prep-1| |nil| 3612620134 ("" (SKOSIMP*) (("" (CASE "abs(goalVs!1-v0z!1)<=accel!1*tRamp!1/2") (("1" (CASE-REPLACE " vsAUWRU_vel(v0z!1, goalVs!1, accel!1, tRamp!1) =  vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (LEMMA "case1_pos_prep") (("1" (INST -1 "v0z!1" "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "t!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "vsAUWRU_vel") (("2" (EXPAND "vsAUWRU_case1_vel") (("2" (EXPAND "vsAUWRU_acc") (("2" (EXPAND "vsAUWRU_case1_acc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE " vsAUWRU_vel(v0z!1, goalVs!1, accel!1, tRamp!1) = 
                    split_fun2[nnreal](tRamp!1, (abs(goalVs!1-v0z!1) +(accel!1/2)*tRamp!1)/accel!1, 
             LAMBDA(s:nnreal): v0z!1+(Sign(v0z!1, goalVs!1)*accel!1/(2*tRamp!1))*s^2,
             LAMBDA(s:nnreal): v0z!1+Sign(v0z!1, goalVs!1)*accel!1*(s-tRamp!1/2), 
             LAMBDA(s:nnreal): goalVs!1)") (("1" (HIDE -1) (("1" (NAME-REPLACE "tMax" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) /
                        accel!1") (("1" (NAME "Max" "max(t!1, max(tRamp!1, tMax))") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "tRamp!1" "(Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))" "0" "v0z!1") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "tRamp!1" "tMax" "Sign(v0z!1, goalVs!1) * accel!1" "-Sign(v0z!1, goalVs!1) * accel!1*tRamp!1/2") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -3 "tMax" "Max" "0" "goalVs!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (CASE "in_order?[nnreal](0, tRamp!1, tMax, Max)") (("1" (LEMMA "Integral_split_fun2[nnreal]") (("1" (INST -1 "LAMBDA (x: nnreal):
                    (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1)) *
                     x ^ 2
                     + 0 * x
                     + v0z!1" "f" "f_1" "0" "Max" "tRamp!1" "tMax" "t!1") (("1" (PROP) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "Max" "split_fun2(tRamp!1, tMax,
                             LAMBDA (x: nnreal):
                               (Sign(v0z!1, goalVs!1) * accel!1 /
                                 (2 * tRamp!1))
                                * x ^ 2
                                + 0 * x
                                + v0z!1,
                             f, f_1)" "0" "t!1") (("1" (PROP) (("1" (CASE-REPLACE "split_fun2(tRamp!1, tMax,
                             LAMBDA (x: nnreal):
                               (Sign(v0z!1, goalVs!1) * accel!1 /
                                 (2 * tRamp!1))
                                * x ^ 2
                                + 0 * x
                                + v0z!1,
                             f, f_1) = split_fun2[nnreal]
                      (tRamp!1, tMax,
                       LAMBDA (s: nnreal):
                         v0z!1 +
                          (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))
                           * s ^ 2,
                       LAMBDA (s: nnreal):
                         v0z!1 +
                          Sign(v0z!1, goalVs!1) * accel!1 *
                           (s - tRamp!1 / 2),
                       LAMBDA (s: nnreal): goalVs!1)") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "split_fun2") (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (PROP) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in_order?") (("2" (SPLIT) (("1" (EXPAND "tMax") (("1" (GRIND-REALS) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "Integral_AUWRU_vel") (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("1" (LIFT-IF -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsAUWRU_pos_TCC1| 0 (|vsAUWRU_pos_TCC1-1| |nil| 3612624604 ("" (LEMMA "case2_pos_prep") (("" (SKOSIMP*) (("" (INST -1 "v0z!1" "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "t!1") NIL NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|case2_pos_prep| FORMULA-DECL NIL |vsAccel| NIL)) NIL (|vsAUWRU_pos| SUBTYPE "vsAccel.vsAUWRU_vel(vsAccel.v0z, vsAccel.goalVs, vsAccel.accel, vsAccel.tRamp)" "Integrable_funs[nnreal](0, vsAccel.t)"))) (|Integral_AUWRU_pos_TCC1| 0 (|Integral_AUWRU_pos_TCC1-1| |nil| 3612626813 ("" (SUBTYPE-TCC) NIL NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|Integral_AUWRU_pos| SUBTYPE "3" "{i: integers.int | booleans.OR(vsAccel.tRamp /= 0, reals.>=(i, 0))}"))) (|Integral_AUWRU_pos_TCC2| 0 (|Integral_AUWRU_pos_TCC2-1| |nil| 3612626813 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|Integral_AUWRU_pos| SUBTYPE "2" "{i: integers.int | booleans.OR((number_fields./(((number_fields.+)(real_defs.abs((number_fields.-)(vsAccel.goalVs, vsAccel.v0z)), number_fields.*((number_fields./(vsAccel.accel, 2)), vsAccel.tRamp))), vsAccel.accel)) /= 0, reals.>=(i, 0))}"))) (|Integral_AUWRU_pos| 0 (|Integral_AUWRU_pos-1| |nil| 3612627062 ("" (SKOSIMP*) (("" (CASE "abs(goalVs!1 - v0z!1) <= accel!1 * tRamp!1 / 2") (("1" (EXPAND "vsAUWRU_pos") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "vsAUWRU_case1_pos") (("1" (CASE-REPLACE "vsAUWRU_vel(v0z!1, goalVs!1, accel!1, tRamp!1) = vsAUWRU_case1_vel(v0z!1, goalVs!1, accel!1, tRamp!1)") (("1" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "Integral_AUWRU_vel") (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("1" (LIFT-IF) (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 2) (("2" (PROP) (("2" (HIDE 3) (("2" (EXPAND "vsAUWRU_pos") (("2" (LEMMA "Integral_AUWRU_vel") (("2" (CASE-REPLACE "vsAUWRU_vel(v0z!1, goalVs!1, accel!1, tRamp!1) =split_fun2[nnreal]
                  (tRamp!1,
                   (abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1,
                   LAMBDA (s: nnreal):
                     v0z!1 +
                      (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1)) * s ^ 2,
                   LAMBDA (s: nnreal):
                     v0z!1 + Sign(v0z!1, goalVs!1) * accel!1 * (s - tRamp!1 / 2),
                   LAMBDA (s: nnreal): goalVs!1)") (("1" (HIDE -) (("1" (NAME-REPLACE "tMax" "(abs(goalVs!1 - v0z!1) + (accel!1 / 2) * tRamp!1) / accel!1") (("1" (NAME "Max" "max(t!1, max(tRamp!1, tMax))") (("1" (CASE "in_order?[nnreal](0, tRamp!1, tMax, Max)") (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "tRamp!1" "(Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))" "0" "v0z!1") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "tRamp!1" "tMax" "Sign(v0z!1, goalVs!1) * accel!1" "v0z!1 - Sign(v0z!1, goalVs!1) * accel!1*tRamp!1/2") (("1" (INST -1 "tMax" "Max" "0" "goalVs!1") (("1" (LEMMA "Integral_split_fun2[nnreal]") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (INST -5 " LAMBDA (x: nnreal):
                    (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1)) *
                     x ^ 2
                     + 0 * x
                     + v0z!1" "f_1" "f" "0" "Max" "tRamp!1" "tMax" "t!1") (("1" (PROP) (("1" (ASSERT) (("1" (CASE-REPLACE "split_fun2[nnreal](tRamp!1, tMax, LAMBDA (s: nnreal):
                      (Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1)) *
                       s ^ 2
                       + v0z!1,
                    LAMBDA (s: nnreal):
                      s * Sign(v0z!1, goalVs!1) * accel!1 -
                       Sign(v0z!1, goalVs!1) * (tRamp!1 / 2) * accel!1
                       + v0z!1,
                    LAMBDA (s: nnreal): goalVs!1)=split_fun2(tRamp!1, tMax,
                          LAMBDA (x: nnreal):          (Sign(v0z!1, goalVs!1) * accel!1 /
                              (2 * tRamp!1))
                            * x ^ 2
                             + v0z!1,
                         f_1, f)") (("1" (REPLACE -3) (("1" (LIFT-IF 2) (("1" (PROP) (("1" (LEMMA "integral_quadratic[nnreal]") (("1" (INST -1 "0" "t!1" "(Sign(v0z!1, goalVs!1) * accel!1 / (2 * tRamp!1))" "0" "v0z!1") (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (REPLACE -1) (("1" (EXPAND "split_fun2") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "integral_linear[nnreal]") (("2" (INST -1 "tRamp!1" "t!1" "Sign(v0z!1, goalVs!1) * accel!1" "v0z!1 - Sign(v0z!1, goalVs!1) * accel!1*tRamp!1/2") (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (SKOLETIN) (("2" (REPLACE -16) (("2" (CASE-REPLACE "f_1=f_2") (("1" (REPLACE -2) (("1" (EXPAND "split_fun2") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "integral_linear[nnreal]") (("3" (INST -1 "tMax" "t!1" "0" "goalVs!1") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (SKOLETIN) (("3" (REPLACE -15) (("3" (REPLACE -9) (("3" (CASE-REPLACE "f=f_2") (("1" (REPLACE -2) (("1" (EXPAND "split_fun2") (("1" (LIFT-IF 2) (("1" (PROP) (("1" (AUTO-REWRITE "^") (("1" (ASSERT) (("1" (AUTO-REWRITE "expt") (("1" (ASSERT) (("1" (EXPAND "F") (("1" (CROSS-MULT) (("1" (CROSS-MULT) (("1" (EXPAND "tMax") (("1" (EXPAND "abs") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "Sign") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (HIDE +) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "Sign") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in_order?") (("2" (PROP) (("1" (EXPAND "tMax") (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (INST -1 "v0z!1" "goalVs!1" "accel!1" "tRamp!1" "x!1") (("1" (LIFT-IF -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|vsAUWRU_case1_pos| CONST-DECL "real" |vsAccel| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|Integral_AUWRU_vel| FORMULA-DECL NIL |vsAccel| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_vel| CONST-DECL "real" |vsAccel| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|vsAUWRU_pos| CONST-DECL "real" |vsAccel| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|split_fun2| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|Integral_split_fun2| FORMULA-DECL NIL |integral_split_fun| |analysis|) (F SKOLEM-CONST-DECL "[nnreal -> real]" |vsAccel| NIL) (|tMax| SKOLEM-CONST-DECL "posreal" |vsAccel| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|width| CONST-DECL "posreal" |integral_def| |analysis|) (|integral?| CONST-DECL "bool" |integral_def| |analysis|) (|integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|posreal_max| APPLICATION-JUDGEMENT "{z: posreal | z >= x AND z >= y}" |real_defs| NIL) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|integral_quadratic| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|vsAUWRU_TCC1| 0 (|vsAUWRU_TCC1-1| |nil| 3612632685 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vsAUWRU_vel| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_pos| CONST-DECL "real" |vsAccel| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|vsAUWRU| SUBTYPE "vsAccel.x`1" "[real, real, real]"))) (|same_tMax| 0 (|same_tMax-1| |nil| 3613138887 ("" (SKOSIMP*) (("" (EXPAND "abs") (("" (EXPAND "Sign") (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|exceeds_deltav| 0 (|exceeds_deltav-2| "" 3884832366 ("" (SKOSIMP*) (("" (ASSERT) (("" (SPLIT) (("1" (FLATTEN) (("1" (MULT-INEQ -1 -1) (("1" (LEMMA "sq_sqrt") (("1" (INST -1 "2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1)") (("1" (SPLIT) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (CROSS-MULT -2) (("1" (HIDE -1) (("1" (DIV-BY -1 "2*tRamp!1") (("1" (ASSERT) (("1" (LEMMA "Int_ramp_vel") (("1" (INST -1 "a!1" "tRamp!1") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE (1 2 4 5 6)) (("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "abs(vsAccelRamp_Vel(a!1, tRamp!1)(t!1)) = vsAccelRamp_Vel(abs(a!1), tRamp!1)(t!1)") (("1" (HIDE -1) (("1" (LEMMA "Int_ramp_vel") (("1" (INST -1 "abs(a!1)" "tRamp!1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CROSS-MULT) (("1" (DIV-BY -2 "abs(a!1)") (("1" (HIDE -1) (("1" (CASE "t!1<= sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1))") (("1" (MULT-INEQ -1 -1) (("1" (LEMMA "sq_sqrt") (("1" (INST -1 "2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1)") (("1" (PROP) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "abs(t!1) = t!1") (("1" (REPLACE -1) (("1" (CASE-REPLACE "abs(sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1))) = sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1))") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED ("t!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("t!1")) (("2" (ASSERT) (("2" (HIDE (-2 -3 2 3 4)) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Int_ramp_vel") (("2" (INST-CP -1 "a!1" "tRamp!1") (("2" (INST -1 "abs(a!1)" "tRamp!1") (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (HIDE -) (("2" (HIDE 2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CROSS-MULT) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) (("2" (DIV-BY -1 "(t!1*t!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CROSS-MULT) (("1" (DIV-BY 2 "t!1^2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|exceeds_deltav-1| |nil| 3612087194 ("" (SKOSIMP*) (("" (ASSERT) (("" (SPLIT) (("1" (FLATTEN) (("1" (MULT-INEQ -1 -1) (("1" (LEMMA "sq_sqrt") (("1" (INST -1 "2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1)") (("1" (SPLIT) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (CROSS-MULT -2) (("1" (HIDE -1) (("1" (DIV-BY -1 "2*tRamp!1") (("1" (ASSERT) (("1" (LEMMA "Int_ramp_vel") (("1" (INST -1 "a!1" "tRamp!1") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE (1 2 4 5 6)) (("2" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "abs(vsAccelRamp_Vel(a!1, tRamp!1)(t!1)) = vsAccelRamp_Vel(abs(a!1), tRamp!1)(t!1)") (("1" (HIDE -1) (("1" (LEMMA "Int_ramp_vel") (("1" (INST -1 "abs(a!1)" "tRamp!1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CROSS-MULT) (("1" (DIV-BY -2 "abs(a!1)") (("1" (HIDE -1) (("1" (CASE "t!1<= sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1))") (("1" (MULT-INEQ -1 -1) (("1" (LEMMA "sq_sqrt") (("1" (INST -1 "2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1)") (("1" (PROP) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "abs(t!1) = t!1") (("1" (REPLACE -1) (("1" (CASE-REPLACE "abs(sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1))) = sqrt(2 * (abs(goalVs!1 - v0z!1) * tRamp!1) / abs(a!1))") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED (T!1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (T!1)) (("2" (ASSERT) (("2" (HIDE (-2 -3 2 3 4)) (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Int_ramp_vel") (("2" (INST-CP -1 "a!1" "tRamp!1") (("2" (INST -1 "abs(a!1)" "tRamp!1") (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (HIDE -) (("2" (HIDE 2) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CROSS-MULT) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) (("2" (DIV-BY -1 "(t!1*t!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CROSS-MULT) (("1" (DIV-BY 2 "t!1^2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|vsAccelRamp_Vel| CONST-DECL "real" |vsAccel| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|Int_ramp_vel| FORMULA-DECL NIL |vsAccel| NIL) (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_gt2| FORMULA-DECL NIL |extra_real_props| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|finish_ramp| 0 (|finish_ramp-1| |nil| 3612109828 ("" (SKOSIMP*) (("" (EXPAND "vsAccelRamp") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|vsAccelRamp| CONST-DECL "real" |vsAccel| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK)))
