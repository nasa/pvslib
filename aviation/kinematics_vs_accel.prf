(|kinematics_vs_accel| (|vsConstAccelGoalPos_TCC1| 0 (|vsConstAccelGoalPos_TCC1-2| "" 3790106820 ("" (SKEEP*) (("" (EXPAND "vsConstAccelTime") (("" (HIDE -2) (("" (TYPEPRED "accel") (("" (HIDE -1) (("" (TYPEPRED "abs(v0`z - goalVs)") (("" (HIDE -2 -3) (("" (NAME-REPLACE "av" "abs(v0`z - goalVs)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsConstAccelTime| CONST-DECL "real" |kinematics_vs_accel| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|vsConstAccelGoalPos| SUBTYPE "kinematics_vs_accel.goalt" "nnreal")) (|vsConstAccelGoalPos_TCC1-1| |nil| 3579452170 ("" (SKEEP*) (("" (EXPAND "vsConstAccelTime") (("" (HIDE -2) (("" (TYPEPRED "accel") (("" (HIDE -1) (("" (TYPEPRED "abs(v0`z - goalVs)") (("" (HIDE -2 -3) (("" (NAME-REPLACE "av" "abs(v0`z - goalVs)") (("" (REPLACE -3) (("" (HIDE -3) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|vsConstAccelGoalPos| SUBTYPE "kinematics_vs_accel.goalt" "nnreal"))) (|equals_integral| 0 (|equals_integral-1| |nil| 3611656745 ("" (SKOSIMP*) (("" (EXPAND "vsAccelUntilVelocity") (("" (EXPAND "vsAccelUntil_Vel") (("" (CASE "v0!1`z +
                    vsSign(v0!1, goalVs!1) *
                     min(t!1, vsConstAccelTime(v0!1, goalVs!1, accel!1))
                     * accel!1 = IF (goalVs!1 - v0!1`z) / accel!1 >= 0
                      THEN velo(v0!1`z, (goalVs!1 - v0!1`z) / accel!1,
                                accel!1)
                               (t!1)
                    ELSE velo(v0!1`z, -(goalVs!1 - v0!1`z) / accel!1,
                              -accel!1)
                             (t!1)
                    ENDIF") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "vsSign") (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "L1") (("1" (EXPAND "min") (("1" (CASE-REPLACE "vsConstAccelTime(v0!1, goalVs!1, accel!1) = (goalVs!1 - v0!1`z) / accel!1") (("1" (INST -2 "v0!1`z" "(goalVs!1 - v0!1`z) / accel!1" "t!1" "max((goalVs!1 - v0!1`z) / accel!1, t!1)" "accel!1") (("1" (PROP) (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (HIDE -1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsConstAccelTime") (("2" (HIDE (-1 2)) (("2" (EXPAND "abs") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MOVE-TERMS 1 L 1) (("2" (DIV-BY 1 "accel!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsSign") (("2" (LIFT-IF) (("2" (PROP) (("1" (MOVE-TERMS 1 L 1) (("1" (MOVE-TERMS -1 L 1) (("1" (DIV-BY -1 "accel!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "L1") (("2" (EXPAND "min") (("2" (CASE-REPLACE "vsConstAccelTime(v0!1, goalVs!1, accel!1)=-(goalVs!1 - v0!1`z) / accel!1") (("1" (INST -2 "v0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "max(-(goalVs!1 - v0!1`z) / accel!1, t!1)" "-accel!1") (("1" (PROP) (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (HIDE -1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsAccelUntilVelocity| CONST-DECL "Vect3" |kinematics_vs_accel| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Sign| TYPE-EQ-DECL NIL |sign| |reals|) (|vsSign| CONST-DECL "Sign" |kinematics_vs_accel| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|vsConstAccelTime| CONST-DECL "real" |kinematics_vs_accel| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|velo| CONST-DECL "real" |vsAccel| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|accel| CONST-DECL "[real -> real]" |vsAccel| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (L1 FORMULA-DECL NIL |vsAccel| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|vsAccelUntil_Vel| CONST-DECL "Vect3" |vsAccel| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|equals_integral_pos| 0 (|equals_integral_pos-2| "" 3884831958 ("" (SKOSIMP*) (("" (EXPAND "vsAccelUntilPos") (("" (EXPAND "vsAccelUntil_Pos") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "vsConstAccelPos") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "vsConstAccelTime") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "(goalVs!1 - v0!1`z) / accel!1" "t!1" "(goalVs!1 - v0!1`z) / accel!1" "accel!1") (("1" (PROP) (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "sq") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (EXPAND "vsSign") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) (("2" (CROSS-MULT -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (FLATTEN) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "L2") (("2" (INST -1 "v0!1`z" "s0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "-(goalVs!1 - v0!1`z) / accel!1" "-accel!1") (("2" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "vsSign") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (MOVE-TERMS -1 R 1) (("1" (DIV-BY -1 "accel!1") (("1" (TYPEPRED ("t!1")) (("1" (SPLIT-INEQ -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "linear_pos") (("2" (SPLIT) (("1" (EXPAND "vsConstAccelGoalPos") (("1" (EXPAND "vsConstAccelPos") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsConstAccelGoalPos") (("2" (EXPAND "vsConstAccelPos") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "vsConstAccelGoalPos") (("3" (EXPAND "vsConstAccelPos") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (CASE-REPLACE "(goalVs!1 - v0!1`z) / accel!1 = vsConstAccelTime(v0!1, goalVs!1, accel!1)") (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "vsConstAccelTime(v0!1, goalVs!1, accel!1)" "t!1" "t!1" "accel!1") (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "vsSign") (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (REPLACE -1 :DIR RL) (("2" (CROSS-MULT -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (LIFT-IF 3) (("1" (PROP) (("1" (EXPAND "vsSign") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "(goalVs!1 - v0!1`z) / accel!1" "t!1" "t!1" "accel!1") (("1" (PROP) (("1" (LIFT-IF -1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (LIFT-IF 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "vsSign") (("2" (LIFT-IF) (("2" (PROP) (("1" (SPLIT-INEQ -1) (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "t!1" "-accel!1") (("1" (PROP) (("1" (LIFT-IF -1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (MOVE-TERMS -1 R 1) (("2" (DIV-BY -1 "accel!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "L2") (("2" (INST -1 "v0!1`z" "s0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "t!1" "-accel!1") (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|equals_integral_pos-1| |nil| 3611934916 ("" (SKOSIMP*) (("" (EXPAND "vsAccelUntilPos") (("" (EXPAND "vsAccelUntil_Pos") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "vsConstAccelPos") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "vsConstAccelTime") (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "(goalVs!1 - v0!1`z) / accel!1" "t!1" "(goalVs!1 - v0!1`z) / accel!1" "accel!1") (("1" (PROP) (("1" (REPLACE -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "sq") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (EXPAND "vsSign") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) (("2" (CROSS-MULT -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (FLATTEN) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "L2") (("2" (INST -1 "v0!1`z" "s0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "-(goalVs!1 - v0!1`z) / accel!1" "-accel!1") (("2" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "vsSign") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (MOVE-TERMS -1 R 1) (("1" (DIV-BY -1 "accel!1") (("1" (TYPEPRED (T!1)) (("1" (SPLIT-INEQ -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "linear_pos") (("2" (SPLIT) (("1" (EXPAND "vsConstAccelGoalPos") (("1" (EXPAND "vsConstAccelPos") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsConstAccelGoalPos") (("2" (EXPAND "vsConstAccelPos") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "vsConstAccelGoalPos") (("3" (EXPAND "vsConstAccelPos") (("3" (LIFT-IF) (("3" (SPLIT) (("1" (CASE-REPLACE "(goalVs!1 - v0!1`z) / accel!1 = vsConstAccelTime(v0!1, goalVs!1, accel!1)") (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "vsConstAccelTime(v0!1, goalVs!1, accel!1)" "t!1" "t!1" "accel!1") (("1" (PROP) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "vsSign") (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (REPLACE -1 :DIR RL) (("2" (CROSS-MULT -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (LIFT-IF 3) (("1" (PROP) (("1" (EXPAND "vsSign") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "(goalVs!1 - v0!1`z) / accel!1" "t!1" "t!1" "accel!1") (("1" (PROP) (("1" (LIFT-IF -1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "abs") (("2" (LIFT-IF 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "vsSign") (("2" (LIFT-IF) (("2" (PROP) (("1" (SPLIT-INEQ -1) (("1" (LEMMA "L2") (("1" (INST -1 "v0!1`z" "s0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "t!1" "-accel!1") (("1" (PROP) (("1" (LIFT-IF -1) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (MOVE-TERMS -1 R 1) (("2" (DIV-BY -1 "accel!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "L2") (("2" (INST -1 "v0!1`z" "s0!1`z" "-(goalVs!1 - v0!1`z) / accel!1" "t!1" "t!1" "-accel!1") (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|vsAccelUntilPos| CONST-DECL "Vect3" |kinematics_vs_accel| NIL) (|vsConstAccelGoalPos| CONST-DECL "Vect3" |kinematics_vs_accel| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|linear_pos| CONST-DECL "Vect3" |util| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posit| CONST-DECL "real" |vsAccel| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|vsSign| CONST-DECL "Sign" |kinematics_vs_accel| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (L2 FORMULA-DECL NIL |vsAccel| NIL) (|vsConstAccelTime| CONST-DECL "real" |kinematics_vs_accel| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsConstAccelPos| CONST-DECL "Vect3" |kinematics_vs_accel| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsAccelUntil_Pos| CONST-DECL "Vect3" |vsAccel| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|reach_goalVs| 0 (|reach_goalVs-1| |nil| 3618848047 ("" (SKEEP) (("" (EXPAND "vsAccelUntilVelocity") (("" (FLATTEN) (("" (EXPAND "min") (("" (LIFT-IF 1) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "vsConstAccelTime") (("1" (EXPAND "vsSign") (("1" (EXPAND "abs") (("1" (GRIND) (("1" (CROSS-MULT -1) NIL NIL) ("2" (CROSS-MULT -1) NIL NIL) ("3" (SPLIT-INEQ -2) (("3" (BOTH-SIDES "-" "goalVs" -2) (("3" (DIV-BY -2 "accel") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsConstAccelTime") (("2" (EXPAND "vsSign") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsAccelUntilVelocity| CONST-DECL "Vect3" |kinematics_vs_accel| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|vsConstAccelTime| CONST-DECL "real" |kinematics_vs_accel| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_minus_le1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_2D| |vectors|) (|nzhVect3| NONEMPTY-TYPE-EQ-DECL NIL |track_3D| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|vsSign| CONST-DECL "Sign" |kinematics_vs_accel| NIL)) SHOSTAK)) (|gamma_TCC1| 0 (|gamma_TCC1-1| |nil| 3612194345 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gamma| SUBTYPE "3" "{i: integers.int | booleans.OR(kinematics_vs_accel.t /= 0, reals.>=(i, 0))}"))) (|gamma_TCC2| 0 (|gamma_TCC2-1| |nil| 3612194345 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gamma| SUBTYPE "kinematics_vs_accel.Tr" "nznum"))) (|vsAccelUntilWithRampUp_TCC1| 0 (|vsAccelUntilWithRampUp_TCC1-1| |nil| 3612194345 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|gamma| CONST-DECL "real" |kinematics_vs_accel| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAccelUntilWithRampUp| SUBTYPE "2" "{i: integers.int | booleans.OR(kinematics_vs_accel.t /= 0, reals.>=(i, 0))}"))) (|vsAccelUntilWithRampUp_TCC2| 0 (|vsAccelUntilWithRampUp_TCC2-1| |nil| 3612194345 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|gamma| CONST-DECL "real" |kinematics_vs_accel| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAccelUntilWithRampUp| SUBTYPE "2" "{i: integers.int | booleans.OR(kinematics_vs_accel.t /= 0, reals.>=(i, 0))}"))) (|equals_integral_AUWRU| 0 (|equals_integral_AUWRU-1| |nil| 3612633095 ("" (SKOSIMP*) (("" (EXPAND "vsAccelUntilWithRampUp") (("" (LIFT-IF) (("" (LEMMA "Integral_AUWRU_pos") (("" (LEMMA "Integral_AUWRU_vel") (("" (CASE "abs(goalVs!1 - v0!1`z) <= (vsAccel!1 / 2) * tRamp!1") (("1" (PROP) (("1" (LEMMA "Integral_case1_vel") (("1" (LEMMA "Integral_case1_pos") (("1" (INST -7 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (INST -1 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (INST -2 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (INST -6 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "linear_pos") (("1" (EXPAND "vsAUWRU") (("1" (EXPAND "mk_vect3") (("1" (SPLIT) (("1" (REPLACE -2) (("1" (SKOLETIN -5) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (EXPAND "gamma") (("1" (EXPAND "vsSign") (("1" (EXPAND "Sign") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT-INEQ -8) (("2" (REPLACE -2) (("2" (EXPAND "gamma") (("2" (REPLACE -1) (("2" (EXPAND "deltaV") (("2" (EXPAND "vsSign") (("2" (EXPAND "Sign") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4) (("2" (SKOLETIN -6) (("2" (ASSERT) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (EXPAND "vsSign") (("1" (EXPAND "Sign") (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT-INEQ -8) (("2" (REPLACE -2) (("2" (REPLACE -1) (("2" (EXPAND "vsSign") (("2" (EXPAND "abs") (("2" (DECOMPOSE-EQUALITY 2) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "linear_pos") (("2" (EXPAND "vsAUWRU") (("2" (EXPAND "mk_vect3") (("2" (SPLIT 2) (("1" (INST -4 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (LIFT-IF -4) (("1" (LEMMA "Integral_case1_pos") (("1" (INST -1 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (SKOLETIN) (("1" (PROP) (("1" (REPLACE -2) (("1" (HIDE (-7 -6 -5 -2)) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "deltaV") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "gamma") (("2" (EXPAND "vsSign") (("2" (EXPAND "abs") (("2" (EXPAND "deltaV") (("2" (EXPAND "Sign") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "split_fun2") (("2" (LIFT-IF 2) (("2" (PROP) (("1" (EXPAND "gamma") (("1" (EXPAND "vsSign") (("1" (EXPAND "abs") (("1" (EXPAND "Sign") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gamma") (("2" (EXPAND "vsSign") (("2" (EXPAND "abs") (("2" (EXPAND "Sign") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gamma") (("3" (EXPAND "vsSign") (("3" (EXPAND "abs") (("3" (EXPAND "Sign") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (HIDE -4) (("2" (INST -3 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("2" (LIFT-IF -3) (("2" (PROP) (("1" (REPLACE -2) (("1" (LEMMA "Integral_case1_vel") (("1" (INST -1 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("1" (SKOLETIN) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "deltaV") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("2" (INST -2 "s0!1`z" "v0!1`z" "goalVs!1" "vsAccel!1" "tRamp!1" "t!1") (("2" (EXPAND "vsAUWRU") (("2" (REPLACE -2) (("2" (REPLACE -1) (("2" (HIDE -) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (EXPAND "split_fun2") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (EXPAND "mk_vect3") (("2" (EXPAND "vsSign") (("2" (EXPAND "Sign") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GRIND) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL) ("2" (DECOMPOSE-EQUALITY 3) NIL NIL) ("3" (DECOMPOSE-EQUALITY) NIL NIL) ("4" (DECOMPOSE-EQUALITY) (("4" (GRIND) (("4" (SPLIT-INEQ -2) (("4" (GRIND) (("4" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (CROSS-MULT) NIL NIL) ("6" (SPLIT-INEQ -2) (("6" (DECOMPOSE-EQUALITY) NIL NIL)) NIL) ("7" (DECOMPOSE-EQUALITY) NIL NIL) ("8" (DECOMPOSE-EQUALITY) NIL NIL) ("9" (GRIND) (("9" (SPLIT-INEQ -1) (("9" (GRIND) (("9" (CROSS-MULT 4) NIL NIL)) NIL)) NIL)) NIL) ("10" (DECOMPOSE-EQUALITY) (("10" (SPLIT-INEQ -1) (("10" (CROSS-MULT 5) NIL NIL)) NIL)) NIL) ("11" (DECOMPOSE-EQUALITY 4) NIL NIL) ("12" (DECOMPOSE-EQUALITY) NIL NIL) ("13" (DECOMPOSE-EQUALITY) NIL NIL) ("14" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|vsAccelUntilWithRampUp| CONST-DECL "[Vect3, Vect3]" |kinematics_vs_accel| NIL) (|Integral_AUWRU_pos| FORMULA-DECL NIL |vsAccel| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|deltaV| SKOLEM-CONST-DECL "{n: nonneg_real | n >= goalVs!1 - v0!1`z AND n >= -(goalVs!1 - v0!1`z)}" |kinematics_vs_accel| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|deltaV| SKOLEM-CONST-DECL "{n: nonneg_real | n >= goalVs!1 - v0!1`z AND n >= -(goalVs!1 - v0!1`z)}" |kinematics_vs_accel| NIL) (|Integral_case1_vel| FORMULA-DECL NIL |vsAccel| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|split_fun2| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|linear_pos| CONST-DECL "Vect3" |util| NIL) (|mk_vect3| MACRO-DECL "Vect3" |vectors_3D_def| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|vsAccel!1| SKOLEM-CONST-DECL "posreal" |kinematics_vs_accel| NIL) (|tRamp!1| SKOLEM-CONST-DECL "posreal" |kinematics_vs_accel| NIL) (|v0!1| SKOLEM-CONST-DECL "Vect3" |kinematics_vs_accel| NIL) (|goalVs!1| SKOLEM-CONST-DECL "real" |kinematics_vs_accel| NIL) (|sign_not_zero| APPLICATION-JUDGEMENT "nzreal" |vsAccel| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|vsAUWRU_vel| CONST-DECL "real" |vsAccel| NIL) (|vsAUWRU_case1_vel| CONST-DECL "real" |vsAccel| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|vsAUWRU_pos| CONST-DECL "real" |vsAccel| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|deltaV| SKOLEM-CONST-DECL "{n: nonneg_real | n >= goalVs!1 - v0!1`z AND n >= -(goalVs!1 - v0!1`z)}" |kinematics_vs_accel| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gamma| CONST-DECL "real" |kinematics_vs_accel| NIL) (|vsSign| CONST-DECL "Sign" |kinematics_vs_accel| NIL) (|vsAUWRU_case1_pos| CONST-DECL "real" |vsAccel| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Sign| CONST-DECL "real" |vsAccel| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|vsAUWRU| CONST-DECL "[Vect3, Vect3]" |vsAccel| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Integral_case1_pos| FORMULA-DECL NIL |vsAccel| NIL) (|rho| CONST-DECL "real" |kinematics_vs_accel| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|Integral_AUWRU_vel| FORMULA-DECL NIL |vsAccel| NIL)) SHOSTAK)) (|reach_goal_AUWRU| 0 (|reach_goal_AUWRU-1| |nil| 3624976695 ("" (SKEEP) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (PROP) (("" (EXPAND "vsAccelUntilWithRampUp") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (EXPAND "deltaV") (("1" (REPLACE -3) (("1" (SPLIT-INEQ -1) (("1" (LEMMA "sq_sqrt") (("1" (INST -1 "2 * (abs(goalVs - v0`z) * tRamp) / vsAccel") (("1" (SPLIT -1) (("1" (REPLACE -2) (("1" (EXPAND "sq") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (FLIP-INEQ 2) (("1" (CROSS-MULT -3) (("1" (DIV-BY -3 "vsAccel") (("1" (SIMPLIFY -3) (("1" (CANCEL-BY -1 "vsAccel") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|vsAccelUntilWithRampUp| CONST-DECL "[Vect3, Vect3]" |kinematics_vs_accel| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (<= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Sign| TYPE-EQ-DECL NIL |sign| |reals|) (|vsSign| CONST-DECL "Sign" |kinematics_vs_accel| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|deltaV| SKOLEM-CONST-DECL "{n: nonneg_real | n >= goalVs - v0`z AND n >= -(goalVs - v0`z)}" |kinematics_vs_accel| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL)) SHOSTAK)) (|vsAccelPos_TCC1| 0 (|vsAccelPos_TCC1-1| |nil| 3607084872 ("" (SUBTYPE-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|)) NIL (|vsAccelPos| SUBTYPE "(# x := (number_fields.+)(kinematics_vs_accel.so3`x, number_fields.*(kinematics_vs_accel.t, kinematics_vs_accel.vo3`x)), y := (number_fields.+)(kinematics_vs_accel.so3`y, number_fields.*(kinematics_vs_accel.t, kinematics_vs_accel.vo3`y)), z := (number_fields.+)((number_fields.+)(kinematics_vs_accel.so3`z, number_fields.*(kinematics_vs_accel.vo3`z, kinematics_vs_accel.t)), number_fields.*(number_fields.*(number_fields.*((number_fields./(5, 10)), kinematics_vs_accel.a), kinematics_vs_accel.t), kinematics_vs_accel.t)) #)" "{w: vectors_3D_def.Vect3 | booleans.AND(vect_3D_2D.vect2(w) = (vectors_2D.+)(vect_3D_2D.vect2(kinematics_vs_accel.so3), vectors_2D.*(kinematics_vs_accel.t, vect_3D_2D.vect2(kinematics_vs_accel.vo3))), w`z = (number_fields.+)((number_fields.+)(kinematics_vs_accel.so3`z, number_fields.*(kinematics_vs_accel.vo3`z, kinematics_vs_accel.t)), number_fields.*(1/2, number_fields.*(number_fields.*(kinematics_vs_accel.a, kinematics_vs_accel.t), kinematics_vs_accel.t))))}"))) (|vsAccel_TCC1| 0 (|vsAccel_TCC1-1| |nil| 3607084872 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (+ CONST-DECL "Vector" |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|vsAccelPos| CONST-DECL "{w: Vect3 |
   vect2(w) = vect2(so3) + t * vect2(vo3) AND
    w`z = so3`z + vo3`z * t + 0.5 * a * t * t}" |kinematics_vs_accel| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsAccel| SUBTYPE "(kinematics_vs_accel.pres, kinematics_vs_accel.vres)" "{w: [vectors_3D_def.Vect3, vectors_3D_def.Vect3] | booleans.AND(vect_3D_2D.vect2(w`1) = (vectors_2D.+)(vect_3D_2D.vect2(kinematics_vs_accel.so), vectors_2D.*(kinematics_vs_accel.t, vect_3D_2D.vect2(kinematics_vs_accel.vo))), booleans.AND(w`1`z = (number_fields.+)((number_fields.+)(kinematics_vs_accel.so`z, number_fields.*(kinematics_vs_accel.vo`z, kinematics_vs_accel.t)), number_fields.*(1/2, number_fields.*(number_fields.*(kinematics_vs_accel.a, kinematics_vs_accel.t), kinematics_vs_accel.t))), booleans.AND(vect_3D_2D.vect2(w`2) = vect_3D_2D.vect2(kinematics_vs_accel.vo), w`2`z = (number_fields.+)(kinematics_vs_accel.vo`z, number_fields.*(kinematics_vs_accel.a, kinematics_vs_accel.t)))))}"))))
