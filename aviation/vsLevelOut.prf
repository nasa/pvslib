(|vsLevelOut| (S1_TCC1 0 (S1_TCC1-1 |nil| 3613726992 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (S1 SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.t /= 0, reals.>=(i, 0))}"))) (|quadRoots_TCC1| 0 (|quadRoots_TCC1-1| |nil| 3613732864 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|quadRoots| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.b /= 0, reals.>=(i, 0))}"))) (|quadRoots_TCC2| 0 (|quadRoots_TCC2-1| |nil| 3614934108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|quadRoots| SUBTYPE "(number_fields.*(2, vsLevelOut.a))" "nznum"))) (|quad_contrapos_TCC1| 0 (|quad_contrapos_TCC1-1| |nil| 3613738798 ("" (SUBTYPE-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|quad_contrapos| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.a /= 0, reals.>=(i, 0))}"))) (|quad_contrapos_TCC2| 0 (|quad_contrapos_TCC2-1| |nil| 3613738798 ("" (SUBTYPE-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|quad_contrapos| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.x /= 0, reals.>=(i, 0))}"))) (|quad_contrapos| 0 (|quad_contrapos-1| |nil| 3613738823 ("" (SKOSIMP*) (("" (CASE-REPLACE "a!1 ^ 2 * x!1 ^ 2 + b!1 * a!1 * x!1 + a!1 * c!1 = a!1^2*(x!1+b!1/(2*a!1))^2 +(- (b!1^2-4*a!1*c!1)/4)") (("1" (MULT-BY 1 "4") (("1" (ASSERT) (("1" (GRIND-REALS) (("1" (MOVE-TERMS 1 L 1) (("1" (MOVE-TERMS 1 R 1) (("1" (ASSERT) (("1" (CASE "4 * ((b!1 / (2 * a!1) + x!1) ^ 2 * a!1 ^ 2)>=0") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (DIV-BY 1 "4") (("2" (ASSERT) (("2" (LEMMA "sq_pos") (("2" (INST-CP -1 "b!1/(2*a!1)+x!1") (("2" (INST -1 "a!1") (("2" (CASE "FORALL (s:real): sq(s) = s^2") (("1" (INST-CP -1 "a!1") (("1" (INST -1 "b!1/(2*a!1) + x!1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|neg_times_neg| FORMULA-DECL NIL |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)) SHOSTAK)) (|quad_lem_TCC1| 0 (|quad_lem_TCC1-1| |nil| 3613741430 ("" (SUBTYPE-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|quad_lem| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.y /= 0, reals.>=(i, 0))}"))) (|quad_lem| 0 (|quad_lem-1| |nil| 3613741450 ("" (SKOSIMP*) (("" (LEMMA "quad_contrapos") (("" (INST -1 "a!1" "b!1" "c!1") (("" (ASSERT) (("" (CASE "a!1>0") (("1" (MULT-BY -4 "a!1") (("1" (INST -3 "y!1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "x!1") (("2" (MULT-BY -2 "-a!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|quad_contrapos| FORMULA-DECL NIL |vsLevelOut| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|a!1| SKOLEM-CONST-DECL "nzreal" |vsLevelOut| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|quad_lem2_TCC1| 0 (|quad_lem2_TCC1-1| |nil| 3613743231 ("" (LEMMA "quad_lem") (("" (PROPAX) NIL NIL)) NIL) ((|quad_lem| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|quad_lem2| SUBTYPE "(number_fields.-)(exponentiation.^(vsLevelOut.b, 2), number_fields.*(number_fields.*(4, vsLevelOut.a), vsLevelOut.c))" "nonneg_real"))) (|quad_lem2_TCC2| 0 (|quad_lem2_TCC2-1| |nil| 3613743231 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|quad_lem2| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.r1 /= 0, reals.>=(i, 0))}"))) (|quad_lem2_TCC3| 0 (|quad_lem2_TCC3-1| |nil| 3613743231 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|quad_lem2| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.r2 /= 0, reals.>=(i, 0))}"))) (|quad_lem2| 0 (|quad_lem2-1| |nil| 3613743338 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (SKOLETIN) (("" (LEMMA "quad_lem") (("" (INST?) (("" (INST?) (("" (LEMMA "sq_sqrt") (("" (SPLIT 1) (("1" (INST -1 "b!1^2-4*a!1*c!1") (("1" (REPLACE -4) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "b!1^2-4*a!1*c!1") (("2" (REPLACE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|quad_lem| FORMULA-DECL NIL |vsLevelOut| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|vsLevelOutTimes1_TCC1| 0 (|vsLevelOutTimes1_TCC1-1| |nil| 3613726992 ("" (SKOSIMP*) (("" (GRIND) NIL NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|vsLevelOutTimes1| SUBTYPE "vsLevelOut.a1" "nznum"))) (|vsLevelOutTimes1_TCC2| 0 (|vsLevelOutTimes1_TCC2-1| |nil| 3613726992 ("" (SKOSIMP*) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL)) NIL (|vsLevelOutTimes1| SUBTYPE "vsLevelOut.a2" "nzreal"))) (|vsLevelOutTimes1_TCC3| 0 (|vsLevelOutTimes1_TCC3-2| "" 3790107029 ("" (SKOSIMP*) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|vsLevelOutTimes1| SUBTYPE "vsLevelOut.cRate" "nznum")) (|vsLevelOutTimes1_TCC3-1| |nil| 3613726992 ("" (SKOSIMP*) (("" (LIFT-IF -7) (("" (SPLIT -7) (("1" (FLATTEN) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|vsLevelOutTimes1| SUBTYPE "vsLevelOut.cRate" "nznum"))) (|vsLevelOutTimes1_TCC4| 0 (|vsLevelOutTimes1_TCC4-1| |nil| 3613726992 ("" (SKOSIMP*) (("" (GRIND) NIL NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsLevelOutTimes1| SUBTYPE "(number_fields.*(2, vsLevelOut.a2))" "nznum"))) (|vsLevelOutTimes1_TCC5| 0 (|vsLevelOutTimes1_TCC5-1| |nil| 3613726992 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|vsLevelOutTimes1| SUBTYPE "2" "{i: integers.int | booleans.OR(vsLevelOut.v0z /= 0, reals.>=(i, 0))}"))) (|vsLevelOutTimes_TCC1| 0 (|vsLevelOutTimes_TCC1-1| |nil| 3613810277 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|vsLevelOutTimes| SUBTYPE "vsLevelOut.a2" "nzreal"))) (|vsLevelOutTimes_TCC2| 0 (|vsLevelOutTimes_TCC2-1| |nil| 3613810277 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|vsLevelOutTimes| SUBTYPE "vsLevelOut.a1" "nzreal"))) (|times_increase| 0 (|times_increase-5| "" 3884830695 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (CASE "FORALL (s:real, v:real, cr:posreal, ta: real, au:posreal, ad:negreal, altcr:bool):
                              LET times = vsLevelOutTimes1(s,v,cr, ta, au, ad, altcr),
                             sv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                              aldir = IF ta-s>=0 THEN 1 ELSE -1 ENDIF IN
                             (sv=aldir OR v=0) AND abs(ta-s)>= abs( S3(v, IF ta-s>=0 THEN ad ELSE au ENDIF)) IMPLIES 0<=times`1 AND times`1<=times`2 AND times`2<=times`3") (("1" (CASE "IF v0z!1>=0 THEN 1 ELSE -1 ENDIF = IF targetAlt!1-s0z!1>=0 THEN 1 ELSE -1 ENDIF OR v0z!1=0") (("1" (CASE "abs(targetAlt!1-s0z!1) >= abs(S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (EXPAND "vsLevelOutTimes") (("1" (INST -3 "s0z!1" " v0z!1" "                                      climbRate!1" "                                      targetAlt!1" "                                      accelup!1" "                                      acceldown!1" "                                      alterCR?!1") (("1" (REPLACE -4) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "s0z!1+S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (CASE "-v0z!1/(IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF) >=0") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -4) (("1" (REPLACE -7) (("1" (EXPAND "vsLevelOutTimes") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (CASE "LET  AY2= IF targetAlt!1-s0z!1>=0 then acceldown!1 ELSE accelup!1 ENDIF,
                               tm = vsLevelOutTimes1(s0z!1 + S3(v0z!1, AY2),
                                                                         0,
                                                                         climbRate!1,
                                                                         targetAlt!1,
                                                                         accelup!1,
                                                                         acceldown!1,
                                                                         alterCR?!1) IN
                               0<=tm`1 AND tm`1<=tm`2 AND tm`2<=tm`3 IMPLIES
                               0<= -v0z!1/AY2 +tm`1 AND -v0z!1/AY2+tm`1<=-v0z!1/AY2+tm`2 AND -v0z!1/AY2+tm`2<=-v0z!1/AY2+tm`3") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (CASE " abs(S3(0, accelup!1))=0 AND abs(S3(0, acceldown!1))=0") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (LIFT-IF) (("2" (HIDE -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LIFT-IF) (("3" (HIDE-ALL-BUT (-1 -8)) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (HIDE-ALL-BUT (-1 -7)) (("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP*) (("5" (HIDE-ALL-BUT (-1 -6)) (("5" (LIFT-IF) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP*) (("6" (LIFT-IF) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (SPLIT -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (SPLIT 1) (("1" (PROP) (("1" (TYPEPRED ("acceldown!1")) (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (PROP) (("1" (CROSS-MULT) NIL NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "AY1" "-v0z!1/(IF targetAlt!1 - s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF)") (("2" (CASE "AY1>=0") (("1" (NAME "AA1" "IF targetAlt!1 - s0z!1 >= 0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (CASE "AA1 /=0") (("1" (INST -5 "s0z!1+S3(v0z!1, AA1)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (CASE "0 <= times`1 AND times`1 <= times`2 AND times`2 <= times`3 IMPLIES
                               0 <= AY1+times`1 AND AY1+times`1 <= AY1+times`2 AND AY1+times`2 <= AY1+times`3") (("1" (CASE "abs(S3(0,
                                                  IF targetAlt!1 - (s0z!1 + S3(v0z!1, AA1)) >= 0
                                                    THEN acceldown!1
                                                  ELSE accelup!1
                                                  ENDIF)) = 0") (("1" (REPLACE -1) (("1" (SKOLETIN) (("1" (LIFT-IF -2) (("1" (BDDSIMP -2) (("1" (SKOLETIN -3) (("1" (BDDSIMP -1) (("1" (BDDSIMP -8) (("1" (HIDE (-4 -5 -6)) (("1" (EXPAND "vsLevelOutTimes") (("1" (MERGE-FNUMS (-1 -2 -3)) (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -10) (("1" (REPLACE -8) (("1" (NAME-REPLACE "AA2" "IF targetAlt!1 - s0z!1 >= 0
                                                                              THEN acceldown!1
                                                                              ELSE accelup!1
                                                                              ENDIF") (("1" (EXPAND "sv") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (SIMPLIFY -11) (("1" (SIMPLIFY 1) (("1" (BDDSIMP -11) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) (("4" (REPLACE -2) (("4" (ASSERT) (("4" (REPLACE -7) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) (("6" (REPLACE -2) (("6" (ASSERT) (("6" (REPLACE -7) (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                              (IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (CASE "tee3(CR, A2)>=0") (("1" (CASE "(CR - v!1) / A1>=0") (("1" (CASE "((ta!1 - s!1) - S1(v!1, A1)((CR - v!1) / A1) -
                                         S3(V1(v!1, A1)((CR - v!1) / A1), A2))
                                        / CR>=0") (("1" (REPLACE -5) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE (-2 -4 2)) (("2" (CASE "A1=A2") (("1" (REPLACE -1) (("1" (CASE "- S1(v!1, A2)((CR - v!1) / A2) -
                                              S3(V1(v!1, A2)((CR - v!1) / A2), A2) = v!1^2/(2*A2)") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF=A2") (("1" (CASE-REPLACE "S3(v!1, A2) = -v!1^2/(2*A2)") (("1" (CASE-REPLACE "v!1 = 0") (("1" (GROUND) (("1" (GRIND) (("1" (EXPAND "A2") (("1" (EXPAND "A1") (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "CR") (("2" (EXPAND "sv") (("2" (EXPAND "aldir") (("2" (EXPAND "A2") (("2" (EXPAND "A1") (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ta!1-s!1>=0 IFF -v!1^2/(2*A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (FLATTEN) (("1" (EXPAND "abs") (("1" (LIFT-IF -11) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (CASE "CR>0") (("1" (CROSS-MULT 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3)) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -10) (("2" (CASE "CR<0") (("1" (PROP) (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (CROSS-MULT 6) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "A2") (("2" (GRIND) (("1" (CROSS-MULT) NIL NIL) ("2" (CROSS-MULT) (("2" (GRIND) (("2" (SPLIT-INEQ -1) (("2" (GRIND) (("2" (LEMMA "sq_eq_0") (("2" (INST -1 "v!1") (("2" (FLATTEN) (("2" (EXPAND "sq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "V1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S1(v!1, A1)((CR - v!1) / A1) +
                                    S3(V1(v!1, A1)((CR - v!1) / A1), A2) = (CR^2-v!1^2)/(2*A1) - CR^2/(2*A2)") (("1" (CASE "CR^2-v!1^2>=0") (("1" (CASE "ta!1 -s!1>=0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (CROSS-MULT 2) (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "ta!1-s!1<0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2) <= 0") (("1" (CROSS-MULT 3) (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 -3 -4 -5 -7 4)) (("2" (LIFT-IF -3) (("2" (FLATTEN) (("2" (BDDSIMP -4) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (PROPAX) NIL NIL) ("2" (CASE-REPLACE "A1=ad!1") (("1" (HIDE-ALL-BUT (2 -4)) (("1" (DIV-BY -1 "-(2*ad!1)") (("1" (CASE "CR^2/(2*au!1)>=0") (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "A2") (("2" (LIFT-IF 2) (("2" (BDDSIMP 2) (("1" (CASE-REPLACE "A1=au!1") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (DIV-BY -1 "(2*au!1)") (("1" (CASE "-CR^2/(2*ad!1)>=0") (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ta!1>=s!1") (("1" (CASE "CR>=v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF -6) (("2" (SPLIT -6) (("1" (EXPAND "abs") (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "-CR > -v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "aldir") (("3" (EXPAND "sv") (("3" (SPLIT -5) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "V1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL) ("4" (EXPAND "A1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3 -5 2)) (("2" (EXPAND "CR") (("2" (EXPAND "A1") (("2" (CROSS-MULT 1) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "tee3") (("2" (HIDE (-2 2)) (("2" (CROSS-MULT 1) (("2" (HIDE -) (("2" (EXPAND "A2") (("2" (EXPAND "CR") (("2" (CASE "IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF>=0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                                               -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))>=0") (("1" (CASE "A1=A2") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF = A2") (("1" (REPLACE -2) (("1" (CASE-REPLACE "S1(v!1, A2)((CR - v!1) / A2) +
                                    S3(V1(v!1, A2)((CR - v!1) / A2), A2) = S3(v!1, A2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "T1" " minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                                           -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("2" (CASE "tee3(V1(v!1, A1)(T1), A2)>=0") (("1" (GRIND) NIL NIL) ("2" (HIDE (-2 -4 3 4)) (("2" (CASE "ta!1>=s!1") (("1" (EXPAND "A2") (("1" (LIFT-IF 2) (("1" (PROP) (("1" (LIFT-IF) (("1" (GRIND) (("1" (CASE-REPLACE "A1=au!1") (("1" (CROSS-MULT 2) (("1" (GRIND) (("1" (REAL-PROPS) (("1" (TYPEPRED ("au!1")) (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V1") (("2" (LIFT-IF 2) (("2" (PROP) (("2" (EXPAND "tee3") (("2" (EXPAND "A1") (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (CROSS-MULT 1) (("2" (TYPEPRED ("au!1")) (("2" (MULT-INEQ -1 -9) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 3) (("2" (PROP) (("1" (LIFT-IF 4) (("1" (PROP) (("1" (LIFT-IF -3) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF 8) (("2" (PROP) (("2" (LIFT-IF 8) (("2" (PROP) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (CROSS-MULT 2) (("2" (GRIND) (("2" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (LIFT-IF 4) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF) (("2" (PROP) (("1" (CROSS-MULT 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) (("3" (CROSS-MULT 5) (("3" (GRIND) (("3" (GRIND) (("3" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "minpos") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|times_increase-4| |nil| 3823967889 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (CASE "FORALL (s:real, v:real, cr:posreal, ta: real, au:posreal, ad:negreal, altcr:bool):
                              LET times = vsLevelOutTimes1(s,v,cr, ta, au, ad, altcr),
                             sv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                              aldir = IF ta-s>=0 THEN 1 ELSE -1 ENDIF IN
                             (sv=aldir OR v=0) AND abs(ta-s)>= abs( S3(v, IF ta-s>=0 THEN ad ELSE au ENDIF)) IMPLIES 0<=times`1 AND times`1<=times`2 AND times`2<=times`3") (("1" (CASE "IF v0z!1>=0 THEN 1 ELSE -1 ENDIF = IF targetAlt!1-s0z!1>=0 THEN 1 ELSE -1 ENDIF OR v0z!1=0") (("1" (CASE "abs(targetAlt!1-s0z!1) >= abs(S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (EXPAND "vsLevelOutTimes") (("1" (INST -3 "s0z!1" " v0z!1" "                                      climbRate!1" "                                      targetAlt!1" "                                      accelup!1" "                                      acceldown!1" "                                      alterCR?!1") (("1" (REPLACE -4) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "s0z!1+S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (CASE "-v0z!1/(IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF) >=0") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -4) (("1" (REPLACE -7) (("1" (EXPAND "vsLevelOutTimes") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (CASE "LET  AY2= IF targetAlt!1-s0z!1>=0 then acceldown!1 ELSE accelup!1 ENDIF,
                               tm = vsLevelOutTimes1(s0z!1 + S3(v0z!1, AY2),
                                                                         0,
                                                                         climbRate!1,
                                                                         targetAlt!1,
                                                                         accelup!1,
                                                                         acceldown!1,
                                                                         alterCR?!1) IN
                               0<=tm`1 AND tm`1<=tm`2 AND tm`2<=tm`3 IMPLIES
                               0<= -v0z!1/AY2 +tm`1 AND -v0z!1/AY2+tm`1<=-v0z!1/AY2+tm`2 AND -v0z!1/AY2+tm`2<=-v0z!1/AY2+tm`3") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (CASE " abs(S3(0, accelup!1))=0 AND abs(S3(0, acceldown!1))=0") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (LIFT-IF) (("2" (HIDE -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LIFT-IF) (("3" (HIDE-ALL-BUT (-1 -8)) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (HIDE-ALL-BUT (-1 -7)) (("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP*) (("5" (HIDE-ALL-BUT (-1 -6)) (("5" (LIFT-IF) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP*) (("6" (LIFT-IF) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (SPLIT -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (SPLIT 1) (("1" (PROP) (("1" (TYPEPRED (ACCELDOWN!1)) (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (PROP) (("1" (CROSS-MULT) NIL NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "AY1" "-v0z!1/(IF targetAlt!1 - s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF)") (("2" (CASE "AY1>=0") (("1" (NAME "AA1" "IF targetAlt!1 - s0z!1 >= 0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (CASE "AA1 /=0") (("1" (INST -5 "s0z!1+S3(v0z!1, AA1)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (CASE "0 <= times`1 AND times`1 <= times`2 AND times`2 <= times`3 IMPLIES
                               0 <= AY1+times`1 AND AY1+times`1 <= AY1+times`2 AND AY1+times`2 <= AY1+times`3") (("1" (CASE "abs(S3(0,
                                                  IF targetAlt!1 - (s0z!1 + S3(v0z!1, AA1)) >= 0
                                                    THEN acceldown!1
                                                  ELSE accelup!1
                                                  ENDIF)) = 0") (("1" (REPLACE -1) (("1" (SKOLETIN) (("1" (LIFT-IF -2) (("1" (BDDSIMP -2) (("1" (SKOLETIN -3) (("1" (BDDSIMP -1) (("1" (BDDSIMP -8) (("1" (HIDE (-4 -5 -6)) (("1" (EXPAND "vsLevelOutTimes") (("1" (MERGE-FNUMS (-1 -2 -3)) (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -10) (("1" (REPLACE -8) (("1" (NAME-REPLACE "AA2" "IF targetAlt!1 - s0z!1 >= 0
                                                                              THEN acceldown!1
                                                                              ELSE accelup!1
                                                                              ENDIF") (("1" (EXPAND "sv") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (SIMPLIFY -11) (("1" (SIMPLIFY 1) (("1" (BDDSIMP -11) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) (("4" (REPLACE -2) (("4" (ASSERT) (("4" (REPLACE -7) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) (("6" (REPLACE -2) (("6" (ASSERT) (("6" (REPLACE -7) (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                              (IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (CASE "tee3(CR, A2)>=0") (("1" (CASE "(CR - v!1) / A1>=0") (("1" (CASE "((ta!1 - s!1) - S1(v!1, A1)((CR - v!1) / A1) -
                                         S3(V1(v!1, A1)((CR - v!1) / A1), A2))
                                        / CR>=0") (("1" (REPLACE -5) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE (-2 -4 2)) (("2" (CASE "A1=A2") (("1" (REPLACE -1) (("1" (CASE "- S1(v!1, A2)((CR - v!1) / A2) -
                                              S3(V1(v!1, A2)((CR - v!1) / A2), A2) = v!1^2/(2*A2)") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF=A2") (("1" (CASE-REPLACE "S3(v!1, A2) = -v!1^2/(2*A2)") (("1" (CASE-REPLACE "v!1 = 0") (("1" (GROUND) (("1" (GRIND) (("1" (EXPAND "A2") (("1" (EXPAND "A1") (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "CR") (("2" (EXPAND "sv") (("2" (EXPAND "aldir") (("2" (EXPAND "A2") (("2" (EXPAND "A1") (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ta!1-s!1>=0 IFF -v!1^2/(2*A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (FLATTEN) (("1" (EXPAND "abs") (("1" (LIFT-IF -11) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (CASE "CR>0") (("1" (CROSS-MULT 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3)) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -10) (("2" (CASE "CR<0") (("1" (PROP) (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (CROSS-MULT 6) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "A2") (("2" (GRIND) (("1" (CROSS-MULT) NIL NIL) ("2" (CROSS-MULT) (("2" (GRIND) (("2" (SPLIT-INEQ -1) (("2" (GRIND) (("2" (LEMMA "sq_eq_0") (("2" (INST -1 "v!1") (("2" (FLATTEN) (("2" (EXPAND "sq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "V1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S1(v!1, A1)((CR - v!1) / A1) +
                                    S3(V1(v!1, A1)((CR - v!1) / A1), A2) = (CR^2-v!1^2)/(2*A1) - CR^2/(2*A2)") (("1" (CASE "CR^2-v!1^2>=0") (("1" (CASE "ta!1 -s!1>=0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (CROSS-MULT 2) (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "ta!1-s!1<0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2) <= 0") (("1" (CROSS-MULT 3) (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 -3 -4 -5 -7 4)) (("2" (LIFT-IF -3) (("2" (FLATTEN) (("2" (BDDSIMP -4) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (PROPAX) NIL NIL) ("2" (CASE-REPLACE "A1=ad!1") (("1" (HIDE-ALL-BUT (2 -4)) (("1" (DIV-BY -1 "-(2*ad!1)") (("1" (CASE "CR^2/(2*au!1)>=0") (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "A2") (("2" (LIFT-IF 2) (("2" (BDDSIMP 2) (("1" (CASE-REPLACE "A1=au!1") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (DIV-BY -1 "(2*au!1)") (("1" (CASE "-CR^2/(2*ad!1)>=0") (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ta!1>=s!1") (("1" (CASE "CR>=v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF -6) (("2" (SPLIT -6) (("1" (EXPAND "abs") (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "-CR > -v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "aldir") (("3" (EXPAND "sv") (("3" (SPLIT -5) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "V1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL) ("4" (EXPAND "A1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3 -5 2)) (("2" (EXPAND "CR") (("2" (EXPAND "A1") (("2" (CROSS-MULT 1) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "tee3") (("2" (HIDE (-2 2)) (("2" (CROSS-MULT 1) (("2" (HIDE -) (("2" (EXPAND "A2") (("2" (EXPAND "CR") (("2" (CASE "IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF>=0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                                               -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))>=0") (("1" (CASE "A1=A2") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF = A2") (("1" (REPLACE -2) (("1" (CASE-REPLACE "S1(v!1, A2)((CR - v!1) / A2) +
                                    S3(V1(v!1, A2)((CR - v!1) / A2), A2) = S3(v!1, A2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "T1" " minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                                           -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("2" (CASE "tee3(V1(v!1, A1)(T1), A2)>=0") (("1" (GRIND) NIL NIL) ("2" (HIDE (-2 -4 3 4)) (("2" (CASE "ta!1>=s!1") (("1" (EXPAND "A2") (("1" (LIFT-IF 2) (("1" (PROP) (("1" (LIFT-IF) (("1" (GRIND) (("1" (CASE-REPLACE "A1=au!1") (("1" (CROSS-MULT 2) (("1" (GRIND) (("1" (REAL-PROPS) (("1" (TYPEPRED (AU!1)) (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V1") (("2" (LIFT-IF 2) (("2" (PROP) (("2" (EXPAND "tee3") (("2" (EXPAND "A1") (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (CROSS-MULT 1) (("2" (TYPEPRED (AU!1)) (("2" (MULT-INEQ -1 -9) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 3) (("2" (PROP) (("1" (LIFT-IF 4) (("1" (PROP) (("1" (LIFT-IF -3) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF 8) (("2" (PROP) (("2" (LIFT-IF 8) (("2" (PROP) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (CROSS-MULT 2) (("2" (GRIND) (("2" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (LIFT-IF 4) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF) (("2" (PROP) (("1" (CROSS-MULT 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) (("3" (CROSS-MULT 5) (("3" (GRIND) (("3" (GRIND) (("3" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "minpos") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|neg_ge| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|minpos| CONST-DECL "real" |vsLevelOut| NIL) (|quadRoots| CONST-DECL "[real, real]" |vsLevelOut| NIL) (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_neg_ge1| FORMULA-DECL NIL |extra_real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (A1 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (CR SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (A2 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sv| SKOLEM-CONST-DECL "int" |vsLevelOut| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|aldir| SKOLEM-CONST-DECL "int" |vsLevelOut| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_eq_0| FORMULA-DECL NIL |sq| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|tee3| CONST-DECL "real" |vsLevelOut| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_mult_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sv| SKOLEM-CONST-DECL "int" |vsLevelOut| NIL) (AA1 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|times_increase-3| |nil| 3823967605 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (CASE "FORALL (s:real, v:real, cr:posreal, ta:real, au:posreal, ad:negreal, altcr:bool):
                       LET times = vsLevelOutTimes1(s,v,cr, ta, au, ad, altcr),
                      sv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                       aldir = IF ta-s>=0 THEN 1 ELSE -1 ENDIF IN
                      (sv=aldir OR v=0) AND abs(ta-s)>= abs( S3(v, IF ta-s>=0 THEN ad ELSE au ENDIF)) IMPLIES 0<=times`1 AND times`1<=times`2 AND times`2<=times`3") (("1" (CASE "IF v0z!1>=0 THEN 1 ELSE -1 ENDIF = IF targetAlt!1-s0z!1>=0 THEN 1 ELSE -1 ENDIF OR v0z!1=0") (("1" (CASE "abs(targetAlt!1-s0z!1) >= abs(S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (EXPAND "vsLevelOutTimes") (("1" (INST -3 "s0z!1" " v0z!1" "                                      climbRate!1" "                                      targetAlt!1" "                                      accelup!1" "                                      acceldown!1" "                                      alterCR?!1") (("1" (REPLACE -4) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL))))))))))))))))))))))))))))))))) ("2" (INST -2 "s0z!1+S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (CASE "-v0z!1/(IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF) >=0") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -4) (("1" (REPLACE -7) (("1" (EXPAND "vsLevelOutTimes") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (CASE "LET  AY2= IF targetAlt!1-s0z!1>=0 then acceldown!1 ELSE accelup!1 ENDIF,
                tm = vsLevelOutTimes1(s0z!1 + S3(v0z!1, AY2),
                                                          0,
                                                          climbRate!1,
                                                          targetAlt!1,
                                                          accelup!1,
                                                          acceldown!1,
                                                          alterCR?!1) IN
                0<=tm`1 AND tm`1<=tm`2 AND tm`2<=tm`3 IMPLIES
                0<= -v0z!1/AY2 +tm`1 AND -v0z!1/AY2+tm`1<=-v0z!1/AY2+tm`2 AND -v0z!1/AY2+tm`2<=-v0z!1/AY2+tm`3") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (CASE " abs(S3(0, accelup!1))=0 AND abs(S3(0, acceldown!1))=0") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (GROUND) NIL))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (LIFT-IF) (("2" (HIDE -1) (("2" (GROUND) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LIFT-IF) (("3" (HIDE-ALL-BUT (-1 -8)) (("3" (GROUND) NIL))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (HIDE-ALL-BUT (-1 -7)) (("4" (LIFT-IF) (("4" (GROUND) NIL))))))))) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP*) (("5" (HIDE-ALL-BUT (-1 -6)) (("5" (LIFT-IF) (("5" (GROUND) NIL))))))))) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP*) (("6" (LIFT-IF) (("6" (GROUND) NIL))))))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (SPLIT -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (SPLIT 1) (("1" (PROP) (("1" (TYPEPRED (ACCELDOWN!1)) (("1" (CROSS-MULT) NIL))) ("2" (CROSS-MULT) NIL))) ("2" (PROP) (("1" (CROSS-MULT) NIL) ("2" (CROSS-MULT) NIL))))))))))))) ("2" (GRIND) NIL))))))))))) ("2" (NAME "AY1" "-v0z!1/(IF targetAlt!1 - s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF)") (("2" (CASE "AY1>=0") (("1" (NAME "AA1" "IF targetAlt!1 - s0z!1 >= 0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (CASE "AA1 /=0") (("1" (INST -5 "s0z!1+S3(v0z!1, AA1)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (CASE "0 <= times`1 AND times`1 <= times`2 AND times`2 <= times`3 IMPLIES
                0 <= AY1+times`1 AND AY1+times`1 <= AY1+times`2 AND AY1+times`2 <= AY1+times`3") (("1" (CASE "abs(S3(0,
                                 IF targetAlt!1 - (s0z!1 + S3(v0z!1, AA1)) >= 0
                                   THEN acceldown!1
                                 ELSE accelup!1
                                 ENDIF)) = 0") (("1" (REPLACE -1) (("1" (SKOLETIN) (("1" (LIFT-IF -2) (("1" (BDDSIMP -2) (("1" (SKOLETIN -3) (("1" (BDDSIMP -1) (("1" (BDDSIMP -8) (("1" (HIDE (-4 -5 -6)) (("1" (EXPAND "vsLevelOutTimes") (("1" (MERGE-FNUMS (-1 -2 -3)) (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -10) (("1" (REPLACE -8) (("1" (NAME-REPLACE "AA2" "IF targetAlt!1 - s0z!1 >= 0
                                                          THEN acceldown!1
                                                          ELSE accelup!1
                                                          ENDIF") (("1" (EXPAND "sv") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (SIMPLIFY -11) (("1" (SIMPLIFY 1) (("1" (BDDSIMP -11) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL) ("4" (ASSERT) (("4" (REPLACE -2) (("4" (ASSERT) (("4" (REPLACE -7) (("4" (PROPAX) NIL))))))))) ("5" (ASSERT) NIL) ("6" (ASSERT) (("6" (REPLACE -2) (("6" (ASSERT) (("6" (REPLACE -7) (("6" (PROPAX) NIL))))))))) ("7" (ASSERT) NIL) ("8" (ASSERT) NIL))))))))))))))))))))))))))))))))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL) ("4" (PROPAX) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL))))))) ("2" (GROUND) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (FLATTEN) (("2" (GROUND) NIL))))))))))) ("2" (REPLACE -1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (CROSS-MULT) NIL))))) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (CROSS-MULT) NIL))))))))))))))))) ("2" (HIDE (-1 2)) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                          (IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (CASE "tee3(CR, A2)>=0") (("1" (CASE "(CR - v!1) / A1>=0") (("1" (CASE "((ta!1 - s!1) - S1(v!1, A1)((CR - v!1) / A1) -
                          S3(V1(v!1, A1)((CR - v!1) / A1), A2))
                         / CR>=0") (("1" (REPLACE -5) (("1" (GROUND) NIL))) ("2" (HIDE (-2 -4 2)) (("2" (CASE "A1=A2") (("1" (REPLACE -1) (("1" (CASE "- S1(v!1, A2)((CR - v!1) / A2) -
                           S3(V1(v!1, A2)((CR - v!1) / A2), A2) = v!1^2/(2*A2)") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF=A2") (("1" (CASE-REPLACE "S3(v!1, A2) = -v!1^2/(2*A2)") (("1" (CASE-REPLACE "v!1 = 0") (("1" (GROUND) (("1" (GRIND) (("1" (EXPAND "A2") (("1" (EXPAND "A1") (("1" (EXPAND "CR") (("1" (GRIND) NIL))))))) ("2" (EXPAND "CR") (("2" (EXPAND "sv") (("2" (EXPAND "aldir") (("2" (EXPAND "A2") (("2" (EXPAND "A1") (("2" (EXPAND "CR") (("2" (GRIND) NIL))))))))))))))))) ("2" (CASE "ta!1-s!1>=0 IFF -v!1^2/(2*A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (FLATTEN) (("1" (EXPAND "abs") (("1" (LIFT-IF -11) (("1" (PROP) (("1" (GROUND) NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("1" (GROUND) NIL) ("2" (CASE "CR>0") (("1" (CROSS-MULT 4) (("1" (GRIND) NIL))) ("2" (HIDE-ALL-BUT (1 -3)) (("2" (EXPAND "CR") (("2" (GRIND) NIL))))))))))))))))))) ("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -10) (("2" (CASE "CR<0") (("1" (PROP) (("1" (GRIND) (("1" (CROSS-MULT 5) NIL))) ("2" (CROSS-MULT 6) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "CR") (("2" (GRIND) NIL))))))))))))))) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "A2") (("2" (GRIND) (("1" (CROSS-MULT) NIL) ("2" (CROSS-MULT) (("2" (GRIND) (("2" (SPLIT-INEQ -1) (("2" (GRIND) (("2" (LEMMA "sq_eq_0") (("2" (INST -1 "v!1") (("2" (FLATTEN) (("2" (EXPAND "sq") (("2" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL))))))))) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "V1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL))))))))))) ("2" (CASE-REPLACE "S1(v!1, A1)((CR - v!1) / A1) +
                      S3(V1(v!1, A1)((CR - v!1) / A1), A2) = (CR^2-v!1^2)/(2*A1) - CR^2/(2*A2)") (("1" (CASE "CR^2-v!1^2>=0") (("1" (CASE "ta!1 -s!1>=0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (CROSS-MULT 2) (("1" (EXPAND "CR") (("1" (GRIND) NIL))))) ("2" (CASE "ta!1-s!1<0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2) <= 0") (("1" (CROSS-MULT 3) (("1" (EXPAND "CR") (("1" (GRIND) NIL))))) ("2" (HIDE (-1 -3 -4 -5 -7 4)) (("2" (LIFT-IF -3) (("2" (FLATTEN) (("2" (BDDSIMP -4) (("1" (PROPAX) NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (GROUND) NIL) ("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (PROPAX) NIL) ("2" (CASE-REPLACE "A1=ad!1") (("1" (HIDE-ALL-BUT (2 -4)) (("1" (DIV-BY -1 "-(2*ad!1)") (("1" (CASE "CR^2/(2*au!1)>=0") (("1" (GRIND) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (GRIND) NIL))))))))))) ("2" (EXPAND "A1") (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (EXPAND "A2") (("2" (LIFT-IF 2) (("2" (BDDSIMP 2) (("1" (CASE-REPLACE "A1=au!1") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (DIV-BY -1 "(2*au!1)") (("1" (CASE "-CR^2/(2*ad!1)>=0") (("1" (GRIND) NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL))))))))))) ("2" (FLATTEN) NIL))))) ("2" (EXPAND "A1") (("2" (GRIND) NIL))))) ("2" (GRIND) NIL))))))))))) ("2" (CASE "ta!1>=s!1") (("1" (CASE "CR>=v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF -6) (("2" (SPLIT -6) (("1" (EXPAND "abs") (("1" (GRIND) NIL))) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GROUND) NIL))))))) ("2" (CASE "-CR > -v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL) ("2" (FLATTEN) (("2" (EXPAND "CR") (("2" (GRIND) NIL))))) ("3" (FLATTEN) (("3" (EXPAND "aldir") (("3" (EXPAND "sv") (("3" (SPLIT -5) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (GRIND) NIL))))) ("2" (GROUND) NIL))))))))))) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GRIND) NIL))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "V1") (("2" (GRIND) NIL))))))))))) ("3" (EXPAND "A2") (("3" (GRIND) NIL))) ("4" (EXPAND "A1") (("4" (GRIND) NIL))))))))))) ("2" (HIDE (-1 -2 -3 -5 2)) (("2" (EXPAND "CR") (("2" (EXPAND "A1") (("2" (CROSS-MULT 1) (("2" (EXPAND "CR") (("2" (GRIND) NIL))))))))))))) ("2" (EXPAND "tee3") (("2" (HIDE (-2 2)) (("2" (CROSS-MULT 1) (("2" (HIDE -) (("2" (EXPAND "A2") (("2" (EXPAND "CR") (("2" (CASE "IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF>=0") (("1" (GRIND) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL))))))))))))))))))))) ("2" (FLATTEN) (("2" (CASE "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                                    -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))>=0") (("1" (CASE "A1=A2") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF = A2") (("1" (REPLACE -2) (("1" (CASE-REPLACE "S1(v!1, A2)((CR - v!1) / A2) +
                        S3(V1(v!1, A2)((CR - v!1) / A2), A2) = S3(v!1, A2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GRIND) NIL))))))))))))) ("2" (NAME-REPLACE "T1" " minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                                 -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("2" (CASE "tee3(V1(v!1, A1)(T1), A2)>=0") (("1" (GRIND) NIL) ("2" (HIDE (-2 -4 3 4)) (("2" (CASE "ta!1>=s!1") (("1" (EXPAND "A2") (("1" (LIFT-IF 2) (("1" (PROP) (("1" (LIFT-IF) (("1" (GRIND) (("1" (CASE-REPLACE "A1=au!1") (("1" (CROSS-MULT 2) (("1" (GRIND) (("1" (REAL-PROPS) (("1" (TYPEPRED (AU!1)) (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL))))))))))) ("2" (EXPAND "A1") (("2" (GRIND) NIL))))))))) ("2" (EXPAND "V1") (("2" (LIFT-IF 2) (("2" (PROP) (("2" (EXPAND "tee3") (("2" (EXPAND "A1") (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (CROSS-MULT 1) (("2" (TYPEPRED (AU!1)) (("2" (MULT-INEQ -1 -9) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))) ("2" (EXPAND "A2") (("2" (LIFT-IF 3) (("2" (PROP) (("1" (LIFT-IF 4) (("1" (PROP) (("1" (LIFT-IF -3) (("1" (PROP) (("1" (GRIND) NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (PROP) (("1" (GROUND) NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF 8) (("2" (PROP) (("2" (LIFT-IF 8) (("2" (PROP) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (CROSS-MULT 2) (("2" (GRIND) (("2" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL))) ("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))))) ("2" (REPLACE -1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (LIFT-IF 4) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF) (("2" (PROP) (("1" (CROSS-MULT 4) (("1" (GRIND) NIL))) ("2" (GROUND) NIL) ("3" (GROUND) (("3" (CROSS-MULT 5) (("3" (GRIND) (("3" (GRIND) (("3" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL))) ("2" (GRIND) NIL))))))))))) ("4" (GROUND) NIL))))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "minpos") (("2" (GRIND) NIL)))))))))))))))))))))))))))))))))))))) NIL) NIL NIL) (|times_increase-2| |nil| 3613813416 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (CASE "FORALL (s:real, v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, altcr:bool):
                LET times = vsLevelOutTimes1(s,v,cr, ta, au, ad, altcr),
               sv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                aldir = IF ta-s>=0 THEN 1 ELSE -1 ENDIF IN
               (sv=aldir OR v=0) AND abs(ta-s)>= abs( S3(v, IF ta-s>=0 THEN ad ELSE au ENDIF)) IMPLIES 0<=times`1 AND times`1<=times`2 AND times`2<=times`3") (("1" (CASE "IF v0z!1>=0 THEN 1 ELSE -1 ENDIF = IF targetAlt!1-s0z!1>=0 THEN 1 ELSE -1 ENDIF OR v0z!1=0") (("1" (CASE "abs(targetAlt!1-s0z!1) >= abs(S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (EXPAND "vsLevelOutTimes") (("1" (INST -3 "s0z!1" " v0z!1" "
                                      climbRate!1" "
                                      targetAlt!1" "
                                      accelup!1" "
                                      acceldown!1" "
                                      alterCR?!1") (("1" (REPLACE -4) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "s0z!1+S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (CASE "-v0z!1/(IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF) >=0") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -4) (("1" (REPLACE -7) (("1" (EXPAND "vsLevelOutTimes") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (CASE "LET  AY2= IF targetAlt!1-s0z!1>=0 then acceldown!1 ELSE accelup!1 ENDIF,  
tm = vsLevelOutTimes1(s0z!1 + S3(v0z!1, AY2),
                                          0,
                                          climbRate!1,
                                          targetAlt!1,
                                          accelup!1,
                                          acceldown!1,
                                          alterCR?!1) IN
0<=tm`1 AND tm`1<=tm`2 AND tm`2<=tm`3 IMPLIES 
0<= -v0z!1/AY2 +tm`1 AND -v0z!1/AY2+tm`1<=-v0z!1/AY2+tm`2 AND -v0z!1/AY2+tm`2<=-v0z!1/AY2+tm`3") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (LIFT-IF) (("1" (CASE " abs(S3(0, accelup!1))=0 AND abs(S3(0, acceldown!1))=0") (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (LIFT-IF) (("2" (HIDE -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LIFT-IF) (("3" (HIDE-ALL-BUT (-1 -8)) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (HIDE-ALL-BUT (-1 -7)) (("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP*) (("5" (HIDE-ALL-BUT (-1 -6)) (("5" (LIFT-IF) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKOSIMP*) (("6" (LIFT-IF) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (SPLIT -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (LIFT-IF -1) (("1" (SPLIT 1) (("1" (PROP) (("1" (TYPEPRED (ACCELDOWN!1)) (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (PROP) (("1" (CROSS-MULT) NIL NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "AY1" "-v0z!1/(IF targetAlt!1 - s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF)") (("2" (CASE "AY1>=0") (("1" (NAME "AA1" "IF targetAlt!1 - s0z!1 >= 0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (CASE "AA1 /=0") (("1" (INST -5 "s0z!1+S3(v0z!1, AA1)" " 0" " climbRate!1" " targetAlt!1" " accelup!1" " acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (CASE "0 <= times`1 AND times`1 <= times`2 AND times`2 <= times`3 IMPLIES 
0 <= AY1+times`1 AND AY1+times`1 <= AY1+times`2 AND AY1+times`2 <= AY1+times`3") (("1" (CASE "abs(S3(0,
                IF targetAlt!1 - (s0z!1 + S3(v0z!1, AA1)) >= 0
                  THEN acceldown!1
                ELSE accelup!1
                ENDIF)) = 0") (("1" (REPLACE -1) (("1" (SKOLETIN) (("1" (LIFT-IF -2) (("1" (BDDSIMP -2) (("1" (SKOLETIN -3) (("1" (BDDSIMP -1) (("1" (BDDSIMP -8) (("1" (HIDE (-4 -5 -6)) (("1" (EXPAND "vsLevelOutTimes") (("1" (MERGE-FNUMS (-1 -2 -3)) (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -10) (("1" (REPLACE -8) (("1" (NAME-REPLACE "AA2" "IF targetAlt!1 - s0z!1 >= 0
                                      THEN acceldown!1
                                      ELSE accelup!1
                                      ENDIF") (("1" (EXPAND "sv") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (SIMPLIFY -11) (("1" (SIMPLIFY 1) (("1" (BDDSIMP -11) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) (("4" (REPLACE -2) (("4" (ASSERT) (("4" (REPLACE -7) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) (("6" (REPLACE -2) (("6" (ASSERT) (("6" (REPLACE -7) (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                      (IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (CASE "tee3(CR, A2)>=0") (("1" (CASE "(CR - v!1) / A1>=0") (("1" (CASE "((ta!1 - s!1) - S1(v!1, A1)((CR - v!1) / A1) -
           S3(V1(v!1, A1)((CR - v!1) / A1), A2))
          / CR>=0") (("1" (REPLACE -5) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE (-2 -4 2)) (("2" (CASE "A1=A2") (("1" (REPLACE -1) (("1" (CASE "- S1(v!1, A2)((CR - v!1) / A2) -
        S3(V1(v!1, A2)((CR - v!1) / A2), A2) = v!1^2/(2*A2)") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF=A2") (("1" (CASE-REPLACE "S3(v!1, A2) = -v!1^2/(2*A2)") (("1" (CASE-REPLACE "v!1 = 0") (("1" (GROUND) (("1" (GRIND) (("1" (EXPAND "A2") (("1" (EXPAND "A1") (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "CR") (("2" (EXPAND "sv") (("2" (EXPAND "aldir") (("2" (EXPAND "A2") (("2" (EXPAND "A1") (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ta!1-s!1>=0 IFF -v!1^2/(2*A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (FLATTEN) (("1" (EXPAND "abs") (("1" (LIFT-IF -11) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (CASE "CR>0") (("1" (CROSS-MULT 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3)) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -10) (("2" (CASE "CR<0") (("1" (PROP) (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (CROSS-MULT 6) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "A2") (("2" (GRIND) (("1" (CROSS-MULT) NIL NIL) ("2" (CROSS-MULT) (("2" (GRIND) (("2" (SPLIT-INEQ -1) (("2" (GRIND) (("2" (LEMMA "sq_eq_0") (("2" (INST -1 "v!1") (("2" (FLATTEN) (("2" (EXPAND "sq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "V1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S1(v!1, A1)((CR - v!1) / A1) +
        S3(V1(v!1, A1)((CR - v!1) / A1), A2) = (CR^2-v!1^2)/(2*A1) - CR^2/(2*A2)") (("1" (CASE "CR^2-v!1^2>=0") (("1" (CASE "ta!1 -s!1>=0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2)>=0") (("1" (CASE "ta!1-s!1>=0") (("1" (CROSS-MULT 2) (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "ta!1-s!1<0 IMPLIES (CR ^ 2 - v!1 ^ 2) / (2 * A1) - CR ^ 2 / (2 * A2) <= 0") (("1" (CROSS-MULT 3) (("1" (EXPAND "CR") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 -3 -4 -5 -7 4)) (("2" (LIFT-IF -3) (("2" (FLATTEN) (("2" (BDDSIMP -4) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF 4) (("2" (BDDSIMP 4) (("1" (PROPAX) NIL NIL) ("2" (CASE-REPLACE "A1=ad!1") (("1" (HIDE-ALL-BUT (2 -4)) (("1" (DIV-BY -1 "-(2*ad!1)") (("1" (CASE "CR^2/(2*au!1)>=0") (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "A2") (("2" (LIFT-IF 2) (("2" (BDDSIMP 2) (("1" (CASE-REPLACE "A1=au!1") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (DIV-BY -1 "(2*au!1)") (("1" (CASE "-CR^2/(2*ad!1)>=0") (("1" (GRIND) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ta!1>=s!1") (("1" (CASE "CR>=v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF -6) (("2" (SPLIT -6) (("1" (EXPAND "abs") (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "-CR > -v!1") (("1" (MULT-INEQ -1 -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "aldir") (("3" (EXPAND "sv") (("3" (SPLIT -5) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S1") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "V1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL) ("4" (EXPAND "A1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3 -5 2)) (("2" (EXPAND "CR") (("2" (EXPAND "A1") (("2" (CROSS-MULT 1) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "tee3") (("2" (HIDE (-2 2)) (("2" (CROSS-MULT 1) (("2" (HIDE -) (("2" (EXPAND "A2") (("2" (EXPAND "CR") (("2" (CASE "IF altcr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF>=0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                         -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))>=0") (("1" (CASE "A1=A2") (("1" (CASE-REPLACE "IF ta!1 - s!1 >= 0 THEN ad!1 ELSE au!1 ENDIF = A2") (("1" (REPLACE -2) (("1" (CASE-REPLACE "S1(v!1, A2)((CR - v!1) / A2) +
            S3(V1(v!1, A2)((CR - v!1) / A2), A2) = S3(v!1, A2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "T1" " minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2), v!1 - A1 / A2 * v!1,
                       -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("2" (CASE "tee3(V1(v!1, A1)(T1), A2)>=0") (("1" (GRIND) NIL NIL) ("2" (HIDE (-2 -4 3 4)) (("2" (CASE "ta!1>=s!1") (("1" (EXPAND "A2") (("1" (LIFT-IF 2) (("1" (PROP) (("1" (LIFT-IF) (("1" (GRIND) (("1" (CASE-REPLACE "A1=au!1") (("1" (CROSS-MULT 2) (("1" (GRIND) (("1" (REAL-PROPS) (("1" (TYPEPRED (AU!1)) (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "V1") (("2" (LIFT-IF 2) (("2" (PROP) (("2" (EXPAND "tee3") (("2" (EXPAND "A1") (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (LIFT-IF 2) (("2" (PROP) (("2" (CROSS-MULT 1) (("2" (TYPEPRED (AU!1)) (("2" (MULT-INEQ -1 -9) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (LIFT-IF 3) (("2" (PROP) (("1" (LIFT-IF 4) (("1" (PROP) (("1" (LIFT-IF -3) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "aldir") (("2" (EXPAND "sv") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (LIFT-IF -1) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF 8) (("2" (PROP) (("2" (LIFT-IF 8) (("2" (PROP) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (CROSS-MULT 2) (("2" (GRIND) (("2" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (LIFT-IF 4) (("2" (PROP) (("2" (EXPAND "A1") (("2" (LIFT-IF) (("2" (PROP) (("1" (CROSS-MULT 4) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) (("3" (CROSS-MULT 5) (("3" (GRIND) (("3" (GRIND) (("3" (CASE "-ad!1>=0") (("1" (MULT-INEQ -1 -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "minpos") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|times_increase-1| |nil| 3613810335 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (CASE "FORALL (s:real, v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, altcr:bool):
         LET times = vsLevelOutTimes1(s,v,cr, ta, au, ad, altcr),
        sv = IF v>=0 THEN 1 ELSE -1 ENDIF,
         aldir = IF ta-s>=0 THEN 1 ELSE -1 ENDIF IN
        (sv=aldir OR v=0) AND abs(ta-s)>= abs( S3(v, IF ta-s>=0 THEN ad ELSE au ENDIF)) IMPLIES 0<=times`1 AND times`1<=times`2 AND times`2<=times`3") (("1" (CASE "IF v0z!1>=0 THEN 1 ELSE -1 ENDIF = IF targetAlt!1-s0z!1>=0 THEN 1 ELSE -1 ENDIF") (("1" (CASE "abs(targetAlt!1-s0z!1) >= abs(S3(v0z!1, IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (EXPAND "vsLevelOutTimes") (("1" (LIFT-IF -4) (("1" (LIFT-IF -4) (("1" (LIFT-IF -4) (("1" (LIFT-IF -2) (("1" (LIFT-IF -2) (("1" (LIFT-IF -2) (("1" (LIFT-IF -4) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsLevelOut_acc_TCC1| 0 (|vsLevelOut_acc_TCC1-1| |nil| 3613810277 ("" (LEMMA "times_increase") (("" (SKOSIMP*) (("" (INST?) (("" (REPLACE -2 :DIR RL) (("" (SKOLETIN) (("" (FLATTEN) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deriv_domain_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|vsLevelOut_acc| ASSUMING "analysis@integral_split_fun[real].integral_split_fun" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|vsLevelOut_acc_TCC2| 0 (|vsLevelOut_acc_TCC2-1| |nil| 3613810277 ("" (SKOSIMP*) (("" (EXPAND "connected?") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|vsLevelOut_acc| ASSUMING "analysis@integral_split_fun[real].integral_split_fun" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|vsLevelOut_acc_TCC3| 0 (|vsLevelOut_acc_TCC3-1| |nil| 3613810277 ("" (LEMMA "times_increase") (("" (SKOSIMP*) (("" (INST?) (("" (REPLACE -2 :DIR RL) (("" (SKOLETIN) (("" (FLATTEN) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|not_one_element_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|vsLevelOut_acc| ASSUMING "analysis@integral_split_fun[real].integral_split_fun" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|vel_prep_TCC1| 0 (|vel_prep_TCC1-1| |nil| 3613987276 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|vel_prep| ASSUMING "analysis@integral_def[nnreal].integral_def" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|vel_prep_TCC2| 0 (|vel_prep_TCC2-1| |nil| 3613987276 ("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST 1 "x!1+1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|vel_prep| ASSUMING "analysis@integral_def[nnreal].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|vel_prep| 0 (|vel_prep-2| "" 3804569555 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_acc") (("" (LEMMA "split_fun3_Integrable[nnreal]") (("1" (LEMMA "times_increase") (("1" (INST -1 "s0z!1" " v0z!1" " climbRate!1" " targetAlt!1" "
                                  accelup!1" " acceldown!1" " alterCR?!1") (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST-CP -1 "nt`5" "0" "nt`1") (("1" (INST-CP -1 "0" "nt`1" "nt`2") (("1" (INST-CP -1 "nt`6" "nt`2" "nt`3") (("1" (INST -1 "0" "nt`3" "max(t!1, nt`3)") (("1" (INST -7 "restrict[real, nnreal, real]
                      (const_fun(vsLevelOutTimes(s0z!1,
                                                 v0z!1,
                                                 climbRate!1,
                                                 targetAlt!1,
                                                 accelup!1,
                                                 acceldown!1,
                                                 alterCR?!1)`5))" "
                  restrict[real, nnreal, real](const_fun(0))" "
                  restrict[real, nnreal, real]
                      (const_fun(vsLevelOutTimes(s0z!1,
                                                 v0z!1,
                                                 climbRate!1,
                                                 targetAlt!1,
                                                 accelup!1,
                                                 acceldown!1,
                                                 alterCR?!1)`6))" "
                  restrict[real, nnreal, real](const_fun(0))" " 0" "max(t!1, vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`3)" "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`1" "
                  vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`2" "
                  vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`3") (("1" (REPLACE -6 :DIR RL) (("1" (EXPAND "restrict") (("1" (EXPAND "const_fun") (("1" (EXPAND "in_order?") (("1" (FLATTEN) (("1" (CASE "nt`3 <= max(t!1, nt`3)") (("1" (PROP) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "max(t!1, nt`3)" "split_fun3(nt`1, nt`2, nt`3, LAMBDA (s: nnreal): nt`5,
                             LAMBDA (s: nnreal): 0,
                             LAMBDA (s: nnreal): nt`6,
                             LAMBDA (s: nnreal): 0)" "0" "t!1") (("1" (PROP) (("1" (GROUND) (("1" (CASE-REPLACE "split_fun3(nt`1, nt`2, nt`3, LAMBDA (s: nnreal): nt`5,
                             LAMBDA (s: nnreal): 0,
                             LAMBDA (s: nnreal): nt`6,
                             LAMBDA (s: nnreal): 0) = LAMBDA (t: nnreal):
                    split_fun3(nt`1, nt`2, nt`3, LAMBDA (x: real): nt`5,
                               LAMBDA (x: real): 0, LAMBDA (x: real): nt`6,
                               LAMBDA (x: real): 0)
                              (t)") (("1" (HIDE-ALL-BUT 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL) ("4" (FLATTEN) (("4" (GROUND) NIL NIL)) NIL) ("5" (FLATTEN) (("5" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|vsLevelOut_acc| CONST-DECL "real" |vsLevelOut| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|t!1| SKOLEM-CONST-DECL "nnreal" |vsLevelOut| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|deriv_domain_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|Integrable?_inside| FORMULA-DECL NIL |integral| |analysis|) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|restrict| CONST-DECL "R" |restrict| NIL) (|s0z!1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|v0z!1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|climbRate!1| SKOLEM-CONST-DECL "posreal" |vsLevelOut| NIL) (|targetAlt!1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|accelup!1| SKOLEM-CONST-DECL "posreal" |vsLevelOut| NIL) (|acceldown!1| SKOLEM-CONST-DECL "negreal" |vsLevelOut| NIL) (|alterCR?!1| SKOLEM-CONST-DECL "bool" |vsLevelOut| NIL) (|nt| SKOLEM-CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|split_fun3_Integrable| FORMULA-DECL NIL |integral_split_fun| |analysis|)) SHOSTAK) (|vel_prep-1| |nil| 3613995124 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_acc") (("" (LEMMA "split_fun3_Integrable[nnreal]") (("1" (LEMMA "times_increase") (("1" (INST -1 "s0z!1" " v0z!1" " climbRate!1" " targetAlt!1" "
                                  accelup!1" " acceldown!1" " alterCR?!1") (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST-CP -1 "nt`5" "0" "nt`1") (("1" (INST-CP -1 "0" "nt`1" "nt`2") (("1" (INST-CP -1 "nt`6" "nt`2" "nt`3") (("1" (INST -1 "0" "nt`3" "max(t!1, nt`3)") (("1" (INST -7 "restrict[real, nnreal, real]
                      (const_fun(vsLevelOutTimes(s0z!1,
                                                 v0z!1,
                                                 climbRate!1,
                                                 targetAlt!1,
                                                 accelup!1,
                                                 acceldown!1,
                                                 alterCR?!1)`5))" "
                  restrict[real, nnreal, real](const_fun(0))" "
                  restrict[real, nnreal, real]
                      (const_fun(vsLevelOutTimes(s0z!1,
                                                 v0z!1,
                                                 climbRate!1,
                                                 targetAlt!1,
                                                 accelup!1,
                                                 acceldown!1,
                                                 alterCR?!1)`6))" "
                  restrict[real, nnreal, real](const_fun(0))" " 0" "max(t!1, vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`3)" "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`1" "
                  vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`2" "
                  vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1,
                                  accelup!1, acceldown!1, alterCR?!1)`3") (("1" (REPLACE -6 :DIR RL) (("1" (EXPAND "restrict") (("1" (EXPAND "const_fun") (("1" (EXPAND "in_order?") (("1" (FLATTEN) (("1" (CASE "nt`3 <= max(t!1, nt`3)") (("1" (PROP) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "max(t!1, nt`3)" "split_fun3(nt`1, nt`2, nt`3, LAMBDA (s: nnreal): nt`5,
                             LAMBDA (s: nnreal): 0,
                             LAMBDA (s: nnreal): nt`6,
                             LAMBDA (s: nnreal): 0)" "0" "t!1") (("1" (PROP) (("1" (GROUND) (("1" (CASE-REPLACE "split_fun3(nt`1, nt`2, nt`3, LAMBDA (s: nnreal): nt`5,
                             LAMBDA (s: nnreal): 0,
                             LAMBDA (s: nnreal): nt`6,
                             LAMBDA (s: nnreal): 0) = LAMBDA (t: nnreal):
                    split_fun3(nt`1, nt`2, nt`3, LAMBDA (x: real): nt`5,
                               LAMBDA (x: real): 0, LAMBDA (x: real): nt`6,
                               LAMBDA (x: real): 0)
                              (t)") (("1" (HIDE-ALL-BUT 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL) ("4" (FLATTEN) (("4" (GROUND) NIL NIL)) NIL) ("5" (FLATTEN) (("5" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsLevelOut_velInt_TCC1| 0 (|vsLevelOut_velInt_TCC1-1| |nil| 3613926760 ("" (LEMMA "vel_prep") (("" (PROPAX) NIL NIL)) NIL) ((|vel_prep| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|vsLevelOut_velInt| SUBTYPE "vsLevelOut.vsLevelOut_acc(vsLevelOut.s0z, vsLevelOut.v0z, vsLevelOut.climbRate, vsLevelOut.targetAlt, vsLevelOut.accelup, vsLevelOut.acceldown, vsLevelOut.alterCR?)" "Integrable_funs[nnreal](0, vsLevelOut.t)"))) (|vsLevelOut_velCalc_TCC1| 0 (|vsLevelOut_velCalc_TCC1-1| |nil| 3613926760 ("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                      acceldown!1, alterCR?!1)`5 = accelup!1") (("1" (GROUND) NIL NIL) ("2" (EXPAND "vsLevelOutTimes") (("2" (EXPAND "vsLevelOutTimes1") (("2" (GROUND) (("2" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsLevelOut_velCalc| SUBTYPE "vsLevelOut.vsLOT`5" "nzreal"))) (|Integral_vsLO_vel| 0 (|Integral_vsLO_vel-2| "" 3804569706 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_velInt") (("" (EXPAND "vsLevelOut_acc") (("" (LEMMA "times_increase") (("" (INST -1 "s0z!1" "v0z!1" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("" (SKOLETIN) (("" (REPLACE -2 :DIR RL) (("" (LEMMA "Integral_split_fun3[nnreal]") (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST-CP -1 "nt`5" "0" "nt`1") (("1" (INST-CP -1 "0" "nt`1" "nt`2") (("1" (INST-CP -1 "nt`6" "nt`2" "nt`3") (("1" (INST-CP -1 "0" "nt`3" "max(t!1, nt`3)") (("1" (HIDE -1) (("1" (FLATTEN) (("1" (INST -9 "const_fun[nnreal](nt`5)" "const_fun[nnreal](0)" "const_fun[nnreal](nt`6)" "const_fun[nnreal](0)" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3" "t!1") (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                 split_fun3(nt`1, nt`2, nt`3, const_fun(nt`5),
                            const_fun(0), const_fun(nt`6), const_fun(0))
                           (t)) = split_fun3(nt`1, nt`2, nt`3, const_fun[nnreal](nt`5),
                          const_fun[nnreal](0), const_fun[nnreal](nt`6),
                          const_fun[nnreal](0))") (("1" (REPLACE -3) (("1" (REPLACE -11) (("1" (REPLACE -9) (("1" (REPLACE -7) (("1" (HIDE -) (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST-CP -1 "nt`5" "0" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (INST-CP -1 "0" "nt`1" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (INST-CP -1 "nt`6" "nt`2" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (INST-CP -1 "0" "nt`3" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (HIDE -) (("1" (EXPAND "vsLevelOut_velCalc") (("1" (REVEAL -23) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (EXPAND "V1") (("1" (EXPAND "const_fun") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (REVEAL (-12 -13 -14)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL (-12 -13 -14)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL (-12 -13 -14)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (HIDE-ALL-BUT 1) (("6" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|vsLevelOut_velInt| CONST-DECL "real" |vsLevelOut| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Integral_split_fun3| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nt| SKOLEM-CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|vsLevelOut_velCalc| CONST-DECL "real" |vsLevelOut| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|deriv_domain_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|t!1| SKOLEM-CONST-DECL "nnreal" |vsLevelOut| NIL) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|vsLevelOut_acc| CONST-DECL "real" |vsLevelOut| NIL)) SHOSTAK) (|Integral_vsLO_vel-1| |nil| 3614002904 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_velInt") (("" (EXPAND "vsLevelOut_acc") (("" (LEMMA "times_increase") (("" (INST -1 "s0z!1" "v0z!1" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("" (SKOLETIN) (("" (REPLACE -2 :DIR RL) (("" (LEMMA "Integral_split_fun3[nnreal]") (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST-CP -1 "nt`5" "0" "nt`1") (("1" (INST-CP -1 "0" "nt`1" "nt`2") (("1" (INST-CP -1 "nt`6" "nt`2" "nt`3") (("1" (INST-CP -1 "0" "nt`3" "max(t!1, nt`3)") (("1" (HIDE -1) (("1" (FLATTEN) (("1" (INST -9 "const_fun[nnreal](nt`5)" "const_fun[nnreal](0)" "const_fun[nnreal](nt`6)" "const_fun[nnreal](0)" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3" "t!1") (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                 split_fun3(nt`1, nt`2, nt`3, const_fun(nt`5),
                            const_fun(0), const_fun(nt`6), const_fun(0))
                           (t)) = split_fun3(nt`1, nt`2, nt`3, const_fun[nnreal](nt`5),
                          const_fun[nnreal](0), const_fun[nnreal](nt`6),
                          const_fun[nnreal](0))") (("1" (REPLACE -3) (("1" (REPLACE -11) (("1" (REPLACE -9) (("1" (REPLACE -7) (("1" (HIDE -) (("1" (LEMMA "Integral_const_fun[nnreal]") (("1" (INST-CP -1 "nt`5" "0" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (INST-CP -1 "0" "nt`1" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (INST-CP -1 "nt`6" "nt`2" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (INST-CP -1 "0" "nt`3" "t!1") (("1" (FLATTEN) (("1" (REPLACE -3) (("1" (HIDE -) (("1" (EXPAND "vsLevelOut_velCalc") (("1" (REVEAL -23) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (EXPAND "V1") (("1" (EXPAND "const_fun") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (REVEAL (-12 -13 -14)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL (-12 -13 -14)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL (-12 -13 -14)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|pos_prep| 0 (|pos_prep-3| "" 3804576690 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_velCalc") (("" (NAME-REPLACE "lot" "vsLevelOutTimes(s0z!1,
                                                     v0z!1,
                                                     climbRate!1,
                                                     targetAlt!1,
                                                     accelup!1,
                                                     acceldown!1,
                                                     alterCR?!1)") (("" (LEMMA "split_fun3_Integrable[nnreal]") (("1" (LEMMA "times_increase") (("1" (INST -1 "s0z!1" " v0z!1" " climbRate!1" " targetAlt!1" "                                  accelup!1" " acceldown!1" " alterCR?!1") (("1" (SKOLETIN) (("1" (CASE-REPLACE "lot=nt") (("1" (HIDE -1) (("1" (EXPAND "V1") (("1" (FLATTEN) (("1" (EXPAND "const_fun") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "0" "nt`1" "nt`5" "v0z!1") (("1" (INST-CP -1 "nt`1" "nt`2" "0" "nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`2" "nt`3" "nt`6" "-nt`2*nt`6+nt`5*nt`1+ v0z!1") (("1" (INST -1 "nt`3" "max(t!1, nt`3)" "0" "nt`3*nt`6 -nt`2*nt`6+nt`5*nt`1+ v0z!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -13 "f_3" "f_2" "f_1" "f" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3") (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "max(t!1, nt`3)" "split_fun3(nt`1, nt`2, nt`3, f_3, f_2, f_1, f)" "0" "t!1") (("1" (PROP) (("1" (CASE-REPLACE "split_fun3(nt`1, nt`2, nt`3, f_3, f_2, f_1, f) =LAMBDA (t: nnreal):
                    split_fun3(nt`1, nt`2, nt`3,
                               LAMBDA (t: real): nt`5 * t + v0z!1,
                               LAMBDA (x: real): nt`5 * nt`1 + v0z!1,
                               LAMBDA (s: real):
                                 s * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 +
                                  v0z!1,
                               LAMBDA (s: real):
                                 nt`3 * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 +
                                  v0z!1)
                              (t)") (("1" (HIDE-ALL-BUT 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) (("1" (EXPAND "f_3") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "f_2") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "f_1") (("3" (GROUND) NIL NIL)) NIL) ("4" (EXPAND "f") (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REVEAL (-12 -13 -14)) (("3" (GROUND) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (REVEAL (-12 -13 -14)) (("4" (GROUND) NIL NIL)) NIL) ("5" (REVEAL (-12 -13 -14)) (("5" (GROUND) NIL NIL)) NIL) ("6" (REVEAL (-12 -13 -14)) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (REVEAL (-12 -13 -14)) (("5" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "lot") (("2" (EXPAND "nt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOut_velCalc| CONST-DECL "real" |vsLevelOut| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|split_fun3_Integrable| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nt| SKOLEM-CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|not_one_element_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_domain_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|f| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|f_1| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|f_2| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|f_3| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Integrable?_inside| FORMULA-DECL NIL |integral| |analysis|) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|t!1| SKOLEM-CONST-DECL "nnreal" |vsLevelOut| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|lot| SKOLEM-CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|pos_prep-2| |nil| 3614002120 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_velCalc") (("" (NAME-REPLACE "lot" "vsLevelOutTimes(s0z!1,
                                                     v0z!1,
                                                     climbRate!1,
                                                     targetAlt!1,
                                                     accelup!1,
                                                     acceldown!1,
                                                     alterCR?!1)") (("" (LEMMA "split_fun3_Integrable[nnreal]") (("1" (LEMMA "times_increase") (("1" (INST -1 "s0z!1" " v0z!1" " climbRate!1" " targetAlt!1" "                                  accelup!1" " acceldown!1" " alterCR?!1") (("1" (SKOLETIN) (("1" (CASE-REPLACE "lot=nt") (("1" (HIDE -1) (("1" (EXPAND "V1") (("1" (FLATTEN) (("1" (EXPAND "const_fun") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "0" "nt`1" "nt`5" "v0z!1") (("1" (INST-CP -1 "nt`1" "nt`2" "0" "nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`2" "nt`3" "nt`6" "-nt`2*nt`6+nt`5*nt`1+ v0z!1") (("1" (INST -1 "nt`3" "max(t!1, nt`3)" "0" "nt`3*nt`6 -nt`2*nt`6+nt`5*nt`1+ v0z!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -13 "f_3" "f_2" "f_1" "f" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3") (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (LEMMA "Integrable?_inside[nnreal]") (("1" (INST -1 "0" "max(t!1, nt`3)" "split_fun3(nt`1, nt`2, nt`3, f_3, f_2, f_1, f)" "0" "t!1") (("1" (PROP) (("1" (CASE-REPLACE "split_fun3(nt`1, nt`2, nt`3, f_3, f_2, f_1, f) =LAMBDA (t: nnreal):
                    split_fun3(nt`1, nt`2, nt`3,
                               LAMBDA (t: real): nt`5 * t + v0z!1,
                               LAMBDA (x: real): nt`5 * nt`1 + v0z!1,
                               LAMBDA (s: real):
                                 s * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 +
                                  v0z!1,
                               LAMBDA (s: real):
                                 nt`3 * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 +
                                  v0z!1)
                              (t)") (("1" (HIDE-ALL-BUT 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (GRIND) (("1" (EXPAND "f_3") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "f_2") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "f_1") (("3" (GROUND) NIL NIL)) NIL) ("4" (EXPAND "f") (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (REVEAL (-12 -13 -14)) (("3" (GROUND) NIL NIL)) NIL) ("4" (REVEAL (-12 -13 -14)) (("4" (GROUND) NIL NIL)) NIL) ("5" (REVEAL (-12 -13 -14)) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "lot") (("2" (EXPAND "nt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|pos_prep-1| |nil| 3614000623 ("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_velCalc") (("" (NAME-REPLACE "lot" "vsLevelOutTimes(s0z!1,
                                                   v0z!1,
                                                   climbRate!1,
                                                   targetAlt!1,
                                                   accelup!1,
                                                   acceldown!1,
                                                   alterCR?!1)") (("" (LEMMA "split_fun3_Integrable[nnreal]") (("1" (LEMMA "times_increase") (("1" (INST -1 "s0z!1" " v0z!1" " climbRate!1" " targetAlt!1" "                                  accelup!1" " acceldown!1" " alterCR?!1") (("1" (SKOLETIN) (("1" (CASE-REPLACE "lot=nt") (("1" (HIDE -1) (("1" (EXPAND "V1") (("1" (FLATTEN) (("1" (EXPAND "const_fun") (("1" (LEMMA "integral_linear[real]") (("1" (INST-CP -1 "0" "nt`1" "nt`5" "v0z!1") (("1" (INST-CP -1 "nt`1" "nt`2" "0" "nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`2" "nt`3" "nt`6" "-nt`2*nt`6+nt`5*nt`1+ v0z!1") (("1" (INST -1 "nt`3" "max(t!1, nt`3)" "0" "nt`3*nt`6 -nt`2*nt`6+nt`5*nt`1+ v0z!1") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -13 "f_3" "f_2" "f_1" "f" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3") (("1" (EXPAND "in_order?") (("1" (EXPAND "restrict") (("1" (PROP) (("1" (POSTPONE) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "lot") (("2" (EXPAND "nt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsLevelOut_posInt_TCC1| 0 (|vsLevelOut_posInt_TCC1-1| |nil| 3613926760 ("" (LEMMA "pos_prep") (("" (PROPAX) NIL NIL)) NIL) ((|pos_prep| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|vsLevelOut_posInt| SUBTYPE "vsLevelOut.vsLevelOut_velCalc(vsLevelOut.s0z, vsLevelOut.v0z, vsLevelOut.climbRate, vsLevelOut.targetAlt, vsLevelOut.accelup, vsLevelOut.acceldown, vsLevelOut.alterCR?)" "Integrable_funs[nnreal](0, vsLevelOut.t)"))) (|vsLevelOut_posCalc_TCC1| 0 (|vsLevelOut_posCalc_TCC1-4| |nil| 3614678785 ("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                           acceldown!1, alterCR?!1)`6 = accelup!1") (("1" (GROUND) NIL NIL) ("2" (EXPAND "vsLevelOutTimes") (("2" (EXPAND "vsLevelOutTimes1") (("2" (GROUND) (("2" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|vsLevelOut_posCalc| SUBTYPE "vsLevelOut.vsLOT`6" "nzreal")) (|vsLevelOut_posCalc_TCC1-3| |nil| 3614000323 ("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                    acceldown!1, alterCR?!1)`5 = accelup!1") (("1" (GROUND) NIL NIL) ("2" (EXPAND "vsLevelOutTimes") (("2" (EXPAND "vsLevelOutTimes1") (("2" (GROUND) (("2" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|vsLevelOut_posCalc| SUBTYPE "vsLevelOut.vsLOT`6" "nzreal")) (|vsLevelOut_posCalc_TCC1-2| |nil| 3613990603 ("" (SKOSIMP*) (("" (REPLACE -1) (("" (HIDE -1) (("" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                             acceldown!1, alterCR?!1)`6 = accelup!1") (("1" (GROUND) NIL NIL) ("2" (EXPAND "vsLevelOutTimes") (("2" (EXPAND "vsLevelOutTimes1") (("2" (GROUND) (("2" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|vsLevelOut_posCalc| SUBTYPE "vsLevelOut.vsLOT`6" "nzreal")) (|vsLevelOut_posCalc_TCC1-1| |nil| 3613926760 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|vsLevelOut_posCalc| SUBTYPE "vsLevelOut.vsLOT`6" "nzreal"))) (|Integral_vsLO_pos| 0 (|Integral_vsLO_pos-2| "" 3804576756 ("" (STOP-REWRITE "expt_x0") (("" (STOP-REWRITE "expt_x1") (("" (STOP-REWRITE "hat_02n") (("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_posInt") (("" (EXPAND "vsLevelOut_velCalc") (("" (LEMMA "times_increase") (("" (INST -1 "s0z!1" "v0z!1" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("" (SKOLETIN) (("" (REPLACE -2 :DIR RL) (("" (LEMMA "Integral_split_fun3[nnreal]") (("1" (EXPAND "V1") (("1" (EXPAND "const_fun") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "0" "nt`1" "nt`5" "v0z!1") (("1" (INST-CP -1 "nt`1" "nt`2" "0" "nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`2" "nt`3" "nt`6" "-nt`2*nt`6 +nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`3" "max(t!1, nt`3)" "0" "nt`3*nt`6-nt`2*nt`6 +nt`5*nt`1+ v0z!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (INST -14 "f_3" "f_2" "f_1" "f" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3" "t!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                                                 split_fun3(nt`1, nt`2, nt`3,
                                                            LAMBDA (t: real): nt`5 * t + v0z!1,
                                                            LAMBDA (x: real): nt`5 * nt`1 + v0z!1,
                                                            LAMBDA (s: real):
                                                              s * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 + v0z!1,
                                                            LAMBDA (s: real):
                                                              nt`3 * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 +
                                                               v0z!1)
                                                           (t))=split_fun3(nt`1, nt`2, nt`3, f_3, f_2, f_1, f)") (("1" (REPLACE -3) (("1" (REPLACE -6) (("1" (REPLACE -8) (("1" (REPLACE -10) (("1" (HIDE (-1 -2 -3 -4 -6 -8 -10 -12 -14 -16 -18)) (("1" (INST-CP -9 "0" "t!1" "nt`5" "v0z!1") (("1" (INST-CP -9 "nt`1" "t!1" "0" "nt`5 * nt`1 + v0z!1") (("1" (INST-CP -9 "nt`2" "t!1" "nt`6" "-nt`2 * nt`6 + nt`5 * nt`1 + v0z!1") (("1" (INST -9 "nt`3" "t!1" "0" "nt`3 * nt`6-nt`2 * nt`6 + nt`5 * nt`1 + v0z!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (CASE-REPLACE "f_7=f_3") (("1" (CASE-REPLACE "f_6=f_2") (("1" (CASE-REPLACE "f_5=f_1") (("1" (CASE-REPLACE "f_4=f") (("1" (REPLACE -5) (("1" (REPLACE -7) (("1" (REPLACE -9) (("1" (REPLACE -11) (("1" (EXPAND "vsLevelOut_posCalc") (("1" (REPLACE -32 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF 1) (("1" (EXPAND "F_4") (("1" (EXPAND "S1") (("1" (EXPAND "F") (("1" (EXPAND "F_5") (("1" (EXPAND "F_1") (("1" (EXPAND "F_6") (("1" (EXPAND "V1") (("1" (EXPAND "F_2") (("1" (GROUND) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (SIMPLIFY 2) (("2" (REAL-PROPS 2) (("2" (HIDE -) (("2" (MOVE-TERMS 2 R 1) (("2" (CROSS-MULT 2) (("2" (REAL-PROPS) (("2" (FIELD 2) (("2" (EXPAND "F_7") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "f_3") (("1" (EXPAND "f_2") (("1" (EXPAND "f_1") (("1" (EXPAND "f") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL) ("6" (HIDE-ALL-BUT 1) (("6" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOut_velCalc| CONST-DECL "real" |vsLevelOut| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|t!1| SKOLEM-CONST-DECL "nnreal" |vsLevelOut| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|f_2| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|f| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|f_1| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|f_3| SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|vsLevelOut_posCalc| CONST-DECL "real" |vsLevelOut| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (F_4 SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (F SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (F_1 SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|div_distributes| FORMULA-DECL NIL |real_props| NIL) (F_7 SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (F_2 SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (F_6 SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (F_5 SKOLEM-CONST-DECL "[nnreal -> real]" |vsLevelOut| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|deriv_domain_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|not_one_element_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|in_order?| CONST-DECL "bool" |integral_split_fun| |analysis|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nt| SKOLEM-CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_split_fun3| FORMULA-DECL NIL |integral_split_fun| |analysis|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (|vsLevelOut_posInt| CONST-DECL "real" |vsLevelOut| NIL)) SHOSTAK) (|Integral_vsLO_pos-1| |nil| 3708685835 ("" (STOP-REWRITE "expt_x0") (("" (STOP-REWRITE "expt_x1") (("" (STOP-REWRITE "hat_02n") (("" (SKOSIMP*) (("" (EXPAND "vsLevelOut_posInt") (("" (EXPAND "vsLevelOut_velCalc") (("" (LEMMA "times_increase") (("" (INST -1 "s0z!1" "v0z!1" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("" (SKOLETIN) (("" (REPLACE -2 :DIR RL) (("" (LEMMA "Integral_split_fun3[nnreal]") (("1" (EXPAND "V1") (("1" (EXPAND "const_fun") (("1" (LEMMA "integral_linear[nnreal]") (("1" (INST-CP -1 "0" "nt`1" "nt`5" "v0z!1") (("1" (INST-CP -1 "nt`1" "nt`2" "0" "nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`2" "nt`3" "nt`6" "-nt`2*nt`6 +nt`5*nt`1+ v0z!1") (("1" (INST-CP -1 "nt`3" "max(t!1, nt`3)" "0" "nt`3*nt`6-nt`2*nt`6 +nt`5*nt`1+ v0z!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (INST -14 "f_3" "f_2" "f_1" "f" "0" "max(t!1, nt`3)" "nt`1" "nt`2" "nt`3" "t!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (EXPAND "in_order?") (("1" (PROP) (("1" (CASE-REPLACE "(LAMBDA (t: nnreal):
                                                 split_fun3(nt`1, nt`2, nt`3,
                                                            LAMBDA (t: real): nt`5 * t + v0z!1,
                                                            LAMBDA (x: real): nt`5 * nt`1 + v0z!1,
                                                            LAMBDA (s: real):
                                                              s * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 + v0z!1,
                                                            LAMBDA (s: real):
                                                              nt`3 * nt`6 - nt`2 * nt`6 + nt`5 * nt`1 +
                                                               v0z!1)
                                                           (t))=split_fun3(nt`1, nt`2, nt`3, f_3, f_2, f_1, f)") (("1" (REPLACE -3) (("1" (REPLACE -6) (("1" (REPLACE -8) (("1" (REPLACE -10) (("1" (HIDE (-1 -2 -3 -4 -6 -8 -10 -12 -14 -16 -18)) (("1" (INST-CP -9 "0" "t!1" "nt`5" "v0z!1") (("1" (INST-CP -9 "nt`1" "t!1" "0" "nt`5 * nt`1 + v0z!1") (("1" (INST-CP -9 "nt`2" "t!1" "nt`6" "-nt`2 * nt`6 + nt`5 * nt`1 + v0z!1") (("1" (INST -9 "nt`3" "t!1" "0" "nt`3 * nt`6-nt`2 * nt`6 + nt`5 * nt`1 + v0z!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (CASE-REPLACE "f_7=f_3") (("1" (CASE-REPLACE "f_6=f_2") (("1" (CASE-REPLACE "f_5=f_1") (("1" (CASE-REPLACE "f_4=f") (("1" (REPLACE -5) (("1" (REPLACE -7) (("1" (REPLACE -9) (("1" (REPLACE -11) (("1" (EXPAND "vsLevelOut_posCalc") (("1" (REPLACE -32 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF 1) (("1" (EXPAND "F_4") (("1" (EXPAND "S1") (("1" (EXPAND "F") (("1" (EXPAND "F_5") (("1" (EXPAND "F_1") (("1" (EXPAND "F_6") (("1" (EXPAND "V1") (("1" (EXPAND "F_2") (("1" (GROUND) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (SIMPLIFY 2) (("2" (REAL-PROPS 2) (("2" (HIDE -) (("2" (MOVE-TERMS 2 R 1) (("2" (CROSS-MULT 2) (("2" (REAL-PROPS) (("2" (FIELD 2) (("2" (EXPAND "F_7") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "f_3") (("1" (EXPAND "f_2") (("1" (EXPAND "f_1") (("1" (EXPAND "f") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|Velocity_after_level| 0 (|Velocity_after_level-3| "" 3823968283 ("" (CASE "FORALL (s, v:real, cr:posreal, ta:real, au:posreal, ad:negreal, acr:bool):
                  LET mt = vsLevelOutTimes1(s,v,cr, ta, au, ad, acr) IN
                  v+mt`5*mt`1+mt`6*(mt`3-mt`2) = 0") (("1" (LEMMA "times_increase") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -3) (("1" (FLATTEN) (("1" (EXPAND "vsLevelOut_velCalc") (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOutTimes") (("4" (NAME-REPLACE "Case1" "IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                 IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                 OR v0z!1 = 0") (("4" (NAME-REPLACE "A2" "IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                               ELSE accelup!1
                               ENDIF") (("4" (NAME-REPLACE "A1" "IF targetAlt!1 - s0z!1 >= 0
                                           THEN accelup!1
                                         ELSE acceldown!1
                                         ENDIF") (("4" (NAME-REPLACE "Case1.2" "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, A2))") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (INST? -9) (("1" (SKOLETIN) (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -8 "s0z!1 + S3(v0z!1, A2)" " 0" " climbRate!1" "                         targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (SKOLETIN) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "A2 = mt`5 AND A1 = mt`6") (("1" (FLATTEN) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (HIDE -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "targetAlt!1-s0z!1>=0 IMPLIES targetAlt!1- (s0z!1 + S3(v0z!1, A2))<0") (("1" (CASE "targetAlt!1-s0z!1>=0") (("1" (PROP) (("1" (EXPAND "A2") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (HIDE (-1 -4 -6 -8 -9 -10 -11 3 4 5 6)) (("1" (EXPAND "vsLevelOutTimes1") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (HIDE (-1 -4 -6 -8 -9 -10 -11 12 3 4 5 6)) (("2" (REPLACE -3) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "targetAlt!1 - (s0z!1 + S3(v0z!1, A2)) >= 0") (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "A2") (("3" (LIFT-IF 1) (("3" (PROP) (("3" (REPLACE -3) (("3" (HIDE-ALL-BUT (-1 -5 1 2 3 5)) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-1 -3 -5 1 2 4)) (("4" (REPLACE -2) (("4" (HIDE -2) (("4" (EXPAND "A1") (("4" (LIFT-IF) (("4" (PROP) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT (-1 -5 1 2)) (("2" (GRIND) (("2" (EXPAND "Case1") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (REPLACE -1) (("2" (GROUND) (("2" (GRIND) (("2" (REAL-PROPS) (("2" (REVEAL 2) (("2" (REVEAL -11) (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "abs") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (REPLACE -2) (("2" (CASE "(accelup!1 / 2) * (-0 / accelup!1) ^ 2 + 0 * (-0 / accelup!1)=0") (("1" (REPLACE -1) (("1" (LIFT-IF 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (PROP) (("1" (GRIND) (("1" (REVEAL 2) (("1" (REVEAL -11) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (EXPAND "abs") (("1" (EXPAND "A2") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (CASE "(accelup!1 / 2) * (-v0z!1 / accelup!1) ^ 2 +
                                        v0z!1 * (-v0z!1 / accelup!1)
                                        < 0") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "(accelup!1 / 2) * (-v0z!1 / accelup!1) ^ 2 +
                                     v0z!1 * (-v0z!1 / accelup!1)
                                     = -v0z!1^2/(2*accelup!1)") (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (FLATTEN) (("2" (CASE-REPLACE "IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                          ELSE accelup!1
                          ENDIF = acceldown!1") (("1" (EXPAND "Case1") (("1" (REVEAL -3) (("1" (CASE "S3(v0z!1, A2)>=0") (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "abs") (("1" (LIFT-IF 3) (("1" (LIFT-IF 3) (("1" (HIDE (-2 -3 -5 -6 -7 -9 -10 -11 -12 -13 2 4 5 6 7)) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (LIFT-IF 2) (("5" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GROUND) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (ADD-FORMULAS -2 -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (LIFT-IF 2) (("6" (PROP) (("1" (GROUND) NIL NIL) ("2" (ADD-FORMULAS -2 -3) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE (-1 -2 -4 -5 -6 -7 -8 -9 -10 -11 -12 3 5 6 7 8)) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (GRIND) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -7 "s0z!1 + S3(v0z!1, A1)" " 0" " climbRate!1" "                          targetAlt!1" " accelup!1" " acceldown!1" "                          alterCR?!1") (("2" (SKOLETIN) (("2" (REPLACE -2 :DIR RL) (("2" (HIDE-ALL-BUT (-1 -2 -3 3)) (("2" (REPLACE -3) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE " A1 =mt`5") (("1" (GROUND) NIL NIL) ("2" (REVEAL 1) (("2" (EXPAND "A1") (("2" (HIDE (-1 -3 3)) (("2" (EXPAND "mt") (("2" (EXPAND "vsLevelOutTimes1") (("2" (EXPAND "Case1") (("2" (HIDE -) (("2" (GRIND) (("1" (EXPAND "A1") (("1" (GRIND) (("1" (CASE-REPLACE "(acceldown!1 / 2) * (-v0z!1 / acceldown!1 * (-v0z!1 / acceldown!1))
                      + v0z!1 * (-v0z!1 / acceldown!1) = -v0z!1^2/(2*acceldown!1)") (("1" (CASE "-v0z!1^2/(2*acceldown!1)>=0") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (CASE-REPLACE "(accelup!1 / 2) * (-v0z!1 / accelup!1 * (-v0z!1 / accelup!1)) +
                      v0z!1 * (-v0z!1 / accelup!1) = -v0z!1^2/(2*accelup!1)") (("1" (CASE "0>= -v0z!1 ^ 2 / (2 * accelup!1)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "S" "ta!1-s!1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                     (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (NAME-REPLACE "TQ" "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2),
                                  v!1 - A1 / A2 * v!1,
                                  -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("1" (NAME-REPLACE "T1" "(CR - v!1) / A1") (("1" (NAME-REPLACE "T2" "(S - S1(v!1, A1)(T1) - S3(V1(v!1, A1)(T1), A2)) / CR") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "tee3") (("1" (REPLACE -1) (("1" (GRIND) (("1" (EXPAND "T1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (EXPAND "A1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (HIDE 2) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T1 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (CR SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (A2 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (A1 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|mt| SKOLEM-CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|neg_times_neg| FORMULA-DECL NIL |real_props| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|add_div| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|neg_add| FORMULA-DECL NIL |extra_tegies| NIL) (|mult_neg| FORMULA-DECL NIL |extra_tegies| NIL) (|neg_neg| FORMULA-DECL NIL |extra_tegies| NIL) (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL) (|neg_div| FORMULA-DECL NIL |extra_tegies| NIL) (A1 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (A2 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|tee3| CONST-DECL "real" |vsLevelOut| NIL) (|quadRoots| CONST-DECL "[real, real]" |vsLevelOut| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minpos| CONST-DECL "real" |vsLevelOut| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|negreal_times_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|zero_times2| FORMULA-DECL NIL |real_props| NIL) (|Case1| SKOLEM-CONST-DECL "boolean" |vsLevelOut| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|vsLevelOut_velCalc| CONST-DECL "real" |vsLevelOut| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL) (|Velocity_after_level-2| "" 3790107232 ("" (CASE "FORALL (s, v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, acr:bool):
           LET mt = vsLevelOutTimes1(s,v,cr, ta, au, ad, acr) IN
           v+mt`5*mt`1+mt`6*(mt`3-mt`2) = 0") (("1" (LEMMA "times_increase") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -3) (("1" (FLATTEN) (("1" (EXPAND "vsLevelOut_velCalc") (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOutTimes") (("4" (NAME-REPLACE "Case1" "IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
           IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
           OR v0z!1 = 0") (("4" (NAME-REPLACE "A2" "IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                         ELSE accelup!1
                         ENDIF") (("4" (NAME-REPLACE "A1" "IF targetAlt!1 - s0z!1 >= 0
                                     THEN accelup!1
                                   ELSE acceldown!1
                                   ENDIF") (("4" (NAME-REPLACE "Case1.2" "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, A2))") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (INST? -9) (("1" (SKOLETIN) (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -8 "s0z!1 + S3(v0z!1, A2)" " 0" " climbRate!1" "
                         targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (SKOLETIN) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "A2 = mt`5 AND A1 = mt`6") (("1" (FLATTEN) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (HIDE -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "targetAlt!1-s0z!1>=0 IMPLIES targetAlt!1- (s0z!1 + S3(v0z!1, A2))<0") (("1" (CASE "targetAlt!1-s0z!1>=0") (("1" (PROP) (("1" (EXPAND "A2") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (HIDE (-1 -4 -6 -8 -9 -10 -11 3 4 5 6)) (("1" (EXPAND "vsLevelOutTimes1") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (HIDE (-1 -4 -6 -8 -9 -10 -11 12 3 4 5 6)) (("2" (REPLACE -3) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "targetAlt!1 - (s0z!1 + S3(v0z!1, A2)) >= 0") (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "A2") (("3" (LIFT-IF 1) (("3" (PROP) (("3" (REPLACE -3) (("3" (HIDE-ALL-BUT (-1 -5 1 2 3 5)) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-1 -3 -5 1 2 4)) (("4" (REPLACE -2) (("4" (HIDE -2) (("4" (EXPAND "A1") (("4" (LIFT-IF) (("4" (PROP) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT (-1 -5 1 2)) (("2" (GRIND) (("2" (EXPAND "Case1") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (REPLACE -1) (("2" (GROUND) (("2" (GRIND) (("2" (REAL-PROPS) (("2" (REVEAL 2) (("2" (REVEAL -11) (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "abs") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (REPLACE -2) (("2" (CASE "(accelup!1 / 2) * (-0 / accelup!1) ^ 2 + 0 * (-0 / accelup!1)=0") (("1" (REPLACE -1) (("1" (LIFT-IF 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (PROP) (("1" (GRIND) (("1" (REVEAL 2) (("1" (REVEAL -11) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (EXPAND "abs") (("1" (EXPAND "A2") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (CASE "(accelup!1 / 2) * (-v0z!1 / accelup!1) ^ 2 +
           v0z!1 * (-v0z!1 / accelup!1)
           < 0") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "(accelup!1 / 2) * (-v0z!1 / accelup!1) ^ 2 +
           v0z!1 * (-v0z!1 / accelup!1)
           = -v0z!1^2/(2*accelup!1)") (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (FLATTEN) (("2" (CASE-REPLACE "IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
          ELSE accelup!1
          ENDIF = acceldown!1") (("1" (EXPAND "Case1") (("1" (REVEAL -3) (("1" (CASE "S3(v0z!1, A2)>=0") (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "abs") (("1" (LIFT-IF 3) (("1" (LIFT-IF 3) (("1" (HIDE (-2 -3 -5 -6 -7 -9 -10 -11 -12 -13 2 4 5 6 7)) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (LIFT-IF 2) (("5" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GROUND) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (ADD-FORMULAS -2 -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (LIFT-IF 2) (("6" (PROP) (("1" (GROUND) NIL NIL) ("2" (ADD-FORMULAS -2 -3) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE (-1 -2 -4 -5 -6 -7 -8 -9 -10 -11 -12 3 5 6 7 8)) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (GRIND) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -7 "s0z!1 + S3(v0z!1, A1)" " 0" " climbRate!1" "
                          targetAlt!1" " accelup!1" " acceldown!1" "
                          alterCR?!1") (("2" (SKOLETIN) (("2" (REPLACE -2 :DIR RL) (("2" (HIDE-ALL-BUT (-1 -2 -3 3)) (("2" (REPLACE -3) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE " A1 =mt`5") (("1" (GROUND) NIL NIL) ("2" (REVEAL 1) (("2" (EXPAND "A1") (("2" (HIDE (-1 -3 3)) (("2" (EXPAND "mt") (("2" (EXPAND "vsLevelOutTimes1") (("2" (EXPAND "Case1") (("2" (HIDE -) (("2" (GRIND) (("1" (EXPAND "A1") (("1" (GRIND) (("1" (CASE-REPLACE "(acceldown!1 / 2) * (-v0z!1 / acceldown!1 * (-v0z!1 / acceldown!1))
        + v0z!1 * (-v0z!1 / acceldown!1) = -v0z!1^2/(2*acceldown!1)") (("1" (CASE "-v0z!1^2/(2*acceldown!1)>=0") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (CASE-REPLACE "(accelup!1 / 2) * (-v0z!1 / accelup!1 * (-v0z!1 / accelup!1)) +
        v0z!1 * (-v0z!1 / accelup!1) = -v0z!1^2/(2*accelup!1)") (("1" (CASE "0>= -v0z!1 ^ 2 / (2 * accelup!1)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "S" "ta!1-s!1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                 (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)
") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (NAME-REPLACE "TQ" "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2),
                              v!1 - A1 / A2 * v!1,
                              -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("1" (NAME-REPLACE "T1" "(CR - v!1) / A1") (("1" (NAME-REPLACE "T2" "(S - S1(v!1, A1)(T1) - S3(V1(v!1, A1)(T1), A2)) / CR") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "tee3") (("1" (REPLACE -1) (("1" (GRIND) (("1" (EXPAND "T1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (EXPAND "A1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (HIDE 2) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Velocity_after_level-1| |nil| 3614069080 ("" (CASE "FORALL (s, v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, acr:bool):
           LET mt = vsLevelOutTimes1(s,v,cr, ta, au, ad, acr) IN
           v+mt`5*mt`1+mt`6*(mt`3-mt`2) = 0") (("1" (LEMMA "times_increase") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -3) (("1" (FLATTEN) (("1" (EXPAND "vsLevelOut_velCalc") (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "split_fun3") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOutTimes") (("4" (NAME-REPLACE "Case1" "IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
           IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
           OR v0z!1 = 0") (("4" (NAME-REPLACE "A2" "IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                         ELSE accelup!1
                         ENDIF") (("4" (NAME-REPLACE "A1" "IF targetAlt!1 - s0z!1 >= 0
                                     THEN accelup!1
                                   ELSE acceldown!1
                                   ENDIF") (("4" (NAME-REPLACE "Case1.2" "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, A2))") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLATTEN) (("1" (INST? -9) (("1" (SKOLETIN) (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -8 "s0z!1 + S3(v0z!1, A2)" " 0" " climbRate!1" "
                         targetAlt!1" " accelup!1" " acceldown!1" " alterCR?!1") (("2" (SKOLETIN) (("2" (REPLACE -2 :DIR RL) (("2" (CASE "A2 = mt`5 AND A1 = mt`6") (("1" (FLATTEN) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (HIDE -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "targetAlt!1-s0z!1>=0 IMPLIES targetAlt!1- (s0z!1 + S3(v0z!1, A2))<0") (("1" (CASE "targetAlt!1-s0z!1>=0") (("1" (PROP) (("1" (EXPAND "A2") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (HIDE (-1 -4 -6 -8 -9 -10 -11 3 4 5 6)) (("1" (EXPAND "vsLevelOutTimes1") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (HIDE (-1 -4 -6 -8 -9 -10 -11 12 3 4 5 6)) (("2" (REPLACE -3) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "targetAlt!1 - (s0z!1 + S3(v0z!1, A2)) >= 0") (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "A2") (("3" (LIFT-IF 1) (("3" (PROP) (("3" (REPLACE -3) (("3" (HIDE-ALL-BUT (-1 -5 1 2 3 5)) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-1 -3 -5 1 2 4)) (("4" (REPLACE -2) (("4" (HIDE -2) (("4" (EXPAND "A1") (("4" (LIFT-IF) (("4" (PROP) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A2") (("2" (HIDE-ALL-BUT (-1 -5 1 2)) (("2" (GRIND) (("2" (EXPAND "Case1") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (REPLACE -1) (("2" (GROUND) (("2" (GRIND) (("2" (REAL-PROPS) (("2" (REVEAL 2) (("2" (REVEAL -11) (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "abs") (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (REPLACE -2) (("2" (CASE "(accelup!1 / 2) * (-0 / accelup!1) ^ 2 + 0 * (-0 / accelup!1)=0") (("1" (REPLACE -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (PROP) (("1" (GRIND) (("1" (REVEAL 2) (("1" (REVEAL -11) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (EXPAND "abs") (("1" (EXPAND "A2") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (CASE "(accelup!1 / 2) * (-v0z!1 / accelup!1) ^ 2 +
           v0z!1 * (-v0z!1 / accelup!1)
           < 0") (("1" (LIFT-IF 1) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "(accelup!1 / 2) * (-v0z!1 / accelup!1) ^ 2 +
           v0z!1 * (-v0z!1 / accelup!1)
           = -v0z!1^2/(2*accelup!1)") (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (FLATTEN) (("2" (CASE-REPLACE "IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
          ELSE accelup!1
          ENDIF = acceldown!1") (("1" (EXPAND "Case1") (("1" (REVEAL -3) (("1" (CASE "S3(v0z!1, A2)>=0") (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "abs") (("1" (LIFT-IF 3) (("1" (LIFT-IF 3) (("1" (HIDE (-2 -3 -5 -6 -7 -9 -10 -11 -12 -13 2 4 5 6 7)) (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (GROUND) NIL NIL) ("5" (LIFT-IF 2) (("5" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GROUND) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (ADD-FORMULAS -2 -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (LIFT-IF 2) (("6" (PROP) (("1" (GROUND) NIL NIL) ("2" (ADD-FORMULAS -2 -3) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE (-1 -2 -4 -5 -6 -7 -8 -9 -10 -11 -12 3 5 6 7 8)) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (GRIND) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -7 "s0z!1 + S3(v0z!1, A1)" " 0" " climbRate!1" "
                          targetAlt!1" " accelup!1" " acceldown!1" "
                          alterCR?!1") (("2" (SKOLETIN) (("2" (REPLACE -2 :DIR RL) (("2" (HIDE-ALL-BUT (-1 -2 -3 3)) (("2" (REPLACE -3) (("2" (SIMPLIFY 1) (("2" (CASE-REPLACE " A1 =mt`5") (("1" (GROUND) NIL NIL) ("2" (REVEAL 1) (("2" (EXPAND "A1") (("2" (HIDE (-1 -3 3)) (("2" (EXPAND "mt") (("2" (EXPAND "vsLevelOutTimes1") (("2" (EXPAND "Case1") (("2" (HIDE -) (("2" (GRIND) (("1" (EXPAND "A1") (("1" (GRIND) (("1" (CASE-REPLACE "(acceldown!1 / 2) * (-v0z!1 / acceldown!1 * (-v0z!1 / acceldown!1))
        + v0z!1 * (-v0z!1 / acceldown!1) = -v0z!1^2/(2*acceldown!1)") (("1" (CASE "-v0z!1^2/(2*acceldown!1)>=0") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "A1") (("2" (CASE-REPLACE "(accelup!1 / 2) * (-v0z!1 / accelup!1 * (-v0z!1 / accelup!1)) +
        v0z!1 * (-v0z!1 / accelup!1) = -v0z!1^2/(2*accelup!1)") (("1" (CASE "0>= -v0z!1 ^ 2 / (2 * accelup!1)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (NAME-REPLACE "S" "ta!1-s!1") (("2" (NAME-REPLACE "CR" "IF ta!1 >= s!1 THEN 1 ELSE -1 ENDIF *
                 (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)
") (("2" (NAME-REPLACE "A1" "IF CR >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (NAME-REPLACE "A2" "IF ta!1 >= s!1 THEN ad!1 ELSE au!1 ENDIF") (("2" (NAME-REPLACE "TQ" "minpos(quadRoots(A1 / 2 - A1 ^ 2 / (2 * A2),
                              v!1 - A1 / A2 * v!1,
                              -v!1 ^ 2 / (2 * A2) - ta!1 + s!1))") (("1" (NAME-REPLACE "T1" "(CR - v!1) / A1") (("1" (NAME-REPLACE "T2" "(S - S1(v!1, A1)(T1) - S3(V1(v!1, A1)(T1), A2)) / CR") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "tee3") (("1" (REPLACE -1) (("1" (GRIND) (("1" (EXPAND "T1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (EXPAND "V1") (("2" (EXPAND "tee3") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "CR") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE -1 2) (("4" (EXPAND "A1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (EXPAND "A1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (HIDE 2) (("2" (GRIND) (("2" (EXPAND "A2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) (("3" (EXPAND "A2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|Position_after_level| 0 (|Position_after_level-5| "" 3823968482 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (FLATTEN) (("" (CASE "FORALL (s,v:real, cr:posreal, ta:real, au:posreal, ad:negreal, acr:bool):
                                    LET sgnv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                                    altDir = IF ta>=s THEN 1 ELSE -1 ENDIF,
                                    a2 = IF ta>=s THEN ad ELSE au ENDIF,
                                    lot = vsLevelOutTimes1(s, v, cr, ta, au, ad, acr)
                                    IN
                                     (sgnv = altDir OR v=0) AND abs(ta-s)>= abs( S3(v, a2)) IMPLIES
                                    s+S1(v, lot`5)(lot`1) + V1(v, lot`5)(lot`1)*(lot`2-lot`1) +S1(V1(v, lot`5)(lot`1), lot`6)(lot`3-lot`2) = ta") (("1" (CASE-REPLACE "vsLevelOut_posCalc(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                              acceldown!1, alterCR?!1)
                                             (t!1) =
                     s0z!1+S1(v0z!1, vsLOT`5)(vsLOT`1) + V1(v0z!1, vsLOT`5)(vsLOT`1)*(vsLOT`2-vsLOT`1) +S1(V1(v0z!1, vsLOT`5)(vsLOT`1), vsLOT`6)(vsLOT`3-vsLOT`2)") (("1" (HIDE -1) (("1" (CASE "((IF v0z!1>=0 THEN 1 ELSE -1 ENDIF) = IF targetAlt!1>=s0z!1 THEN 1 ELSE -1 ENDIF) OR v0z!1=0") (("1" (CASE "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, IF targetAlt!1>=s0z!1 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                                   acceldown!1, alterCR?!1) = vsLevelOutTimes1(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                                   acceldown!1, alterCR?!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST? -3) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -3 :DIR RL) (("1" (REPLACE -2) (("1" (REPLACE -9 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 -5 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                                          IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                                          OR v0z!1 = 0) = TRUE") (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                                                                  abs(S3(v0z!1,
                                                                         IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                                                         ELSE accelup!1
                                                                         ENDIF)))=TRUE") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (CASE-REPLACE "(targetAlt!1 >= s0z!1) =  (targetAlt!1 - s0z!1>=0)") (("1" (IFF 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (IFF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "a2" "IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a2),0, climbRate!1, targetAlt!1, accelup!1,
                                                                                   acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                       acceldown!1, alterCR?!1) =  ( -v0z!1/a2+nt`1, -v0z!1/a2+nt`2, -v0z!1/a2+nt`3, nt`4, nt`5, nt`6)") (("1" (REPLACE -7) (("1" (SIMPLIFY 2) (("1" (EXPAND "S1" 2) (("1" (SIMPLIFY 2) (("1" (EXPAND "V1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "a2=nt`5") (("1" (SIMPLIFY 2) (("1" (EXPAND "^" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (SIMPLIFY 2) (("1" (INST -6 "s0z!1+S3(v0z!1, a2)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (EXPAND "S3" -1) (("1" (EXPAND "S1" -1) (("1" (EXPAND "^" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (CASE-REPLACE "(a2_1 / 2) * (-0 / a2_1 * (-0 / a2_1))=0") (("1" (CASE-REPLACE "(abs(-1 * (-v0z!1 / a2 * v0z!1) -
                                                                                           -v0z!1 / a2 * (-v0z!1 / a2) * (a2 / 2)
                                                                                           - s0z!1
                                                                                           + targetAlt!1)
                                                                                       >= abs(0))=TRUE") (("1" (REPLACE -8 :DIR RL) (("1" (REPLACE -4) (("1" (REPLACE -10) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "V1" 2) (("1" (REPLACE -8 :DIR RL) (("1" (HIDE-ALL-BUT 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "a2_1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 -7 3)) (("2" (CASE-REPLACE "IF targetAlt!1 >= s0z!1 THEN acceldown!1
                                                                              ELSE accelup!1
                                                                              ENDIF=a2") (("1" (CASE-REPLACE "S3(v0z!1, a2) = -v0z!1^2/(2*a2)") (("1" (BDDSIMP -5) (("1" (EXPAND "vsLevelOutTimes1") (("1" (REPLACE -4 :DIR RL) (("1" (SIMPLIFY 1) (("1" (NAME "ald2" "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1 THEN 1
                                                                                                                           ELSE -1
                                                                                                                           ENDIF") (("1" (REPLACE -1) (("1" (HIDE -5) (("1" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                                                                                               ELSE climbRate!1
                                                                                                               ENDIF) = climbRate!1") (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a2)) - s0z!1 + targetAlt!1) >=
                                                                                                           abs(S1(0,
                                                                                                                  IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                                                  ELSE acceldown!1
                                                                                                                  ENDIF)
                                                                                                                 (ald2 * climbRate!1 /
                                                                                                                   IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                                                   ELSE acceldown!1
                                                                                                                   ENDIF)
                                                                                                                +
                                                                                                                S3(V1(0,
                                                                                                                      IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                                                      ELSE acceldown!1
                                                                                                                      ENDIF)
                                                                                                                     (ald2 * climbRate!1 /
                                                                                                                       IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                                                       ELSE acceldown!1
                                                                                                                       ENDIF),
                                                                                                                   IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1
                                                                                                                     THEN acceldown!1
                                                                                                                   ELSE accelup!1
                                                                                                                   ENDIF))
                                                                                                         THEN IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                                              ELSE acceldown!1
                                                                                                              ENDIF
                                                                                                       ELSE IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                                            ELSE acceldown!1
                                                                                                            ENDIF
                                                                                                       ENDIF = IF ald2*climbRate!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (HIDE -1) (("1" (HIDE -1) (("1" (CASE "targetAlt!1 - s0z!1 >= 0") (("1" (CASE-REPLACE "a2=acceldown!1") (("1" (GRIND) (("1" (MOVE-TERMS -3 R 2) (("1" (CROSS-MULT -8) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE-REPLACE "a2 = accelup!1") (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE-ALL-BUT 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a2") (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (REVEAL -1) (("2" (REVEAL -1) (("2" (REVEAL -2) (("2" (REPLACE -2) (("2" (CASE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                                                                      IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                                                                      OR v0z!1 = 0) = TRUE") (("1" (REPLACE -1) (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                                                                          abs(S3(v0z!1,
                                                                                 IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                                                                 ELSE accelup!1
                                                                                 ENDIF))) = FALSE") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (HIDE (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (NAME "a1" "IF targetAlt!1-s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a1), 0, climbRate!1, targetAlt!1, accelup!1, acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                               acceldown!1, alterCR?!1) = (-v0z!1/a1+nt`1, -v0z!1/a1+nt`2, -v0z!1/a1+nt`3, nt`4, nt`5, nt`6)") (("1" (INST -4 "s0z!1 + S3(v0z!1, a1)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (CASE-REPLACE "(abs(targetAlt!1 - (s0z!1 + S3(v0z!1, a1))) >= abs(S3(0, a2)))=TRUE") (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (CASE-REPLACE "a1=nt`5") (("1" (REPLACE -12) (("1" (SIMPLIFY 3) (("1" (REPLACE -3 :DIR RL) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-2 -7 -10 -11 4)) (("2" (REPLACE -6 :DIR RL) (("2" (HIDE -6) (("2" (HIDE -2) (("2" (EXPAND "vsLevelOutTimes1") (("2" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                                                                 ELSE climbRate!1
                                                                                 ENDIF)=climbRate!1") (("1" (CASE-REPLACE "S3(v0z!1, a1) = -v0z!1^2/(2*a1)") (("1" (CASE-REPLACE "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1
                                                                                                        THEN 1
                                                                                                      ELSE -1
                                                                                                      ENDIF = altDir") (("1" (CASE-REPLACE "(targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1) = (targetAlt!1 >= s0z!1) ") (("1" (NAME "AY1" "IF altDir * climbRate!1 >= 0 THEN accelup!1
                                                                                                                                      ELSE acceldown!1
                                                                                                                                      ENDIF") (("1" (REPLACE -1) (("1" (REPLACE -7) (("1" (REPLACE -7 :DIR RL) (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a1)) - s0z!1 + targetAlt!1) >=
                                                                                                           abs(S1(0, AY1)(altDir * climbRate!1 / AY1) +
                                                                                                                S3(V1(0, AY1)(altDir * climbRate!1 / AY1), a2))
                                                                                                         THEN AY1
                                                                                                       ELSE AY1
                                                                                                       ENDIF = AY1") (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -4 :DIR RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "AY1") (("3" (LIFT-IF) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "targetAlt!1>=s0z!1") (("1" (CASE-REPLACE "a1 = accelup!1") (("1" (CASE "0>=-v0z!1^2/(2*accelup!1)") (("1" (ADD-FORMULAS -1 -3) NIL NIL) ("2" (CROSS-MULT 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "a1=acceldown!1") (("1" (FLIP-INEQ 1) (("1" (CASE "0<= -v0z!1^2/(2*acceldown!1)") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "altDir") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "abs") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 4 -4)) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "( IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                                          IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                                          OR v0z!1 = 0)=FALSE") (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Velocity_after_level") (("2" (HIDE (-2 2)) (("2" (INST? -1) (("2" (INST -1 "t!1") (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -4 :DIR RL) (("2" (PROP) (("2" (EXPAND "vsLevelOut_velCalc") (("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "times_increase") (("2" (INST?) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -6 :DIR RL) (("2" (FLATTEN) (("2" (EXPAND "split_fun3") (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOut_posCalc") (("4" (REPLACE -8 :DIR RL) (("4" (EXPAND "split_fun3") (("4" (LIFT-IF 4) (("4" (PROP) (("4" (HIDE-ALL-BUT (-1 2)) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "vsLevelOutTimes") (("3" (EXPAND "vsLevelOutTimes1") (("3" (GROUND) (("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -3) (("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "vsLevelOutTimes") (("4" (EXPAND "vsLevelOutTimes1") (("4" (GROUND) (("4" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (NAME "cr" "altDir * (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (REPLACE -1) (("2" (NAME "a1" "IF cr >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (REPLACE -1) (("2" (NAME "root" "minpos(quadRoots(a1 / 2 - a1 ^ 2 / (2 * a2),
                                                                  v!1 - a1 / a2 * v!1,
                                                                  -v!1 ^ 2 / (2 * a2) - ta!1 + s!1))") (("1" (REPLACE -1) (("1" (LIFT-IF -6) (("1" (SPLIT -6) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (SIMPLIFY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "tee3") (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "a1=a2") (("1" (CASE-REPLACE "S1(v!1, a2)((cr - v!1) / a2) +
                                                    S3(V1(v!1, a2)((cr - v!1) / a2), a2) = S3(v!1, a2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "V1") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1 / 2 - a1 ^ 2 / (2 * a2)/=0") (("1" (NAME "A" "a1 / 2 - a1 ^ 2 / (2 * a2)") (("1" (NAME "B" "v!1 - a1 / a2 * v!1") (("1" (NAME "C" "-v!1 ^ 2 / (2 * a2) - ta!1 + s!1") (("1" (CASE "A*C<=0") (("1" (CASE "discr(A,B,C)>=0") (("1" (NAME "sgna" "IF A>=0 THEN 1 ELSE -1 ENDIF") (("1" (CASE-REPLACE "root = root(A, B, C, sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 3) (("1" (HIDE-ALL-BUT (-3 1 3 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root(A,B,C,sgna)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "sgna") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "root = root(A, B, C, -sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 4) (("1" (HIDE-ALL-BUT (-3 2 4 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "-sgna") (("1" (REVEAL -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgna") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "root_ge_0") (("2" (INST -1 "A" "B" "C" "sgna") (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (HIDE (4 5 6 -8 -10 -11 -12 -13 -14 -15 -16)) (("1" (EXPAND "minpos") (("1" (CASE "quadRoots(A,B,C) = (root(A,B,C,1), root(A,B,C,-1))") (("1" (REPLACE -1) (("1" (SIMPLIFY -9) (("1" (LIFT-IF -9) (("1" (SPLIT -9) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "max") (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT-INEQ -5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "max") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY -1) (("2" (COPY -4) (("2" (EXPAND "quadRoots") (("2" (EXPAND "root") (("2" (EXPAND "discr") (("2" (CASE-REPLACE "B^2 = sq(B)") (("1" (CASE-REPLACE "(A /= 0 AND sq(B) - 4 * (A * C) >= 0)=TRUE") (("1" (HIDE-ALL-BUT (-2 1 5)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "sgna = sign(A)") (("1" (MERGE-FNUMS (-4 -1)) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "sign") (("2" (EXPAND "sgna") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "sgna") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "discr") (("2" (LEMMA "sq_pos") (("2" (INST -1 "B") (("2" (CASE "-4*(A*C)>=0") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S3(v!1, a2) = -v!1^2/(2*a2)") (("1" (CASE "ta!1>=s!1") (("1" (CASE "a1>=0 AND a2<=0 AND ta!1-s!1>=0 AND -v!1^2/(2*a2)>=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (CASE "A>=0") (("1" (CASE "-C>=0") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -15 1)) (("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -5) (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (LIFT-IF -1) (("3" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "C") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (FLATTEN) (("2" (DIV-BY -2 "2") (("2" (SIMPLIFY -2) (("2" (MULT-INEQ -1 -2) (("2" (EXPAND "A") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -10 -14 1 3)) (("2" (GRIND) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (EXPAND "a1") (("1" (HIDE (4 5 -8 -7)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE (4 5 -8 -7)) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (EXPAND "a2") (("4" (HIDE (4 5 -8 -7)) (("4" (CROSS-MULT 1) (("4" (LEMMA "sq_pos") (("4" (INST -1 "v!1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1<=0 AND a2>=0 AND ta!1-s!1<0 and -v!1^2/(2*a2)<=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (HIDE (-8 -9 4 5)) (("1" (CASE "C>=0") (("1" (CASE "-A>=0") (("1" (MULT-INEQ -1 -2) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (DIV-BY -3 "2") (("2" (SIMPLIFY -3) (("2" (CASE "-a1/2>=0") (("1" (MULT-INEQ -1 -3) (("1" (EXPAND "A") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "C") (("2" (HIDE-ALL-BUT (-4 -5 -10 -13 -14 1 2 5)) (("2" (EXPAND "abs") (("2" (LIFT-IF -4) (("2" (LIFT-IF -4) (("2" (LIFT-IF -4) (("2" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT-INEQ -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -9 -13 1 2 4)) (("2" (GRIND) (("2" (EXPAND "a1") (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 3 5 6)) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (CROSS-MULT 1) (("4" (EXPAND "a2") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) (("2" (CASE "a1/2/=0") (("1" (CASE "(1-a1/a2)/=0") (("1" (CASE "(1-a1/a2)*a1/2/=0") (("1" (GRIND) NIL NIL) ("2" (PROP) (("2" (CANCEL-BY -1 "a1/2") NIL NIL)) NIL)) NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE -9 1) (("3" (HIDE -6) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (REPLACE -4) (("4" (HIDE-ALL-BUT -7) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REPLACE -3) (("5" (HIDE-ALL-BUT -6) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vsLevelOut_posCalc| CONST-DECL "real" |vsLevelOut| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (S3 CONST-DECL "real" |vsLevelOut| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Velocity_after_level| FORMULA-DECL NIL |vsLevelOut| NIL) (|vsLevelOut_velCalc| CONST-DECL "real" |vsLevelOut| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|a2| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|div_mult_neg_le2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|neg_div| FORMULA-DECL NIL |extra_tegies| NIL) (|neg_add| FORMULA-DECL NIL |extra_tegies| NIL) (|a1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (AY1 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|altDir| SKOLEM-CONST-DECL "int" |vsLevelOut| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|a2_1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|a2| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|tee3| CONST-DECL "real" |vsLevelOut| NIL) (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (DIV_28 SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|zero_div| FORMULA-DECL NIL |extra_tegies| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_neg_le1| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|a1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_neg_ge1| FORMULA-DECL NIL |real_props| NIL) (|ta!1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|s!1| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|ad!1| SKOLEM-CONST-DECL "negreal" |vsLevelOut| NIL) (|au!1| SKOLEM-CONST-DECL "posreal" |vsLevelOut| NIL) (|a2| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|negreal_div_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|negreal_times_negreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|discr| CONST-DECL "real" |quadratic| |reals|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign| TYPE-EQ-DECL NIL |sign| |reals|) (|root| CONST-DECL "real" |quadratic| |reals|) (C SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (B SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (A SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|quadratic| CONST-DECL "real" |quadratic| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|quad_eq_0| FORMULA-DECL NIL |quadratic| |reals|) (|root_ge_0| FORMULA-DECL NIL |quadratic| |reals|) (|sign| CONST-DECL "Sign" |sign| |reals|) (|root| SKOLEM-CONST-DECL "real" |vsLevelOut| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sgna| SKOLEM-CONST-DECL "int" |vsLevelOut| NIL) (|neg_mult| FORMULA-DECL NIL |extra_tegies| NIL) (|add_neg| FORMULA-DECL NIL |extra_tegies| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|minpos| CONST-DECL "real" |vsLevelOut| NIL) (|quadRoots| CONST-DECL "[real, real]" |vsLevelOut| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL) (|Position_after_level-4| "" 3804577569 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (FLATTEN) (("" (CASE "FORALL (s,v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, acr:bool):
                             LET sgnv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                             altDir = IF ta>=s THEN 1 ELSE -1 ENDIF,
                             a2 = IF ta>=s THEN ad ELSE au ENDIF,
                             lot = vsLevelOutTimes1(s, v, cr, ta, au, ad, acr)
                             IN
                              (sgnv = altDir OR v=0) AND abs(ta-s)>= abs( S3(v, a2)) IMPLIES
                             s+S1(v, lot`5)(lot`1) + V1(v, lot`5)(lot`1)*(lot`2-lot`1) +S1(V1(v, lot`5)(lot`1), lot`6)(lot`3-lot`2) = ta") (("1" (CASE-REPLACE "vsLevelOut_posCalc(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                          acceldown!1, alterCR?!1)
                                         (t!1) =
                 s0z!1+S1(v0z!1, vsLOT`5)(vsLOT`1) + V1(v0z!1, vsLOT`5)(vsLOT`1)*(vsLOT`2-vsLOT`1) +S1(V1(v0z!1, vsLOT`5)(vsLOT`1), vsLOT`6)(vsLOT`3-vsLOT`2)") (("1" (HIDE -1) (("1" (CASE "((IF v0z!1>=0 THEN 1 ELSE -1 ENDIF) = IF targetAlt!1>=s0z!1 THEN 1 ELSE -1 ENDIF) OR v0z!1=0") (("1" (CASE "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, IF targetAlt!1>=s0z!1 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                    acceldown!1, alterCR?!1) = vsLevelOutTimes1(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                    acceldown!1, alterCR?!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST? -3) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -3 :DIR RL) (("1" (REPLACE -2) (("1" (REPLACE -9 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 -5 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                              IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                              OR v0z!1 = 0) = TRUE") (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                                                    abs(S3(v0z!1,
                                                           IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                                           ELSE accelup!1
                                                           ENDIF)))=TRUE") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (CASE-REPLACE "(targetAlt!1 >= s0z!1) =  (targetAlt!1 - s0z!1>=0)") (("1" (IFF 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (IFF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "a2" "IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a2),0, climbRate!1, targetAlt!1, accelup!1,
                                                                    acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                           acceldown!1, alterCR?!1) =  ( -v0z!1/a2+nt`1, -v0z!1/a2+nt`2, -v0z!1/a2+nt`3, nt`4, nt`5, nt`6)") (("1" (REPLACE -7) (("1" (SIMPLIFY 2) (("1" (EXPAND "S1" 2) (("1" (SIMPLIFY 2) (("1" (EXPAND "V1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "a2=nt`5") (("1" (SIMPLIFY 2) (("1" (EXPAND "^" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (SIMPLIFY 2) (("1" (INST -6 "s0z!1+S3(v0z!1, a2)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (EXPAND "S3" -1) (("1" (EXPAND "S1" -1) (("1" (EXPAND "^" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (CASE-REPLACE "(a2_1 / 2) * (-0 / a2_1 * (-0 / a2_1))=0") (("1" (CASE-REPLACE "(abs(-1 * (-v0z!1 / a2 * v0z!1) -
                                                                       -v0z!1 / a2 * (-v0z!1 / a2) * (a2 / 2)
                                                                       - s0z!1
                                                                       + targetAlt!1)
                                                                   >= abs(0))=TRUE") (("1" (REPLACE -8 :DIR RL) (("1" (REPLACE -4) (("1" (REPLACE -10) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "V1" 2) (("1" (REPLACE -8 :DIR RL) (("1" (HIDE-ALL-BUT 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "a2_1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 -7 3)) (("2" (CASE-REPLACE "IF targetAlt!1 >= s0z!1 THEN acceldown!1
                                                              ELSE accelup!1
                                                              ENDIF=a2") (("1" (CASE-REPLACE "S3(v0z!1, a2) = -v0z!1^2/(2*a2)") (("1" (BDDSIMP -5) (("1" (EXPAND "vsLevelOutTimes1") (("1" (REPLACE -4 :DIR RL) (("1" (SIMPLIFY 1) (("1" (NAME "ald2" "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1 THEN 1
                                                                                                ELSE -1
                                                                                                ENDIF") (("1" (REPLACE -1) (("1" (HIDE -5) (("1" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                                                                         ELSE climbRate!1
                                                                                         ENDIF) = climbRate!1") (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a2)) - s0z!1 + targetAlt!1) >=
                                                                                   abs(S1(0,
                                                                                          IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                          ELSE acceldown!1
                                                                                          ENDIF)
                                                                                         (ald2 * climbRate!1 /
                                                                                           IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                           ELSE acceldown!1
                                                                                           ENDIF)
                                                                                        +
                                                                                        S3(V1(0,
                                                                                              IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                              ELSE acceldown!1
                                                                                              ENDIF)
                                                                                             (ald2 * climbRate!1 /
                                                                                               IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                               ELSE acceldown!1
                                                                                               ENDIF),
                                                                                           IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1
                                                                                             THEN acceldown!1
                                                                                           ELSE accelup!1
                                                                                           ENDIF))
                                                                                 THEN IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                      ELSE acceldown!1
                                                                                      ENDIF
                                                                               ELSE IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                    ELSE acceldown!1
                                                                                    ENDIF
                                                                               ENDIF = IF ald2*climbRate!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (HIDE -1) (("1" (HIDE -1) (("1" (CASE "targetAlt!1 - s0z!1 >= 0") (("1" (CASE-REPLACE "a2=acceldown!1") (("1" (GRIND) (("1" (MOVE-TERMS -3 R 2) (("1" (CROSS-MULT -8) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE-REPLACE "a2 = accelup!1") (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE-ALL-BUT 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a2") (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (REVEAL -1) (("2" (REVEAL -1) (("2" (REVEAL -2) (("2" (REPLACE -2) (("2" (CASE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                                                   IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                                                   OR v0z!1 = 0) = TRUE") (("1" (REPLACE -1) (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                                                          abs(S3(v0z!1,
                                                                 IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                                                 ELSE accelup!1
                                                                 ENDIF))) = FALSE") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (HIDE (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (NAME "a1" "IF targetAlt!1-s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a1), 0, climbRate!1, targetAlt!1, accelup!1, acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                     acceldown!1, alterCR?!1) = (-v0z!1/a1+nt`1, -v0z!1/a1+nt`2, -v0z!1/a1+nt`3, nt`4, nt`5, nt`6)") (("1" (INST -4 "s0z!1 + S3(v0z!1, a1)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (CASE-REPLACE "(abs(targetAlt!1 - (s0z!1 + S3(v0z!1, a1))) >= abs(S3(0, a2)))=TRUE") (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (CASE-REPLACE "a1=nt`5") (("1" (REPLACE -12) (("1" (SIMPLIFY 3) (("1" (REPLACE -3 :DIR RL) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-2 -7 -10 -11 4)) (("2" (REPLACE -6 :DIR RL) (("2" (HIDE -6) (("2" (HIDE -2) (("2" (EXPAND "vsLevelOutTimes1") (("2" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                                                 ELSE climbRate!1
                                                                 ENDIF)=climbRate!1") (("1" (CASE-REPLACE "S3(v0z!1, a1) = -v0z!1^2/(2*a1)") (("1" (CASE-REPLACE "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1
                                                                                    THEN 1
                                                                                  ELSE -1
                                                                                  ENDIF = altDir") (("1" (CASE-REPLACE "(targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1) = (targetAlt!1 >= s0z!1) ") (("1" (NAME "AY1" "IF altDir * climbRate!1 >= 0 THEN accelup!1
                                                                                                         ELSE acceldown!1
                                                                                                         ENDIF") (("1" (REPLACE -1) (("1" (REPLACE -7) (("1" (REPLACE -7 :DIR RL) (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a1)) - s0z!1 + targetAlt!1) >=
                                                                                   abs(S1(0, AY1)(altDir * climbRate!1 / AY1) +
                                                                                        S3(V1(0, AY1)(altDir * climbRate!1 / AY1), a2))
                                                                                 THEN AY1
                                                                               ELSE AY1
                                                                               ENDIF = AY1") (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -4 :DIR RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "AY1") (("3" (LIFT-IF) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "targetAlt!1>=s0z!1") (("1" (CASE-REPLACE "a1 = accelup!1") (("1" (CASE "0>=-v0z!1^2/(2*accelup!1)") (("1" (ADD-FORMULAS -1 -3) NIL NIL) ("2" (CROSS-MULT 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "a1=acceldown!1") (("1" (FLIP-INEQ 1) (("1" (CASE "0<= -v0z!1^2/(2*acceldown!1)") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "altDir") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "abs") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 4 -4)) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "( IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                              IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                              OR v0z!1 = 0)=FALSE") (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Velocity_after_level") (("2" (HIDE (-2 2)) (("2" (INST? -1) (("2" (INST -1 "t!1") (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -4 :DIR RL) (("2" (PROP) (("2" (EXPAND "vsLevelOut_velCalc") (("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "times_increase") (("2" (INST?) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -6 :DIR RL) (("2" (FLATTEN) (("2" (EXPAND "split_fun3") (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOut_posCalc") (("4" (REPLACE -8 :DIR RL) (("4" (EXPAND "split_fun3") (("4" (LIFT-IF 4) (("4" (PROP) (("4" (HIDE-ALL-BUT (-1 2)) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "vsLevelOutTimes") (("3" (EXPAND "vsLevelOutTimes1") (("3" (GROUND) (("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -3) (("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "vsLevelOutTimes") (("4" (EXPAND "vsLevelOutTimes1") (("4" (GROUND) (("4" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (NAME "cr" "altDir * (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (REPLACE -1) (("2" (NAME "a1" "IF cr >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (REPLACE -1) (("2" (NAME "root" "minpos(quadRoots(a1 / 2 - a1 ^ 2 / (2 * a2),
                                                         v!1 - a1 / a2 * v!1,
                                                         -v!1 ^ 2 / (2 * a2) - ta!1 + s!1))") (("1" (REPLACE -1) (("1" (LIFT-IF -6) (("1" (SPLIT -6) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (SIMPLIFY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "tee3") (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "a1=a2") (("1" (CASE-REPLACE "S1(v!1, a2)((cr - v!1) / a2) +
                                          S3(V1(v!1, a2)((cr - v!1) / a2), a2) = S3(v!1, a2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "V1") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1 / 2 - a1 ^ 2 / (2 * a2)/=0") (("1" (NAME "A" "a1 / 2 - a1 ^ 2 / (2 * a2)") (("1" (NAME "B" "v!1 - a1 / a2 * v!1") (("1" (NAME "C" "-v!1 ^ 2 / (2 * a2) - ta!1 + s!1") (("1" (CASE "A*C<=0") (("1" (CASE "discr(A,B,C)>=0") (("1" (NAME "sgna" "IF A>=0 THEN 1 ELSE -1 ENDIF") (("1" (CASE-REPLACE "root = root(A, B, C, sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 3) (("1" (HIDE-ALL-BUT (-3 1 3 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root(A,B,C,sgna)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "sgna") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "root = root(A, B, C, -sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 4) (("1" (HIDE-ALL-BUT (-3 2 4 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "-sgna") (("1" (REVEAL -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgna") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "root_ge_0") (("2" (INST -1 "A" "B" "C" "sgna") (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (HIDE (4 5 6 -8 -10 -11 -12 -13 -14 -15 -16)) (("1" (EXPAND "minpos") (("1" (CASE "quadRoots(A,B,C) = (root(A,B,C,1), root(A,B,C,-1))") (("1" (REPLACE -1) (("1" (SIMPLIFY -9) (("1" (LIFT-IF -9) (("1" (SPLIT -9) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "max") (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT-INEQ -5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "max") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY -1) (("2" (COPY -4) (("2" (EXPAND "quadRoots") (("2" (EXPAND "root") (("2" (EXPAND "discr") (("2" (CASE-REPLACE "B^2 = sq(B)") (("1" (CASE-REPLACE "(A /= 0 AND sq(B) - 4 * (A * C) >= 0)=TRUE") (("1" (HIDE-ALL-BUT (-2 1 5)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "sgna = sign(A)") (("1" (MERGE-FNUMS (-4 -1)) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "sign") (("2" (EXPAND "sgna") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "sgna") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "discr") (("2" (LEMMA "sq_pos") (("2" (INST -1 "B") (("2" (CASE "-4*(A*C)>=0") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S3(v!1, a2) = -v!1^2/(2*a2)") (("1" (CASE "ta!1>=s!1") (("1" (CASE "a1>=0 AND a2<=0 AND ta!1-s!1>=0 AND -v!1^2/(2*a2)>=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (CASE "A>=0") (("1" (CASE "-C>=0") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -15 1)) (("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -5) (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (LIFT-IF -1) (("3" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "C") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (FLATTEN) (("2" (DIV-BY -2 "2") (("2" (SIMPLIFY -2) (("2" (MULT-INEQ -1 -2) (("2" (EXPAND "A") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -10 -14 1 3)) (("2" (GRIND) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (EXPAND "a1") (("1" (HIDE (4 5 -8 -7)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE (4 5 -8 -7)) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (EXPAND "a2") (("4" (HIDE (4 5 -8 -7)) (("4" (CROSS-MULT 1) (("4" (LEMMA "sq_pos") (("4" (INST -1 "v!1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1<=0 AND a2>=0 AND ta!1-s!1<0 and -v!1^2/(2*a2)<=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (HIDE (-8 -9 4 5)) (("1" (CASE "C>=0") (("1" (CASE "-A>=0") (("1" (MULT-INEQ -1 -2) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (DIV-BY -3 "2") (("2" (SIMPLIFY -3) (("2" (CASE "-a1/2>=0") (("1" (MULT-INEQ -1 -3) (("1" (EXPAND "A") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "C") (("2" (HIDE-ALL-BUT (-4 -5 -10 -13 -14 1 2 5)) (("2" (EXPAND "abs") (("2" (LIFT-IF -4) (("2" (LIFT-IF -4) (("2" (LIFT-IF -4) (("2" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT-INEQ -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -9 -13 1 2 4)) (("2" (GRIND) (("2" (EXPAND "a1") (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 3 5 6)) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (CROSS-MULT 1) (("4" (EXPAND "a2") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) (("2" (CASE "a1/2/=0") (("1" (CASE "(1-a1/a2)/=0") (("1" (CASE "(1-a1/a2)*a1/2/=0") (("1" (GRIND) NIL NIL) ("2" (PROP) (("2" (CANCEL-BY -1 "a1/2") NIL NIL)) NIL)) NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE -9 1) (("3" (HIDE -6) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (REPLACE -4) (("4" (HIDE-ALL-BUT -7) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REPLACE -3) (("5" (HIDE-ALL-BUT -6) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Position_after_level-3| |nil| 3614691314 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (FLATTEN) (("" (CASE "FORALL (s,v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, acr:bool):
                             LET sgnv = IF v>=0 THEN 1 ELSE -1 ENDIF,
                             altDir = IF ta>=s THEN 1 ELSE -1 ENDIF,
                             a2 = IF ta>=s THEN ad ELSE au ENDIF,
                             lot = vsLevelOutTimes1(s, v, cr, ta, au, ad, acr)
                             IN
                              (sgnv = altDir OR v=0) AND abs(ta-s)>= abs( S3(v, a2)) IMPLIES
                             s+S1(v, lot`5)(lot`1) + V1(v, lot`5)(lot`1)*(lot`2-lot`1) +S1(V1(v, lot`5)(lot`1), lot`6)(lot`3-lot`2) = ta") (("1" (CASE-REPLACE "vsLevelOut_posCalc(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                          acceldown!1, alterCR?!1)
                                         (t!1) =
                 s0z!1+S1(v0z!1, vsLOT`5)(vsLOT`1) + V1(v0z!1, vsLOT`5)(vsLOT`1)*(vsLOT`2-vsLOT`1) +S1(V1(v0z!1, vsLOT`5)(vsLOT`1), vsLOT`6)(vsLOT`3-vsLOT`2)") (("1" (HIDE -1) (("1" (CASE "((IF v0z!1>=0 THEN 1 ELSE -1 ENDIF) = IF targetAlt!1>=s0z!1 THEN 1 ELSE -1 ENDIF) OR v0z!1=0") (("1" (CASE "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, IF targetAlt!1>=s0z!1 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                    acceldown!1, alterCR?!1) = vsLevelOutTimes1(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                                    acceldown!1, alterCR?!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST? -3) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -3 :DIR RL) (("1" (REPLACE -2) (("1" (REPLACE -9 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 -5 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                              IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                              OR v0z!1 = 0) = TRUE") (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                                                    abs(S3(v0z!1,
                                                           IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                                           ELSE accelup!1
                                                           ENDIF)))=TRUE") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (CASE-REPLACE "(targetAlt!1 >= s0z!1) =  (targetAlt!1 - s0z!1>=0)") (("1" (IFF 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (IFF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "a2" "IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a2),0, climbRate!1, targetAlt!1, accelup!1,
                                                                    acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                           acceldown!1, alterCR?!1) =  ( -v0z!1/a2+nt`1, -v0z!1/a2+nt`2, -v0z!1/a2+nt`3, nt`4, nt`5, nt`6)") (("1" (REPLACE -7) (("1" (SIMPLIFY 2) (("1" (EXPAND "S1" 2) (("1" (SIMPLIFY 2) (("1" (EXPAND "V1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "a2=nt`5") (("1" (SIMPLIFY 2) (("1" (EXPAND "^" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (SIMPLIFY 2) (("1" (INST -6 "s0z!1+S3(v0z!1, a2)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (EXPAND "S3" -1) (("1" (EXPAND "S1" -1) (("1" (EXPAND "^" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (CASE-REPLACE "(a2_1 / 2) * (-0 / a2_1 * (-0 / a2_1))=0") (("1" (CASE-REPLACE "(abs(-1 * (-v0z!1 / a2 * v0z!1) -
                                                                       -v0z!1 / a2 * (-v0z!1 / a2) * (a2 / 2)
                                                                       - s0z!1
                                                                       + targetAlt!1)
                                                                   >= abs(0))=TRUE") (("1" (REPLACE -8 :DIR RL) (("1" (REPLACE -4) (("1" (REPLACE -10) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "V1" 2) (("1" (REPLACE -8 :DIR RL) (("1" (HIDE-ALL-BUT 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "a2_1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 -7 3)) (("2" (CASE-REPLACE "IF targetAlt!1 >= s0z!1 THEN acceldown!1
                                                              ELSE accelup!1
                                                              ENDIF=a2") (("1" (CASE-REPLACE "S3(v0z!1, a2) = -v0z!1^2/(2*a2)") (("1" (BDDSIMP -5) (("1" (EXPAND "vsLevelOutTimes1") (("1" (REPLACE -4 :DIR RL) (("1" (SIMPLIFY 1) (("1" (NAME "ald2" "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1 THEN 1
                                                                                                ELSE -1
                                                                                                ENDIF") (("1" (REPLACE -1) (("1" (HIDE -5) (("1" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                                                                         ELSE climbRate!1
                                                                                         ENDIF) = climbRate!1") (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a2)) - s0z!1 + targetAlt!1) >=
                                                                                   abs(S1(0,
                                                                                          IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                          ELSE acceldown!1
                                                                                          ENDIF)
                                                                                         (ald2 * climbRate!1 /
                                                                                           IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                           ELSE acceldown!1
                                                                                           ENDIF)
                                                                                        +
                                                                                        S3(V1(0,
                                                                                              IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                              ELSE acceldown!1
                                                                                              ENDIF)
                                                                                             (ald2 * climbRate!1 /
                                                                                               IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                               ELSE acceldown!1
                                                                                               ENDIF),
                                                                                           IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1
                                                                                             THEN acceldown!1
                                                                                           ELSE accelup!1
                                                                                           ENDIF))
                                                                                 THEN IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                      ELSE acceldown!1
                                                                                      ENDIF
                                                                               ELSE IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                                                                    ELSE acceldown!1
                                                                                    ENDIF
                                                                               ENDIF = IF ald2*climbRate!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (HIDE -1) (("1" (HIDE -1) (("1" (CASE "targetAlt!1 - s0z!1 >= 0") (("1" (CASE-REPLACE "a2=acceldown!1") (("1" (GRIND) (("1" (MOVE-TERMS -3 R 2) (("1" (CROSS-MULT -8) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE-REPLACE "a2 = accelup!1") (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE-ALL-BUT 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a2") (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (REVEAL -1) (("2" (REVEAL -1) (("2" (REVEAL -2) (("2" (REPLACE -2) (("2" (CASE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                                                   IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                                                   OR v0z!1 = 0) = TRUE") (("1" (REPLACE -1) (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                                                          abs(S3(v0z!1,
                                                                 IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                                                 ELSE accelup!1
                                                                 ENDIF))) = FALSE") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (HIDE (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (NAME "a1" "IF targetAlt!1-s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a1), 0, climbRate!1, targetAlt!1, accelup!1, acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                                     acceldown!1, alterCR?!1) = (-v0z!1/a1+nt`1, -v0z!1/a1+nt`2, -v0z!1/a1+nt`3, nt`4, nt`5, nt`6)") (("1" (INST -4 "s0z!1 + S3(v0z!1, a1)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (CASE-REPLACE "(abs(targetAlt!1 - (s0z!1 + S3(v0z!1, a1))) >= abs(S3(0, a2)))=TRUE") (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (CASE-REPLACE "a1=nt`5") (("1" (REPLACE -12) (("1" (SIMPLIFY 3) (("1" (REPLACE -3 :DIR RL) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-2 -7 -10 -11 4)) (("2" (REPLACE -6 :DIR RL) (("2" (HIDE -6) (("2" (HIDE -2) (("2" (EXPAND "vsLevelOutTimes1") (("2" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                                                 ELSE climbRate!1
                                                                 ENDIF)=climbRate!1") (("1" (CASE-REPLACE "S3(v0z!1, a1) = -v0z!1^2/(2*a1)") (("1" (CASE-REPLACE "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1
                                                                                    THEN 1
                                                                                  ELSE -1
                                                                                  ENDIF = altDir") (("1" (CASE-REPLACE "(targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1) = (targetAlt!1 >= s0z!1) ") (("1" (NAME "AY1" "IF altDir * climbRate!1 >= 0 THEN accelup!1
                                                                                                         ELSE acceldown!1
                                                                                                         ENDIF") (("1" (REPLACE -1) (("1" (REPLACE -7) (("1" (REPLACE -7 :DIR RL) (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a1)) - s0z!1 + targetAlt!1) >=
                                                                                   abs(S1(0, AY1)(altDir * climbRate!1 / AY1) +
                                                                                        S3(V1(0, AY1)(altDir * climbRate!1 / AY1), a2))
                                                                                 THEN AY1
                                                                               ELSE AY1
                                                                               ENDIF = AY1") (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -4 :DIR RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "AY1") (("3" (LIFT-IF) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "targetAlt!1>=s0z!1") (("1" (CASE-REPLACE "a1 = accelup!1") (("1" (CASE "0>=-v0z!1^2/(2*accelup!1)") (("1" (ADD-FORMULAS -1 -3) NIL NIL) ("2" (CROSS-MULT 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "a1=acceldown!1") (("1" (FLIP-INEQ 1) (("1" (CASE "0<= -v0z!1^2/(2*acceldown!1)") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "altDir") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "abs") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 4 -4)) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "( IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                                              IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                                              OR v0z!1 = 0)=FALSE") (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Velocity_after_level") (("2" (HIDE (-2 2)) (("2" (INST? -1) (("2" (INST -1 "t!1") (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -4 :DIR RL) (("2" (PROP) (("2" (EXPAND "vsLevelOut_velCalc") (("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "times_increase") (("2" (INST?) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -6 :DIR RL) (("2" (FLATTEN) (("2" (EXPAND "split_fun3") (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOut_posCalc") (("4" (REPLACE -8 :DIR RL) (("4" (EXPAND "split_fun3") (("4" (LIFT-IF 4) (("4" (PROP) (("4" (HIDE-ALL-BUT (-1 2)) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "vsLevelOutTimes") (("3" (EXPAND "vsLevelOutTimes1") (("3" (GROUND) (("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -3) (("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "vsLevelOutTimes") (("4" (EXPAND "vsLevelOutTimes1") (("4" (GROUND) (("4" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (NAME "cr" "altDir * (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (REPLACE -1) (("2" (NAME "a1" "IF cr >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (REPLACE -1) (("2" (NAME "root" "minpos(quadRoots(a1 / 2 - a1 ^ 2 / (2 * a2),
                                                         v!1 - a1 / a2 * v!1,
                                                         -v!1 ^ 2 / (2 * a2) - ta!1 + s!1))") (("1" (REPLACE -1) (("1" (LIFT-IF -6) (("1" (SPLIT -6) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (SIMPLIFY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "tee3") (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "a1=a2") (("1" (CASE-REPLACE "S1(v!1, a2)((cr - v!1) / a2) +
                                          S3(V1(v!1, a2)((cr - v!1) / a2), a2) = S3(v!1, a2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "V1") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1 / 2 - a1 ^ 2 / (2 * a2)/=0") (("1" (NAME "A" "a1 / 2 - a1 ^ 2 / (2 * a2)") (("1" (NAME "B" "v!1 - a1 / a2 * v!1") (("1" (NAME "C" "-v!1 ^ 2 / (2 * a2) - ta!1 + s!1") (("1" (CASE "A*C<=0") (("1" (CASE "discr(A,B,C)>=0") (("1" (NAME "sgna" "IF A>=0 THEN 1 ELSE -1 ENDIF") (("1" (CASE-REPLACE "root = root(A, B, C, sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 3) (("1" (HIDE-ALL-BUT (-3 1 3 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root(A,B,C,sgna)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "sgna") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "root = root(A, B, C, -sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 4) (("1" (HIDE-ALL-BUT (-3 2 4 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "-sgna") (("1" (REVEAL -3) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "sgna") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "root_ge_0") (("2" (INST -1 "A" "B" "C" "sgna") (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (HIDE (4 5 6 -8 -10 -11 -12 -13 -14 -15 -16)) (("1" (EXPAND "minpos") (("1" (CASE "quadRoots(A,B,C) = (root(A,B,C,1), root(A,B,C,-1))") (("1" (REPLACE -1) (("1" (SIMPLIFY -9) (("1" (LIFT-IF -9) (("1" (SPLIT -9) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "max") (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT-INEQ -5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "max") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (COPY -1) (("2" (COPY -4) (("2" (EXPAND "quadRoots") (("2" (EXPAND "root") (("2" (EXPAND "discr") (("2" (CASE-REPLACE "B^2 = sq(B)") (("1" (CASE-REPLACE "(A /= 0 AND sq(B) - 4 * (A * C) >= 0)=TRUE") (("1" (HIDE-ALL-BUT (-2 1 5)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "sgna = sign(A)") (("1" (MERGE-FNUMS (-4 -1)) (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "sign") (("2" (EXPAND "sgna") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "sgna") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "discr") (("2" (LEMMA "sq_pos") (("2" (INST -1 "B") (("2" (CASE "-4*(A*C)>=0") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S3(v!1, a2) = -v!1^2/(2*a2)") (("1" (CASE "ta!1>=s!1") (("1" (CASE "a1>=0 AND a2<=0 AND ta!1-s!1>=0 AND -v!1^2/(2*a2)>=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (CASE "A>=0") (("1" (CASE "-C>=0") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -15 1)) (("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -5) (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (LIFT-IF -1) (("3" (PROP) (("1" (GROUND) NIL NIL) ("2" (EXPAND "C") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (FLATTEN) (("2" (DIV-BY -2 "2") (("2" (SIMPLIFY -2) (("2" (MULT-INEQ -1 -2) (("2" (EXPAND "A") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -10 -14 1 3)) (("2" (GRIND) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (EXPAND "a1") (("1" (HIDE (4 5 -8 -7)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE (4 5 -8 -7)) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (EXPAND "a2") (("4" (HIDE (4 5 -8 -7)) (("4" (CROSS-MULT 1) (("4" (LEMMA "sq_pos") (("4" (INST -1 "v!1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1<=0 AND a2>=0 AND ta!1-s!1<0 and -v!1^2/(2*a2)<=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (HIDE (-8 -9 4 5)) (("1" (CASE "C>=0") (("1" (CASE "-A>=0") (("1" (MULT-INEQ -1 -2) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (DIV-BY -3 "2") (("2" (SIMPLIFY -3) (("2" (CASE "-a1/2>=0") (("1" (MULT-INEQ -1 -3) (("1" (EXPAND "A") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "C") (("2" (HIDE-ALL-BUT (-4 -5 -10 -13 -14 1 2 5)) (("2" (EXPAND "abs") (("2" (LIFT-IF -4) (("2" (LIFT-IF -4) (("2" (LIFT-IF -4) (("2" (PROP) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT-INEQ -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -9 -13 1 2 4)) (("2" (GRIND) (("2" (EXPAND "a1") (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 3 5 6)) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (CROSS-MULT 1) (("4" (EXPAND "a2") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) (("2" (CASE "a1/2/=0") (("1" (CASE "(1-a1/a2)/=0") (("1" (CASE "(1-a1/a2)*a1/2/=0") (("1" (GRIND) NIL NIL) ("2" (PROP) (("2" (CANCEL-BY -1 "a1/2") NIL NIL)) NIL)) NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE -9 1) (("3" (REPLACE -6) (("3" (HIDE -6) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (REPLACE -6) (("4" (HIDE-ALL-BUT -7) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REPLACE -3) (("5" (HIDE-ALL-BUT -6) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|Position_after_level-2| |nil| 3614517072 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (FLATTEN) (("" (CASE "FORALL (s,v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, acr:bool):
               LET sgnv = IF v>=0 THEN 1 ELSE -1 ENDIF,
               altDir = IF ta>=s THEN 1 ELSE -1 ENDIF,
               a2 = IF ta>=s THEN ad ELSE au ENDIF,
               lot = vsLevelOutTimes1(s, v, cr, ta, au, ad, acr)
               IN
                (sgnv = altDir OR v=0) AND abs(ta-s)>= abs( S3(v, a2)) IMPLIES
               s+S1(v, lot`5)(lot`1) + V1(v, lot`5)(lot`1)*(lot`2-lot`1) +S1(V1(v, lot`5)(lot`1), lot`6)(lot`3-lot`2) = ta") (("1" (CASE-REPLACE "vsLevelOut_posCalc(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                  acceldown!1, alterCR?!1)
                                 (t!1) =
         s0z!1+S1(v0z!1, vsLOT`5)(vsLOT`1) + V1(v0z!1, vsLOT`5)(vsLOT`1)*(vsLOT`2-vsLOT`1) +S1(V1(v0z!1, vsLOT`5)(vsLOT`1), vsLOT`6)(vsLOT`3-vsLOT`2)") (("1" (HIDE -1) (("1" (CASE "((IF v0z!1>=0 THEN 1 ELSE -1 ENDIF) = IF targetAlt!1>=s0z!1 THEN 1 ELSE -1 ENDIF) OR v0z!1=0") (("1" (CASE "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, IF targetAlt!1>=s0z!1 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (CASE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                      acceldown!1, alterCR?!1) = vsLevelOutTimes1(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                      acceldown!1, alterCR?!1)") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST? -3) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (REPLACE -2 :DIR RL) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (REPLACE -3 :DIR RL) (("1" (REPLACE -2) (("1" (REPLACE -9 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 -4 -5 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                      IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                      OR v0z!1 = 0) = TRUE") (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                        abs(S3(v0z!1,
                               IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                               ELSE accelup!1
                               ENDIF)))=TRUE") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (CASE-REPLACE "(targetAlt!1 >= s0z!1) =  (targetAlt!1 - s0z!1>=0)") (("1" (IFF 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (IFF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "a2" "IF targetAlt!1-s0z!1>=0 THEN acceldown!1 ELSE accelup!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a2),0, climbRate!1, targetAlt!1, accelup!1,
                                      acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                   acceldown!1, alterCR?!1) =  ( -v0z!1/a2+nt`1, -v0z!1/a2+nt`2, -v0z!1/a2+nt`3, nt`4, nt`5, nt`6)") (("1" (REPLACE -7) (("1" (SIMPLIFY 2) (("1" (EXPAND "S1" 2) (("1" (SIMPLIFY 2) (("1" (EXPAND "V1" 2) (("1" (SIMPLIFY 2) (("1" (CASE-REPLACE "a2=nt`5") (("1" (SIMPLIFY 2) (("1" (EXPAND "^" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (EXPAND "expt" 2) (("1" (SIMPLIFY 2) (("1" (INST -6 "s0z!1+S3(v0z!1, a2)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (EXPAND "S3" -1) (("1" (EXPAND "S1" -1) (("1" (EXPAND "^" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (CASE-REPLACE "(a2_1 / 2) * (-0 / a2_1 * (-0 / a2_1))=0") (("1" (CASE-REPLACE "(abs(-1 * (-v0z!1 / a2 * v0z!1) -
                               -v0z!1 / a2 * (-v0z!1 / a2) * (a2 / 2)
                               - s0z!1
                               + targetAlt!1)
                           >= abs(0))=TRUE") (("1" (REPLACE -8 :DIR RL) (("1" (REPLACE -4) (("1" (REPLACE -10) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "V1" 2) (("1" (REPLACE -8 :DIR RL) (("1" (HIDE-ALL-BUT 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "a2_1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -5 -6 -7 3)) (("2" (CASE-REPLACE "IF targetAlt!1 >= s0z!1 THEN acceldown!1
                              ELSE accelup!1
                              ENDIF=a2") (("1" (CASE-REPLACE "S3(v0z!1, a2) = -v0z!1^2/(2*a2)") (("1" (BDDSIMP -5) (("1" (EXPAND "vsLevelOutTimes1") (("1" (REPLACE -4 :DIR RL) (("1" (SIMPLIFY 1) (("1" (NAME "ald2" "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1 THEN 1
                                          ELSE -1
                                          ENDIF") (("1" (REPLACE -1) (("1" (HIDE -5) (("1" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                             ELSE climbRate!1
                                             ENDIF) = climbRate!1") (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a2)) - s0z!1 + targetAlt!1) >=
                                   abs(S1(0,
                                          IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                          ELSE acceldown!1
                                          ENDIF)
                                         (ald2 * climbRate!1 /
                                           IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                           ELSE acceldown!1
                                           ENDIF)
                                        +
                                        S3(V1(0,
                                              IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                              ELSE acceldown!1
                                              ENDIF)
                                             (ald2 * climbRate!1 /
                                               IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                               ELSE acceldown!1
                                               ENDIF),
                                           IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a2) + s0z!1
                                             THEN acceldown!1
                                           ELSE accelup!1
                                           ENDIF))
                                 THEN IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                      ELSE acceldown!1
                                      ENDIF
                               ELSE IF ald2 * climbRate!1 >= 0 THEN accelup!1
                                    ELSE acceldown!1
                                    ENDIF
                               ENDIF = IF ald2*climbRate!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("1" (HIDE -1) (("1" (HIDE -1) (("1" (CASE "targetAlt!1 - s0z!1 >= 0") (("1" (CASE-REPLACE "a2=acceldown!1") (("1" (GRIND) (("1" (MOVE-TERMS -3 R 2) (("1" (CROSS-MULT -8) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE-REPLACE "a2 = accelup!1") (("1" (GRIND) (("1" (CROSS-MULT 5) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE-ALL-BUT 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a2") (("2" (LIFT-IF 1) (("2" (LIFT-IF 1) (("2" (HIDE-ALL-BUT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 2)) (("2" (EXPAND "vsLevelOutTimes") (("2" (REVEAL -1) (("2" (REVEAL -1) (("2" (REVEAL -2) (("2" (REPLACE -2) (("2" (CASE "(IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                             IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                             OR v0z!1 = 0) = TRUE") (("1" (REPLACE -1) (("1" (CASE-REPLACE "( abs(targetAlt!1 - s0z!1) >=
                          abs(S3(v0z!1,
                                 IF targetAlt!1 - s0z!1 >= 0 THEN acceldown!1
                                 ELSE accelup!1
                                 ENDIF))) = FALSE") (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (HIDE (-1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (NAME "a1" "IF targetAlt!1-s0z!1>=0 THEN accelup!1 ELSE acceldown!1 ENDIF") (("2" (NAME "nt" "vsLevelOutTimes1(s0z!1+S3(v0z!1, a1), 0, climbRate!1, targetAlt!1, accelup!1, acceldown!1, alterCR?!1)") (("1" (CASE-REPLACE "vsLevelOutTimes(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                                 acceldown!1, alterCR?!1) = (-v0z!1/a1+nt`1, -v0z!1/a1+nt`2, -v0z!1/a1+nt`3, nt`4, nt`5, nt`6)") (("1" (INST -4 "s0z!1 + S3(v0z!1, a1)" "0" "climbRate!1" "targetAlt!1" "accelup!1" "acceldown!1" "alterCR?!1") (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (SKOLETIN) (("1" (CASE-REPLACE "(abs(targetAlt!1 - (s0z!1 + S3(v0z!1, a1))) >= abs(S3(0, a2)))=TRUE") (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (CASE-REPLACE "a1=nt`5") (("1" (REPLACE -12) (("1" (SIMPLIFY 3) (("1" (REPLACE -3 :DIR RL) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-2 -7 -10 -11 4)) (("2" (REPLACE -6 :DIR RL) (("2" (HIDE -6) (("2" (HIDE -2) (("2" (EXPAND "vsLevelOutTimes1") (("2" (CASE-REPLACE "(IF alterCR?!1 THEN max(climbRate!1, abs(0))
                                 ELSE climbRate!1
                                 ENDIF)=climbRate!1") (("1" (CASE-REPLACE "S3(v0z!1, a1) = -v0z!1^2/(2*a1)") (("1" (CASE-REPLACE "IF targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1
                                            THEN 1
                                          ELSE -1
                                          ENDIF = altDir") (("1" (CASE-REPLACE "(targetAlt!1 >= -v0z!1 ^ 2 / (2 * a1) + s0z!1) = (targetAlt!1 >= s0z!1) ") (("1" (NAME "AY1" "IF altDir * climbRate!1 >= 0 THEN accelup!1
                                               ELSE acceldown!1
                                               ENDIF") (("1" (REPLACE -1) (("1" (REPLACE -7) (("1" (REPLACE -7 :DIR RL) (("1" (CASE-REPLACE "IF abs(-1 * (-v0z!1 ^ 2 / (2 * a1)) - s0z!1 + targetAlt!1) >=
                                   abs(S1(0, AY1)(altDir * climbRate!1 / AY1) +
                                        S3(V1(0, AY1)(altDir * climbRate!1 / AY1), a2))
                                 THEN AY1
                               ELSE AY1
                               ENDIF = AY1") (("1" (REPLACE -10 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -4 :DIR RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "AY1") (("3" (LIFT-IF) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "targetAlt!1>=s0z!1") (("1" (CASE-REPLACE "a1 = accelup!1") (("1" (CASE "0>=-v0z!1^2/(2*accelup!1)") (("1" (ADD-FORMULAS -1 -3) NIL NIL) ("2" (CROSS-MULT 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "a1=acceldown!1") (("1" (FLIP-INEQ 1) (("1" (CASE "0<= -v0z!1^2/(2*acceldown!1)") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (CROSS-MULT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (LIFT-IF 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "altDir") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "S3") (("2" (EXPAND "S1") (("2" (EXPAND "^") (("2" (EXPAND "abs") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-3 4 -4)) (("2" (HIDE -3) (("2" (EXPAND "vsLevelOutTimes") (("2" (CASE-REPLACE "( IF v0z!1 >= 0 THEN 1 ELSE -1 ENDIF =
                      IF targetAlt!1 - s0z!1 >= 0 THEN 1 ELSE -1 ENDIF
                      OR v0z!1 = 0)=FALSE") (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Velocity_after_level") (("2" (HIDE (-2 2)) (("2" (INST? -1) (("2" (INST -1 "t!1") (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -4 :DIR RL) (("2" (PROP) (("2" (EXPAND "vsLevelOut_velCalc") (("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "times_increase") (("2" (INST?) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -6 :DIR RL) (("2" (FLATTEN) (("2" (EXPAND "split_fun3") (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOut_posCalc") (("4" (REPLACE -8 :DIR RL) (("4" (EXPAND "split_fun3") (("4" (LIFT-IF 4) (("4" (PROP) (("4" (HIDE-ALL-BUT (-1 2)) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "vsLevelOutTimes") (("3" (EXPAND "vsLevelOutTimes1") (("3" (GROUND) (("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -3) (("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "vsLevelOutTimes") (("4" (EXPAND "vsLevelOutTimes1") (("4" (GROUND) (("4" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (REPLACE -5 :DIR RL) (("2" (REPLACE -4 :DIR RL) (("2" (NAME "cr" "altDir * (IF acr!1 THEN max(cr!1, abs(v!1)) ELSE cr!1 ENDIF)") (("2" (REPLACE -1) (("2" (NAME "a1" "IF cr >= v!1 THEN au!1 ELSE ad!1 ENDIF") (("2" (REPLACE -1) (("2" (NAME "root" "minpos(quadRoots(a1 / 2 - a1 ^ 2 / (2 * a2),
                                       v!1 - a1 / a2 * v!1,
                                       -v!1 ^ 2 / (2 * a2) - ta!1 + s!1))") (("1" (REPLACE -1) (("1" (LIFT-IF -6) (("1" (SPLIT -6) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (SIMPLIFY 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "tee3") (("1" (EXPAND "S3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "a1=a2") (("1" (CASE-REPLACE "S1(v!1, a2)((cr - v!1) / a2) +
                      S3(V1(v!1, a2)((cr - v!1) / a2), a2) = S3(v!1, a2)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "V1") (("1" (EXPAND "S3") (("1" (EXPAND "S1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a1 / 2 - a1 ^ 2 / (2 * a2)/=0") (("1" (NAME "A" "a1 / 2 - a1 ^ 2 / (2 * a2)") (("1" (NAME "B" "v!1 - a1 / a2 * v!1") (("1" (NAME "C" "-v!1 ^ 2 / (2 * a2) - ta!1 + s!1") (("1" (CASE "A*C<=0") (("1" (CASE "discr(A,B,C)>=0") (("1" (NAME "sgna" "IF A>=0 THEN 1 ELSE -1 ENDIF") (("1" (CASE-REPLACE "root = root(A, B, C, sgna)") (("1" (REPLACE -9) (("1" (SIMPLIFY 3) (("1" (HIDE-ALL-BUT (-3 1 3 -8)) (("1" (EXPAND "tee3") (("1" (EXPAND "V1") (("1" (EXPAND "S1") (("1" (LEMMA "quad_eq_0") (("1" (INST -1 "A" "B" "C" "root(A,B,C,sgna)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (EXPAND "quadratic") (("1" (EXPAND "C") (("1" (EXPAND "A") (("1" (EXPAND "B") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST 1 "sgna") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "discr") (("2" (LEMMA "sq_pos") (("2" (INST -1 "B") (("2" (CASE "-4*(A*C)>=0") (("1" (ADD-FORMULAS -1 -2) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "A") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE-REPLACE "S3(v!1, a2) = -v!1^2/(2*a2)") (("1" (CASE "ta!1>=s0z!1") (("1" (CASE "a1>=0 AND a2<=0 AND ta!1-s0z!1>=0 AND -v!1^2/(2*a2)>=0") (("1" (CASE "(1-a1/a2)>=0") (("1" (CASE "A>=0") (("1" (CASE "-C>=0") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (MULT-INEQ -1 -2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -15 1)) (("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (LIFT-IF -5) (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (POSTPONE) NIL NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) (("2" (CASE "a1/2/=0") (("1" (CASE "(1-a1/a2)/=0") (("1" (CASE "(1-a1/a2)*a1/2/=0") (("1" (GRIND) NIL NIL) ("2" (PROP) (("2" (CANCEL-BY -1 "a1/2") NIL NIL)) NIL)) NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "a2") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "a1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "a2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE -9 1) (("3" (REPLACE -6) (("3" (HIDE -6) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (REPLACE -6) (("4" (HIDE-ALL-BUT -7) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REPLACE -3) (("5" (HIDE-ALL-BUT -6) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|Position_after_level-1| |nil| 3614352610 ("" (SKOSIMP*) (("" (SKOLETIN) (("" (FLATTEN) (("" (CASE "FORALL (s,v:real, cr:posreal, ta:nnreal, au:posreal, ad:negreal, acr:bool):
LET sgnv = IF v>=0 THEN 1 ELSE -1 ENDIF, 
altDir = IF ta>=0 THEN 1 ELSE -1 ENDIF, 
a2 = IF ta>=s THEN ad ELSE au ENDIF, 
lot = vsLevelOutTimes1(s, v, cr, ta, au, ad, acr)
IN
 (sgnv = altDir OR v=0) AND abs(ta-s)>= abs( S3(v, a2)) IMPLIES 
s+S1(v, lot`5)(lot`1) + V1(v, lot`5)(lot`1)*(lot`2-lot`1) +S1(V1(v, lot`5)(lot`1), lot`6)(lot`3-lot`2) = ta") (("1" (CASE-REPLACE "vsLevelOut_posCalc(s0z!1, v0z!1, climbRate!1, targetAlt!1, accelup!1,
                         acceldown!1, alterCR?!1)
                        (t!1) = 
s0z!1+S1(v0z!1, vsLOT`5)(vsLOT`1) + V1(v0z!1, vsLOT`5)(vsLOT`1)*(vsLOT`2-vsLOT`1) +S1(V1(v0z!1, vsLOT`5)(vsLOT`1), vsLOT`6)(vsLOT`3-vsLOT`2)") (("1" (HIDE -1) (("1" (CASE "(IF v0z!1>=0 THEN 1 ELSE -1 ENDIF) = IF targetAlt!1>=s0z!1 THEN 1 ELSE -1 ENDIF") (("1" (CASE "abs(targetAlt!1 - s0z!1) >= abs(S3(v0z!1, IF targetAlt!1>=s0z!1 THEN acceldown!1 ELSE accelup!1 ENDIF))") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (LEMMA "Velocity_after_level") (("2" (HIDE (-2 2)) (("2" (INST? -1) (("2" (INST -1 "t!1") (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -4 :DIR RL) (("2" (PROP) (("2" (EXPAND "vsLevelOut_velCalc") (("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "times_increase") (("2" (INST?) (("2" (SKOLETIN) (("2" (REPLACE -2) (("2" (REPLACE -6 :DIR RL) (("2" (FLATTEN) (("2" (EXPAND "split_fun3") (("2" (LIFT-IF -5) (("2" (PROP) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (EXPAND "vsLevelOut_posCalc") (("4" (REPLACE -8 :DIR RL) (("4" (EXPAND "split_fun3") (("4" (LIFT-IF 4) (("4" (PROP) (("4" (HIDE-ALL-BUT (-1 2)) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "vsLevelOutTimes") (("3" (EXPAND "vsLevelOutTimes1") (("3" (GROUND) (("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACE -3) (("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "vsLevelOutTimes") (("4" (EXPAND "vsLevelOutTimes1") (("4" (GROUND) (("4" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (SKOSIMP*) (("3" (HIDE -9 1) (("3" (REPLACE -6) (("3" (HIDE -6) (("3" (EXPAND "vsLevelOutTimes1") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (REPLACE -6) (("4" (HIDE-ALL-BUT -7) (("4" (EXPAND "vsLevelOutTimes1") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) (("5" (REPLACE -3) (("5" (HIDE-ALL-BUT -6) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|vsLevelOut_TCC1| 0 (|vsLevelOut_TCC1-1| |nil| 3630430319 ("" (SKEEP*) (("" (REPLACES -1) (("" (EXPAND "vsLevelOutTimes") (("" (LIFT-IF) (("" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "vsLevelOutTimes1") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "vsLevelOutTimes1") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "vsLevelOutTimes1") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "vsLevelOutTimes1") (("3" (LIFT-IF) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|vsLevelOut| SUBTYPE "vsLevelOut.LevelParams`5" "nzreal"))) (|vsLevelOut_TCC2| 0 (|vsLevelOut_TCC2-2| |nil| 3672057089 ("" (SKEEP*) (("" (REPLACES -1) (("" (EXPAND "vsLevelOutTimes") (("" (LIFT-IF) (("" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "vsLevelOutTimes1") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "vsLevelOutTimes1") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "vsLevelOutTimes1") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOutTimes1") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "vsLevelOutTimes1") (("3" (LIFT-IF) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOutTimes1| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|nonneg_real_max| APPLICATION-JUDGEMENT "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|vsLevelOut| SUBTYPE "vsLevelOut.LevelParams`6" "nzreal")) (|vsLevelOut_TCC2-1| |nil| 3630430319 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|vsLevelOut| SUBTYPE "vsLevelOut.LevelParams`6" "nzreal"))) (|vsLevelOut_TCC3| 0 (|vsLevelOut_TCC3-1| |nil| 3630430319 ("" (LEMMA "times_increase") (("" (SKEEP) (("" (INST - "sv0`1`z" "sv0`2`z" "climbRate" "targetAlt" "accelup" "acceldown" "alterCR?") (("" (GROUND) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|vsLevelOut| SUBTYPE "vsLevelOut.LevelParams`1" "nnreal"))) (|vsLevelOut_TCC4| 0 (|vsLevelOut_TCC4-1| |nil| 3630430319 ("" (LEMMA "times_increase") (("" (SKEEP) (("" (INST - "sv0`1`z" "sv0`2`z" "climbRate" "targetAlt" "accelup" "acceldown" "alterCR?") (("" (GROUND) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL)) NIL (|vsLevelOut| SUBTYPE "vsLevelOut.LevelParams`2" "nnreal"))) (|vsLevelOut_TCC5| 0 (|vsLevelOut_TCC5-1| |nil| 3630430319 ("" (SKEEP) (("" (LEMMA "times_increase") (("" (INST - "sv0`1`z" "sv0`2`z" "climbRate" "targetAlt" "accelup" "acceldown" "alterCR?") (("" (GROUND) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|vsLevelOut| SUBTYPE "vsLevelOut.LevelParams`3" "nnreal"))) (|vsLevelOutEquals| 0 (|vsLevelOutEquals-1| |nil| 3630430930 ("" (SKEEP) (("" (LEMMA "times_increase") (("" (INST - "sv0`1`z" "sv0`2`z" "climbRate" "targetAlt" "accelup" "acceldown" "alterCR?") (("" (GROUND) (("" (FLATTEN) (("" (CASE "t<=vsLevelOutTimes(sv0`1`z, sv0`2`z, climbRate, targetAlt, accelup,
                       acceldown, alterCR?)`1") (("1" (EXPAND "vsLevelOut") (("1" (EXPAND "vsLevelOut_velCalc") (("1" (EXPAND "vsLevelOut_posCalc") (("1" (EXPAND "split_fun3") (("1" (ASSERT) (("1" (EXPAND "vsLevelOutCalculation") (("1" (EXPAND "V1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t<=vsLevelOutTimes(sv0`1`z, sv0`2`z, climbRate, targetAlt, accelup,
                       acceldown, alterCR?)`2") (("1" (EXPAND "vsLevelOut") (("1" (EXPAND "vsLevelOut_posCalc") (("1" (EXPAND "vsLevelOut_velCalc") (("1" (EXPAND "split_fun3") (("1" (ASSERT) (("1" (EXPAND "vsLevelOutCalculation") (("1" (EXPAND "const_fun") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "t<=vsLevelOutTimes(sv0`1`z, sv0`2`z, climbRate, targetAlt, accelup,
                       acceldown, alterCR?)`3") (("1" (EXPAND "vsLevelOut_posCalc") (("1" (EXPAND "vsLevelOut") (("1" (EXPAND "vsLevelOut_velCalc") (("1" (EXPAND "split_fun3") (("1" (EXPAND "vsLevelOutCalculation") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vsLevelOut") (("2" (EXPAND "vsLevelOutCalculation") (("2" (ASSERT) (("2" (LEMMA "Velocity_after_level") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "Position_after_level") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|times_increase| FORMULA-DECL NIL |vsLevelOut| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|vsLevelOutTimes| CONST-DECL "[real, real, real, real, real, real]" |vsLevelOut| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|vsLevelOut_velCalc| CONST-DECL "real" |vsLevelOut| NIL) (|split_fun3| CONST-DECL "[T -> real]" |integral_split_fun| |analysis|) (|vsLevelOutCalculation| CONST-DECL "[Vect3, Vect3]" |vsLevelOut| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|vsLevelOut_posCalc| CONST-DECL "real" |vsLevelOut| NIL) (|vsLevelOut| CONST-DECL "[Vect3, Vect3]" |vsLevelOut| NIL) (|Velocity_after_level| FORMULA-DECL NIL |vsLevelOut| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Position_after_level| FORMULA-DECL NIL |vsLevelOut| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|vsLevelOut_vect2| 0 (|vsLevelOut_vect2-1| |nil| 3661165836 ("" (SKEEP*) (("" (SKOLETIN 1) (("" (EXPAND "vsLevelOutCalculation") (("" (LIFT-IF) (("" (GROUND) (("1" (REPLACES -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACES -2) (("3" (GRIND) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (GRIND) NIL NIL)) NIL) ("5" (REPLACES -2) (("5" (GRIND) NIL NIL)) NIL) ("6" (REPLACES -2) (("6" (GRIND) NIL NIL)) NIL) ("7" (REPLACES -2) (("7" (GRIND) NIL NIL)) NIL) ("8" (REPLACES -1) (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "Vector" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|vsLevelOutCalculation| CONST-DECL "[Vect3, Vect3]" |vsLevelOut| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (V1 CONST-DECL "real" |vsLevelOut| NIL) (|linear_pos| CONST-DECL "Vect3" |util| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (S1 CONST-DECL "real" |vsLevelOut| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)))
