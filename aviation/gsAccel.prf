(|gsAccel| (|gsAccel_Vel_prep_TCC1| 0 (|gsAccel_Vel_prep_TCC1-1| |nil| 3616237515 ("" (ASSUMING-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|)) NIL (|gsAccel_Vel_prep| ASSUMING "analysis@integral_def[real].integral_def" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|gsAccel_Vel_prep_TCC2| 0 (|gsAccel_Vel_prep_TCC2-1| |nil| 3616237515 ("" (SKOSIMP*) (("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST 1 "x!1+1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|gsAccel_Vel_prep| ASSUMING "analysis@integral_def[real].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|gsAccel_Vel_prep| 0 (|gsAccel_Vel_prep-2| |nil| 3616237784 ("" (SKEEP) (("" (SKOLETIN) (("" (SPLIT) (("1" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAS`x")) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAS`y")) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAS`z")) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|)) NIL) (|gsAccel_Vel_prep-1| |nil| 3616237587 ("" (SKEEP) (("" (SKOLETIN) (("" (SPLIT) (("1" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAS`x")) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAS`y")) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("3" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAS`z")) (("1" (FLATTEN) NIL NIL) ("2" (GROUND) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|gsAccel_Vel_Int_TCC1| 0 (|gsAccel_Vel_Int_TCC1-1| |nil| 3616236812 ("" (SKEEP) (("" (LEMMA "gsAccel_Vel_prep" ("vo3" "vo3" "a" "a" "t" "t")) (("" (SKOLETIN) (("" (FLATTEN) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|gsAccel_Vel_prep| FORMULA-DECL NIL |gsAccel| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)) NIL (|gsAccel_Vel_Int| SUBTYPE "real_fun_ops[real].const_fun(gsAccel.gsAS`x)" "Integrable_funs[real](0, gsAccel.t)"))) (|gsAccel_Vel_Int_TCC2| 0 (|gsAccel_Vel_Int_TCC2-1| |nil| 3616236812 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "gsAccel_Vel_prep" ("vo3" "vo3" "a" "a" "t" "t")) (("" (SKOLETIN) (("" (FLATTEN) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|gsAccel_Vel_prep| FORMULA-DECL NIL |gsAccel| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)) NIL (|gsAccel_Vel_Int| SUBTYPE "real_fun_ops[real].const_fun(gsAccel.gsAS`y)" "Integrable_funs[real](0, gsAccel.t)"))) (|gsAccel_Vel_Int_TCC3| 0 (|gsAccel_Vel_Int_TCC3-1| |nil| 3616236812 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (LEMMA "gsAccel_Vel_prep" ("vo3" "vo3" "a" "a" "t" "t")) (("" (SKOLETIN) (("" (FLATTEN) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|gsAccel_Vel_prep| FORMULA-DECL NIL |gsAccel| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)) NIL (|gsAccel_Vel_Int| SUBTYPE "real_fun_ops[real].const_fun(gsAccel.gsAS`z)" "Integrable_funs[real](0, gsAccel.t)"))) (|Integral_gsAccel_Vel| 0 (|Integral_gsAccel_Vel-1| |nil| 3616238097 ("" (SKEEP) (("" (CASE "connected?[real]") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "gsAccel_Vel_Int") (("1" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAccelSplit(vo3, a)`x")) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (EXPAND "gsAccel_Vel_Calc") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccel_Vel_Int") (("2" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAccelSplit(vo3, a)`y")) (("2" (FLATTEN) (("2" (REPLACE -2) (("2" (EXPAND "gsAccel_Vel_Calc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccel_Vel_Int") (("3" (LEMMA "Integral_const_fun[real]" ("a" "0" "b" "t" "D" "gsAccelSplit(vo3, a)`z")) (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (EXPAND "gsAccel_Vel_Calc") (("3" (EXPAND "gsAccelSplit") (("3" (EXPAND "Vect3") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun[real]" |pi_def| |trig|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|Integral_const_fun| FORMULA-DECL NIL |integral| |analysis|) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gsAccel_Vel_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|gsAccel_Vel_Int| CONST-DECL "Vect3" |gsAccel| NIL)) SHOSTAK)) (|gsAccel_Pos_prep_TCC1| 0 (|gsAccel_Pos_prep_TCC1-1| |nil| 3804567798 ("" (ASSUMING-TCC) NIL NIL) ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|gsAccel_Pos_prep| ASSUMING "analysis@integral_def[real].integral_def" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|gsAccel_Pos_prep_TCC2| 0 (|gsAccel_Pos_prep_TCC2-2| "" 3804605684 ("" (EXPAND "not_one_element?") (("" (SKEEP) (("" (INST 1 "x + 1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) SHOSTAK (|gsAccel_Pos_prep| ASSUMING "analysis@integral_def[real].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")) (|gsAccel_Pos_prep_TCC2-1| |nil| 3804567798 ("" (ASSUMING-TCC) NIL NIL) NIL NIL (|gsAccel_Pos_prep| ASSUMING "analysis@integral_def[real].integral_def" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|gsAccel_Pos_prep| 0 (|gsAccel_Pos_prep-1| |nil| 3616239824 ("" (SKEEP) (("" (LEMMA "integral_linear[real]") (("1" (EXPAND "gsAccel_Vel_Calc") (("1" (SPLIT) (("1" (INST -1 "0" "t" "gsAccelSplit(vo3, a)`x" "vo3`x") (("1" (SKOLETIN) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "0" "t" "gsAccelSplit(vo3, a)`y" "vo3`y") (("2" (SKOLETIN) (("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "0" "t" "0" "vo3`z") (("3" (SKOLETIN) (("3" (FLATTEN) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Integrable_funs| TYPE-EQ-DECL NIL |integral_def| |analysis|) (|Integral| CONST-DECL "real" |integral_def| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Integrable?| CONST-DECL "bool" |integral_def| |analysis|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|gsAccel_Vel_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|gsAccel_Pos_Int_TCC1| 0 (|gsAccel_Pos_Int_TCC1-1| |nil| 3616240762 ("" (SKEEP) (("" (LEMMA "gsAccel_Pos_prep" ("so3" "vo3" "vo3" "vo3" "a" "a" "t" "t")) (("" (FLATTEN) NIL NIL)) NIL)) NIL) ((|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|gsAccel_Pos_prep| FORMULA-DECL NIL |gsAccel| NIL)) NIL (|gsAccel_Pos_Int| SUBTYPE "LAMBDA (s: reals.real): gsAccel.gsAccel_Vel_Calc(gsAccel.vo3, gsAccel.a, s)`x" "Integrable_funs[real](0, gsAccel.t)"))) (|gsAccel_Pos_Int_TCC2| 0 (|gsAccel_Pos_Int_TCC2-1| |nil| 3616240762 ("" (SKEEP) (("" (LEMMA "gsAccel_Pos_prep" ("so3" "vo3" "vo3" "vo3" "a" "a" "t" "t")) (("" (FLATTEN) NIL NIL)) NIL)) NIL) ((|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|gsAccel_Pos_prep| FORMULA-DECL NIL |gsAccel| NIL)) NIL (|gsAccel_Pos_Int| SUBTYPE "LAMBDA (s: reals.real): gsAccel.gsAccel_Vel_Calc(gsAccel.vo3, gsAccel.a, s)`y" "Integrable_funs[real](0, gsAccel.t)"))) (|gsAccel_Pos_Int_TCC3| 0 (|gsAccel_Pos_Int_TCC3-1| |nil| 3616240762 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "gsAccel_Pos_prep" ("so3" "vo3" "vo3" "vo3" "a" "a" "t" "t")) (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|gsAccel_Pos_prep| FORMULA-DECL NIL |gsAccel| NIL)) NIL (|gsAccel_Pos_Int| SUBTYPE "LAMBDA (s: reals.real): gsAccel.gsAccel_Vel_Calc(gsAccel.vo3, gsAccel.a, s)`z" "Integrable_funs[real](0, gsAccel.t)"))) (|gsAccel_Pos_Calc_TCC1| 0 (|gsAccel_Pos_Calc_TCC1-1| |nil| 3616240762 ("" (SUBTYPE-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|)) NIL (|gsAccel_Pos_Calc| SUBTYPE "2" "{i: integers.int | booleans.OR(gsAccel.t /= 0, reals.>=(i, 0))}"))) (|Integral_gsAccel_Pos| 0 (|Integral_gsAccel_Pos-2| "" 3790107329 ("" (CASE "connected?[real]") (("1" (SKEEP) (("1" (LEMMA "integral_linear[real]") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "gsAccel_Pos_Int") (("1" (EXPAND "gsAccel_Vel_Calc") (("1" (INST -1 "0" "t" "gsAccelSplit(vo3, a)`x" "vo3`x") (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (EXPAND "gsAccel_Pos_Calc") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccel_Pos_Int") (("2" (EXPAND "gsAccel_Vel_Calc") (("2" (INST -1 "0" "t" "gsAccelSplit(vo3, a)`y" "vo3`y") (("2" (FLATTEN) (("2" (REPLACE -2) (("2" (EXPAND "gsAccel_Pos_Calc") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccel_Pos_Int") (("3" (EXPAND "gsAccel_Vel_Calc") (("3" (INST -1 "0" "t" "0" "vo3`z") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (EXPAND "gsAccel_Pos_Calc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gsAccel_Pos_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|gsAccel_Pos_Int| CONST-DECL "Vect3" |gsAccel| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|gsAccel_Vel_Calc| CONST-DECL "Vect3" |gsAccel| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|gsAccelSplit| CONST-DECL "Vect3" |gsAccel| NIL) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vect2| CONST-DECL "{vv: Vect2 | vv`x = x AND vv`y = y}" |util| NIL) (|Hat| CONST-DECL "{v: Vect2 |
   (v = zero IFF w = zero) AND
    (w /= zero IFF (norm(v) = 1 AND v = (1 / norm(w)) * w))}" |util| NIL) (|comp_zero_x| FORMULA-DECL NIL |vectors_2D| |vectors|) (|comp_zero_y| FORMULA-DECL NIL |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|Vect3| CONST-DECL "{vv: Vect3 | vect2(vv) = w AND vv`z = z}" |util| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|integral_linear| FORMULA-DECL NIL |table_of_integrals| |analysis|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) SHOSTAK) (|Integral_gsAccel_Pos-1| |nil| 3616241128 ("" (CASE "connected?[real]") (("1" (SKEEP) (("1" (LEMMA "integral_linear[real]") (("1" (DECOMPOSE-EQUALITY) (("1" (EXPAND "gsAccel_Pos_Int") (("1" (EXPAND "gsAccel_Vel_Calc") (("1" (INST -1 "0" "t" "gsAccelSplit(vo3, a)`x" "vo3`x") (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (EXPAND "gsAccel_Pos_Calc") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "gsAccel_Pos_Int") (("2" (EXPAND "gsAccel_Vel_Calc") (("2" (INST -1 "0" "t" "gsAccelSplit(vo3, a)`y" "vo3`y") (("2" (FLATTEN) (("2" (REPLACE -2) (("2" (EXPAND "gsAccel_Pos_Calc") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "gsAccel_Pos_Int") (("3" (EXPAND "gsAccel_Vel_Calc") (("3" (INST -1 "0" "t" "0" "vo3`z") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (EXPAND "gsAccel_Pos_Calc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|gsAccelToRTA_possible_TCC1| 0 (|gsAccelToRTA_possible_TCC1-1| |nil| 3616430961 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gsAccelToRTA_possible| SUBTYPE "2" "{i: integers.int | booleans.OR(gsAccel.t /= 0, reals.>=(i, 0))}"))) (|gsAccelToRTA_possible_TCC2| 0 (|gsAccelToRTA_possible_TCC2-1| |nil| 3616430961 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|gsAccelToRTA_possible| SUBTYPE "2" "{i: integers.int | booleans.OR(gsAccel.t /= 0, reals.>=(i, 0))}"))) (|gsAccelToRTA_possible_TCC3| 0 (|gsAccelToRTA_possible_TCC3-2| "" 3884831857 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) (("1" (TYPEPRED ("gsIn")) (("1" (DIV-BY -1 "-a") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("t")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|gsAccelToRTA_possible| SUBTYPE "gsAccel.T" "nnreal")) (|gsAccelToRTA_possible_TCC3-1| |nil| 3616433064 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) (("1" (TYPEPRED (GSIN)) (("1" (DIV-BY -1 "-a") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED (T)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|gsAccelToRTA_possible| SUBTYPE "gsAccel.T" "nnreal"))) (|neg_groundspeed| 0 (|neg_groundspeed-2| "" 3884831900 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLIP-INEQ 1) (("1" (TYPEPRED ("gsIn")) (("1" (MULT-BY -2 "t") (("1" (ADD-FORMULAS -1 -2) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "a<0") (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (TYPEPRED ("gsIn")) (("2" (MULT-BY -2 "t") (("2" (ADD-FORMULAS -1 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|neg_groundspeed-1| |nil| 3616430978 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (SPLIT) (("1" (FLIP-INEQ 1) (("1" (TYPEPRED (GSIN)) (("1" (MULT-BY -2 "t") (("1" (ADD-FORMULAS -1 -2) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "a<0") (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLIP-INEQ 1) (("2" (TYPEPRED (GSIN)) (("2" (MULT-BY -2 "t") (("2" (ADD-FORMULAS -1 -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|a| SKOLEM-CONST-DECL "nzreal" |gsAccel| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_neg_gt2| FORMULA-DECL NIL |extra_real_props| NIL) (< CONST-DECL "bool" |reals| NIL)) SHOSTAK)))
