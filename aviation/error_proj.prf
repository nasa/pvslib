(|error_proj| (|tangent_error_basic| 0 (|tangent_error_basic-1| |nil| 3676033462 ("" (SKEEP*) (("" (EXPAND "^") (("" (REWRITE "vect2_scal") (("" (CASE "NOT vect2(qhat) - (1 / norm(qhat)) * vect2(qhat) = (1-1/norm(qhat))*vect2(qhat)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (REWRITE "norm_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "Normalized" |vectors_3D| |vectors|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|vect2| CONST-DECL "Vect2" |vect_3D_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (- CONST-DECL "Vector" |vectors_2D| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|norm_scal| FORMULA-DECL NIL |vectors_2D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|vect2_scal| FORMULA-DECL NIL |vect_3D_2D| |vectors|) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)) (|lift_to_surface_TCC1| 0 (|lift_to_surface_TCC1-1| |nil| 3708858641 ("" (SUBTYPE-TCC) (("" (GRIND) (("" (CASE "NOT sqrt(nzv!1`x * nzv!1`x *
            (R!1 /
              sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                    nzv!1`z * nzv!1`z))
            *
            (R!1 /
              sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                    nzv!1`z * nzv!1`z))
            +
            nzv!1`y * nzv!1`y *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
             *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
            +
            nzv!1`z * nzv!1`z *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
             *
             (R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))) = sqrt(sq(R!1/sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))*(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y + nzv!1`z * nzv!1`z))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT sq(R!1 /
               sqrt(nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y +
                     nzv!1`z * nzv!1`z))
            * (nzv!1`x * nzv!1`x + nzv!1`y * nzv!1`y + nzv!1`z * nzv!1`z) = sq(R!1)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (REWRITE "sqrt_sq") NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "real" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_3D| |vectors|)) NIL (|lift_to_surface| SUBTYPE "vectors_3D.*((number_fields./(error_proj.R, vectors_3D.norm(error_proj.nzv))), error_proj.nzv)" "{vv: vectors_3D.Nz_vect3 | vectors_3D.norm(vv) = error_proj.R}"))) (|norm_lem| 0 (|norm_lem-1| |nil| 3708863209 ("" (SKEEP) (("" (EXPAND "last_two_proj_twist") (("" (ASSERT) (("" (EXPAND "norm") (("" (REWRITE "sq_sqrt") (("" (REWRITE "sq_sqrt") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL)) SHOSTAK)) (|norm_Rc_lt_const| 0 (|norm_Rc_lt_const-2| "" 3884832404 ("" (SKEEP) (("" (EXPAND "on_cord?") (("" (SKEEP) (("" (REPLACE -2 2) (("" (CASE "NOT (qhat1 + t * (qhat2 - qhat1)) = qhat1 + t*qhat2 - t*qhat1") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (# x := R, y := 0, z := 0 #) - (qhat1 + t * qhat2 - t * qhat1) = (# x := R, y := 0, z := 0 #) - qhat1 - t * qhat2 + t * qhat1") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (# x := R, y := 0, z := 0 #) -qhat1 - t * qhat2 + t * qhat1 = (# x := R, y := 0, z := 0 #) -(1 - t) * qhat1 - t * qhat2") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (# x := R, y := 0, z := 0 #) = (1-t)*(# x := R, y := 0, z := 0 #) + t*(# x := R, y := 0, z := 0 #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (1 - t) * (# x := R, y := 0, z := 0 #) +
            t * (# x := R, y := 0, z := 0 #)
            - (1 - t) * qhat1
            - t * qhat2 = (1-t)*((# x := R, y := 0, z := 0 #) - qhat1) + t*((# x := R, y := 0, z := 0 #) - qhat2)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (ASSERT) (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST?) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (ASSERT) (("2" (CASE " abs((1 - t)) * norm(((# x := R, y := 0, z := 0 #) - qhat1)) +
        abs(t) * norm(((# x := R, y := 0, z := 0 #) - qhat2)) <= const1") (("1" (ASSERT) NIL NIL) ("2" (CASE "NOT abs((1 - t)) * const1 + abs(t) * const1 = const1") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1 :DIR RL) (("2" (ASSERT) (("2" (HIDE -1 -3 2 3) (("2" (TYPEPRED "t") (("2" (MULT-BY -3 "abs(1-t)") (("2" (MULT-BY -4 "abs(t)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|norm_Rc_lt_const-1| |nil| 3708962887 ("" (SKEEP) (("" (EXPAND "on_cord?") (("" (SKEEP) (("" (REPLACE -2 2) (("" (CASE "NOT (qhat1 + t * (qhat2 - qhat1)) = qhat1 + t*qhat2 - t*qhat1") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (# x := R, y := 0, z := 0 #) - (qhat1 + t * qhat2 - t * qhat1) = (# x := R, y := 0, z := 0 #) - qhat1 - t * qhat2 + t * qhat1") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (# x := R, y := 0, z := 0 #) -qhat1 - t * qhat2 + t * qhat1 = (# x := R, y := 0, z := 0 #) -(1 - t) * qhat1 - t * qhat2") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (# x := R, y := 0, z := 0 #) = (1-t)*(# x := R, y := 0, z := 0 #) + t*(# x := R, y := 0, z := 0 #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (CASE "NOT (1 - t) * (# x := R, y := 0, z := 0 #) +
            t * (# x := R, y := 0, z := 0 #)
            - (1 - t) * qhat1
            - t * qhat2 = (1-t)*((# x := R, y := 0, z := 0 #) - qhat1) + t*((# x := R, y := 0, z := 0 #) - qhat2)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 2) (("2" (ASSERT) (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST?) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (ASSERT) (("2" (CASE " abs((1 - t)) * norm(((# x := R, y := 0, z := 0 #) - qhat1)) +
        abs(t) * norm(((# x := R, y := 0, z := 0 #) - qhat2)) <= const1") (("1" (ASSERT) NIL NIL) ("2" (CASE "NOT abs((1 - t)) * const1 + abs(t) * const1 = const1") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1 :DIR RL) (("2" (ASSERT) (("2" (HIDE -1 -3 2 3) (("2" (TYPEPRED T) (("2" (MULT-BY -3 "abs(1-t)") (("2" (MULT-BY -4 "abs(t)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|on_cord?| CONST-DECL "bool" |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|norm_add_le| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_scal| FORMULA-DECL NIL |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (* CONST-DECL "real" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|tri_ineq_Rc| 0 (|tri_ineq_Rc-2| "" 3790106449 ("" (SKEEP) (("" (CASE "NOT R = norm((# x := R, y := 0, z := 0 #) - c + c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (NAME-REPLACE "aa" "norm((# x := R, y := 0, z := 0 #) - c)") (("2" (EXPAND "aa") (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST - "(# x := R, y := 0, z := 0 #) - c" "c") (("2" (CASE "NOT norm((# x := R, y := 0, z := 0 #) - c) + norm(c) - norm(c) = norm((# x := R, y := 0, z := 0 #) - c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|aa| SKOLEM-CONST-DECL "nnreal" |error_proj| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|norm_add_le| FORMULA-DECL NIL |vectors_3D| |vectors|) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|)) SHOSTAK) (|tri_ineq_Rc-1| |nil| 3708968145 ("" (SKEEP) (("" (CASE "NOT R = norm((# x := R, y := 0, z := 0 #) - c + c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (NAME-REPLACE "aa" "norm((# x := R, y := 0, z := 0 #) - c)") (("2" (REPLACE -1 2) (("2" (EXPAND "aa") (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST - "(# x := R, y := 0, z := 0 #) - c" "c") (("2" (CASE "NOT norm((# x := R, y := 0, z := 0 #) - c) + norm(c) - norm(c) = norm((# x := R, y := 0, z := 0 #) - c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|error_valid?_TCC1| 0 (|error_valid?_TCC1-1| |nil| 3709282219 ("" (SUBTYPE-TCC) NIL NIL) ((|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|on_cord?| CONST-DECL "bool" |error_proj| NIL) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|error_valid?| SUBTYPE "error_proj.p" "Nz_vect3"))) (|error_valid_simple?_TCC1| 0 (|error_valid_simple?_TCC1-1| |nil| 3709282219 ("" (SUBTYPE-TCC) (("" (MULT-INEQ -5 -5) (("" (MOVE-TERMS -1 L) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|)) NIL (|error_valid_simple?| SUBTYPE "(number_fields.-)(sq.sq(error_proj.R), sq.sq(error_proj.const1))" "nonneg_real"))) (|error_valid_simple?_TCC2| 0 (|error_valid_simple?_TCC2-1| |nil| 3709282219 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)) NIL (|error_valid_simple?| SUBTYPE "2" "{i: integers.int | booleans.OR(error_proj.ERROR /= 0, reals.>=(i, 0))}"))) (|error_valid_simple_def| 0 (|error_valid_simple_def-1| "" 3884832497 ("" (SKEEP) (("" (EXPAND "error_valid?") (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "on_cord?") (("2" (SKEEP) (("2" (EXPAND "error_valid_simple?") (("2" (FLATTEN) (("2" (INST - "c") (("2" (CASE "c`x >= sqrt(sq(R) - sq(const1)) AND c`x <= R AND sqv(c) <= sq(R)") (("1" (REPLACE -1 -12) (("1" (FLATTEN) (("1" (EXPAND "lift_to_surface") (("1" (CASE "NOT (R / norm(c)) * c - c = (R / norm(c) - 1) * c") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "last_two_proj_twist") (("2" (CASE "NOT (# x := ((R / norm(c) - 1) * c)`y,
                                                 y := -((R / norm(c) - 1) * c)`z #) = (R / norm(c) - 1) *  (# x := c`y,
                                                 y := -c`z #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "NOT ERROR ^ 2 = sq(ERROR)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "sphere_to_2D_plane") (("2" (EXPAND "Equator_map") (("2" (EXPAND "vect3_orthonorm_toy") (("2" (EXPAND "vect3_orthonorm_toz") (("2" (EXPAND "vect3_orthog_toy") (("2" (EXPAND "vect3_orthog_toz") (("2" (EXPAND "cross") (("2" (EXPAND "vect3_orthog_toy") (("2" (EXPAND "^" 1) (("2" (ASSERT) (("2" (LEMMA "sqrt_le") (("2" (EXPAND "norm" 1) (("2" (CASE "NOT (# x
                                     := ((# x := 0, y := -R, z := 0 #) * c) *
                                         (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #))))
                                         * (R / sqrt(sqv(c))),
                                   y
                                     := -(((# x := 0, y := 0, z := R * -R #) * c) *
                                           (1 /
                                             sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                           * (R / sqrt(sqv(c)))) #)
                                 -
                                 (# x
                                      := (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #)))) *
                                          ((# x := 0, y := -R, z := 0 #) * c),
                                    y
                                      := -((1 /
                                             sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                            * ((# x := 0, y := 0, z := R * -R #) * c)) #) = -(R / norm(c) - 1) * (# x := c`y, y := -c`z #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (CASE "NOT -R * -R * R * R = sq(R)*sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "sqrt_times") (("2" (INST?) (("2" (REPLACES -1 1) (("2" (REWRITE "sqrt_sq") (("2" (CASE "NOT -((1 / (R * R)) * (c`z * -R * R)) = c`z") (("1" (HIDE-ALL-BUT 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT  -(c`z * (1 / (R * R)) * (R / sqrt(c`x * c`x + c`y * c`y + c`z * c`z))
                                  * -R
                                  * R)
                                - c`z = c`z * (R/sqrt(c`x * c`x + c`y * c`y + c`z * c`z)-1)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT -R * -R = sq(R)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1 1) (("2" (REWRITE "sqrt_sq") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT sqv(-(R / norm(c) - 1) * (# x := c`y, y := -c`z #)) = sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (INST - "sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))" "sq(ERROR)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (HIDE -11 2) (("1" (CASE "NOT c`x = (1-t)*q1`x + t*q2`x") (("1" (HIDE -1 -2 -3 -4 -5 -6 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sqrt_gt_0") (("2" (INST - "sq(R) - sq(const1)") (("1" (GROUND) (("1" (CASE "q1`x>=sqrt(sq(R) - sq(const1))") (("1" (CASE "q2`x>=sqrt(sq(R) - sq(const1))") (("1" (REPLACE -13 1) (("1" (MULT-BY -1 "t") (("1" (MULT-BY -2 "1-t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND :EXCLUDE "sqrt") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 -8 -10 1)) (("2" (ASSERT) (("2" (GRIND :EXCLUDE "sq") (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -5 -8 1)) (("2" (GRIND :EXCLUDE "sq") (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (TYPEPRED "const1") (("2" (TYPEPRED "R") (("2" (GRIND) (("2" (REVEAL -11) (("2" (GRIND) (("2" (LEMMA "sqrt_gt_0") (("2" (INST - "R * R - const1 * const1") (("1" (FLATTEN) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (MULT-INEQ -1 -1) (("2" (MOVE-TERMS -1 L) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-INEQ -1 -1) (("2" (MOVE-TERMS -1 L) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "R") (("2" (TYPEPRED "const1") (("2" (REVEAL -11) (("2" (MULT-INEQ -1 -1) (("2" (MOVE-TERMS -1 L) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -11) (("2" (CASE "NOT FORALL (vvv:Vect3): norm(vvv)=R IMPLIES vvv`x<=R") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (CASE "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (MULT-INEQ 1 1) (("2" (FLIP-INEQ -1) (("2" (CASE "NOT R * R = sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT vvv`x * vvv`x = sq(vvv`x)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (REPLACE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "q1") (("2" (INST - "q2") (("2" (ASSERT) (("2" (REPLACE -10 1) (("2" (HIDE-ALL-BUT (-1 -2 -3 -5 -9 1)) (("2" (TYPEPRED "t") (("2" (GRIND) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (MOVE-TERMS 1 L 1) (("3" (HIDE -11) (("3" (CASE "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (HIDE 2) (("2" (MOVE-TERMS 1 R 2) (("2" (ASSERT) (("2" (EXPAND "sqv") (("2" (EXPAND "*" 1 2) (("2" (CASE "NOT R * R = norm(q1)*norm(q2)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1 1) (("2" (REPLACE -9 1) (("2" (CASE "NOT q1 + t * (q2 - q1) = (1 - t) * q1 + t * q2") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "vectors_3D.dot_sq_norm") (("2" (INST - "((1 - t) * q1 + t * q2)") (("2" (REPLACES -1 1) (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST?) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST - "t" "q2") (("2" (REPLACES -1 -2) (("2" (REPLACE -4 -1) (("2" (REPLACE -6 -1) (("2" (CASE "NOT abs((1 - t)) * R + abs(t) * R = R") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 -2) (("2" (REPLACE -4 1) (("2" (REPLACE -6 1) (("2" (CASE "NOT R * R = sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "sq_le") (("2" (INST - "norm((1 - t) * q1 + t * q2)" "R") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -11 2) (("3" (MULT-INEQ -10 -10) (("3" (MOVE-TERMS -1 L) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|error_valid_simple_def-2| |nil| 3712415234 ("" (SKEEP) (("" (EXPAND "error_valid?") (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "on_cord?") (("2" (SKEEP) (("2" (EXPAND "error_valid_simple?") (("2" (FLATTEN) (("2" (INST - "c") (("2" (CASE "c`x >= sqrt(sq(R) - sq(const1)) AND c`x <= R AND sqv(c) <= sq(R)") (("1" (REPLACE -1 -12) (("1" (FLATTEN) (("1" (EXPAND "lift_to_surface") (("1" (CASE "NOT (R / norm(c)) * c - c = (R / norm(c) - 1) * c") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "last_two_proj_twist") (("2" (CASE "NOT (# x := ((R / norm(c) - 1) * c)`y,
                                                 y := -((R / norm(c) - 1) * c)`z #) = (R / norm(c) - 1) *  (# x := c`y,
                                                 y := -c`z #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "NOT ERROR ^ 2 = sq(ERROR)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "sphere_to_2D_plane") (("2" (EXPAND "Equator_map") (("2" (EXPAND "vect3_orthonorm_toy") (("2" (EXPAND "vect3_orthonorm_toz") (("2" (EXPAND "vect3_orthog_toy") (("2" (EXPAND "vect3_orthog_toz") (("2" (EXPAND "cross") (("2" (EXPAND "vect3_orthog_toy") (("2" (EXPAND "^" 1) (("2" (ASSERT) (("2" (LEMMA "sqrt_le") (("2" (EXPAND "norm" 1) (("2" (CASE "NOT (# x
                                     := ((# x := 0, y := -R, z := 0 #) * c) *
                                         (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #))))
                                         * (R / sqrt(sqv(c))),
                                   y
                                     := -(((# x := 0, y := 0, z := R * -R #) * c) *
                                           (1 /
                                             sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                           * (R / sqrt(sqv(c)))) #)
                                 -
                                 (# x
                                      := (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #)))) *
                                          ((# x := 0, y := -R, z := 0 #) * c),
                                    y
                                      := -((1 /
                                             sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                            * ((# x := 0, y := 0, z := R * -R #) * c)) #) = -(R / norm(c) - 1) * (# x := c`y, y := -c`z #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (CASE "NOT -R * -R * R * R = sq(R)*sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "sqrt_times") (("2" (INST?) (("2" (REPLACES -1 1) (("2" (REWRITE "sqrt_sq") (("2" (CASE "NOT -((1 / (R * R)) * (c`z * -R * R)) = c`z") (("1" (HIDE-ALL-BUT 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT  -(c`z * (1 / (R * R)) * (R / sqrt(c`x * c`x + c`y * c`y + c`z * c`z))
                                  * -R
                                  * R)
                                - c`z = c`z * (R/sqrt(c`x * c`x + c`y * c`y + c`z * c`z)-1)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT -R * -R = sq(R)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1 1) (("2" (REWRITE "sqrt_sq") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT sqv(-(R / norm(c) - 1) * (# x := c`y, y := -c`z #)) = sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (INST - "sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))" "sq(ERROR)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (HIDE -11 2) (("1" (CASE "NOT c`x = (1-t)*q1`x + t*q2`x") (("1" (HIDE -1 -2 -3 -4 -5 -6 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sqrt_gt_0") (("2" (INST - "sq(R) - sq(const1)") (("1" (GROUND) (("1" (CASE "q1`x>=sqrt(sq(R) - sq(const1))") (("1" (CASE "q2`x>=sqrt(sq(R) - sq(const1))") (("1" (REPLACE -13 1) (("1" (MULT-BY -1 "t") (("1" (MULT-BY -2 "1-t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND :EXCLUDE "sqrt") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 -8 -10 1)) (("2" (ASSERT) (("2" (GRIND :EXCLUDE "sq") (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -5 -8 1)) (("2" (GRIND :EXCLUDE "sq") (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (TYPEPRED CONST1) (("2" (TYPEPRED R) (("2" (GRIND) (("2" (REVEAL -11) (("2" (GRIND) (("2" (LEMMA "sqrt_gt_0") (("2" (INST - "R * R - const1 * const1") (("1" (FLATTEN) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (MULT-INEQ -1 -1) (("2" (MOVE-TERMS -1 L) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-INEQ -1 -1) (("2" (MOVE-TERMS -1 L) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED R) (("2" (TYPEPRED CONST1) (("2" (REVEAL -11) (("2" (MULT-INEQ -1 -1) (("2" (MOVE-TERMS -1 L) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -11) (("2" (CASE "NOT FORALL (vvv:Vect3): norm(vvv)=R IMPLIES vvv`x<=R") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (CASE "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (MULT-INEQ 1 1) (("2" (FLIP-INEQ -1) (("2" (CASE "NOT R * R = sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT vvv`x * vvv`x = sq(vvv`x)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (REPLACE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "q1") (("2" (INST - "q2") (("2" (ASSERT) (("2" (REPLACE -10 1) (("2" (HIDE-ALL-BUT (-1 -2 -3 -5 -9 1)) (("2" (TYPEPRED "t") (("2" (GRIND) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (MOVE-TERMS 1 L 1) (("3" (HIDE -11) (("3" (CASE "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (HIDE 2) (("2" (MOVE-TERMS 1 R 2) (("2" (ASSERT) (("2" (EXPAND "sqv") (("2" (EXPAND "*" 1 2) (("2" (CASE "NOT R * R = norm(q1)*norm(q2)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1 1) (("2" (REPLACE -9 1) (("2" (CASE "NOT q1 + t * (q2 - q1) = (1 - t) * q1 + t * q2") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "vectors_3D.dot_sq_norm") (("2" (INST - "((1 - t) * q1 + t * q2)") (("2" (REPLACES -1 1) (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST?) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST - "t" "q2") (("2" (REPLACES -1 -2) (("2" (REPLACE -4 -1) (("2" (REPLACE -6 -1) (("2" (CASE "NOT abs((1 - t)) * R + abs(t) * R = R") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 -2) (("2" (REPLACE -4 1) (("2" (REPLACE -6 1) (("2" (CASE "NOT R * R = sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "sq_le") (("2" (INST - "norm((1 - t) * q1 + t * q2)" "R") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -11 2) (("3" (MULT-INEQ -10 -10) (("3" (MOVE-TERMS -1 L) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Equator_map| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|vect3_orthonorm_toz| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|vect3_orthog_toz| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|dot_scal_left| FORMULA-DECL NIL |vectors_3D| |vectors|) (|dot_scal_canon| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|) (- CONST-DECL "Vector" |vectors_2D| |vectors|) (|sqrt_le| FORMULA-DECL NIL |sqrt| |reals|) (^ CONST-DECL "Normalized" |vectors_3D| |vectors|) (|cross| CONST-DECL "Vector" |cross_3D| |vectors|) (|vect3_orthog_toy| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|vect3_orthonorm_toy| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|sphere_to_2D_plane| CONST-DECL "Vect2" |vect3_basis| |vectors|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|lift_to_surface| CONST-DECL "{vv: Nz_vect3 | norm(vv) = R}" |error_proj| NIL) (|dot_sq_norm| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sq_le| FORMULA-DECL NIL |sq| |reals|) (|norm_scal| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_add_le| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sq_eq| FORMULA-DECL NIL |sq| |reals|) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|sq_norm| FORMULA-DECL NIL |vectors_3D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sqrt_gt_0| FORMULA-DECL NIL |sqrt| |reals|) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (R SKOLEM-CONST-DECL "posreal" |error_proj| NIL) (|const1| SKOLEM-CONST-DECL "posreal" |error_proj| NIL) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|on_cord?| CONST-DECL "bool" |error_proj| NIL) (* CONST-DECL "real" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|error_valid_simple_edgebound_def| 0 (|error_valid_simple_edgebound_def-3| |nil| 3786475131 ("" (SKEEP) (("" (EXPAND "error_valid_edgebound?") (("" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "on_cord?") (("2" (SKEEP) (("2" (EXPAND "error_valid_simple_edgebound?") (("2" (FLATTEN) (("2" (INST - "c") (("2" (CASE "c`x >= sqrt(sq(R) - sq(const1)) AND c`x <= R AND sqv(c) <= sq(R) AND sqv(c)>=sq(innerrad)") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "lift_to_surface") (("1" (CASE "NOT (R / norm(c)) * c - c = (R / norm(c) - 1) * c") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "last_two_proj_twist") (("2" (CASE "NOT (# x := ((R / norm(c) - 1) * c)`y,
                                                                                        y := -((R / norm(c) - 1) * c)`z #) = (R / norm(c) - 1) *  (# x := c`y,
                                                                                        y := -c`z #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "NOT ERROR ^ 2 = sq(ERROR)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "sphere_to_2D_plane") (("2" (EXPAND "Equator_map") (("2" (EXPAND "vect3_orthonorm_toy") (("2" (EXPAND "vect3_orthonorm_toz") (("2" (EXPAND "vect3_orthog_toy") (("2" (EXPAND "vect3_orthog_toz") (("2" (EXPAND "cross") (("2" (EXPAND "vect3_orthog_toy") (("2" (EXPAND "^" 1) (("2" (ASSERT) (("2" (LEMMA "sqrt_le") (("2" (EXPAND "norm" 1) (("2" (CASE "NOT (# x
                                                                                        := ((# x := 0, y := -R, z := 0 #) * c) *
                                                                                            (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #))))
                                                                                            * (R / sqrt(sqv(c))),
                                                                                      y
                                                                                        := -(((# x := 0, y := 0, z := R * -R #) * c) *
                                                                                              (1 /
                                                                                                sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                                                                              * (R / sqrt(sqv(c)))) #)
                                                                                    -
                                                                                    (# x
                                                                                         := (1 / sqrt(sqv((# x := 0, y := -R, z := 0 #)))) *
                                                                                             ((# x := 0, y := -R, z := 0 #) * c),
                                                                                       y
                                                                                         := -((1 /
                                                                                                sqrt(sqv((# x := 0, y := 0, z := R * -R #))))
                                                                                               * ((# x := 0, y := 0, z := R * -R #) * c)) #) = -(R / norm(c) - 1) * (# x := c`y, y := -c`z #)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (CASE "NOT -R * -R * R * R = sq(R)*sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "sqrt_times") (("2" (INST?) (("2" (REPLACES -1 1) (("2" (REWRITE "sqrt_sq") (("2" (CASE "NOT -((1 / (R * R)) * (c`z * -R * R)) = c`z") (("1" (HIDE-ALL-BUT 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT  -(c`z * (1 / (R * R)) * (R / sqrt(c`x * c`x + c`y * c`y + c`z * c`z))
                                                                                                             * -R
                                                                                                             * R)
                                                                                                           - c`z = c`z * (R/sqrt(c`x * c`x + c`y * c`y + c`z * c`z)-1)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT -R * -R = sq(R)") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1 1) (("2" (REWRITE "sqrt_sq") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT sqv(-(R / norm(c) - 1) * (# x := c`y, y := -c`z #)) = sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (INST - "sqv((R / norm(c) - 1) * (# x := c`y, y := -c`z #))" "sq(ERROR)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (HIDE -12 2) (("1" (CASE "NOT c`x = (1-t)*q1`x + t*q2`x") (("1" (HIDE -1 -2 -3 -4 -5 -6 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sqrt_gt_0") (("2" (INST - "sq(R) - sq(const1)") (("1" (GROUND) (("1" (CASE "q1`x>=sqrt(sq(R) - sq(const1))") (("1" (CASE "q2`x>=sqrt(sq(R) - sq(const1))") (("1" (REPLACE -14 1) (("1" (MULT-BY -1 "t") (("1" (MULT-BY -2 "1-t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND :EXCLUDE "sqrt") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 -8 -10 1)) (("2" (ASSERT) (("2" (GRIND :EXCLUDE "sq") (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 -5 -8 1)) (("2" (GRIND :EXCLUDE "sq") (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (REWRITE "sq" :DIR RL) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sqrt_gt_0") (("2" (INST - "R * R - const1 * const1") (("1" (FLATTEN) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sq_lt") (("2" (INST - "const1" "R") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "sq_lt") (("2" (INST - "const1" "R") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sq_lt") (("2" (INST - "const1" "R") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -12) (("2" (CASE "NOT FORALL (vvv:Vect3): norm(vvv)=R IMPLIES vvv`x<=R") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (CASE "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (MULT-INEQ 1 1) (("2" (FLIP-INEQ -1) (("2" (CASE "NOT R * R = sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (CASE "NOT vvv`x * vvv`x = sq(vvv`x)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (REPLACE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "q1") (("2" (INST - "q2") (("2" (ASSERT) (("2" (REPLACE -11 1) (("2" (HIDE-ALL-BUT (-1 -2 -3 -5 -10 1)) (("2" (TYPEPRED "t") (("2" (GRIND) (("2" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (MOVE-TERMS 1 L 1) (("3" (HIDE -12) (("3" (CASE "NOT sq(R) = sqv((# x := R, y := 0, z := 0 #))") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (HIDE 2) (("2" (MOVE-TERMS 1 R 2) (("2" (ASSERT) (("2" (EXPAND "sqv") (("2" (EXPAND "*" 1 2) (("2" (CASE "NOT R * R = norm(q1)*norm(q2)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1 1) (("2" (REPLACE -10 1) (("2" (CASE "NOT q1 + t * (q2 - q1) = (1 - t) * q1 + t * q2") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "vectors_3D.dot_sq_norm") (("2" (INST - "((1 - t) * q1 + t * q2)") (("2" (REPLACES -1 1) (("2" (LEMMA "vectors_3D.norm_add_le") (("2" (INST?) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST?) (("2" (REPLACES -1 -2) (("2" (LEMMA "vectors_3D.norm_scal") (("2" (INST - "t" "q2") (("2" (REPLACES -1 -2) (("2" (REPLACE -4 -1) (("2" (REPLACE -6 -1) (("2" (CASE "NOT abs((1 - t)) * R + abs(t) * R = R") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 -2) (("2" (REPLACE -4 1) (("2" (REPLACE -6 1) (("2" (CASE "NOT R * R = sq(R)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1 1) (("2" (LEMMA "sq_le") (("2" (INST - "norm((1 - t) * q1 + t * q2)" "R") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (NAME "aa" "sqv(q2-q1)") (("4" (NAME "bb" "2*(q1*(q2-q1))") (("4" (NAME "cc" "sqv(q1)") (("4" (NAME "f" "quadratic(aa,bb,cc)") (("4" (CASE "NOT FORALL (tt:real): sqv(q1+tt*(q2-q1))=f(tt)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "f") (("1" (EXPAND "aa") (("1" (EXPAND "bb") (("1" (EXPAND "cc") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "t") (("2" (INST-CP - "1/2") (("2" (CASE "f(t)>=f(1/2) AND sqv((1/2)*q1+(1/2)*q2)>=sq(innerrad)") (("1" (FLATTEN) (("1" (CASE "q1 + 1 / 2 * (q2 - q1) = (1 / 2) * q1 + (1 / 2) * q2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (LEMMA "quad_min") (("1" (CASE "aa>0") (("1" (INST - "aa" "bb" "cc") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (EXPAND "is_minimum?") (("1" (CASE "-bb/(2*aa)=1/2") (("1" (REPLACE -1) (("1" (INST - "t") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (EXPAND "bb" 1) (("2" (EXPAND "aa" 1) (("2" (REWRITE "sqv_sub") (("2" (REWRITE "dot_sub_right") (("2" (CASE "sqv(q1)=q1*q1") (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) (("1" (CASE "sq(norm(q1))=sq(norm(q2))") (("1" (REWRITE "sq_norm") (("1" (REWRITE "sq_norm") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sqv" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "NOT aa=0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "aa" -1) (("2" (REWRITE "sqv_eq_0") (("2" (REWRITE "sub_eq_zero") (("2" (ASSERT) (("2" (CASE "aa=0 AND bb=0") (("1" (FLATTEN) (("1" (EXPAND "f" 2) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "bb" 1) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "sqv_add" 1) (("2" (REWRITE "sqv_scal") (("2" (REWRITE "sqv_scal") (("2" (EXPAND "sq" 1 1) (("2" (EXPAND "sq" 1 1) (("2" (LEMMA "sq_le") (("2" (INST - "norm(q1-q2)" "edgelen") (("2" (ASSERT) (("2" (REWRITE "sq_norm") (("2" (REWRITE "sqv_sub") (("2" (ASSERT) (("2" (REWRITE "sq_div") (("2" (CASE-REPLACE "sq(2)=4") (("1" (ASSERT) (("1" (CASE "sqv(q1)=sq(R) AND sqv(q2)=sq(R)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "sq(norm(q1))=sq(R) AND sq(norm(q2))=sq(R)") (("1" (FLATTEN) (("1" (REWRITE "sq_norm") (("1" (REWRITE "sq_norm") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sq" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sq_lt") (("3" (INST - "const1" "R") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|error_valid_edgebound?| CONST-DECL "bool" |error_proj| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Equator_map| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|vect3_orthonorm_toz| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|vect3_orthog_toz| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|dot_scal_left| FORMULA-DECL NIL |vectors_3D| |vectors|) (|dot_scal_canon| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|) (- CONST-DECL "Vector" |vectors_2D| |vectors|) (|sqrt_le| FORMULA-DECL NIL |sqrt| |reals|) (^ CONST-DECL "Normalized" |vectors_3D| |vectors|) (|cross| CONST-DECL "Vector" |cross_3D| |vectors|) (|vect3_orthog_toy| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|vect3_orthonorm_toy| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|sphere_to_2D_plane| CONST-DECL "Vect2" |vect3_basis| |vectors|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (* CONST-DECL "Vector" |vectors_2D| |vectors|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|lift_to_surface| CONST-DECL "{vv: Nz_vect3 | norm(vv) = R}" |error_proj| NIL) (|quadratic| CONST-DECL "real" |quadratic| |reals|) (|sqv_add| FORMULA-DECL NIL |vectors_3D| |vectors|) (|dot_scal_right| FORMULA-DECL NIL |vectors_3D| |vectors|) (|scal_assoc| FORMULA-DECL NIL |vectors_3D| |vectors|) (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sq_div| FORMULA-DECL NIL |sq| |reals|) (|sqv_scal| FORMULA-DECL NIL |vectors_3D| |vectors|) (|quad_min| FORMULA-DECL NIL |quad_minmax| |reals|) (|sqv_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sub_eq_args| FORMULA-DECL NIL |vectors_3D| |vectors|) (|dot_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sub_eq_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|sqv_sub| FORMULA-DECL NIL |vectors_3D| |vectors|) (|dot_sub_right| FORMULA-DECL NIL |vectors_3D| |vectors|) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|is_minimum?| CONST-DECL "bool" |quad_minmax| |reals|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|aa| SKOLEM-CONST-DECL "nnreal" |error_proj| NIL) (|cc| SKOLEM-CONST-DECL "posreal" |error_proj| NIL) (|bb| SKOLEM-CONST-DECL "real" |error_proj| NIL) (|f| SKOLEM-CONST-DECL "[real -> real]" |error_proj| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|dot_sq_norm| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sq_le| FORMULA-DECL NIL |sq| |reals|) (|norm_scal| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_add_le| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sq_eq| FORMULA-DECL NIL |sq| |reals|) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|sq_norm| FORMULA-DECL NIL |vectors_3D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sqrt_gt_0| FORMULA-DECL NIL |sqrt| |reals|) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sq_lt| FORMULA-DECL NIL |sq| |reals|) (R SKOLEM-CONST-DECL "posreal" |error_proj| NIL) (|const1| SKOLEM-CONST-DECL "posreal" |error_proj| NIL) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|error_valid_simple_edgebound?| CONST-DECL "bool" |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|on_cord?| CONST-DECL "bool" |error_proj| NIL) (* CONST-DECL "real" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_reduction| 0 (|sphere_to_2D_plane_error_reduction-2| |nil| 3709301209 ("" (SKEEP*) (("" (CASE "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL NIL)) NIL) ("2" (LABEL "emlem" -1) (("2" (EXPAND "error_valid?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (NAME "VR" "mk_vect3(R,0,0)") (("2" (REPLACE -1) (("2" (SKEEP*) (("2" (CASE "p=zero") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "NOT VR = Equator_map(p)(p)") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "vect3_orthonorm_tox") (("1" (EXPAND "vect3_orthonorm_toy") (("1" (EXPAND "vect3_orthonorm_toz") (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "vect3_orthog_toz") (("1" (REPLACE -1 1 :DIR RL) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross") (("1" (EXPAND "^" 1) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LABEL "VRdef" -1) (("2" (EXPAND "on_cord?") (("2" (SKEEP*) (("2" (NAME "Q1" "Equator_map(p)(q1)") (("2" (NAME "Q2" "Equator_map(p)(q2)") (("2" (NAME "CC" "Q1+t*(Q2-Q1)") (("2" (INST -8 "Q1" "Q2" "CC") (("1" (ASSERT) (("1" (NAME "w1" "vect3_orthonorm_tox(p)") (("1" (NAME "w2" "vect3_orthonorm_toy(p)") (("1" (NAME "w3" "vect3_orthonorm_toz(p)") (("1" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (1 2)) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (EXPAND "Equator_map") (("1" (LEMMA "VR") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (NAME "AY" "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (NAME "AZ" "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (EXPAND "vect3_orthonorm_toz" -1) (("1" (EXPAND "vect3_orthog_toz") (("1" (EXPAND "vect3_orthonorm_toy" -2) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross" -1) (("1" (ASSERT) (("1" (CASE "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))") (("1" (HIDE 2) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -) (("1" (GRIND) (("1" (LEMMA "sqrt_sq") (("1" (INST - "R") (("1" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sqrt_sq") (("2" (INST - "R*R") (("2" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 +) (("2" (REPLACE -2 +) (("2" (ASSERT) (("2" (EXPAND "*" + 3) (("2" (EXPAND "*" + 6) (("2" (ASSERT) (("2" (HIDE -) (("2" (LEMMA "w2") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "w3") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (SKEEP) (("1" (INSTEEP) (("1" (REWRITE "sq_eq" 1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (REWRITE "sq_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz")) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "p" "lift_to_surface(R,c)" "c") (("2" (REPLACES -2) (("2" (INST - "VR" "lift_to_surface(R,CC)" "CC") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (SPLIT -) (("1" (REWRITE -3) (("1" (ASSERT) (("1" (CASE "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "emlem" 1) (("2" (ASSERT) (("2" (CASE "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff") (("1" (CASE "CC = Equator_map(p)(c)") (("1" (REWRITE -2) (("1" (HIDE 2) (("1" (EXPAND "lift_to_surface") (("1" (REPLACE -1 1) (("1" (REWRITE "Equator_map_norm") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "Equator_map") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -26 1) (("2" (EXPAND "CC" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Q1" 1) (("2" (REPLACE "VRdef" 1) (("2" (REWRITE -4) NIL NIL)) NIL)) NIL) ("3" (EXPAND "Q1" 1) (("3" (REWRITE "Equator_map_norm") NIL NIL)) NIL) ("4" (EXPAND "Q2" 1) (("4" (REPLACE "VRdef" 1) (("4" (REWRITE -4) NIL NIL)) NIL)) NIL) ("5" (EXPAND "Q2" 1) (("5" (REWRITE "Equator_map_norm") NIL NIL)) NIL) ("6" (EXPAND "Q1" 1) (("6" (REPLACE "VRdef" 1) (("6" (COPY "emlem") (("6" (INST - "q1" "p" "p") (("6" (REPLACE -1 1 :DIR RL) (("6" (REWRITE "Equator_map_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "Q2" 1) (("7" (REPLACE "VRdef" 1) (("7" (COPY "emlem") (("7" (INST - "q2" "p" "p") (("7" (REPLACES -1 :DIR RL) (("7" (REWRITE "Equator_map_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (INST + "t") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (REWRITE -4) (("2" (REWRITE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -12 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -10 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (NAME "w1" "vect3_orthonorm_tox(p)") (("2" (NAME "w2" "vect3_orthonorm_toy(p)") (("2" (NAME "w3" "vect3_orthonorm_toz(p)") (("2" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE -1) (("2" (REWRITE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "Q2") (("3" (LEMMA "Equator_map_norm") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "Q1" 1) (("4" (LEMMA "Equator_map_norm") (("4" (INST?) (("4" (FLATTEN) (("4" (REPLACE -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Equator_map| CONST-DECL "Vect3" |vect3_basis| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (Q1 SKOLEM-CONST-DECL "Vect3" |error_proj| NIL) (Q2 SKOLEM-CONST-DECL "Vect3" |error_proj| NIL) (CC SKOLEM-CONST-DECL "Vector" |error_proj| NIL) (|Normalized| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|orthogonal?| CONST-DECL "bool" |basis_3D| |vectors|) (|Nz_vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|vect3_orthonorm_basis| FORMULA-DECL NIL |vect3_basis| |vectors|) (|sphere_to_2D_plane| CONST-DECL "Vect2" |vect3_basis| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|) (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|w3| SKOLEM-CONST-DECL "Normalized" |error_proj| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (|w2| SKOLEM-CONST-DECL "Normalized" |error_proj| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (VR SKOLEM-CONST-DECL "Vect3" |error_proj| NIL) (- CONST-DECL "Vector" |vectors_2D| |vectors|) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|) (|t| SKOLEM-CONST-DECL "nnreal" |error_proj| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|dot_zero_left| FORMULA-DECL NIL |vectors_3D| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Equator_map_norm| FORMULA-DECL NIL |vect3_basis| |vectors|) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|lift_to_surface| CONST-DECL "{vv: Nz_vect3 | norm(vv) = R}" |error_proj| NIL) (|sq_norm| FORMULA-DECL NIL |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|orthonormal_basis| FORMULA-DECL NIL |basis_3D| |vectors|) (|basis_dot| FORMULA-DECL NIL |basis_3D| |vectors|) (|orthonormal?| CONST-DECL "bool" |basis_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (|on_cord?| CONST-DECL "bool" |error_proj| NIL) (|vect3_orthonorm_toy| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|vect3_orthog_toy| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cross| CONST-DECL "Vector" |cross_3D| |vectors|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq_eq| FORMULA-DECL NIL |sq| |reals|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "Normalized" |vectors_3D| |vectors|) (|vect3_orthog_toz| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|vect3_orthonorm_toz| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|vect3_orthonorm_tox| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|sphere_to_2D_plane_error_reduction-1| |nil| 3709299988 ("" (SKEEP*) (("" (CASE "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL))) ("2" (LABEL "emlem" -1) (("2" (EXPAND "error_valid?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (NAME "VR" "(# x := R, y := 0, z := 0 #)") (("2" (REPLACE -1) (("2" (SKEEP*) (("2" (CASE "p=zero") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (CASE "NOT VR = Equator_map(p)(p)") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "vect3_orthonorm_tox") (("1" (EXPAND "vect3_orthonorm_toy") (("1" (EXPAND "vect3_orthonorm_toz") (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "vect3_orthog_toz") (("1" (REPLACE -1 1 :DIR RL) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross") (("1" (EXPAND "^" 1) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (GRIND) NIL))))))))))))))))))))))))))))))) ("2" (LABEL "VRdef" -1) (("2" (EXPAND "on_cord?") (("2" (SKEEP*) (("2" (NAME "Q1" "Equator_map(p)(q1)") (("2" (NAME "Q2" "Equator_map(p)(q2)") (("2" (NAME "CC" "Q1+t*(Q2-Q1)") (("2" (INST -8 "Q1" "Q2" "CC") (("2" (ASSERT) (("2" (NAME "w1" "vect3_orthonorm_tox(p)") (("2" (NAME "w2" "vect3_orthonorm_toy(p)") (("2" (NAME "w3" "vect3_orthonorm_toz(p)") (("2" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))) ("2" (CASE "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (1 2)) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (EXPAND "Equator_map") (("1" (LEMMA "VR") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (NAME "AY" "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (NAME "AZ" "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (EXPAND "vect3_orthonorm_toz" -1) (("1" (EXPAND "vect3_orthog_toz") (("1" (EXPAND "vect3_orthonorm_toy" -2) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross" -1) (("1" (ASSERT) (("1" (CASE "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))") (("1" (HIDE 2) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -) (("1" (GRIND) (("1" (LEMMA "sqrt_sq") (("1" (INST - "R") (("1" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (LEMMA "sqrt_sq") (("2" (INST - "R*R") (("2" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))))))))))))) ("2" (FLATTEN) (("2" (REPLACE -1 +) (("2" (REPLACE -2 +) (("2" (ASSERT) (("2" (EXPAND "*" + 3) (("2" (EXPAND "*" + 6) (("2" (ASSERT) (("2" (EXPAND "-") (("2" (ASSERT) (("2" (HIDE -) (("2" (LEMMA "w2") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "w3") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (CASE "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (SKEEP) (("1" (INSTEEP) (("1" (REWRITE "sq_eq" 1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (REWRITE "sq_norm") NIL))))))))))) ("2" (CASE "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz")) NIL))))))) ("2" (INST-CP - "p" "lift_to_surface(R,c)" "c") (("2" (REPLACES -2) (("2" (INST - "VR" "lift_to_surface(R,CC)" "CC") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (SPLIT -) (("1" (REWRITE -3) (("1" (ASSERT) (("1" (CASE "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)") (("1" (ASSERT) NIL) ("2" (REWRITE "emlem" 1) (("2" (ASSERT) (("2" (CASE "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff") (("1" (CASE "CC = Equator_map(p)(c)") (("1" (REWRITE -2) (("1" (HIDE 2) (("1" (EXPAND "lift_to_surface") (("1" (REPLACE -1 1) (("1" (REWRITE "Equator_map_norm") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "Equator_map") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL))))))))))))))) ("2" (REPLACE -26 1) (("2" (EXPAND "CC" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))) ("2" (EXPAND "Q1" 1) (("2" (REPLACE "VRdef" 1) (("2" (REWRITE -4) NIL))))) ("3" (EXPAND "Q1" 1) (("3" (REWRITE "Equator_map_norm") NIL))) ("4" (EXPAND "Q2" 1) (("4" (REPLACE "VRdef" 1) (("4" (REWRITE -4) NIL))))) ("5" (EXPAND "Q2" 1) (("5" (REWRITE "Equator_map_norm") NIL))) ("6" (EXPAND "Q1" 1) (("6" (REPLACE "VRdef" 1) (("6" (COPY "emlem") (("6" (INST - "q1" "p" "p") (("6" (REPLACE -1 1 :DIR RL) (("6" (REWRITE "Equator_map_norm") NIL))))))))))) ("7" (EXPAND "Q1" 1) (("7" (REPLACE "VRdef" 1) (("7" (COPY "emlem") (("7" (INST - "q1" "p" "p") (("7" (REPLACES -1 :DIR RL) (("7" (REWRITE "Equator_map_norm") NIL))))))))))) ("8" (CASE "CC*VR>0") (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (ASSERT) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "CC" 1) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE "Q2+zero = Q1+(Q2-Q1)") (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))) ("2" (MULT-BY -1 "1-t") (("2" (MULT-BY -2 "t") (("2" (HIDE-ALL-BUT (-1 -2 3)) (("2" (GRIND) NIL))))))))))))) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (REWRITE -4) (("2" (REWRITE -4) (("2" (ASSERT) NIL))))))))))))))))))) ("9" (INST + "t") (("9" (ASSERT) NIL))))))))) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL))) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL))) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (REWRITE -4) (("2" (REWRITE -4) (("2" (ASSERT) NIL))))))))))))))) ("3" (REPLACE -12 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))))))))))) ("3" (REPLACE -10 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))))))) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL))) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (HIDE 3) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL))))))))))))))))) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL))))))) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) NIL) NIL NIL)) (|sphere_to_2D_plane_error_reduction_edgebound| 0 (|sphere_to_2D_plane_error_reduction_edgebound-2| |nil| 3712485625 ("" (SKEEP*) (("" (CASE "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL NIL)) NIL) ("2" (LABEL "emlem" -1) (("2" (EXPAND "error_valid_edgebound?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (NAME "VR" "mk_vect3(R,0,0)") (("2" (REPLACE -1) (("2" (SKEEP*) (("2" (CASE "p=zero") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "NOT VR = Equator_map(p)(p)") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "vect3_orthonorm_tox") (("1" (EXPAND "vect3_orthonorm_toy") (("1" (EXPAND "vect3_orthonorm_toz") (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "vect3_orthog_toz") (("1" (REPLACE -1 1 :DIR RL) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross") (("1" (EXPAND "^" 1) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LABEL "VRdef" -1) (("2" (EXPAND "on_cord?") (("2" (SKEEP*) (("2" (NAME "Q1" "Equator_map(p)(q1)") (("2" (NAME "Q2" "Equator_map(p)(q2)") (("2" (NAME "CC" "Q1+t*(Q2-Q1)") (("2" (INST -8 "Q1" "Q2" "CC") (("1" (ASSERT) (("1" (NAME "w1" "vect3_orthonorm_tox(p)") (("1" (NAME "w2" "vect3_orthonorm_toy(p)") (("1" (NAME "w3" "vect3_orthonorm_toz(p)") (("1" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (1 2)) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (EXPAND "Equator_map") (("1" (LEMMA "VR") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (NAME "AY" "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (NAME "AZ" "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (EXPAND "vect3_orthonorm_toz" -1) (("1" (EXPAND "vect3_orthog_toz") (("1" (EXPAND "vect3_orthonorm_toy" -2) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross" -1) (("1" (ASSERT) (("1" (CASE "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))") (("1" (HIDE 2) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -) (("1" (GRIND) (("1" (LEMMA "sqrt_sq") (("1" (INST - "R") (("1" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sqrt_sq") (("2" (INST - "R*R") (("2" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 +) (("2" (REPLACE -2 +) (("2" (ASSERT) (("2" (EXPAND "*" + 3) (("2" (EXPAND "*" + 6) (("2" (ASSERT) (("2" (HIDE -) (("2" (LEMMA "w2") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "w3") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (SKEEP) (("1" (INSTEEP) (("1" (REWRITE "sq_eq" 1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (REWRITE "sq_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz")) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "p" "lift_to_surface(R,c)" "c") (("2" (REPLACES -2) (("2" (INST - "VR" "lift_to_surface(R,CC)" "CC") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (SPLIT -) (("1" (REWRITE -3) (("1" (ASSERT) (("1" (CASE "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "emlem" 1) (("2" (ASSERT) (("2" (CASE "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff") (("1" (CASE "CC = Equator_map(p)(c)") (("1" (REWRITE -2) (("1" (HIDE 2) (("1" (EXPAND "lift_to_surface") (("1" (REPLACE -1 1) (("1" (REWRITE "Equator_map_norm") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "Equator_map") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -27 1) (("2" (EXPAND "CC" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Q1" 1) (("2" (REPLACE "VRdef" 1) (("2" (REWRITE -4) NIL NIL)) NIL)) NIL) ("3" (EXPAND "Q1" 1) (("3" (REWRITE "Equator_map_norm") NIL NIL)) NIL) ("4" (EXPAND "Q2" 1) (("4" (REPLACE "VRdef" 1) (("4" (REWRITE -4) NIL NIL)) NIL)) NIL) ("5" (EXPAND "Q2" 1) (("5" (REWRITE "Equator_map_norm") NIL NIL)) NIL) ("6" (EXPAND "Q1" 1) (("6" (REPLACE "VRdef" 1) (("6" (COPY "emlem") (("6" (INST - "q1" "p" "p") (("6" (REPLACE -1 1 :DIR RL) (("6" (REWRITE "Equator_map_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "Q2" 1) (("7" (REPLACE "VRdef" 1) (("7" (COPY "emlem") (("7" (INST - "q2" "p" "p") (("7" (REPLACES -1 :DIR RL) (("7" (REWRITE "Equator_map_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (EXPAND "Q1" 1) (("8" (EXPAND "Q2" 1) (("8" (COPY "emlem") (("8" (INST - "q1" "q2" "p") (("8" (REPLACE -1 1 :DIR RL) (("8" (REWRITE "Equator_map_norm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (INST + "t") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (REWRITE -4) (("2" (REWRITE -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -12 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -10 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (NAME "w1" "vect3_orthonorm_tox(p)") (("2" (NAME "w2" "vect3_orthonorm_toy(p)") (("2" (NAME "w3" "vect3_orthonorm_toz(p)") (("2" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE -1) (("2" (REWRITE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "Q2") (("3" (LEMMA "Equator_map_norm") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "Q1" 1) (("4" (LEMMA "Equator_map_norm") (("4" (INST?) (("4" (FLATTEN) (("4" (REPLACE -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (/= CONST-DECL "boolean" |notequal| NIL) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Equator_map| CONST-DECL "Vect3" |vect3_basis| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|error_valid_edgebound?| CONST-DECL "bool" |error_proj| NIL) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (Q1 SKOLEM-CONST-DECL "Vect3" |error_proj| NIL) (Q2 SKOLEM-CONST-DECL "Vect3" |error_proj| NIL) (CC SKOLEM-CONST-DECL "Vector" |error_proj| NIL) (|Normalized| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|orthogonal?| CONST-DECL "bool" |basis_3D| |vectors|) (|Nz_vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|vect3_orthonorm_basis| FORMULA-DECL NIL |vect3_basis| |vectors|) (|sphere_to_2D_plane| CONST-DECL "Vect2" |vect3_basis| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|) (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|w3| SKOLEM-CONST-DECL "Normalized" |error_proj| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (|w2| SKOLEM-CONST-DECL "Normalized" |error_proj| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (VR SKOLEM-CONST-DECL "Vect3" |error_proj| NIL) (- CONST-DECL "Vector" |vectors_2D| |vectors|) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|scal_1| FORMULA-DECL NIL |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|scal_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|add_zero_right| FORMULA-DECL NIL |vectors_3D| |vectors|) (|t| SKOLEM-CONST-DECL "nnreal" |error_proj| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|dot_zero_left| FORMULA-DECL NIL |vectors_3D| |vectors|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Equator_map_norm| FORMULA-DECL NIL |vect3_basis| |vectors|) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|lift_to_surface| CONST-DECL "{vv: Nz_vect3 | norm(vv) = R}" |error_proj| NIL) (|sq_norm| FORMULA-DECL NIL |vectors_2D| |vectors|) (|norm| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|orthonormal_basis| FORMULA-DECL NIL |basis_3D| |vectors|) (|basis_dot| FORMULA-DECL NIL |basis_3D| |vectors|) (|orthonormal?| CONST-DECL "bool" |basis_3D| |vectors|) (+ CONST-DECL "Vector" |vectors_3D| |vectors|) (|on_cord?| CONST-DECL "bool" |error_proj| NIL) (|vect3_orthonorm_toy| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|vect3_orthog_toy| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cross| CONST-DECL "Vector" |cross_3D| |vectors|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq_eq| FORMULA-DECL NIL |sq| |reals|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "Normalized" |vectors_3D| |vectors|) (|vect3_orthog_toz| CONST-DECL "Vect3" |vect3_basis| |vectors|) (|vect3_orthonorm_toz| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|vect3_orthonorm_tox| CONST-DECL "Normalized" |vect3_basis| |vectors|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|sphere_to_2D_plane_error_reduction_edgebound-1| |nil| 3712485464 ("" (SKEEP*) (("" (CASE "NOT FORALL (ww,aa:Vect3,pz:Nz_vect3): Equator_map(pz)(ww-aa)=Equator_map(pz)(ww)-Equator_map(pz)(aa)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL))) ("2" (LABEL "emlem" -1) (("2" (EXPAND "error_valid?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (NAME "VR" "mk_vect3(R,0,0)") (("2" (REPLACE -1) (("2" (SKEEP*) (("2" (CASE "p=zero") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (CASE "NOT VR = Equator_map(p)(p)") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "vect3_orthonorm_tox") (("1" (EXPAND "vect3_orthonorm_toy") (("1" (EXPAND "vect3_orthonorm_toz") (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "vect3_orthog_toz") (("1" (REPLACE -1 1 :DIR RL) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross") (("1" (EXPAND "^" 1) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) (("1" (REWRITE "sq_eq" -1 :DIR RL) (("1" (GRIND) NIL))))))))))))))))))))))))))))))) ("2" (LABEL "VRdef" -1) (("2" (EXPAND "on_cord?") (("2" (SKEEP*) (("2" (NAME "Q1" "Equator_map(p)(q1)") (("2" (NAME "Q2" "Equator_map(p)(q2)") (("2" (NAME "CC" "Q1+t*(Q2-Q1)") (("2" (INST -8 "Q1" "Q2" "CC") (("1" (ASSERT) (("1" (NAME "w1" "vect3_orthonorm_tox(p)") (("1" (NAME "w2" "vect3_orthonorm_toy(p)") (("1" (NAME "w3" "vect3_orthonorm_toz(p)") (("1" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))) ("2" (CASE "NOT FORALL (ww:Vect3): sqv(sphere_to_2D_plane(p)(ww)) = sqv(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (1 2)) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (EXPAND "Equator_map") (("1" (LEMMA "VR") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (NAME "AY" "vect3_orthonorm_toy((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (NAME "AZ" "vect3_orthonorm_toz((# x := R, y := 0, z := 0 #))") (("1" (REPLACE -1) (("1" (EXPAND "vect3_orthonorm_toz" -1) (("1" (EXPAND "vect3_orthog_toz") (("1" (EXPAND "vect3_orthonorm_toy" -2) (("1" (EXPAND "vect3_orthog_toy") (("1" (EXPAND "cross" -1) (("1" (ASSERT) (("1" (CASE "NOT (AZ=(# x:=0,y:=0,z:=-1 #) AND AY = (# x:=0,y:=-1,z:=0 #))") (("1" (HIDE 2) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (HIDE -) (("1" (GRIND) (("1" (LEMMA "sqrt_sq") (("1" (INST - "R") (("1" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (LEMMA "sqrt_sq") (("2" (INST - "R*R") (("2" (SPLIT -1) (("1" (EXPAND "sq") (("1" (REPLACE -1) (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))))))))))))) ("2" (FLATTEN) (("2" (REPLACE -1 +) (("2" (REPLACE -2 +) (("2" (ASSERT) (("2" (EXPAND "*" + 3) (("2" (EXPAND "*" + 6) (("2" (ASSERT) (("2" (HIDE -) (("2" (LEMMA "w2") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "w3") (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (CASE "NOT FORALL (ww:Vect3): norm(sphere_to_2D_plane(p)(ww)) = norm(sphere_to_2D_plane(VR)(Equator_map(p)(ww)))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (SKEEP) (("1" (INSTEEP) (("1" (REWRITE "sq_eq" 1 :DIR RL) (("1" (REWRITE "sq_norm") (("1" (REWRITE "sq_norm") NIL))))))))))) ("2" (CASE "NOT FORALL (nzv:Nz_vect3,aa,bb:Vect3): sphere_to_2D_plane(nzv)(aa)-sphere_to_2D_plane(nzv)(bb)=sphere_to_2D_plane(nzv)(aa-bb)") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP*) (("1" (EXPAND "sphere_to_2D_plane") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz")) NIL))))))) ("2" (INST-CP - "p" "lift_to_surface(R,c)" "c") (("2" (REPLACES -2) (("2" (INST - "VR" "lift_to_surface(R,CC)" "CC") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (SPLIT -) (("1" (REWRITE -3) (("1" (ASSERT) (("1" (CASE "lift_to_surface(R, CC) - CC = Equator_map(p)(lift_to_surface(R, c) - c)") (("1" (ASSERT) NIL) ("2" (REWRITE "emlem" 1) (("2" (ASSERT) (("2" (CASE "FORALL (gg,hh,ee,ff:Vect3): gg=ee AND hh=ff IMPLIES gg-hh = ee-ff") (("1" (CASE "CC = Equator_map(p)(c)") (("1" (REWRITE -2) (("1" (HIDE 2) (("1" (EXPAND "lift_to_surface") (("1" (REPLACE -1 1) (("1" (REWRITE "Equator_map_norm") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "Equator_map") (("1" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL))))))))))))))) ("2" (REPLACE -26 1) (("2" (EXPAND "CC" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("vect3_orthonorm_tox" "vect3_orthonorm_toy" "vect3_orthonorm_toz" "norm" "sphere_to_2D_plane")) NIL))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))) ("2" (EXPAND "Q1" 1) (("2" (REPLACE "VRdef" 1) (("2" (REWRITE -4) NIL))))) ("3" (EXPAND "Q1" 1) (("3" (REWRITE "Equator_map_norm") NIL))) ("4" (EXPAND "Q2" 1) (("4" (REPLACE "VRdef" 1) (("4" (REWRITE -4) NIL))))) ("5" (EXPAND "Q2" 1) (("5" (REWRITE "Equator_map_norm") NIL))) ("6" (EXPAND "Q1" 1) (("6" (REPLACE "VRdef" 1) (("6" (COPY "emlem") (("6" (INST - "q1" "p" "p") (("6" (REPLACE -1 1 :DIR RL) (("6" (REWRITE "Equator_map_norm") NIL))))))))))) ("7" (EXPAND "Q2" 1) (("7" (REPLACE "VRdef" 1) (("7" (COPY "emlem") (("7" (INST - "q2" "p" "p") (("7" (REPLACES -1 :DIR RL) (("7" (REWRITE "Equator_map_norm") NIL))))))))))) ("8" (INST + "t") (("8" (ASSERT) NIL))))))))) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL))) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL))) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (REWRITE -4) (("2" (REWRITE -4) (("2" (ASSERT) NIL))))))))))))))) ("3" (REPLACE -12 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))))))))))) ("3" (REPLACE -10 :DIR RL) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))))))) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL))) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL))))))))))))))) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL))))))) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (CASE "Q1*VR>0 AND Q2*VR>0") (("1" (FLATTEN) (("1" (CASE "CC*VR>0") (("1" (REPLACE -4) (("1" (ASSERT) NIL))) ("2" (EXPAND "CC" 1) (("2" (MULT-BY -1 "1-t") (("1" (MULT-BY -2 "t") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND) NIL))) ("2" (CASE "t=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))) ("2" (CASE "t=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -3 2)) (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("2" (REPLACE "VRdef" 1) (("2" (EXPAND "Q1" 1) (("2" (EXPAND "Q2" 1) (("2" (NAME "w1" "vect3_orthonorm_tox(p)") (("2" (NAME "w2" "vect3_orthonorm_toy(p)") (("2" (NAME "w3" "vect3_orthonorm_toz(p)") (("2" (CASE "orthonormal?(w1,w2,w3)") (("1" (ASSERT) (("1" (CASE "NOT FORALL (ww,aa:Vect3): Equator_map(p)(ww)*Equator_map(p)(aa) = ww*aa") (("1" (SKEEP*) (("1" (LEMMA "basis_dot") (("1" (EXPAND "Equator_map" 1) (("1" (EXPAND "*" 1 4) (("1" (LEMMA "orthonormal_basis") (("1" (INST-CP - "w1" "w2" "w3" "ww") (("1" (INST-CP - "w1" "w2" "w3" "aa") (("1" (HIDE -1) (("1" (INST - "w1" "w2" "w3" "aa*w1" "aa*w2" "aa*w3" "ww*w1" "ww*w2" "ww*w3") (("1" (REPLACE -4) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -5) (("1" (REPLACE -6) (("1" (REPLACE -7) (("1" (ASSERT) (("1" (CASE "ww*aa=aa*ww") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))) ("2" (REWRITE -1) (("2" (REWRITE -1) (("2" (ASSERT) NIL))))))))) ("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (LEMMA "vect3_orthonorm_basis") (("2" (INST?) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "orthonormal?") (("2" (ASSERT) (("2" (SPLIT) (("1" (HIDE (-4 -5 -6)) (("1" (GRIND) NIL))) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT -7) (("2" (REVEAL +) (("2" (EXPAND "vect3_orthonorm_tox") (("2" (TYPEPRED "^(p)") (("2" (REPLACE -2) (("2" (ASSERT) NIL))))))))))))))) ("3" (TYPEPRED "w2") (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL))))))) ("4" (FLATTEN) (("4" (TYPEPRED "w3") (("4" (REPLACE -2) (("4" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))) ("3" (EXPAND "Q2") (("3" (LEMMA "Equator_map_norm") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (REPLACE -2) (("3" (ASSERT) NIL))))))))))))) ("4" (EXPAND "Q1" 1) (("4" (LEMMA "Equator_map_norm") (("4" (INST?) (("4" (FLATTEN) (("4" (REPLACE -2) (("4" (ASSERT) NIL)))))))))))))))))))))))))))))))))))))))))))))) NIL) NIL NIL)) (|sphere_to_2D_plane_error_simple_27780_TCC1| 0 (|sphere_to_2D_plane_error_simple_27780_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_27780| SUBTYPE "27780" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_27780_TCC2| 0 (|sphere_to_2D_plane_error_simple_27780_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_27780| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_27780| 0 (|sphere_to_2D_plane_error_simple_27780-3| |nil| 3709298941 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                             LET const1 = 27780, ERROR = 0.11 IN
                               c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                IMPLIES
                                sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                 ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                             z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|sphere_to_2D_plane_error_simple_27780-2| |nil| 3709298698 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                             LET const1 = 27780, ERROR = 0.11 IN
                               c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                IMPLIES
                                sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                 ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL))))) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL))) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                             z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL))))))) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL))))))))) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))))) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL))))))))))))))) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL)))))) NIL) NIL NIL) (|sphere_to_2D_plane_error_simple_27780-1| |nil| 3709298674 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|sphere_to_2D_plane_error_simple_1852_TCC1| 0 (|sphere_to_2D_plane_error_simple_1852_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_1852| SUBTYPE "1852" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_1852_TCC2| 0 (|sphere_to_2D_plane_error_simple_1852_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_1852| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_1852| 0 (|sphere_to_2D_plane_error_simple_1852-1| |nil| 3709302665 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                           LET const1 = 1852, ERROR = 0.0001 IN
                                             c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                              c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                              IMPLIES
                                              sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                               ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                       y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                       z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_3704_TCC1| 0 (|sphere_to_2D_plane_error_simple_3704_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_3704| SUBTYPE "3704" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_3704_TCC2| 0 (|sphere_to_2D_plane_error_simple_3704_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_3704| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_3704| 0 (|sphere_to_2D_plane_error_simple_3704-1| |nil| 3709303050 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                         LET const1 = 3704, ERROR = 0.0003 IN
                                                           c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                            c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                            IMPLIES
                                                            sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                             ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                 y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                 z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_5556_TCC1| 0 (|sphere_to_2D_plane_error_simple_5556_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_5556| SUBTYPE "5556" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_5556_TCC2| 0 (|sphere_to_2D_plane_error_simple_5556_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_5556| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_5556| 0 (|sphere_to_2D_plane_error_simple_5556-1| |nil| 3709303298 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                       LET const1 = 5556, ERROR = 0.0009 IN
                                                                         c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                          c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                          IMPLIES
                                                                          sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                           ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                           y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                           z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_7408_TCC1| 0 (|sphere_to_2D_plane_error_simple_7408_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_7408| SUBTYPE "7408" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_7408_TCC2| 0 (|sphere_to_2D_plane_error_simple_7408_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_7408| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_7408| 0 (|sphere_to_2D_plane_error_simple_7408-1| |nil| 3709303600 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                                            LET const1 = 7408, ERROR = 0.002 IN
                                                                                              c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                                               c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                                               IMPLIES
                                                                                               sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                                                ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                  y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                  z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_9260_TCC1| 0 (|sphere_to_2D_plane_error_simple_9260_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_9260| SUBTYPE "9260" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_9260_TCC2| 0 (|sphere_to_2D_plane_error_simple_9260_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_9260| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_9260| 0 (|sphere_to_2D_plane_error_simple_9260-1| |nil| 3709303942 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                                                          LET const1 = 9260, ERROR = 0.004 IN
                                                                                                            c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                                                             c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                                                             IMPLIES
                                                                                                             sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                                                              ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                            y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                            z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_11112_TCC1| 0 (|sphere_to_2D_plane_error_simple_11112_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_11112| SUBTYPE "11112" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_11112_TCC2| 0 (|sphere_to_2D_plane_error_simple_11112_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_11112| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_11112| 0 (|sphere_to_2D_plane_error_simple_11112-1| |nil| 3709304118 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES
                                                                                                                        LET const1 = 11112, ERROR = 0.007 IN
                                                                                                                          c`x >= sqrt(sq(R_earth) - sq(const1)) AND
                                                                                                                           c`x <= R_earth AND sqv(c) <= sq(R_earth)
                                                                                                                           IMPLIES
                                                                                                                           sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <=
                                                                                                                            ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                      y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                      z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_12964_TCC1| 0 (|sphere_to_2D_plane_error_simple_12964_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_12964| SUBTYPE "12964" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_12964_TCC2| 0 (|sphere_to_2D_plane_error_simple_12964_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_12964| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_12964| 0 (|sphere_to_2D_plane_error_simple_12964-1| |nil| 3709304442 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 12964, ERROR = 0.011 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                             z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_14816_TCC1| 0 (|sphere_to_2D_plane_error_simple_14816_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_14816| SUBTYPE "14816" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_14816_TCC2| 0 (|sphere_to_2D_plane_error_simple_14816_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_14816| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_14816| 0 (|sphere_to_2D_plane_error_simple_14816-1| |nil| 3709305915 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 14816, ERROR = 0.016 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                       y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                       z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_16668_TCC1| 0 (|sphere_to_2D_plane_error_simple_16668_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_16668| SUBTYPE "16668" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_16668_TCC2| 0 (|sphere_to_2D_plane_error_simple_16668_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_16668| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_16668| 0 (|sphere_to_2D_plane_error_simple_16668-1| |nil| 3709306110 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 16668, ERROR = 0.022 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                 y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                 z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_18520_TCC1| 0 (|sphere_to_2D_plane_error_simple_18520_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_18520| SUBTYPE "18520" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_18520_TCC2| 0 (|sphere_to_2D_plane_error_simple_18520_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_18520| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_18520| 0 (|sphere_to_2D_plane_error_simple_18520-1| |nil| 3709306317 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 18520, ERROR = 0.031 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                           y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                           z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_20372_TCC1| 0 (|sphere_to_2D_plane_error_simple_20372_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_20372| SUBTYPE "20372" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_20372_TCC2| 0 (|sphere_to_2D_plane_error_simple_20372_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_20372| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_20372| 0 (|sphere_to_2D_plane_error_simple_20372-1| |nil| 3709306527 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 20372, ERROR = 0.041 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                     y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                     z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_22224_TCC1| 0 (|sphere_to_2D_plane_error_simple_22224_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_22224| SUBTYPE "22224" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_22224_TCC2| 0 (|sphere_to_2D_plane_error_simple_22224_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_22224| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_22224| 0 (|sphere_to_2D_plane_error_simple_22224-1| |nil| 3709306750 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 22224, ERROR = 0.053 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                               y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                               z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_24076_TCC1| 0 (|sphere_to_2D_plane_error_simple_24076_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_24076| SUBTYPE "24076" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_24076_TCC2| 0 (|sphere_to_2D_plane_error_simple_24076_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_24076| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_24076| 0 (|sphere_to_2D_plane_error_simple_24076-1| |nil| 3709306967 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 24076, ERROR = 0.067 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                         y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                         z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_25928_TCC1| 0 (|sphere_to_2D_plane_error_simple_25928_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_25928| SUBTYPE "25928" "{x: uint16 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_25928_TCC2| 0 (|sphere_to_2D_plane_error_simple_25928_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_25928| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_25928| 0 (|sphere_to_2D_plane_error_simple_25928-1| |nil| 3709307216 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 25928, ERROR = 0.083 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_37040_TCC1| 0 (|sphere_to_2D_plane_error_simple_37040_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_37040| SUBTYPE "37040" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_37040_TCC2| 0 (|sphere_to_2D_plane_error_simple_37040_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_37040| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_37040| 0 (|sphere_to_2D_plane_error_simple_37040-1| |nil| 3709308672 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 37040, ERROR = 0.25 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_46300_TCC1| 0 (|sphere_to_2D_plane_error_simple_46300_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_46300| SUBTYPE "46300" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_46300_TCC2| 0 (|sphere_to_2D_plane_error_simple_46300_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_46300| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_46300| 0 (|sphere_to_2D_plane_error_simple_46300-1| |nil| 3709309105 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 46300, ERROR = 0.49 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_55560_TCC1| 0 (|sphere_to_2D_plane_error_simple_55560_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_55560| SUBTYPE "55560" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_55560_TCC2| 0 (|sphere_to_2D_plane_error_simple_55560_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_55560| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_55560| 0 (|sphere_to_2D_plane_error_simple_55560-1| |nil| 3709309325 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 55560, ERROR = 0.83 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_64820_TCC1| 0 (|sphere_to_2D_plane_error_simple_64820_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_64820| SUBTYPE "64820" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_64820_TCC2| 0 (|sphere_to_2D_plane_error_simple_64820_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_64820| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_64820| 0 (|sphere_to_2D_plane_error_simple_64820-1| |nil| 3709309559 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 64820, ERROR = 1.3 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_74080_TCC1| 0 (|sphere_to_2D_plane_error_simple_74080_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_74080| SUBTYPE "74080" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_74080_TCC2| 0 (|sphere_to_2D_plane_error_simple_74080_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_74080| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_74080| 0 (|sphere_to_2D_plane_error_simple_74080-1| |nil| 3709309867 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 74080, ERROR = 1.95 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_83340_TCC1| 0 (|sphere_to_2D_plane_error_simple_83340_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_83340| SUBTYPE "83340" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_83340_TCC2| 0 (|sphere_to_2D_plane_error_simple_83340_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_83340| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_83340| 0 (|sphere_to_2D_plane_error_simple_83340-1| |nil| 3709310070 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 83340, ERROR = 2.85 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_92600_TCC1| 0 (|sphere_to_2D_plane_error_simple_92600_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_92600| SUBTYPE "92600" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_92600_TCC2| 0 (|sphere_to_2D_plane_error_simple_92600_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_92600| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_92600| 0 (|sphere_to_2D_plane_error_simple_92600-1| |nil| 3709310265 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 92600, ERROR = 3.79 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_111120_TCC1| 0 (|sphere_to_2D_plane_error_simple_111120_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_111120| SUBTYPE "111120" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_111120_TCC2| 0 (|sphere_to_2D_plane_error_simple_111120_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_111120| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_111120| 0 (|sphere_to_2D_plane_error_simple_111120-2| |nil| 3709311913 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 111120, ERROR = 6.51 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|sphere_to_2D_plane_error_simple_111120-1| |nil| 3709311899 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|sphere_to_2D_plane_error_simple_129640_TCC1| 0 (|sphere_to_2D_plane_error_simple_129640_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_129640| SUBTYPE "129640" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_129640_TCC2| 0 (|sphere_to_2D_plane_error_simple_129640_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_129640| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_129640| 0 (|sphere_to_2D_plane_error_simple_129640-1| |nil| 3709312371 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 129640, ERROR = 10.45 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_148160_TCC1| 0 (|sphere_to_2D_plane_error_simple_148160_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_148160| SUBTYPE "148160" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_148160_TCC2| 0 (|sphere_to_2D_plane_error_simple_148160_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_148160| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_148160| 0 (|sphere_to_2D_plane_error_simple_148160-1| |nil| 3709312821 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 148160, ERROR = 15.45 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_166680_TCC1| 0 (|sphere_to_2D_plane_error_simple_166680_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_166680| SUBTYPE "166680" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_166680_TCC2| 0 (|sphere_to_2D_plane_error_simple_166680_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL (|sphere_to_2D_plane_error_simple_166680| SUBTYPE "22" "{x: uint8 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_166680_TCC3| 0 (|sphere_to_2D_plane_error_simple_166680_TCC3-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_166680| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_166680_TCC4| 0 (|sphere_to_2D_plane_error_simple_166680_TCC4-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_166680| SUBTYPE "error_proj.ERROR" "posreal"))) (|sphere_to_2D_plane_error_simple_166680| 0 (|sphere_to_2D_plane_error_simple_166680-1| |nil| 3709313049 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 166680, ERROR = 22 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (< CONST-DECL "bool" |reals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_185200_TCC1| 0 (|sphere_to_2D_plane_error_simple_185200_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sphere_to_2D_plane_error_simple_185200| SUBTYPE "185200" "{x: uint32 | integers.even?(x)}"))) (|sphere_to_2D_plane_error_simple_185200_TCC2| 0 (|sphere_to_2D_plane_error_simple_185200_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_185200| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_185200| 0 (|sphere_to_2D_plane_error_simple_185200-1| |nil| 3709313355 ("" (CASE "NOT FORALL (c: Vect3): c`z=0 IMPLIES LET const1 = 185200, ERROR = 30.5 IN c`x >= sqrt(sq(R_earth) - sq(const1)) AND c`x <= R_earth AND sqv(c) <= sq(R_earth) IMPLIES sqv(last_two_proj_twist((((R_earth) / (norm(c))) * c) - c)) <= ERROR ^ 2") (("1" (HIDE 2) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL) ("2" (SKOLETIN) (("2" (SKOLETIN) (("2" (SKEEP*) (("2" (LEMMA "sphere_to_2D_plane_error_reduction") (("2" (INST - "R_earth" "const1" "ERROR") (("2" (SPLIT -) (("1" (INST - "p") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "error_valid_simple_def") (("2" (INST?) (("2" (INST - "p") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "error_valid_simple?") (("2" (ASSERT) (("2" (EXPAND "R_earth") (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|error_valid?| CONST-DECL "bool" |error_proj| NIL) (|error_valid_simple_def| FORMULA-DECL NIL |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|error_valid_simple?| CONST-DECL "bool" |error_proj| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sphere_to_2D_plane_error_reduction| FORMULA-DECL NIL |error_proj| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "real" |vectors_2D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sphere_to_2D_plane_error_simple_185200_27780_TCC1| 0 (|sphere_to_2D_plane_error_simple_185200_27780_TCC1-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_185200_27780| SUBTYPE "error_proj.const1" "posreal"))) (|sphere_to_2D_plane_error_simple_185200_27780_TCC2| 0 (|sphere_to_2D_plane_error_simple_185200_27780_TCC2-1| NIL 3884829108 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sphere_to_2D_plane_error_simple_185200_27780| SUBTYPE "error_proj.edgelen" "posreal"))) (|sphere_to_2D_plane_error_simple_185200_27780| 0 (|sphere_to_2D_plane_error_simple_185200_27780-2| |nil| 3712484003 ("" (SKOLETIN) (("" (SKOLETIN) (("" (SKOLETIN) (("" (SKEEP) (("" (LEMMA "sphere_to_2D_plane_error_reduction_edgebound") (("" (INST - "R_earth" "const1" "ERROR" "edgelen") (("" (ASSERT) (("" (SPLIT -) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "error_valid_simple_edgebound_def") (("2" (INST?) (("2" (INST - "(# x := R_earth, y := 0, z := 0 #)" "sqrt(sq(R_earth)-sq(edgelen / 2))") (("1" (ASSERT) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "R_earth") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (LEMMA "sq_eq") (("1" (INST?) (("1" (REWRITE "sq_sqrt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "error_valid_simple_edgebound?") (("2" (ASSERT) (("2" (LEMMA "R_earth") (("2" (ASSERT) (("2" (CASE "NOT FORALL (c: Vect3):c`z=0 IMPLIES
        c`x >= sqrt(sq(R_earth) - sq(const1)) AND
         c`x <= R_earth AND
          sqv(c) <= sq(R_earth) AND sqv(c) >= sq(R_earth) - sq(edgelen / 2)
         IMPLIES
         sqv(last_two_proj_twist(((R_earth / (norm(c))) * c) - c)) <=
          ERROR ^ 2") (("1" (HIDE 2) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (GRIND) (("1" (METIT *) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (INST - "(# x:=c`x, y:= sqrt(sq(c`y)+sq(c`z)), z:= 0 #)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (CASE "NOT norm((# x := c`x,
y := sqrt(sq(c`y) + sq(c`z)),
z := 0 #)) = norm(c)") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) (("1" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) (("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) (("3" (TYPEPRED "sqrt(sq(c`y)+sq(c`z))") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP*) (("3" (LEMMA "vectors_3D.norm_eq_0") (("3" (INST?) (("3" (ASSERT) (("3" (REPLACES -1) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|error_valid_simple_edgebound_def| FORMULA-DECL NIL |error_proj| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|edgelen| SKOLEM-CONST-DECL "{x: uint16 | even?(x)}" |error_proj| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|norm_eq_0| FORMULA-DECL NIL |vectors_3D| |vectors|) (|norm_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|sqv_zero| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_x| FORMULA-DECL NIL |vectors_3D| |vectors|) (|comp_zero_z| FORMULA-DECL NIL |vectors_3D| |vectors|) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_nzv| APPLICATION-JUDGEMENT "Nz_vector" |vectors_3D| |vectors|) (|nz_sqv_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Nz_vect3| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|zero| CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_2D| |vectors|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_2D| |vectors|) (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|) (|last_two_proj_twist| CONST-DECL "Vect2" |error_proj| NIL) (- CONST-DECL "Vector" |vectors_3D| |vectors|) (* CONST-DECL "Vector" |vectors_3D| |vectors|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|error_valid_simple_edgebound?| CONST-DECL "bool" |error_proj| NIL) (|nz_norm_gt_0| APPLICATION-JUDGEMENT "posreal" |vectors_3D| |vectors|) (* CONST-DECL "real" |vectors_3D| |vectors|) (|sqv| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|sq_eq| FORMULA-DECL NIL |sq| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sphere_to_2D_plane_error_reduction_edgebound| FORMULA-DECL NIL |error_proj| NIL) (|error_valid_edgebound?| CONST-DECL "bool" |error_proj| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|R_earth| CONST-DECL "posreal" |error_proj| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|norm| CONST-DECL "nnreal" |vectors_3D| |vectors|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|Vector| TYPE-EQ-DECL NIL |vectors_3D| |vectors|) (|Vect3| TYPE-EQ-DECL NIL |vectors_3D_def| |vectors|) (|uint16| TYPE-EQ-DECL NIL |integertypes| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) NIL) (|sphere_to_2D_plane_error_simple_185200_27780-1| |nil| 3712332984 ("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL) NIL NIL)))
