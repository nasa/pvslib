;-*-lisp-*-

(defparameter *varbpts* nil) ;; (lb,ub) per variable
(defparameter *varipts* nil) ;; (b1,b2) per variable, where bi=TRUE means non-strict inequality

;;; BEGIN COLLECT-MONOMIALS
;;
;; The following functions implement several pre-processing steps
;; needed to handle certain polynomial expressions in PVS.
;;
;; Assume a sub-expression language of PVS-objects defined as follows
;;
;; r ::= <rational numerical value>
;; n ::= <positive natural numerical value>
;; var ::= identifier
;;
;; <expr> := var | r | (<expr>) | -<expr> | <expr> ( + | - | * ) <expr> |
;;           <expr> / r | <expr>^n
;;
;; The function  (get-multivar-polynomial <expr> (<var1> ... <varn>))
;; returns either nil if there is an error or two lists:
;; 1. (<n1> ... <nn>) : List of maximum degrees of <var1>... <varn> in <expr>.
;; 2. ((<r1> . <m1>) ... (<rn> . mn>)) : List of monomials in <expr>. A
;; monomial is a coefficient <ri> and an array <mi> of n positions, where the
;; value at the i-th position represents the degree of the i-th var.
;;
;; Example:  Let expr be 4.44 + 5*x^2 + 7.77*x*y^3 + 0.55*x*x
;;
;; (get-multivar-polynomial expr ("x" "y")) returns the following two lists:
;;
;; 1. (2 3): Maximum degree of "x" and "y" in expr, respectively.
;; 2. ( (4.44 . (0 0))     ;; 4.44
;;      (5.55 . (2 0))     ;; 5.55*x^2
;;      (7.77 . (1 3)) )   ;; 7.77*x*y^3
;;

(defvar *monomial-var-names* nil)

(defvar *monomial-null-exponents* nil)

;; Building the polynomial representation uses an intermediate list
;; structure to assemble the elements as the recursive descent of an
;; expression proceeds.  Each element has one of these forms:
;;     (num  <number>)
;;     (var  <variable-index> <exponent>)
;;     (mono r e1 ... en)
;;     (poly (r e1 ... en) ...)
;; As each sub-expression is recognized, one of these objects will be
;; generated for it, which will later be used to carry out operations
;; as the overall polynomial structure is computed.


;; A monomial term is represented by a list (r e1 ... en), where
;; r is a rational coefficient and e1,...,en are integer exponents
;; for the n variables.

(defun make-monomial-repr (num var-expon)
  (let ((exponents (copy-list *monomial-null-exponents*)))
    (when var-expon
      (setf (nth (car var-expon) exponents) (cadr var-expon)))
    `(mono ,num ,@exponents)))

;; The following function is used when a sub-expression needs to be
;; cast in the form of a polynomial.

(defun make-poly-expr (expr)
  (case (car expr)
    (num  `(poly ,(cdr (make-monomial-repr (cadr expr) nil))))
    (var  `(poly ,(cdr (make-monomial-repr 1 (cdr expr)))))
    (mono `(poly ,(cdr expr)))
    (poly expr)))

;; Negating an expression involves negating each coefficient.

(defun poly-neg-monomials (expr)
  (case (car expr)
    (num  `(num ,(- (cadr expr))))
    (var  (make-monomial-repr -1 (cdr expr)))
    (mono `(mono ,(- (cadr expr)) ,@(cddr expr)))
    (poly `(poly ,@(mapcar #'(lambda (m) (cons (- (car m)) (cdr m)))
			   (cdr expr))))))

;; Dividing an expression by a rational number requires dividing
;; each coefficient.

(defun poly-quotient-monomials (expr divisor)
  (let ((div-num (if (eq (car divisor) 'num) (cadr divisor) 1)))
    (case (car expr)
      (num  `(num ,(/ (cadr expr) div-num)))
      (var  (make-monomial-repr (/ 1 div-num) (cdr expr)))
      (mono `(mono ,(/ (cadr expr) div-num) ,@(cddr expr)))
      (poly `(poly ,@(mapcar #'(lambda (m) (cons (/ (car m) div-num) (cdr m)))
			     (cdr expr)))))))

;; Form the sum or difference of two polynomials by concatenating
;; their lists of monomials, with negation applied as needed.
;; First convert single terms to polynomials before proceeding.

(defun poly-sum-monomials (left op right)
  (let* ((left-poly (make-poly-expr left))
	 (signed-right (make-poly-expr 
			(if (eq op '-) (poly-neg-monomials right) right))))
    `(poly ,@(append (cdr left-poly) (cdr signed-right)))))

;; Exponentiation proceeds differently according to expression type.

(defun poly-expon-monomials (expr exponent)
  (let ((exp-num (if (eq (car exponent) 'num) (cadr exponent) 0)))
    (case (car expr)
      (num  `(num ,(expt (cadr expr) exp-num)))
      (var  `(var ,(cadr expr) ,(* exp-num (caddr expr))))
      (mono `(mono ,(expt (cadr expr) exp-num)
		   ,@(mapcar #'(lambda (var) (* var exp-num)) (cddr expr))))
      (poly (reduce #'poly-product-monomials
		    (make-list exp-num :initial-element expr))))))


;; Products of expressions are constructed for all the possible
;; combinations of sub-expressions that can appear as arguments.
;; The arguments are commuted in some cases to reduce the number of
;; combinations that must be enumerated.

(defun poly-product-monomials (left right)
  (flet ((mult-by-poly (expr1 expr2)
	   ;; expr2 must be poly; returns a list of monomials.
	   (mapcar #'(lambda (m)
		       (cdr (poly-product-monomials expr1 `(mono ,@m))))
		   (cdr expr2)))
	 (var-mult-mono (expr1 expr2)
	   (let ((vars (copy-list (cddr expr2))))
	     (incf (nth (cadr expr1) vars) (caddr expr1))
	     `(mono ,(cadr expr2) ,@vars))))

    (case (car left)
      (num (case (car right)
	     (num  `(num ,(* (cadr left) (cadr right))))
	     (var  (make-monomial-repr (cadr left) (cdr right)))
	     (mono `(mono ,(* (cadr left) (cadr right)) ,@(cddr right)))
	     (poly `(poly ,@(mult-by-poly left right)))))
      (var (case (car right)
	     (var  (var-mult-mono left (make-monomial-repr 1 (cdr right))))
	     (mono (var-mult-mono left right))
	     (poly `(poly ,@(mult-by-poly left right)))
	     (t (poly-product-monomials right left))))
      (mono (case (car right)
	      (mono `(mono ,(* (cadr left) (cadr right))
			   ,@(mapcar #'+ (cddr left) (cddr right))))
	      (poly `(poly ,@(mult-by-poly left right)))
	      (t (poly-product-monomials right left))))
      (poly (case (car right)
	      ;; Compute the cross product, then sum terms with equal exponents.
	      (poly `(poly ,@(combine-common-terms
			      (mapcan
			       #'(lambda (m)
				   (cdr (poly-product-monomials `(mono ,@m)
								right)))
			       (cdr left)))))
	      (t (poly-product-monomials right left)))) )))


;; Collect lists of monomials by parsing and processing the given PVS
;; expression.  Recursive descent is used to traverse the grammar of
;; allowed subexpressions.  Individual numbers, variables, monomials
;; and polynomials are combined on the way back up to the top of the
;; expression tree.  Returns a list of monomials whose sum is equal
;; to the input expression.

(defun collect-monomials (expr)
  (cond ((typep expr 'name-expr)
	 `(var ,(position (id expr) *monomial-var-names* :test #'string=) 1))
	((typep expr 'fieldappl)
	 `(var ,(position (format nil "~a" expr) *monomial-var-names* :test #'string=) 1))
	((typep expr 'rational-expr)
	 `(num ,(number expr)))
	((typep expr 'decimal)
	 `(num ,(/ (number (args1 expr)) (number (args2 expr)))))
	((typep expr 'infix-application)
	 (let ((op (id (operator expr)))
	       (left  (collect-monomials (args1 expr)))
	       (right (collect-monomials (args2 expr))))
	   (case op
	     (* (poly-product-monomials left right))
	     (/ (if (number-expr? (args2 expr))
		    (poly-quotient-monomials left right)
		  (type-error nil "~a doesn't seem to be a polynomial%~" expr)))
	     (^ (poly-expon-monomials left right))
	     ((+ -) (poly-sum-monomials left op right))
	     (t nil))))  ;;; unrecognized infix operator
	((and (typep expr 'unary-application)
	      (eq (id (operator expr)) '-))
	 (poly-neg-monomials (collect-monomials (argument expr))))

	(t nil)))	  ;;; unknown case: error???


;; Look for terms having identical exponents on all variables.  Combine
;; these by summing their coefficients, then purge any resulting terms
;; with zero coefficients.

(defun combine-common-terms (terms)
  (let ((deg-terms nil))
    ;; Build an A-list where each item has the form ((e1 ... en) . coeff).
    ;; Use the exponent lists as keys to search for matching monomials.
    (loop for term in terms
	  do (let ((item (assoc (cdr term) deg-terms :test #'equal)))
	       (if item
		   (incf (cdr item) (car term))
		   (setq deg-terms
			 (acons (cdr term) (car term) deg-terms)))))
    (let ((combined (mapcar #'(lambda (term) (cons (cdr term) (car term)))
			    deg-terms)))
      ;; Drop every monomial having a zero coefficient.
      (mapcan #'(lambda (m) (and (not (zerop (car m))) (list m)))
	      combined))))


;; This is the top-level function to process multivariate polynomials.
;; Returns a list of max degrees and the list of monomials (in no
;; particular order).

(defun get-multivar-polynomial (expr vars)
   (multiple-value-bind 
       (value error)
       (ignore-errors
	 (setq *monomial-var-names* vars)
	 (setq *monomial-null-exponents*
	       (make-list (length vars) :initial-element 0))
	 (let* ((normalized (cdr (make-poly-expr (collect-monomials expr))))
		(combined (or (combine-common-terms normalized)
			      (mapcar #'(lambda (x) (list 0 0)) vars)))
		(max-degrees (loop for n from 1 to (length vars)
			      collect (apply #'max
					     (mapcar #'(lambda (degrees)
							 (nth n degrees))
						     combined)))))
	   (list max-degrees combined)))
     value))

;;; END COLLECT-MONOMIALS

(defun get-string-expr (expr)
  (if (stringp expr) expr
     (format nil "~a" (extra-get-expr expr))))

(defun is-neq-relation (expr)
  (let ((rel (car (is-relation expr))))
    (when (not (equal rel '=)) rel)))

(defun variable-id (expr)
  (if (name-expr? expr) (id expr)
    (format nil "~a" expr)))

;; Get intervals for each variable in vars in relational formulas fms.
;; If vars is null get all variables. Return variable list
(defun get-intervars (fms &optional vars)
  (setq *varbpts* (make-hash-table :test #'equal))
  (setq *varipts* (make-hash-table :test #'equal))
  (loop for fm in fms
	do  (let* ((rel     (is-neq-relation fm))
		   (islb    (or (equal rel '>=) (equal rel '>)))
		   (isincl  (or (equal rel '>=) (equal rel '<=))))
	      (and rel (not (equal rel '=))
		   (cond ((is-variable-expr (args1 fm) vars)
			  (let ((num (extra-get-number-from-expr (args2 fm))))
			    (when num
			      (insert-interval (variable-id (args1 fm)) num islb isincl))))
			 ((is-variable-expr (args2 fm) vars)
			  (let ((num (extra-get-number-from-expr (args1 fm))))
			    (when num
			      (insert-interval (variable-id (args2 fm)) num (not islb) isincl))))
			 ((and (is-function-expr (args1 fm) '|abs|)
			       (is-variable-expr (args1 (args1 fm)) vars)
			       (not islb))
			  (let ((num (extra-get-number-from-expr (args2 fm))))
			    (when num
			      (insert-interval (variable-id (args1 (args1 fm))) (- num) t isincl)
			      (insert-interval (variable-id (args1 (args1 fm))) num nil isincl))))
			 ((and (is-function-expr (args2 fm) '|abs|)
			       (is-variable-expr (args1 (args2 fm)) vars)
			       islb)
			  (let ((num (extra-get-number-from-expr (args1 fm))))
			    (when num
			      (insert-interval (variable-id (args1 (args2 fm))) (- num) t isincl)
			      (insert-interval (variable-id (args1 (args2 fm))) num nil isincl))))))))
  (or vars (get-hash-keys *varbpts*)))

(defun insert-interval (var val islb isincl)
  (let* ((var (format nil "~a" var))
	 (v   (gethash var *varbpts*))
	 (b   (gethash var *varipts*))
	 (lb  (car v))
	 (ub  (cdr v)))
    (if islb
	(let ((ilb (or (car b) isincl))
	      (iub (cdr b)))
	  (when (equal(max val (or lb val)) val)
	    (setf (gethash var *varbpts*) (cons val ub))
	    (setf (gethash var *varipts*) (cons ilb iub))))
      (let ((ilb (car b))
	    (iub (or (cdr b) isincl)))
	(when (equal (min val (or ub val)) val)
	  (setf (gethash var *varbpts*) (cons lb val))
	  (setf (gethash var *varipts*) (cons ilb iub)))))))

(defun find-unbound-vars (vars)
  (loop for v in vars
	when (let ((inter (gethash v *varbpts*)))
	       (and (null (car inter)) (null (cdr inter))))
	collect v))

(defun lambda-interval-lb (vars)
  (format nil "LAMBDA (i:nat): ~{IF i=~a THEN ~a ELS~}E 0 ENDIF"
	  (loop for i from 0 below (length vars)
		for v in vars
		append (list i (or (car (gethash v *varbpts*))
				   (- (cdr (gethash v *varbpts*)) 1))))))
(defun list-interval-lb (vars)
  (format nil "(:~{~a~^,~}:)"
	  (mapcar #'(lambda (v)
		      (or (car (gethash v *varbpts*))
			  (- (cdr (gethash v *varbpts*)) 1)))
		  vars)))

(defun lambda-interval-ub (vars)
  (format nil "LAMBDA (i:nat): ~{IF i=~a THEN ~a ELS~}E 0 ENDIF"
	  (loop for i from 0 below (length vars)
		for v in vars
		append (list i (or (cdr (gethash v *varbpts*))
				   (+ (car (gethash v *varbpts*)) 1))))))

(defun list-interval-ub (vars)
  (format nil "(:~{~a~^,~}:)"
	  (mapcar #'(lambda (v)
		      (or (cdr (gethash v *varbpts*))
			  (+ (car (gethash v *varbpts*)) 1)))
		  vars)))

(defun pvs-bool (l)
  (if l "true" "false"))

(defun lambda-interval-bpts (vars)
  (format nil "LAMBDA (i:nat): ~{IF i=~a THEN (~a,~a) ELS~}E (false,false) ENDIF"
	  (loop for i from 0 below (length vars)
		for v in vars
		append (list i (pvs-bool (car (gethash v *varbpts*)))
			     (pvs-bool (cdr (gethash v *varbpts*)))))))

(defun list-interval-bpts (vars)
  (format nil "(:~{(~a,~a)~^,~}:)"
	  (loop for v in vars
		append (list (pvs-bool (car (gethash v *varbpts*)))
			     (pvs-bool (cdr (gethash v *varbpts*)))))))

(defun lambda-interval-ipts (vars)
  (format nil "LAMBDA (i:nat): ~{IF i=~a THEN (~a) ELS~}E (false,false) ENDIF"
	  (loop for i from 0 below (length vars)
		for v in vars
		append (list i (cond ((and (car (gethash v *varbpts*)) (cdr (gethash v *varbpts*)))
				      (format nil "~a,~a"
					      (pvs-bool (car (gethash v *varipts*)))
					      (pvs-bool (cdr (gethash v *varipts*)))))
				     ((car (gethash v *varbpts*))
				      (format nil "~a,false" (pvs-bool (car (gethash v *varipts*)))))
				     ((cdr (gethash v *varbpts*))
				      (format nil "false,~a" (pvs-bool (cdr (gethash v *varipts*)))))
				     (t "false,false"))))))
(defun list-interval-ipts (vars)
  (format nil "(:~{(~a,~a)~^,~}:)"
	  (loop for v in vars
		append (list (cond ((and (car (gethash v *varbpts*)) (cdr (gethash v *varbpts*)))
				      (format nil "~a,~a"
					      (pvs-bool (car (gethash v *varipts*)))
					      (pvs-bool (cdr (gethash v *varipts*)))))
				     ((car (gethash v *varbpts*))
				      (format nil "~a,false" (pvs-bool (car (gethash v *varipts*)))))
				     ((cdr (gethash v *varbpts*))
				      (format nil "false,~a" (pvs-bool (cdr (gethash v *varipts*)))))
				     (t "false,false"))))))

(defun lambda-poly (list)
  (format nil "LAMBDA (i:nat)(j:nat)(k:nat): ~{IF i=~a AND j=~a AND k=~a THEN 1 ELS~}E 0 ENDIF" 
	  (loop for i from 0 below (length list)
		for l in list
		append (loop for j from 0 below (length l)
			     for v in l
			     append (list i j v)))))

(defun lambda-list (list)
  (let ((myl (loop for i from 0 below (length list)
		   for l in list
		   append (when (not (equal l 0)) (list i l)))))
    (format nil "LAMBDA(i:nat): ~a"
	    (if myl 
		(format nil "~{IF i=~a THEN ~a ELS~}E 0 ENDIF" myl)
	      0))))

;; Returns the conjuncts in expr in reverse order
(defun reverse-conjuncts (expr &optional conjs)
  (if (conjunction? expr)
      (reverse-conjuncts (args2 expr) (cons (args1 expr) conjs))
    (cons expr conjs)))

;; Returns variables in polynomial expression. Returns null if expression is not recognized
;; as a polynomial
(defun variables-in-poly (expr &optional vars)
  (cond ((is-variable-expr expr)
	 (let ((name (format nil "~a" (variable-id expr))))
	   (if (not (member name vars :test #'string=))
	       (cons name vars)
	     vars)))
	((extra-get-number-from-expr expr) vars)
	((is-prefix-operator expr '-)
	 (variables-in-poly (args1 expr) vars))
	((and (or (is-infix-operator expr '^)
		  (is-infix-operator expr '/))
	      (extra-get-number-from-expr (args2 expr)))
	 (variables-in-poly (args1 expr) vars))
	((and (infix-application? expr)
	      (name-expr? (operator expr))
	      (member (id (operator expr)) '(+ - *)))
	 (variables-in-poly (args2 expr) (variables-in-poly (args1 expr) vars)))))

;;;; STRATEGIES

(defhelper multipoly__ (pvspoly rel polyname vars)
  (let ((poly (get-multivar-polynomial pvspoly vars))
	(msg  (unless poly
		(format
		 nil
		 "Expression doesn't seem to be a polynomial inequality on variable~:[~;s~] ~{~a~^,~}."
		 (cdr vars) vars))))
    (if msg
	(printf msg)
      (let ((terms (length (cadr poly)))
	    (deg   (lambda-list (car poly)))
	    (coeff (lambda-list (mapcar #'car (cadr poly))))
	    (poly  (lambda-poly (mapcar #'cdr (cadr poly))))
	    (mpoly (format nil "mk_mpoly(~a,~a,~a,~a~@[,reals.~a~])"
			   poly deg terms coeff rel)))
	(name-label polyname mpoly :hide? t))))
  "[Bernstein] Internal strategy"
  "")

(defhelper multipolynomial__ (poly vars equiv polyname varsname vsname)
  (let ((expr    (extra-get-expr poly))
	(rel     (is-neq-relation expr))
	(pvspoly (cond (rel (let ((num (extra-get-number-from-expr (args2 expr))))
			      (if (and num (equal num 0)) (args1 expr)
				(mk-application '- (args1 expr) (args2 expr)))))
		       ((is-number-type (type expr)) expr)))
	(vars    (when pvspoly (or (enlist-it vars) (variables-in-poly pvspoly)))))
    (when vars
      (let ((nvars     (length vars))
	    (lvars     (lambda-list vars))
	    (label     (format nil "~a:" polyname))
	    (casestr   (format nil "~a = mpoly_eval(~a,~a)(~a)" pvspoly polyname nvars varsname)))
	(then
	 (name-label varsname lvars :hide? t)
	 (try (multipoly__$ pvspoly rel polyname vars)
	      (try-branch (case casestr)
			  ((then
			    (multivariables__$ vars vsname)
			    (rewrite varsname :dir rl))
			   (then
			    (hide-all-but 1)
			    (when equiv? (multipoly-eq__$ polyname varsname vsname)))
			   (skip))
			  (reveal label))
	      (skip))))))
  "[Bernstein] Internal strategy. Introduces a multivariate polynomial structure named POLYNAME whose evaluation is
equivalent to the polynomial POLY on VARS.The variables of the polynomial are inferred when VARS
is nil. If equiv? is nil, the strategy does not try to prove the equivalence between the original
polynomial and its Bernstein representation. VARSNAME and VSNAME are names of variables structures."
  "")

(defhelper multivars__ (fms vsname vars)
  (let ((vars   (get-intervars fms vars))
	(unvars (find-unbound-vars vars))
	(msg    (when unvars
		  (format nil "Variable~:[~;s~] ~{~a~^,~} ~:[is~;are~] unbounded."
			  (cdr unvars) unvars (cdr unvars)))))
    (if msg
	(printf msg)
      (let ((lb      (lambda-interval-lb vars))
	    (ub      (lambda-interval-ub vars))
	    (iepts   (lambda-interval-ipts vars))
	    (bdpts   (lambda-interval-bpts vars))
	    (mvars   (format nil "mk_mvars(~a,~a,~a,~a,~a)" (length vars) lb ub iepts bdpts)))
	(name-label vsname mvars :hide? t))))
  "[Bernstein] Internal strategy"
  "")

(defhelper multivariables__ (vars vsname)
  (let ((vars (enlist-it vars))
	(fms  (mapcar #'(lambda (fn) (extra-get-formula fn)) (extra-get-fnums '-))))
    (try (multivars__$ fms vsname vars)
	 (let ((vars    (or vars (get-hash-keys *varbpts*)))
	       (lvars   (lambda-list vars))
	       (casestr (format nil "mvars_between?(~a)(~a)" vsname lvars)))
	   (branch (case casestr)
		   ((skip)
		    (multivars-bet__$ vsname)
		    (skip))))
	 (skip)))
  "[Bernstein] Internal strategy. Introduces a multivariable structure for VARS named VSNAME"
  "")

(defhelper multipoly-eq__ (polyname varsname vsname)
  (let ((poly     (format nil "~a`mpoly" polyname))
	(deg      (format nil "~a`mdeg" polyname))
	(coeff    (format nil "~a`mcoeff" polyname)))
    (with-fresh-names
     ((mp__ poly) (md__ deg) (mc__ coeff))
     (expand* polyname vsname)
     (expand "multipoly_eval")
     (apply (repeat (expand "sigma")))
     (expand "polyproduct_eval")
     (apply (repeat (expand* "product" varsname)))
     (expand mc__ :assert? none)
     (expand polyname :assert? nil)
     (expand md__ :assert? none)
     (expand polyname :assert? nil)
     (expand "polynomial" :assert? none)
     (expand mp__ :assert? none)
     (expand polyname :assert? nil)
     (apply (repeat (expand "sigma" :assert? nil)))
     (apply (repeat (rewrite "expt_x1")))
     (assert)
     (grind)))
  "[Bernstein] Internal strategy"
  "")

(defhelper multivars-bet__ (vsname)
  (then
   (expand* "boxbetween?" "interval_between?")
   (skosimp* :preds? t)
   (expand vsname)
   (repeat (lift-if 1))
   (ground))
  "[Bernstein] Internal strategy"
  "")

(defstep bernstein-minmax (poly &optional vars (precision 2) (depth 100)
				vardir (equiv? t))
  (let ((nqn (no-qualified-name "Bernstein@strategies.BernsteinStrategy__")))
    (if nqn 
	(printf "This strategy requires theory ~a to be imported in the current context" nqn)
      (with-fresh-names
       ((Pmm__) (Varsmm__) (Vsmm__))
       (let ((prec   (expt 10 (- precision)))
	     (sprec  (1+ precision))
	     (vardir (or vardir "MaxVarMinDir"))
	     (vsnvs  (format nil "~a`numvars" Vsmm__))
	     (expr   (format nil "multipoly_minmax(~a,~a,~a,~a,~a)"
			     Pmm__ Vsmm__ depth vardir prec)))
	 (try (multipolynomial__ poly vars equiv? Pmm__ Varsmm__ Vsmm__)
	      (with-fresh-labels
	       ((bb! -1)(mpe! -2) (sp!))
	       (eval-expr expr)
	       (lemma "multipoly_minmax_sound")
	       (label sp! -1)
	       (inst? -1)
	       (spread
		(split)
		((then
		  (replaces -2)
		  (expand "sound_poly_fin?")
		  (flatten)
		  (hide (-2 -3 -4))
		  (expand "forall_X_poly_between")
		  (inst -1 Varsmm__)
		  (eval-expr vsnvs)
		  (replaces -1)
		  (replaces mpe! :dir rl)
		  (spread
		   (split -1)
		   ((then
		     (flatten)
		     (decimalize -1 sprec)
		     (decimalize -2 sprec)
		     (delete bb!))
		    (then
		     (lemma "boxbetween_eq_bnd")
		     (inst? -1 :where sp!)
		     (inst? -1 :where bb!)
		     (assert)
		     (eval-formula)))))
		 (eval-formula))))
	      (printf "Expression doesn't seem to be a polynomial or a polynomial inequality"))))))
  "[Bernstein] Find the minimum and maximum of a multivariate polynomial on
VARS, whithin PRECISION decimals. The option DEPTH specifies a maximum depth.
The option VARDIR is an heuristic for selecting variables and direction when
subdividing the range of the variables, e.g., MaxVarMinDir, MaxVarMaxDir,
AltVarLeftRight, AltVarRightLeft (see theory Bernstein/vardirselector.pvs).
If VARDIR is nil, an appropriate method is automatically selected. If equiv? is nil, the strategy does
not try to prove the equivalence between the original polynomial and its Bernstein representation."
  "[Bernstein] Finding the minimum and maximum of a polynomial")

(defstep bernstein (&optional (fnum 1) vars (depth 100) vardir (equiv? t))
  (let ((nqn (no-qualified-name "Bernstein@strategies.BernsteinStrategy__")))
    (if nqn 
	(printf "This strategy requires theory ~a to be imported in the current context" nqn)
      (with-fresh-names
       ((Pb__) (Varsb__) (Vsb__))
       (beta)
       (let ((fnum    (car (extra-get-fnums fnum)))
	     (fm      (extra-get-formula fnum))
	     (quant   (cond ((forall-expr? fm) 1)
			    ((exists-expr? fm) -1))) ;; forall == quant > 0, exists == quant < 0
	     (proof   (or (not quant) (iff (> fnum 0) (> quant 0)))) ;; proof=false : find counterexample
	     (exprs   (cond ((exists-expr? fm) (reverse-conjuncts (expression fm)))
			    ((and (forall-expr? fm) (implication? (expression fm)))
			     (cons (args2 (expression fm))
				   (reverse-conjuncts (args1 (expression fm)))))))
	     (fms     (if quant (cdr exprs)
			(mapcar #'(lambda (fn) (extra-get-formula fn)) (extra-get-fnums '-))))
	     (expr    (if quant (car exprs) fm))
	     (rel     (if (iff proof (> fnum 0)) (is-neq-relation expr)
			(neg-relation (is-neq-relation expr))))
	     (vardir  (or vardir
			  (if (member rel '(> >=))
			      "MaxVarMinDir"
			    "MaxVarMaxDir")))
	     (pvspoly (when rel
			(let ((num (extra-get-number-from-expr (args2 expr))))
			  (if (and num (equal num 0)) (args1 expr)
			    (mk-application '- (args1 expr) (args2 expr))))))
	     (vars    (when rel
			(or (enlist-it vars)
			    (if quant (mapcar #'(lambda (x) (format nil "~a" (id x))) (bindings fm))
			      (variables-in-poly pvspoly)))))
	     (msg     (when (not vars)
			(format nil "Formula ~a doesn't seem to be a polynomial inequality." fnum))))
	 (when fm
	   (if msg
	       (printf msg)
	     (bernstein__$ fnum quant proof fms vars rel pvspoly depth vardir equiv? Pb__ Varsb__ Vsb__)))))))
  "[Bernstein] Proves polynomial inequality FNUM using Bernstein's basis on VARS for DEPTH levels
of recursion. The option VARDIR is an heuristic for selecting variables and direction when
subdividing the range of the variables, e.g., MaxVarMinDir, MaxVarMaxDir,
AltVarLeftRight, AltVarRightLeft (see theory Bernstein/vardirselector.pvs). If VARDIR
is nil, an appropriate method is automatically selected. If equiv? is nil, the strategy does not
try to prove the equivalence between the original polynomial and its Bernstein representation."
  "[Bernstein] Proving polynomial inequality using Bernstein's basis...")

(defhelper bernstein__ (fnum quant proof fms vars rel pvspoly depth vardir equiv? polyname varsname vsname)
  (with-fresh-labels
   ((bp! fnum))
   (let ((msgvars (format nil "variables (: ~{~a~^, ~} :)" vars))
	 (sko     (and quant proof))
	 (inst    (and quant (not proof)))
	 (bps     (format nil "multipoly_strategy(~a,~a,~a,~a,~:[false~;true~])"
			  polyname vsname depth vardir proof)))
     (try
      (multivars__$ fms vsname vars)
      (try (multipoly__$ pvspoly rel polyname vars)
	   (spread
	    (eval-expr bps :quiet? t)
	    ((let ((result    (args2 (extra-get-formula -1)))
		   (isunknown (and (constructor-name-expr? result) (equal (id result) '|Unknown|)))
		   (istrue    (and (constructor-name-expr? result) (equal (id result) '|IsTrue|)))
		   (isfalse   (and (not isunknown) (not istrue)))
		   (lenvars   (length vars)))
	       (if isunknown
		   (printf "Inequality could not be proved or disproved. Try a depth higher than ~a."
			   depth)
		 (if (and istrue (not inst))
		     (with-fresh-names
		      (nvars__ :list lenvars)
		      (let ((newvars   (if sko nvars__ vars))
			    (lvars     (lambda-list newvars)))
			(then
			 (lemma "multipoly_strategy_true")
			 (inst? -1)
			 (assert)
			 (branch (split -1)
				 ((then
				   (hide -2)
				   (relabel bp! -1)
				   (when sko (skolem bp! newvars) (flatten))
				   (expand "forall_X_poly_interval")
				   (name-label varsname lvars :hide? t)
				   (inst -1 varsname)
				   (branch (split -1)
					   ((then
					     (hide-all-but bp!)
					     (when equiv? (multipoly-eq__$ polyname varsname vsname)))
					    (then
					     (hide-all-but bp!)
					     (expand varsname)
					     (multivars-bet__$ vsname)))))
				  (eval-formula))))))
		   (if (and isfalse (not inst))
		       (commentf "Counterexample has been found with ~a." msgvars)
		     (when isfalse
		       (let ((cex    (format nil "cex_~a" polyname))
			     (lex    (format nil "list2array(0)(~a)" (extra-get-expr '(! -1 r 1))))
			     (inst   (mapcar #'(lambda (x) (format nil "~a(~a)" cex x))
					     (fromto 0 (- (length vars) 1))))
			     (stinst (cons 'inst (cons bp! inst))))
			 (then
			  (name cex lex)
			  stinst
			  (eval-formula bp!))))))))
	     (then (hide bp!)
		   (expand polyname)
		   (grind))))
	   (skip))
      (skip))))
  "[Bernstein] Internal strategy"
  "")


