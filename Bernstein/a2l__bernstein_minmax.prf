(a2l__bernstein_minmax (a2l__Bern_coeffs_minmax_rec_TCC1 0 (a2l__Bern_coeffs_minmax_rec_TCC1-3 nil 3687268390 ("" (skosimp* :preds? t) (("" (expand "Bern_coeffs_minmax_rec") (("" (assert) (("" (replace -14 :hide? t) (("" (replace -14 :hide? t) (("" (replace -14 :hide? t) (("" (replace -14 :hide? t) (("" (lemma "a2l__multibscoeff_homomorphism") (("" (inst -1 "bsdegmono!1" "cf!1" "nvars!1" "terms!1" "mb!1" "bspoly!1" "f!1") (("" (replace -1 :hide? t) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
        (FORALL (nf: CoeffMono):
           (FORALL (i: below(nvars)):
              nf(i) <= bsdegmono(i) AND (v <= i IMPLIES f(i) = nf(i)))
            IMPLIES
            omm`lb_min <=
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf)
             AND
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf) <=
              omm`ub_max)
    AND unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND length_eq?(nvars)(omm) AND (omm`max_depth = depth)}" bernstein_minmax nil) (a2l__multibscoeff_homomorphism formula-decl nil a2l__multi_bernstein nil) (Coeff type-eq-decl nil util nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (represents const-decl "bool" multibernstein_into_polylist nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "minmax.single_outminmax(a2l__bernstein_minmax.thiscoeff, a2l__bernstein_minmax.thisachval, a2l__bernstein_minmax.thisvar, a2l__bernstein_minmax.depth)" "{omm: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb)): omm = bernstein_minmax.Bern_coeffs_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.f, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.v, a2l__bernstein_minmax.ep)}")) (a2l__Bern_coeffs_minmax_rec_TCC1-2 nil 3687261171 ("" (skeep :preds? t) (("" (hide -1) (("" (postpone) nil nil)) nil)) nil) nil nil (a2l__Bern_coeffs_minmax_rec subtype "minmax.single_outminmax(a2l__bernstein_minmax.thiscoeff, a2l__bernstein_minmax.thisachval, a2l__bernstein_minmax.thisvar, a2l__bernstein_minmax.depth)" "{omm: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb)): omm = bernstein_minmax.Bern_coeffs_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.f, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.v, a2l__bernstein_minmax.ep)}")) (a2l__Bern_coeffs_minmax_rec_TCC1-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec subtype "minmax.single_outminmax(a2l__bernstein_minmax.thiscoeff, a2l__bernstein_minmax.thisachval, a2l__bernstein_minmax.thisvar, a2l__bernstein_minmax.depth)" "{omm: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb)): omm = bernstein_minmax.Bern_coeffs_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.f, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.v, a2l__bernstein_minmax.ep)}"))) (a2l__Bern_coeffs_minmax_rec_TCC2 0 (a2l__Bern_coeffs_minmax_rec_TCC2-2 nil 3687261179 ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "(number_fields.-)(a2l__bernstein_minmax.v, 1)" "nat")) (a2l__Bern_coeffs_minmax_rec_TCC2-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec subtype "(number_fields.-)(a2l__bernstein_minmax.v, 1)" "nat"))) (a2l__Bern_coeffs_minmax_rec_TCC3 0 (a2l__Bern_coeffs_minmax_rec_TCC3-3 nil 3687278910 ("" (skosimp* :preds? t) (("" (case "var_index!1=v!1 - 1") (("1" (replace -12 :hide? t) (("1" (assert) nil nil)) nil) ("2" (replace -11 :hide? t) (("2" (assert) (("2" (inst -7 "var_index!1") nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nf" "{f: util.CoeffMono | FORALL (var_index: naturalnumbers.below(a2l__bernstein_minmax.nvars)): reals.<=(f(var_index), a2l__bernstein_minmax.bsdegmono(var_index))}")) (a2l__Bern_coeffs_minmax_rec_TCC3-2 nil 3687261185 ("" (skosimp* :preds? t) (("" (hide -2) (("" (expand "edge_point?" 2) (("" (expand "edge_point?") (("" (postpone) nil nil)) nil)) nil)) nil)) nil) nil nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nf" "{f: util.CoeffMono | FORALL (var_index: naturalnumbers.below(a2l__bernstein_minmax.nvars)): reals.<=(f(var_index), a2l__bernstein_minmax.bsdegmono(var_index))}")) (a2l__Bern_coeffs_minmax_rec_TCC3-1 nil 3686059360 ("" (subtype-tcc) nil nil) ((a2l__multibscoeff const-decl "real" a2l__multi_bernstein nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nf" "{f: util.CoeffMono | FORALL (var_index: naturalnumbers.below(a2l__bernstein_minmax.nvars)): reals.<=(f(var_index), a2l__bernstein_minmax.bsdegmono(var_index))}"))) (a2l__Bern_coeffs_minmax_rec_TCC4 0 (a2l__Bern_coeffs_minmax_rec_TCC4-4 nil 3687281798 ("" (skosimp*) (("" (replaces -3) (("" (expand "edge_point?") (("" (typepred "ep!1") (("" (expand "edge_point?") (("" (flatten) (("" (assert) (("" (flatten) (("" (assert) (("" (skosimp*) (("" (replace -4) (("" (case "i!1 = v!1-1") (("1" (replace -1) (("1" (assert) (("1" (ground) nil nil)) nil)) nil) ("2" (inst - "i!1") (("1" (assert) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (IntervalEndpoints type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (DegreeMono type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (subrange type-eq-decl nil integers nil) (i!1 skolem-const-decl "subrange(v!1 - 1, nvars!1 - 1)" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (v!1 skolem-const-decl "nat" a2l__bernstein_minmax nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (edge_point? const-decl "bool" util nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nep" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1)))")) (a2l__Bern_coeffs_minmax_rec_TCC4-3 nil 3687261190 ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil) ((PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nep" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1)))")) (a2l__Bern_coeffs_minmax_rec_TCC4-2 nil 3687021982 ("" (postpone) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nep" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1)))")) (a2l__Bern_coeffs_minmax_rec_TCC4-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec subtype "a2l__bernstein_minmax.nep" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1)))"))) (a2l__Bern_coeffs_minmax_rec_TCC5 0 (a2l__Bern_coeffs_minmax_rec_TCC5-5 "" 3790097984 ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) shostak (a2l__Bern_coeffs_minmax_rec termination "a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep)" "nil")) (a2l__Bern_coeffs_minmax_rec_TCC5-4 nil 3687278972 ("" (skosimp* :preds? t) (("" (split) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil) ((lt_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) nil (a2l__Bern_coeffs_minmax_rec termination "a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep)" "nil")) (a2l__Bern_coeffs_minmax_rec_TCC5-3 nil 3687261196 ("" (postpone) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec termination "a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep)" "nil")) (a2l__Bern_coeffs_minmax_rec_TCC5-2 nil 3687021050 ("" (postpone) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec termination "a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep)" "nil")) (a2l__Bern_coeffs_minmax_rec_TCC5-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bern_coeffs_minmax_rec termination "a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep)" "nil"))) (a2l__Bern_coeffs_minmax_rec_TCC6 0 (a2l__Bern_coeffs_minmax_rec_TCC6-1 nil 3687278865 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (v!1 skolem-const-decl "nat" a2l__bernstein_minmax nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil) (represents? const-decl "bool" multibernstein_into_polylist nil) (represents const-decl "bool" multibernstein_into_polylist nil) (Polyproduct type-eq-decl nil util nil) (PolyproductList type-eq-decl nil a2l__util nil) (Polynomial type-eq-decl nil util nil) (PolynomialList type-eq-decl nil a2l__util nil) (represents const-decl "bool" arrays_into_lists structures) (Coefficient type-eq-decl nil a2l__util nil) (= const-decl "[T, T -> boolean]" equalities nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "LAMBDA (d: naturalnumbers.upto(a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)))): LET nf = LAMBDA (i: naturalnumbers.nat): IF i = (number_fields.-)(a2l__bernstein_minmax.v, 1) THEN d ELSE a2l__bernstein_minmax.f(i) ENDIF, nep = booleans.AND(a2l__bernstein_minmax.ep, (booleans.OR(booleans.AND(d = 0, a2l__bernstein_minmax.iepts`1), booleans.AND(a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)) /= 0, booleans.AND(d = a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)), a2l__bernstein_minmax.iepts`2))))) IN a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep)" "IterateBody[Outminmax](0, a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)))"))) (a2l__Bern_coeffs_minmax_rec_TCC7 0 (a2l__Bern_coeffs_minmax_rec_TCC7-1 nil 3687278865 ("" (skosimp*) (("" (expand "Bern_coeffs_minmax_rec") (("" (assert) (("" (case "FORALL (d: upto(bsdegmono!1(v!1 - 1))):
               edge_point?(bsdegmono!1, nvars!1,LAMBDA (i: nat): IF i = v!1 - 1 THEN d ELSE f!1(i) ENDIF,
                           intendpts!1, v!1 - 1)
                          (ep!1 AND
                            (d = 0 AND intendpts!1(v!1 - 1)`1 OR
                              bsdegmono!1(v!1 - 1) /= 0 AND
                               d = bsdegmono!1(v!1 - 1) AND
                                intendpts!1(v!1 - 1)`2))" "FORALL (d: upto(bsdegmono!1(v!1 - 1))):
           edge_point?(bsdegmono!1, nvars!1, LAMBDA (i: nat): IF i = v!1 - 1 THEN d ELSE f!1(i) ENDIF,
                       intendpts!1, v!1 - 1)
                      (ep!1 AND
                        (d = 0 AND iepts!1`1 OR
                          bsdegmono!1(v!1 - 1) /= 0 AND
                           d = bsdegmono!1(v!1 - 1) AND iepts!1`2))" " FORALL (d: upto(bsdegmono!1(v!1 - 1))):
           FORALL (var_index: below(nvars!1)):
             (f!1 WITH [(v!1 - 1) := d])(var_index) <= bsdegmono!1(var_index)" " FORALL (d: upto(bsdegmono!1(v!1 - 1))): (LAMBDA (i: nat):
                      IF i = v!1 - 1 THEN d ELSE f!1(i) ENDIF) = f!1 WITH [(v!1 - 1) := d]") (("1" (invoke (case "(%1)=(%2)") (! 2 1 3) (! 2 2 3)) (("1" (replace -1 :hide? t) (("1" (propax) nil nil)) nil) ("2" (hide 3) (("2" (case "FORALL (d: upto(bsdegmono!1(v!1-1))):          v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                         LAMBDA (i: nat): IF i = v!1 - 1 THEN d ELSE f!1(i) ENDIF,
			 depth!1, intendpts!1, v!1 - 1,
                         ep!1 AND
                          (d = 0 AND iepts!1`1 OR
                            bsdegmono!1(v!1 - 1) /= 0 AND
                             d = bsdegmono!1(v!1 - 1) AND iepts!1`2))
                  =
                     Bern_coeffs_minmax_rec(mb!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                            f!1 WITH [(v!1 - 1) := d], depth!1,
                                            intendpts!1, v!1 - 1,
                                            ep!1 AND
                                             (d = 0 AND intendpts!1(v!1 - 1)`1 OR
                                               bsdegmono!1(v!1 - 1) /= 0
                                               AND
                                               d = bsdegmono!1(v!1 - 1)
                                               AND
                                               intendpts!1(v!1 - 1)`2))") (("1" (lemma "extensionality[upto(bsdegmono!1(v!1-1)),Outminmax]") (("1" (inst? -1 :where -2) (("1" (assert) nil nil) ("2" (hide 2) (("2" (skeep :preds? t) (("2" (inst -6 "d") (("2" (inst -3 "d") (("2" (replace -3 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep :preds? t) (("3" (skeep :preds? t) (("3" (inst -4 "d") (("3" (inst -5 "d") (("3" (inst -5 "var_index") (("3" (replace -4 :dir rl :hide? t) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep :preds? t) (("2" (invoke (typepred "%1") (! 1 1)) (("1" (inst? -1 :where 1) (("1" (replace -7 1) (("1" (replace -7 -1) (("1" (inst -3 "d") (("1" (replace -3 :hide? t) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst? -4 :where 1) nil nil) ("3" (inst -3 "d") (("3" (inst -2 "d") (("3" (replace -2 :hide? t :dir rl) (("3" (skeep) (("3" (inst -2 "var_index") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide 2) (("3" (replace -5 :hide? t) (("3" (inst -3 "d") (("3" (inst -1 "d") (("3" (replace -1 :hide? t) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (propax) nil nil) ("5" (hide 2) (("5" (skeep) (("5" (inst -1 "d") (("5" (inst -2 "d") (("5" (replace -1 :hide? t :dir rl) (("5" (skeep) (("5" (inst -1 "var_index") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 3) (("3" (replace -5 :hide? t) (("3" (skeep) (("3" (inst -3 "d") (("3" (inst -1 "d") (("3" (replace -1 :hide? t :dir rl) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 3) (("4" (skeep*) (("4" (inst -1 "d") (("4" (inst -2 "d") (("4" (inst -2 "var_index") (("4" (replace -1 :hide? t :dir rl) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (apply-extensionality) (("2" (hide 2) (("2" (lift-if) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 3) (("3" (skosimp* :preds? t) (("3" (case "v!1 - 1 = var_index!1") (("1" (assert) nil nil) ("2" (assert) (("2" (typepred "f!1") (("2" (inst? -1 :where 2) nil nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 3) (("4" (replace -2 1) (("4" (propax) nil nil)) nil)) nil) ("5" (hide 3) (("5" (skosimp :preds? t) (("5" (expand "edge_point?") (("5" (typepred "ep!1") (("5" (expand "edge_point?") (("5" (flatten) (("5" (assert) (("5" (flatten) (("5" (assert) (("5" (skosimp*) (("5" (case "i!1 = v!1-1") (("1" (replace -1) (("1" (assert) (("1" (ground) nil nil)) nil)) nil) ("2" (inst - "i!1") (("1" (assert) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
        (FORALL (nf: CoeffMono):
           (FORALL (i: below(nvars)):
              nf(i) <= bsdegmono(i) AND (v <= i IMPLIES f(i) = nf(i)))
            IMPLIES
            omm`lb_min <=
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf)
             AND
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf) <=
              omm`ub_max)
    AND unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND length_eq?(nvars)(omm) AND (omm`max_depth = depth)}" bernstein_minmax nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (edge_point? const-decl "bool" util nil) (IntervalEndpoints type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (DegreeMono type-eq-decl nil util nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (extensionality formula-decl nil functions nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (iepts!1 skolem-const-decl "[bool, bool]" a2l__bernstein_minmax nil) (ep!1 skolem-const-decl "(edge_point?(bsdegmono!1, nvars!1, f!1, intendpts!1, v!1))" a2l__bernstein_minmax nil) (intendpts!1 skolem-const-decl "IntervalEndpoints" a2l__bernstein_minmax nil) (f!1 skolem-const-decl "{f: CoeffMono |
   FORALL (var_index: below(nvars!1)):
     f(var_index) <= bsdegmono!1(var_index)}" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (v!1 skolem-const-decl "nat" a2l__bernstein_minmax nil) (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (multibscoeff const-decl "real" multi_bernstein nil) (represents const-decl "bool" multibernstein_into_polylist nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (Coeff type-eq-decl nil util nil) (PolyList type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (list type-decl nil list_adt nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (i!1 skolem-const-decl "subrange(v!1 - 1, nvars!1 - 1)" a2l__bernstein_minmax nil) (subrange type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bern_coeffs_minmax_rec subtype "for_iterate[Outminmax].iterate_left(0, a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)), LAMBDA (d: naturalnumbers.upto(a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)))): LET nf = LAMBDA (i: naturalnumbers.nat): IF i = (number_fields.-)(a2l__bernstein_minmax.v, 1) THEN d ELSE a2l__bernstein_minmax.f(i) ENDIF, nep = booleans.AND(a2l__bernstein_minmax.ep, (booleans.OR(booleans.AND(d = 0, a2l__bernstein_minmax.iepts`1), booleans.AND(a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)) /= 0, booleans.AND(d = a2l__bernstein_minmax.bsdegmono((number_fields.-)(a2l__bernstein_minmax.v, 1)), a2l__bernstein_minmax.iepts`2))))) IN a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, (number_fields.-)(a2l__bernstein_minmax.v, 1), a2l__bernstein_minmax.nep), minmax.combine)" "{omm: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb)): omm = bernstein_minmax.Bern_coeffs_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.f, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.v, a2l__bernstein_minmax.ep)}"))) (a2l__Bern_coeffs_minmax_rec_TCC8 0 (a2l__Bern_coeffs_minmax_rec_TCC8-1 nil 3687281087 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coefficient type-eq-decl nil a2l__util nil) (represents const-decl "bool" arrays_into_lists structures) (PolynomialList type-eq-decl nil a2l__util nil) (Polynomial type-eq-decl nil util nil) (PolyproductList type-eq-decl nil a2l__util nil) (Polyproduct type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (represents? const-decl "bool" multibernstein_into_polylist nil) (/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals)) nil (a2l__Bern_coeffs_minmax_rec subtype "(number_fields.-)(a2l__bernstein_minmax.v, 1)" "nat"))) (a2l__Bern_coeffs_minmax_TCC1 0 (a2l__Bern_coeffs_minmax_TCC1-2 nil 3687261232 ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil)) nil (a2l__Bern_coeffs_minmax subtype "LAMBDA (i: naturalnumbers.nat) -> real: 0" "{f: util.CoeffMono | FORALL (var_index: naturalnumbers.below(a2l__bernstein_minmax.nvars)): reals.<=(f(var_index), a2l__bernstein_minmax.bsdegmono(var_index))}")) (a2l__Bern_coeffs_minmax_TCC1-1 nil 3686059360 ("" (subtype-tcc) nil nil) ((PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (edge_point? const-decl "bool" util nil)) nil (a2l__Bern_coeffs_minmax subtype "LAMBDA (i: naturalnumbers.nat) -> real: 0" "{f: util.CoeffMono | FORALL (var_index: naturalnumbers.below(a2l__bernstein_minmax.nvars)): reals.<=(f(var_index), a2l__bernstein_minmax.bsdegmono(var_index))}"))) (a2l__Bern_coeffs_minmax_TCC2 0 (a2l__Bern_coeffs_minmax_TCC2-3 nil 3687261236 ("" (skosimp* :preds? t) (("" (assert) (("" (expand "edge_point?") (("" (skeep :preds? t) nil nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (edge_point? const-decl "bool" util nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil)) nil (a2l__Bern_coeffs_minmax subtype "booleans.TRUE" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, LAMBDA (i: naturalnumbers.nat) -> real: 0, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.nvars))")) (a2l__Bern_coeffs_minmax_TCC2-2 nil 3687022156 ("" (postpone) nil nil) nil nil (a2l__Bern_coeffs_minmax subtype "booleans.TRUE" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, LAMBDA (i: naturalnumbers.nat) -> real: 0, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.nvars))")) (a2l__Bern_coeffs_minmax_TCC2-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bern_coeffs_minmax subtype "booleans.TRUE" "(util.edge_point?(a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, LAMBDA (i: naturalnumbers.nat) -> real: 0, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.nvars))"))) (a2l__Bern_coeffs_minmax_TCC3 0 (a2l__Bern_coeffs_minmax_TCC3-1 nil 3687281087 ("" (skosimp* :preds? t) (("" (assert) (("" (expand "Bern_coeffs_minmax") (("" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "mb!1") nil nil) ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coeff type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (multibscoeff const-decl "real" multi_bernstein nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
        (FORALL (nf: CoeffMono):
           (FORALL (i: below(nvars)):
              nf(i) <= bsdegmono(i) AND (v <= i IMPLIES f(i) = nf(i)))
            IMPLIES
            omm`lb_min <=
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf)
             AND
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf) <=
              omm`ub_max)
    AND unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND length_eq?(nvars)(omm) AND (omm`max_depth = depth)}" bernstein_minmax nil) (a2l__Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb)):
     omm =
      Bern_coeffs_minmax_rec(mb, bsdegmono, cf, nvars, terms, f, depth,
                             intendpts, v, ep)}" a2l__bernstein_minmax nil) (TRUE const-decl "bool" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil)) nil (a2l__Bern_coeffs_minmax subtype "a2l__bernstein_minmax.a2l__Bern_coeffs_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, LAMBDA (i: naturalnumbers.nat) -> real: 0, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.nvars, booleans.TRUE)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb)): result = bernstein_minmax.Bern_coeffs_minmax(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.intendpts)}"))) (polylist_represents_translist_polylist 0 (polylist_represents_translist_polylist-1 nil 3687022492 ("" (skeep :preds? t) (("" (hide -1) (("" (expand "represents") (("" (flatten) (("" (split) (("1" (expand "represents") (("1" (skeep :preds? t) (("1" (inst - "i") (("1" (expand "represents") (("1" (skeep :preds? t) (("1" (inst - "i_1") (("1" (expand "represents") (("1" (skolem 1 "i_2" (:skolem-typepreds? t)) (("1" (inst - "i_2") (("1" (expand "translist" 1) (("1" (expand "polylist" 1) (("1" (lemma "array2list_inv[list[list[real]]]") (("1" (inst -1 "(LAMBDA (t: nat):
                                      array2list[list[real]]
                                          (nvars)
                                          (LAMBDA (v: nat):
                                             array2list[real]
                                             (1 + bsdegmono(v))(mb(t)(v))))" "null" "terms" "i") (("1" (replace -1 1 :hide? t) (("1" (lemma "array2list_inv[list[real]]") (("1" (inst -1 "LAMBDA (v: nat):
                                 array2list[real](1 + bsdegmono(v))(mb(i)(v))" "null" "nvars" "i_1") (("1" (replace -1 1 :hide? t) (("1" (lemma "array2list_inv[real]") (("1" (inst -1 "mb(i)(i_1)" "0" "1 + bsdegmono(i_1)" "i_2") (("1" (replace -1 1 :hide? t) (("1" (propax) nil nil)) nil) ("2" (inst -9 "i" "i_1") (("1" (assert) nil nil) ("2" (inst -8 "i") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst -8 "i") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (represents const-decl "bool" multibernstein_into_polylist nil) (PolynomialList type-eq-decl nil a2l__util nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (translist const-decl "real" util nil) (array2list_inv formula-decl nil array2list structures) (i_1 skolem-const-decl "below(length[PolynomialList](nth[PolyproductList](bspoly, i)))" a2l__bernstein_minmax nil) (nvars skolem-const-decl "posnat" a2l__bernstein_minmax nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bsdegmono skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (i_2 skolem-const-decl "below(length[Coefficient]
          (nth[PolynomialList](nth[PolyproductList](bspoly, i), i_1)))" a2l__bernstein_minmax nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (array2list const-decl "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" array2list structures) (listn type-eq-decl nil listn structures) (= const-decl "[T, T -> boolean]" equalities nil) (terms skolem-const-decl "posnat" a2l__bernstein_minmax nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (i skolem-const-decl "below(length[PolyproductList](bspoly))" a2l__bernstein_minmax nil) (bspoly skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (polylist const-decl "PolyList" util nil) (Coefficient type-eq-decl nil a2l__util nil) (below type-eq-decl nil naturalnumbers nil) (PolyList type-eq-decl nil util nil) (length def-decl "nat" list_props nil) (PolyproductList type-eq-decl nil a2l__util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (represents const-decl "bool" arrays_into_lists structures)) shostak)) (a2l__Bern_split_left_mpoly__homomorphic 0 (a2l__Bern_split_left_mpoly__homomorphic-2 "" 3790097987 ("" (skeep :preds? t) (("" (hide -1) (("" (lemma "a2l__Bern_split_left_mpoly__homomorphism") (("" (inst -1 "nvars" "terms" "bsdegmono" "i" "mb" "bspoly") (("1" (expand "multipolynomial__represents") (("1" (propax) nil nil)) nil) ("2" (expand "multipolynomial__represents") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ((mb skolem-const-decl "{mb: MultiBernstein | represents(bspoly, mb)}" a2l__bernstein_minmax nil) (represents const-decl "bool" multibernstein_into_polylist nil) (bspoly skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (multipolynomial__represents const-decl "bool" multibernstein_into_polylist nil) (bsdegmono skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (DegreeMono type-eq-decl nil util nil) (nvars skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms skolem-const-decl "posnat" a2l__bernstein_minmax nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (PolyList type-eq-decl nil util nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (a2l__Bern_split_left_mpoly__homomorphism formula-decl nil a2l__multi_bernstein nil)) shostak) (a2l__Bern_split_left_mpoly__homomorphic-1 nil 3687010698 ("" (skeep :preds? t) (("" (hide -1) (("" (lemma "a2l__Bern_split_left_mpoly__homomorphism") (("" (inst -1 "nvars" "terms" "bsdegmono" "i" "mb" "bspoly") (("1" (expand "multipolynomial__represents") (("1" (expand "represents_polylist_multipolynomial") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "multipolynomial__represents") (("2" (expand "represents_polylist_multipolynomial") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((represents const-decl "bool" multibernstein_into_polylist nil) (multipolynomial__represents const-decl "bool" multibernstein_into_polylist nil) (DegreeMono type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (PolyList type-eq-decl nil util nil) (a2l__Bern_split_left_mpoly__homomorphism formula-decl nil a2l__multi_bernstein nil)) shostak)) (a2l__Bern_split_right_mpoly__homomorphic 0 (a2l__Bern_split_right_mpoly__homomorphic-2 "" 3790097987 ("" (skeep :preds? t) (("" (hide -1) (("" (lemma "a2l__Bern_split_right_mpoly__homomorphism") (("" (inst -1 "nvars" "terms" "bsdegmono" "i" "mb" "bspoly") (("1" (expand "multipolynomial__represents") (("1" (propax) nil nil)) nil) ("2" (expand "multipolynomial__represents") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ((mb skolem-const-decl "{mb: MultiBernstein | represents(bspoly, mb)}" a2l__bernstein_minmax nil) (represents const-decl "bool" multibernstein_into_polylist nil) (bspoly skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (multipolynomial__represents const-decl "bool" multibernstein_into_polylist nil) (bsdegmono skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (DegreeMono type-eq-decl nil util nil) (nvars skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms skolem-const-decl "posnat" a2l__bernstein_minmax nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (PolyList type-eq-decl nil util nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (a2l__Bern_split_right_mpoly__homomorphism formula-decl nil a2l__multi_bernstein nil)) shostak) (a2l__Bern_split_right_mpoly__homomorphic-1 nil 3687017622 ("" (skeep :preds? t) (("" (hide -1) (("" (lemma "a2l__Bern_split_right_mpoly__homomorphism") (("" (inst -1 "nvars" "terms" "bsdegmono" "i" "mb" "bspoly") (("1" (expand "represents_polylist_multipolynomial") (("1" (expand "multipolynomial__represents") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "represents_polylist_multipolynomial") (("2" (expand "multipolynomial__represents") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((represents const-decl "bool" multibernstein_into_polylist nil) (multipolynomial__represents const-decl "bool" multibernstein_into_polylist nil) (DegreeMono type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (PolyList type-eq-decl nil util nil) (a2l__Bern_split_right_mpoly__homomorphism formula-decl nil a2l__multi_bernstein nil)) shostak)) (a2l__Bernstein_minmax_rec_TCC1 0 (a2l__Bernstein_minmax_rec_TCC1-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bernstein_minmax_rec subtype "(number_fields.-)(a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level)" "naturalnumber"))) (a2l__Bernstein_minmax_rec_TCC2 0 (a2l__Bernstein_minmax_rec_TCC2-1 nil 3686059360 ("" (subtype-tcc) nil nil) nil nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.terms" "{terms | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].multipolynomial_represents?(a2l__bernstein_minmax.bspoly)}"))) (a2l__Bernstein_minmax_rec_TCC3 0 (a2l__Bernstein_minmax_rec_TCC3-2 "" 3804296800 ("" (skosimp*) (("" (invoke (typepred "%1") (! -2 1)) (("" (inst -1 "translist
                                                          (polylist
                                                           (mb!1,
                                                            bsdegmono!1,
                                                            nvars!1,
                                                            terms!1))") (("1" (expand "Bernstein_minmax_rec") (("1" (ground) nil nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PolyList type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (DegreeMono type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (sound? const-decl "bool" bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (polylist_represents_translist_polylist formula-decl nil a2l__bernstein_minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (mb!1 skolem-const-decl "{mb: MultiBernstein | represents(bspoly!1, mb)}" a2l__bernstein_minmax nil) (polylist const-decl "PolyList" util nil) (MultiPolynomial type-eq-decl nil util nil) (translist const-decl "real" util nil) (bspoly!1 skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.minmax" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}")) (a2l__Bernstein_minmax_rec_TCC3-1 nil 3686059360 ("" (skosimp*) (("" (invoke (typepred "%1") (! -3 1)) (("" (inst -1 "translist
                                                        (polylist
                                                         (mb!1,
                                                          bsdegmono!1,
                                                          nvars!1,
                                                          terms!1))") (("1" (expand "Bernstein_minmax_rec") (("1" (ground) nil nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ((Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (Outminmax type-eq-decl nil minmax nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (sound? const-decl "bool" bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (polylist const-decl "PolyList" util nil) (MultiPolynomial type-eq-decl nil util nil) (translist const-decl "real" util nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.minmax" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}"))) (a2l__Bernstein_minmax_rec_TCC4 0 (a2l__Bernstein_minmax_rec_TCC4-2 "" 3884284781 ("" (skosimp*) (("" (use "mod_pos") (("" (flatten) nil nil)) nil)) nil) nil shostak (a2l__Bernstein_minmax_rec subtype "mod.mod(a2l__bernstein_minmax.varsel`2, a2l__bernstein_minmax.nvars)" "{x: {k | reals.<(real_defs.abs(mod.k), real_defs.abs(a2l__bernstein_minmax.nvars))} | reals.<(x, a2l__bernstein_minmax.nvars)}")) (a2l__Bernstein_minmax_rec_TCC4-1 nil 3883807291 ("" (subtype-tcc) nil nil) ((mod_pos formula-decl nil mod nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bernstein_minmax_rec subtype "mod.mod(a2l__bernstein_minmax.varsel`2, a2l__bernstein_minmax.nvars)" "{x: {k | reals.<(real_defs.abs(mod.k), real_defs.abs(a2l__bernstein_minmax.nvars))} | reals.<(x, a2l__bernstein_minmax.nvars)}"))) (a2l__Bernstein_minmax_rec_TCC5 0 (a2l__Bernstein_minmax_rec_TCC4-1 nil 3686059360 ("" (skosimp*) (("" (use "mod_pos") (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil) ((mod_pos formula-decl nil mod nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (nil application-judgement "below(m)" mod nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.v" "nat"))) (a2l__Bernstein_minmax_rec_TCC6 0 (a2l__Bernstein_minmax_rec_TCC5-2 "" 3804308081 ("" (skosimp*) (("" (replace -9 :hide? t) (("" (lift-if 5) (("" (split 5) (("1" (flatten) (("1" (assert) (("1" (replace -6 :hide? t) (("1" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("1" (typepred "cf!1") (("1" (expand "multipolynomial_represents?" -1) (("1" (expand "represents?" -1) (("1" (skosimp -1) (("1" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst 1 "LAMBDA (k: nat): Bern_split_left_mono(A!1(k), bsdegmono!1)(v!1)") (("1" (expand "represents") (("1" (assert) (("1" (flatten) (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -6 :hide? t) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (typepred "cf!1") (("2" (expand "multipolynomial_represents?" -1) (("2" (expand "represents?" -1) (("2" (skosimp -1) (("2" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (expand "represents") (("2" (inst 2 "LAMBDA (k: nat): Bern_split_right_mono(A!1(k), bsdegmono!1)(v!1)") (("2" (flatten) (("2" (split) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "below(m)" mod nil) (a2l__Bern_split_left_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (Coeff type-eq-decl nil util nil) (A!1 skolem-const-decl "MultiBernstein" a2l__bernstein_minmax nil) (bspoly!1 skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (represents const-decl "bool" multibernstein_into_polylist nil) (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (represents? const-decl "bool" multibernstein_into_polylist nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_right_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (A!1 skolem-const-decl "MultiBernstein" a2l__bernstein_minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.cf" "{cf | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].multipolynomial_represents?(a2l__bernstein_minmax.LR1)}")) (a2l__Bernstein_minmax_rec_TCC5-1 nil 3686059360 ("" (skosimp*) (("" (replace -10 :hide? t) (("" (lift-if 5) (("" (split 5) (("1" (flatten) (("1" (assert) (("1" (replace -6 :hide? t) (("1" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("1" (typepred "cf!1") (("1" (expand "multipolynomial_represents?" -1) (("1" (expand "represents?" -1) (("1" (skosimp -1) (("1" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst 1 "LAMBDA (k: nat): Bern_split_left_mono(A!1(k), bsdegmono!1)(v!1)") (("1" (expand "represents") (("1" (assert) (("1" (flatten) (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -6 :hide? t) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (typepred "cf!1") (("2" (expand "multipolynomial_represents?" -1) (("2" (expand "represents?" -1) (("2" (skosimp -1) (("2" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (expand "represents") (("2" (inst 2 "LAMBDA (k: nat): Bern_split_right_mono(A!1(k), bsdegmono!1)(v!1)") (("2" (flatten) (("2" (split) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Bern_split_left_mono const-decl "real" multi_bernstein nil) (Coeff type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (represents? const-decl "bool" multibernstein_into_polylist nil) (PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.cf" "{cf | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].multipolynomial_represents?(a2l__bernstein_minmax.LR1)}"))) (a2l__Bernstein_minmax_rec_TCC7 0 (a2l__Bernstein_minmax_rec_TCC6-1 nil 3686059360 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (sound? const-decl "bool" bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (posnat_expt application-judgement "posnat" exponentiation nil) (real_minus_real_is_real application-judgement "real" reals nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (represents? const-decl "bool" multibernstein_into_polylist nil) (PolyproductList type-eq-decl nil a2l__util nil) (PolynomialList type-eq-decl nil a2l__util nil) (represents const-decl "bool" arrays_into_lists structures) (Coefficient type-eq-decl nil a2l__util nil) (posint nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (a2l__Bern_coeffs_minmax const-decl "{result: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb)):
     result =
      Bern_coeffs_minmax(mb, bsdegmono, cf, nvars, terms, depth, intendpts)}" a2l__bernstein_minmax nil) (between? const-decl "bool" minmax nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (C const-decl "posnat" binomial reals) (map_with_index const-decl "list[T1]" map_with_index structures) (a2l__Bern_split_left_mono const-decl "PolyproductList" a2l__multi_bernstein nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (a2l__Bern_split_right_mono const-decl "PolyproductList" a2l__multi_bernstein nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (combine const-decl "Outminmax" minmax nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.level" "upto(a2l__bernstein_minmax.depth)"))) (a2l__Bernstein_minmax_rec_TCC8 0 (a2l__Bernstein_minmax_rec_TCC7-1 nil 3686059360 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (sound? const-decl "bool" bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (minus_int_is_int application-judgement "int" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (represents? const-decl "bool" multibernstein_into_polylist nil) (PolyproductList type-eq-decl nil a2l__util nil) (PolynomialList type-eq-decl nil a2l__util nil) (represents const-decl "bool" arrays_into_lists structures) (Coefficient type-eq-decl nil a2l__util nil) (posint nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (/= const-decl "boolean" notequal nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (combine const-decl "Outminmax" minmax nil) (for const-decl "T" for_iterate structures) (iterate_left const-decl "T" for_iterate structures) (a2l__Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb)):
     omm =
      Bern_coeffs_minmax_rec(mb, bsdegmono, cf, nvars, terms, f, depth,
                             intendpts, v, ep)}" a2l__bernstein_minmax nil) (a2l__Bern_coeffs_minmax const-decl "{result: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb)):
     result =
      Bern_coeffs_minmax(mb, bsdegmono, cf, nvars, terms, depth, intendpts)}" a2l__bernstein_minmax nil) (between? const-decl "bool" minmax nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nth_ext const-decl "T" nth_ext structures) (^ const-decl "real" exponentiation nil) (C const-decl "posnat" binomial reals) (factorial def-decl "posnat" factorial ints) (sigma def-decl "real" sigma reals) (map_with_index const-decl "list[T1]" map_with_index structures) (a2l__Bern_split_left_mono const-decl "PolyproductList" a2l__multi_bernstein nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (a2l__Bern_split_right_mono const-decl "PolyproductList" a2l__multi_bernstein nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posnat_expt application-judgement "posnat" exponentiation nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bernstein_minmax_rec termination "a2l__bernstein_minmax.a2l__Bernstein_minmax_rec(a2l__bernstein_minmax.LR1, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.LR1intendpts, a2l__bernstein_minmax.varselect, a2l__bernstein_minmax.newmm1)" "nil"))) (a2l__Bernstein_minmax_rec_TCC9 0 (a2l__Bernstein_minmax_rec_TCC8-3 "" 3804318611 ("" (skosimp*) (("" (replace -1 :hide? t) (("" (case "multipolynomial_represents?
                                      [terms!1, nvars!1,bsdegmono!1]
                                      (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_left" -1) (("1" (assert) (("1" (hide "mp_reps_left") (("1" (case "multipolynomial_represents?
                                          [terms!1, nvars!1, bsdegmono!1]
                                          (a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_right" -1) (("1" (assert) (("1" (hide "mp_reps_right") (("1" (case "varselect!1(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, level!1) =
                                      vs!1(translist(polylist(mb!1, bsdegmono!1, nvars!1, terms!1)),
                                           bsdegmono!1, nvars!1, terms!1, cf!1, level!1)") (("1" (replace -1 :hide? t) (("1" (expand "Bernstein_minmax_rec") (("1" (lift-if 5) (("1" (split 5) (("1" (flatten) (("1" (hide 1) (("1" (split -1) (("1" (hide 1) (("1" (invoke (typepred "%1") (! -2 2)) (("1" (inst -1 "translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (invoke (typepred "%1") (! -2 2)) (("2" (inst -1 "translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil) ("3" (invoke (typepred "%1") (! -2 2)) (("3" (inst -1 "translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split 4) (("1" (flatten) (("1" (case "varsel!1`1") (("1" (replace -1 *) (("1" (assert) (("1" (hide -11) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (hide -10) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (hide -7 -9) (("1" (replace -6 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -4 :hide? t) (("1" (replace -4 :hide? t) (("1" (invoke (case "%1 = %2") (! -4 1) (! 1 1 1)) (("1" (label "rec_value" -1) (("1" (hide "rec_value") (("1" (split 1) (("1" (flatten) (("1" (hide -1) (("1" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("1" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (hide -2) (("2" (inst? -1 :where 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "rec_value") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 2) (("2" (hide-all-but (1 -)) (("2" (reveal "rec_value") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide-all-but (1 -)) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                                                                      Bern_split_left_mono(translist
                                                                                                                                                                           (polylist
                                                                                                                                                                            (mb!1,
                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                             nvars!1,
                                                                                                                                                                             terms!1))
                                                                                                                                                                           (k),
                                                                                                                                                                           bsdegmono!1)
                                                                                                                                                                          (mod
                                                                                                                                                                           (vs!1
                                                                                                                                                                            (translist
                                                                                                                                                                             (polylist
                                                                                                                                                                              (mb!1,
                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                               nvars!1,
                                                                                                                                                                               terms!1)),
                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                             nvars!1,
                                                                                                                                                                             terms!1,
                                                                                                                                                                             cf!1,
                                                                                                                                                                             level!1)`2,
                                                                                                                                                                            nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (hide -4) (("1" (replace -3 :hide? t) (("1" (case "varselect!1
                                                                                                                                                (bspoly!1,
                                                                                                                                                 bsdegmono!1,
                                                                                                                                                 nvars!1,
                                                                                                                                                 terms!1,
                                                                                                                                                 cf!1,
                                                                                                                                                 level!1) = vs!1
                                                                                                                                                 (translist
                                                                                                                                                  (polylist
                                                                                                                                                   (mb!1,
                                                                                                                                                    bsdegmono!1,
                                                                                                                                                    nvars!1,
                                                                                                                                                    terms!1)),
                                                                                                                                                  bsdegmono!1,
                                                                                                                                                  nvars!1,
                                                                                                                                                  terms!1,
                                                                                                                                                  cf!1,
                                                                                                                                                  level!1)") (("1" (case "a2l__Bern_coeffs_minmax(bspoly!1,
                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                cf!1,
                                                                                                                                                                                nvars!1,
                                                                                                                                                                                terms!1,
                                                                                                                                                                                level!1,
                                                                                                                                                                                intendpts!1) = Bern_coeffs_minmax
                                                                                                                                                         (translist
                                                                                                                                                          (polylist
                                                                                                                                                           (mb!1,
                                                                                                                                                            bsdegmono!1,
                                                                                                                                                            nvars!1,
                                                                                                                                                            terms!1)),
                                                                                                                                                          bsdegmono!1,
                                                                                                                                                          cf!1,
                                                                                                                                                          nvars!1,
                                                                                                                                                          terms!1,
                                                                                                                                                          level!1,
                                                                                                                                                          intendpts!1)") (("1" (assert) (("1" (case "intendpts!1
                                                         WITH [(mod
                                                                (vs!1
                                                                 (translist
                                                                  (polylist
                                                                   (mb!1,
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1)),
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1,
                                                                  cf!1,
                                                                  level!1)`2,
                                                                 nvars!1))
                                                               `2
                                                               := TRUE] = LAMBDA (i: nat):
                                                        (intendpts!1(i)`1,
                                                         i =
                                                          mod(vs!1(translist
                                                                   (polylist
                                                                    (mb!1,
                                                                     bsdegmono!1,
                                                                     nvars!1,
                                                                     terms!1)),
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1,
                                                                   cf!1,
                                                                   level!1)`2,
                                                              nvars!1)
                                                          OR intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1)),
                                                bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                           nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "translist
                                                                                                                                           (polylist
                                                                                                                                            (mb!1,
                                                                                                                                             bsdegmono!1,
                                                                                                                                             nvars!1,
                                                                                                                                             terms!1))") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" "bsdegmono!1" "nvars!1" "terms!1" "cf!1" "translist(polylist
                                                                                                                              (mb!1,
                                                                                                                               bsdegmono!1,
                                                                                                                               nvars!1,
                                                                                                                               terms!1))" "v!1") (("1" (case "varselect!1
                                                                                                                                                          (bspoly!1,
                                                                                                                                                           bsdegmono!1,
                                                                                                                                                           nvars!1,
                                                                                                                                                           terms!1,
                                                                                                                                                           cf!1,
                                                                                                                                                           level!1) = vs!1
                                                                                                                                                           (translist
                                                                                                                                                            (polylist
                                                                                                                                                             (mb!1,
                                                                                                                                                              bsdegmono!1,
                                                                                                                                                              nvars!1,
                                                                                                                                                              terms!1)),
                                                                                                                                                            bsdegmono!1,
                                                                                                                                                            nvars!1,
                                                                                                                                                            terms!1,
                                                                                                                                                            cf!1,
                                                                                                                                                            level!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -3 1 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (hide -1) (("2" (replace -1 :hide? t) (("2" (hide -1) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (lift-if) (("2" (invoke (case "%1 = %2") (! -1 1) (! 2 1 1)) (("1" (label "rec_value" -1) (("1" (hide "rec_value") (("1" (split 2) (("1" (flatten) (("1" (hide-all-but 1) (("1" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("1" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst? -1 :where 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "rec_value") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but (1 -)) (("2" (reveal "rec_value") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1 -)) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                                                                  Bern_split_right_mono(translist
                                                                                                                                                                       (polylist
                                                                                                                                                                        (mb!1,
                                                                                                                                                                         bsdegmono!1,
                                                                                                                                                                         nvars!1,
                                                                                                                                                                         terms!1))
                                                                                                                                                                       (k),
                                                                                                                                                                       bsdegmono!1)
                                                                                                                                                                      (mod
                                                                                                                                                                       (vs!1
                                                                                                                                                                        (translist
                                                                                                                                                                         (polylist
                                                                                                                                                                          (mb!1,
                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                           nvars!1,
                                                                                                                                                                           terms!1)),
                                                                                                                                                                         bsdegmono!1,
                                                                                                                                                                         nvars!1,
                                                                                                                                                                         terms!1,
                                                                                                                                                                         cf!1,
                                                                                                                                                                         level!1)`2,
                                                                                                                                                                        nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (case "a2l__Bern_coeffs_minmax(bspoly!1,
                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                      cf!1,
                                                                                                                                                                      nvars!1,
                                                                                                                                                                      terms!1,
                                                                                                                                                                      level!1,
                                                                                                                                                                      intendpts!1) = Bern_coeffs_minmax
                                                                                                                                               (translist
                                                                                                                                                (polylist
                                                                                                                                                 (mb!1,
                                                                                                                                                  bsdegmono!1,
                                                                                                                                                  nvars!1,
                                                                                                                                                  terms!1)),
                                                                                                                                                bsdegmono!1,
                                                                                                                                                cf!1,
                                                                                                                                                nvars!1,
                                                                                                                                                terms!1,
                                                                                                                                                level!1,
                                                                                                                                                intendpts!1)") (("1" (assert) (("1" (case "intendpts!1
                                                     WITH [(mod
                                                            (vs!1
                                                             (translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1)),
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1,
                                                              cf!1,
                                                              level!1)`2,
                                                             nvars!1))
                                                           `1
                                                           := TRUE] = LAMBDA (i: nat):
                                                    (i =
                                                      mod(vs!1(translist
                                                               (polylist
                                                                (mb!1,
                                                                 bsdegmono!1,
                                                                 nvars!1,
                                                                 terms!1)),
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1,
                                                               cf!1,
                                                               level!1)`2,
                                                          nvars!1)
                                                      OR intendpts!1(i)`1,
                                                     intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1)),
                                            bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                       nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "translist
                                                                                                                                 (polylist
                                                                                                                                  (mb!1,
                                                                                                                                   bsdegmono!1,
                                                                                                                                   nvars!1,
                                                                                                                                   terms!1))") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" "bsdegmono!1" "nvars!1" "terms!1" "cf!1" "translist(polylist
                                                                                                                          (mb!1,
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1))" "v!1") (("1" (case "varselect!1
                                                                                                                                                      (bspoly!1,
                                                                                                                                                       bsdegmono!1,
                                                                                                                                                       nvars!1,
                                                                                                                                                       terms!1,
                                                                                                                                                       cf!1,
                                                                                                                                                       level!1) = vs!1
                                                                                                                                                       (translist
                                                                                                                                                        (polylist
                                                                                                                                                         (mb!1,
                                                                                                                                                          bsdegmono!1,
                                                                                                                                                          nvars!1,
                                                                                                                                                          terms!1)),
                                                                                                                                                        bsdegmono!1,
                                                                                                                                                        nvars!1,
                                                                                                                                                        terms!1,
                                                                                                                                                        cf!1,
                                                                                                                                                        level!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "vs!1") (("2" (expand "represents" -1) (("2" (inst? -1 :where 1) (("2" (inst -1 "translist
                                                                                                                                       (polylist
                                                                                                                                        (mb!1,
                                                                                                                                         bsdegmono!1,
                                                                                                                                         nvars!1,
                                                                                                                                         terms!1))") (("2" (inst -1 "nvars!1" "terms!1" "bsdegmono!1") (("2" (split -1) (("1" (inst?) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "v!1") (("2" (inst?) (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "v!1") (("1" (inst?) (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst? 1 :where -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ((represents? const-decl "bool" multibernstein_into_polylist nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (combine const-decl "Outminmax" minmax nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (TRUE const-decl "bool" booleans nil) (v!1 skolem-const-decl "{x: {k | abs(k) < abs(nvars!1)} | x < nvars!1}" a2l__bernstein_minmax nil) (varselect!1 skolem-const-decl "a2l__VarSelector" a2l__bernstein_minmax nil) (vs!1 skolem-const-decl "{vs: VarSelector | represents(varselect!1, vs)}" a2l__bernstein_minmax nil) (cf!1 skolem-const-decl "{cf | multipolynomial_represents?[terms!1, nvars!1, bsdegmono!1](bspoly!1)}" a2l__bernstein_minmax nil) (depth!1 skolem-const-decl "nat" a2l__bernstein_minmax nil) (level!1 skolem-const-decl "upto(depth!1)" a2l__bernstein_minmax nil) (a2l__Bern_split_left_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (below type-eq-decl nil naturalnumbers nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (a2l__Bern_split_right_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (a2l__Bern_coeffs_minmax const-decl "{result: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb)):
     result =
      Bern_coeffs_minmax(mb, bsdegmono, cf, nvars, terms, depth, intendpts)}" a2l__bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (polylist_represents_translist_polylist formula-decl nil a2l__bernstein_minmax nil) (mb!1 skolem-const-decl "{mb: MultiBernstein | represents(bspoly!1, mb)}" a2l__bernstein_minmax nil) (bspoly!1 skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coeff type-eq-decl nil util nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (translist const-decl "real" util nil) (MultiPolynomial type-eq-decl nil util nil) (polylist const-decl "PolyList" util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (nil application-judgement "below(m)" mod nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.combine_this(a2l__bernstein_minmax.v, a2l__bernstein_minmax.bslr1, a2l__bernstein_minmax.minmax)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}")) (a2l__Bernstein_minmax_rec_TCC8-2 nil 3687112117 ("" (skosimp*) (("" (replace -1 :hide? t) (("" (case "multipolynomial_represents?
                               [terms!1, nvars!1,bsdegmono!1]
                               (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_left" -1) (("1" (assert) (("1" (hide "mp_reps_left") (("1" (case "multipolynomial_represents?
                                 [terms!1, nvars!1, bsdegmono!1]
                                 (a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_right" -1) (("1" (assert) (("1" (hide "mp_reps_right") (("1" (case "varselect!1(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, level!1) =
                           vs!1(translist(polylist(mb!1, bsdegmono!1, nvars!1, terms!1)),
                                bsdegmono!1, nvars!1, terms!1, cf!1, level!1)") (("1" (replace -1 :hide? t) (("1" (expand "Bernstein_minmax_rec") (("1" (lift-if 5) (("1" (split 5) (("1" (flatten) (("1" (hide 1) (("1" (split -1) (("1" (hide 1) (("1" (invoke (typepred "%1") (! -2 2)) (("1" (inst -1 "translist
                                                                                     (polylist
                                                                                      (mb!1,
                                                                                       bsdegmono!1,
                                                                                       nvars!1,
                                                                                       terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (invoke (typepred "%1") (! -2 2)) (("2" (inst -1 "translist
                                                                                     (polylist
                                                                                      (mb!1,
                                                                                       bsdegmono!1,
                                                                                       nvars!1,
                                                                                       terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil) ("3" (invoke (typepred "%1") (! -2 2)) (("3" (inst -1 "translist
                                                                                     (polylist
                                                                                      (mb!1,
                                                                                       bsdegmono!1,
                                                                                       nvars!1,
                                                                                       terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split 4) (("1" (flatten) (("1" (case "varsel!1`1") (("1" (replace -1 *) (("1" (assert) (("1" (hide -10) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (hide -10) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (hide -7 -9) (("1" (replace -6 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -4 :hide? t) (("1" (replace -5 :hide? t) (("1" (invoke (case "%1 = %2") (! -4 1) (! 1 1 1)) (("1" (label "rec_value" -1) (("1" (hide "rec_value") (("1" (split 1) (("1" (flatten) (("1" (hide -1) (("1" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("1" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (hide -2) (("2" (inst? -1 :where 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "rec_value") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 2) (("2" (hide-all-but (1 -)) (("2" (reveal "rec_value") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide-all-but (1 -)) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                                                      Bern_split_left_mono(translist
                                                                                                                                                           (polylist
                                                                                                                                                            (mb!1,
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1))
                                                                                                                                                           (k),
                                                                                                                                                           bsdegmono!1)
                                                                                                                                                          (mod
                                                                                                                                                           (vs!1
                                                                                                                                                            (translist
                                                                                                                                                             (polylist
                                                                                                                                                              (mb!1,
                                                                                                                                                               bsdegmono!1,
                                                                                                                                                               nvars!1,
                                                                                                                                                               terms!1)),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             level!1)`2,
                                                                                                                                                            nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (hide -4) (("1" (replace -3 :hide? t) (("1" (case "varselect!1
                                                                                                                         (bspoly!1,
                                                                                                                          bsdegmono!1,
                                                                                                                          nvars!1,
                                                                                                                          terms!1,
                                                                                                                          cf!1,
                                                                                                                          level!1) = vs!1
                                                                                                                          (translist
                                                                                                                           (polylist
                                                                                                                            (mb!1,
                                                                                                                             bsdegmono!1,
                                                                                                                             nvars!1,
                                                                                                                             terms!1)),
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1,
                                                                                                                           cf!1,
                                                                                                                           level!1)") (("1" (case "a2l__Bern_coeffs_minmax(bspoly!1,
                                                                                                                                                       bsdegmono!1,
                                                                                                                                                       cf!1,
                                                                                                                                                       nvars!1,
                                                                                                                                                       terms!1,
                                                                                                                                                       level!1,
                                                                                                                                                       intendpts!1) = Bern_coeffs_minmax
                                                                                                                                (translist
                                                                                                                                 (polylist
                                                                                                                                  (mb!1,
                                                                                                                                   bsdegmono!1,
                                                                                                                                   nvars!1,
                                                                                                                                   terms!1)),
                                                                                                                                 bsdegmono!1,
                                                                                                                                 cf!1,
                                                                                                                                 nvars!1,
                                                                                                                                 terms!1,
                                                                                                                                 level!1,
                                                                                                                                 intendpts!1)") (("1" (assert) (("1" (case "intendpts!1
                              WITH [(mod
                                     (vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1))
                                    `2
                                    := TRUE] = LAMBDA (i: nat):
                             (intendpts!1(i)`1,
                              i =
                               mod(vs!1(translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                   nvars!1)
                               OR intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "translist
                                                                                                                     (polylist
                                                                                                                      (mb!1,
                                                                                                                       bsdegmono!1,
                                                                                                                       nvars!1,
                                                                                                                       terms!1))") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" "bsdegmono!1" "nvars!1" "terms!1" "cf!1" "translist(polylist
                                                                                                            (mb!1,
                                                                                                             bsdegmono!1,
                                                                                                             nvars!1,
                                                                                                             terms!1))" "v!1") (("1" (case "varselect!1
                                                                                                                                 (bspoly!1,
                                                                                                                                  bsdegmono!1,
                                                                                                                                  nvars!1,
                                                                                                                                  terms!1,
                                                                                                                                  cf!1,
                                                                                                                                  level!1) = vs!1
                                                                                                                                  (translist
                                                                                                                                   (polylist
                                                                                                                                    (mb!1,
                                                                                                                                     bsdegmono!1,
                                                                                                                                     nvars!1,
                                                                                                                                     terms!1)),
                                                                                                                                   bsdegmono!1,
                                                                                                                                   nvars!1,
                                                                                                                                   terms!1,
                                                                                                                                   cf!1,
                                                                                                                                   level!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -3 1 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (hide -1) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (hide -1) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -2 :hide? t) (("2" (lift-if) (("2" (invoke (case "%1 = %2") (! -1 1) (! 2 1 1)) (("1" (label "rec_value" -1) (("1" (hide "rec_value") (("1" (split 2) (("1" (flatten) (("1" (hide-all-but 1) (("1" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("1" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst? -1 :where 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "rec_value") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but (1 -)) (("2" (reveal "rec_value") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1 -)) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                                                    Bern_split_right_mono(translist
                                                                                                                                                         (polylist
                                                                                                                                                          (mb!1,
                                                                                                                                                           bsdegmono!1,
                                                                                                                                                           nvars!1,
                                                                                                                                                           terms!1))
                                                                                                                                                         (k),
                                                                                                                                                         bsdegmono!1)
                                                                                                                                                        (mod
                                                                                                                                                         (vs!1
                                                                                                                                                          (translist
                                                                                                                                                           (polylist
                                                                                                                                                            (mb!1,
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1)),
                                                                                                                                                           bsdegmono!1,
                                                                                                                                                           nvars!1,
                                                                                                                                                           terms!1,
                                                                                                                                                           cf!1,
                                                                                                                                                           level!1)`2,
                                                                                                                                                          nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (case "a2l__Bern_coeffs_minmax(bspoly!1,
                                                                                                                                                 bsdegmono!1,
                                                                                                                                                 cf!1,
                                                                                                                                                 nvars!1,
                                                                                                                                                 terms!1,
                                                                                                                                                 level!1,
                                                                                                                                                 intendpts!1) = Bern_coeffs_minmax
                                                                                                                          (translist
                                                                                                                           (polylist
                                                                                                                            (mb!1,
                                                                                                                             bsdegmono!1,
                                                                                                                             nvars!1,
                                                                                                                             terms!1)),
                                                                                                                           bsdegmono!1,
                                                                                                                           cf!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1,
                                                                                                                           level!1,
                                                                                                                           intendpts!1)") (("1" (assert) (("1" (case "intendpts!1
                              WITH [(mod
                                     (vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1))
                                    `1
                                    := TRUE] = LAMBDA (i: nat):
                             (i =
                               mod(vs!1(translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                   nvars!1)
                               OR intendpts!1(i)`1,
                              intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "translist
                                                                                                               (polylist
                                                                                                                (mb!1,
                                                                                                                 bsdegmono!1,
                                                                                                                 nvars!1,
                                                                                                                 terms!1))") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" "bsdegmono!1" "nvars!1" "terms!1" "cf!1" "translist(polylist
                                                                                                          (mb!1,
                                                                                                           bsdegmono!1,
                                                                                                           nvars!1,
                                                                                                           terms!1))" "v!1") (("1" (case "varselect!1
                                                                                                                               (bspoly!1,
                                                                                                                                bsdegmono!1,
                                                                                                                                nvars!1,
                                                                                                                                terms!1,
                                                                                                                                cf!1,
                                                                                                                                level!1) = vs!1
                                                                                                                                (translist
                                                                                                                                 (polylist
                                                                                                                                  (mb!1,
                                                                                                                                   bsdegmono!1,
                                                                                                                                   nvars!1,
                                                                                                                                   terms!1)),
                                                                                                                                 bsdegmono!1,
                                                                                                                                 nvars!1,
                                                                                                                                 terms!1,
                                                                                                                                 cf!1,
                                                                                                                                 level!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "vs!1") (("2" (expand "represents" -1) (("2" (inst? -1 :where 1) (("2" (inst -1 "translist
                                                                                                                               (polylist
                                                                                                                                (mb!1,
                                                                                                                                 bsdegmono!1,
                                                                                                                                 nvars!1,
                                                                                                                                 terms!1))") (("2" (inst -1 "nvars!1" "terms!1" "bsdegmono!1") (("2" (split -1) (("1" (inst?) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "v!1") (("2" (inst?) (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "v!1") (("1" (inst?) (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst? 1 :where -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ((represents? const-decl "bool" multibernstein_into_polylist nil) (le_realorder name-judgement "RealOrder" real_orders reals) (combine const-decl "Outminmax" minmax nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (Coeff type-eq-decl nil util nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (translist const-decl "real" util nil) (MultiPolynomial type-eq-decl nil util nil) (polylist const-decl "PolyList" util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.combine_this(a2l__bernstein_minmax.v, a2l__bernstein_minmax.bslr1, a2l__bernstein_minmax.minmax)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}")) (a2l__Bernstein_minmax_rec_TCC8-1 nil 3686059360 ("" (skosimp*) (("" (replace -1 :hide? t) (("" (case "multipolynomial_represents?
                        [terms!1, nvars!1, maximum_degree(bsdegmono!1, nvars!1)]
                        (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_left" -1) (("1" (assert) (("1" (hide "mp_reps_left") (("1" (case "multipolynomial_represents?
                        [terms!1, nvars!1, maximum_degree(bsdegmono!1, nvars!1)]
                        (a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_right" -1) (("1" (assert) (("1" (hide "mp_reps_right") (("1" (case "varselect!1(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, level!1) =
                vs!1(translist(polylist(mb!1, bsdegmono!1, nvars!1, terms!1)),
                     bsdegmono!1, nvars!1, terms!1, cf!1, level!1)") (("1" (replace -1 :hide? t) (("1" (expand "Bernstein_minmax_rec") (("1" (lift-if 5) (("1" (split 5) (("1" (flatten) (("1" (hide 1) (("1" (split -1) (("1" (hide 1) (("1" (invoke (typepred "%1") (! -2 2)) (("1" (inst -1 "translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (invoke (typepred "%1") (! -2 2)) (("2" (inst -1 "translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil) ("3" (invoke (typepred "%1") (! -2 2)) (("3" (inst -1 "translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split 4) (("1" (flatten) (("1" (case "varsel!1`1") (("1" (replace -1 *) (("1" (assert) (("1" (hide -10) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (hide -10) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (replace -10 * :hide? t) (("1" (hide -7 -9) (("1" (replace -6 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -4 :hide? t) (("1" (replace -5 :hide? t) (("1" (invoke (case "%1 = %2") (! -4 1) (! 1 1 1)) (("1" (label "rec_value" -1) (("1" (hide "rec_value") (("1" (split 1) (("1" (flatten) (("1" (hide -1) (("1" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("1" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (hide -2) (("2" (inst? -1 :where 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "rec_value") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 2) (("2" (hide-all-but (1 -)) (("2" (reveal "rec_value") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide-all-but (1 -)) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                                      Bern_split_left_mono(translist
                                                                                                                                           (polylist
                                                                                                                                            (mb!1,
                                                                                                                                             bsdegmono!1,
                                                                                                                                             nvars!1,
                                                                                                                                             terms!1))
                                                                                                                                           (k),
                                                                                                                                           bsdegmono!1)
                                                                                                                                          (mod
                                                                                                                                           (vs!1
                                                                                                                                            (translist
                                                                                                                                             (polylist
                                                                                                                                              (mb!1,
                                                                                                                                               bsdegmono!1,
                                                                                                                                               nvars!1,
                                                                                                                                               terms!1)),
                                                                                                                                             bsdegmono!1,
                                                                                                                                             nvars!1,
                                                                                                                                             terms!1,
                                                                                                                                             cf!1,
                                                                                                                                             level!1)`2,
                                                                                                                                            nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (hide -4) (("1" (replace -3 :hide? t) (("1" (case "varselect!1
                                                                                                  (bspoly!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1,
                                                                                                   cf!1,
                                                                                                   level!1) = vs!1
                                                                                                   (translist
                                                                                                    (polylist
                                                                                                     (mb!1,
                                                                                                      bsdegmono!1,
                                                                                                      nvars!1,
                                                                                                      terms!1)),
                                                                                                    bsdegmono!1,
                                                                                                    nvars!1,
                                                                                                    terms!1,
                                                                                                    cf!1,
                                                                                                    level!1)") (("1" (case "a2l__Bern_coeffs_minmax(bspoly!1,
                                                                                                                              bsdegmono!1,
                                                                                                                              cf!1,
                                                                                                                              nvars!1,
                                                                                                                              terms!1,
                                                                                                                              level!1,
                                                                                                                              intendpts!1) = Bern_coeffs_minmax
                                                                                                       (translist
                                                                                                        (polylist
                                                                                                         (mb!1,
                                                                                                          bsdegmono!1,
                                                                                                          nvars!1,
                                                                                                          terms!1)),
                                                                                                        bsdegmono!1,
                                                                                                        cf!1,
                                                                                                        nvars!1,
                                                                                                        terms!1,
                                                                                                        level!1,
                                                                                                        intendpts!1)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "translist
                                                                                               (polylist
                                                                                                (mb!1,
                                                                                                 bsdegmono!1,
                                                                                                 nvars!1,
                                                                                                 terms!1))") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" "bsdegmono!1" "nvars!1" "terms!1" "cf!1" "translist(polylist
                                                                                          (mb!1,
                                                                                           bsdegmono!1,
                                                                                           nvars!1,
                                                                                           terms!1))" "v!1") (("1" (case "varselect!1
                                                                                                        (bspoly!1,
                                                                                                         bsdegmono!1,
                                                                                                         nvars!1,
                                                                                                         terms!1,
                                                                                                         cf!1,
                                                                                                         level!1) = vs!1
                                                                                                         (translist
                                                                                                          (polylist
                                                                                                           (mb!1,
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1)),
                                                                                                          bsdegmono!1,
                                                                                                          nvars!1,
                                                                                                          terms!1,
                                                                                                          cf!1,
                                                                                                          level!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -3 1 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (hide -1) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (hide -1) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -1 :hide? t) (("2" (replace -2 :hide? t) (("2" (lift-if) (("2" (invoke (case "%1 = %2") (! -1 1) (! 2 1 1)) (("1" (label "rec_value" -1) (("1" (hide "rec_value") (("1" (split 2) (("1" (flatten) (("1" (hide-all-but 1) (("1" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("1" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst? -1 :where 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "rec_value") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but (1 -)) (("2" (reveal "rec_value") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1 -)) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                                      Bern_split_right_mono(translist
                                                                                                                                           (polylist
                                                                                                                                            (mb!1,
                                                                                                                                             bsdegmono!1,
                                                                                                                                             nvars!1,
                                                                                                                                             terms!1))
                                                                                                                                           (k),
                                                                                                                                           bsdegmono!1)
                                                                                                                                          (mod
                                                                                                                                           (vs!1
                                                                                                                                            (translist
                                                                                                                                             (polylist
                                                                                                                                              (mb!1,
                                                                                                                                               bsdegmono!1,
                                                                                                                                               nvars!1,
                                                                                                                                               terms!1)),
                                                                                                                                             bsdegmono!1,
                                                                                                                                             nvars!1,
                                                                                                                                             terms!1,
                                                                                                                                             cf!1,
                                                                                                                                             level!1)`2,
                                                                                                                                            nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (case "a2l__Bern_coeffs_minmax(bspoly!1,
                                                                                                                            bsdegmono!1,
                                                                                                                            cf!1,
                                                                                                                            nvars!1,
                                                                                                                            terms!1,
                                                                                                                            level!1,
                                                                                                                            intendpts!1) = Bern_coeffs_minmax
                                                                                                     (translist
                                                                                                      (polylist
                                                                                                       (mb!1,
                                                                                                        bsdegmono!1,
                                                                                                        nvars!1,
                                                                                                        terms!1)),
                                                                                                      bsdegmono!1,
                                                                                                      cf!1,
                                                                                                      nvars!1,
                                                                                                      terms!1,
                                                                                                      level!1,
                                                                                                      intendpts!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "translist
                                                                                             (polylist
                                                                                              (mb!1,
                                                                                               bsdegmono!1,
                                                                                               nvars!1,
                                                                                               terms!1))") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" "bsdegmono!1" "nvars!1" "terms!1" "cf!1" "translist(polylist
                                                                                          (mb!1,
                                                                                           bsdegmono!1,
                                                                                           nvars!1,
                                                                                           terms!1))" "v!1") (("1" (case "varselect!1
                                                                                                        (bspoly!1,
                                                                                                         bsdegmono!1,
                                                                                                         nvars!1,
                                                                                                         terms!1,
                                                                                                         cf!1,
                                                                                                         level!1) = vs!1
                                                                                                         (translist
                                                                                                          (polylist
                                                                                                           (mb!1,
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1)),
                                                                                                          bsdegmono!1,
                                                                                                          nvars!1,
                                                                                                          terms!1,
                                                                                                          cf!1,
                                                                                                          level!1)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (assert) nil nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "vs!1") (("2" (expand "represents" -1) (("2" (inst? -1 :where 1) (("2" (inst -1 "translist
                                                                                                                       (polylist
                                                                                                                        (mb!1,
                                                                                                                         bsdegmono!1,
                                                                                                                         nvars!1,
                                                                                                                         terms!1))") (("2" (inst -1 "nvars!1" "terms!1" "maximum_degree(bsdegmono!1,nvars!1)") (("2" (split -1) (("1" (inst -1 "bsdegmono!1" "cf!1" "level!1") nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "v!1") (("2" (inst?) (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (expand "represents_polylist_multipolynomial") (("2" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "v!1") (("1" (inst?) (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (expand "represents_polylist_multipolynomial") (("1" (inst? 1 :where -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ((represents? const-decl "bool" arrays_into_lists structures) (combine const-decl "Outminmax" minmax nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (Coeff type-eq-decl nil util nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (translist const-decl "real" util nil) (MultiPolynomial type-eq-decl nil util nil) (polylist const-decl "PolyList" util nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (PolyList type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (maximum_degree def-decl "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.combine_this(a2l__bernstein_minmax.v, a2l__bernstein_minmax.bslr1, a2l__bernstein_minmax.minmax)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}"))) (a2l__Bernstein_minmax_rec_TCC10 0 (a2l__Bernstein_minmax_rec_TCC9-2 "" 3804456999 ("" (skosimp*) (("" (replace -10 :hide? t) (("" (lift-if 6) (("" (split 6) (("1" (flatten) (("1" (assert) (("1" (replace -7 :hide? t) (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (typepred "cf!1") (("1" (expand "multipolynomial_represents?" -1) (("1" (expand "represents?" -1) (("1" (skosimp -1) (("1" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst 1 "LAMBDA (k: nat): Bern_split_right_mono(A!1(k), bsdegmono!1)(v!1)") (("1" (expand "represents") (("1" (assert) (("1" (flatten) (("1" (assert) (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -5 :hide? t) (("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (typepred "cf!1") (("2" (expand "multipolynomial_represents?" -1) (("2" (expand "represents?" -1) (("2" (skosimp -1) (("2" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (expand "represents") (("2" (inst 2 "LAMBDA (k: nat): Bern_split_left_mono(A!1(k), bsdegmono!1)(v!1)") (("2" (flatten) (("2" (assert) (("2" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "below(m)" mod nil) (a2l__Bern_split_right_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (Coeff type-eq-decl nil util nil) (A!1 skolem-const-decl "MultiBernstein" a2l__bernstein_minmax nil) (bspoly!1 skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (represents const-decl "bool" multibernstein_into_polylist nil) (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (represents? const-decl "bool" multibernstein_into_polylist nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (A!1 skolem-const-decl "MultiBernstein" a2l__bernstein_minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.cf" "{cf | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].multipolynomial_represents?(a2l__bernstein_minmax.LR2)}")) (a2l__Bernstein_minmax_rec_TCC9-1 nil 3686059360 ("" (skosimp*) (("" (replace -9 :hide? t) (("" (lift-if 6) (("" (split 6) (("1" (flatten) (("1" (assert) (("1" (replace -7 :hide? t) (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (typepred "cf!1") (("1" (expand "multipolynomial_represents?" -1) (("1" (expand "represents?" -1) (("1" (skosimp -1) (("1" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst 1 "LAMBDA (k: nat): Bern_split_right_mono(A!1(k), bsdegmono!1)(v!1)") (("1" (expand "represents") (("1" (assert) (("1" (flatten) (("1" (assert) (("1" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -5 :hide? t) (("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (typepred "cf!1") (("2" (expand "multipolynomial_represents?" -1) (("2" (expand "represents?" -1) (("2" (skosimp -1) (("2" (inst -2 "bspoly!1" " bsdegmono!1" " nvars!1" " terms!1" " cf!1" "A!1" "v!1") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (expand "represents") (("2" (inst 2 "LAMBDA (k: nat): Bern_split_left_mono(A!1(k), bsdegmono!1)(v!1)") (("2" (flatten) (("2" (assert) (("2" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Bern_split_right_mono const-decl "real" multi_bernstein nil) (Coeff type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (represents? const-decl "bool" multibernstein_into_polylist nil) (PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil)) nil (a2l__Bernstein_minmax_rec subtype "a2l__bernstein_minmax.cf" "{cf | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].multipolynomial_represents?(a2l__bernstein_minmax.LR2)}"))) (a2l__Bernstein_minmax_rec_TCC11 0 (a2l__Bernstein_minmax_rec_TCC10-3 "" 3804459856 ("" (skosimp*) (("" (replace -1 :hide? t) (("" (case "multipolynomial_represents?
                                                    [terms!1, nvars!1, bsdegmono!1]
                                                    (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_left" -1) (("1" (assert) (("1" (hide "mp_reps_left") (("1" (case "multipolynomial_represents?
                                                            [terms!1, nvars!1, bsdegmono!1]
                                                            (a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_right" -1) (("1" (assert) (("1" (hide "mp_reps_right") (("1" (case "varselect!1(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, level!1) =
                                                            vs!1(translist(polylist(mb!1, bsdegmono!1, nvars!1, terms!1)),
                                                                 bsdegmono!1, nvars!1, terms!1, cf!1, level!1)") (("1" (assert) (("1" (replace -1 :hide? t) (("1" (case "represents_polylist_multipolynomial
                                    [terms!1, nvars!1, bsdegmono!1]
                                    (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)
                                                               (mod
                                                                (vs!1
                                                                 (translist
                                                                  (polylist
                                                                   (mb!1,
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1)),
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1,
                                                                  cf!1,
                                                                  level!1)`2,
                                                                 nvars!1)),
                                     LAMBDA (k: nat):
                                       Bern_split_left_mono(translist(polylist
                                                                      (mb!1,
                                                                       bsdegmono!1,
                                                                       nvars!1,
                                                                       terms!1))
                                                                     (k),
                                                            bsdegmono!1)
                                                           (mod(vs!1
                                                                (translist
                                                                 (polylist
                                                                  (mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1)),
                                                                 bsdegmono!1,
                                                                 nvars!1,
                                                                 terms!1,
                                                                 cf!1,
                                                                 level!1)`2,
                                                                nvars!1)))") (("1" (assert) (("1" (hide -1) (("1" (expand "Bernstein_minmax_rec") (("1" (lift-if 6) (("1" (split 6) (("1" (flatten) (("1" (hide 1) (("1" (split -1) (("1" (hide 1) (("1" (invoke (typepred "%1") (! -2 2)) (("1" (inst -1 "translist
                                                                                                                             (polylist
                                                                                                                              (mb!1,
                                                                                                                               bsdegmono!1,
                                                                                                                               nvars!1,
                                                                                                                               terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (invoke (typepred "%1") (! -2 2)) (("2" (inst -1 "translist
                                                                                                                             (polylist
                                                                                                                              (mb!1,
                                                                                                                               bsdegmono!1,
                                                                                                                               nvars!1,
                                                                                                                               terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil) ("3" (invoke (typepred "%1") (! -2 2)) (("3" (inst -1 "translist
                                                                                                                             (polylist
                                                                                                                              (mb!1,
                                                                                                                               bsdegmono!1,
                                                                                                                               nvars!1,
                                                                                                                               terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split 4) (("1" (flatten) (("1" (case "varsel!1`1") (("1" (replace -1 *) (("1" (split 1) (("1" (flatten) (("1" (hide 1) (("1" (replace -18 :hide? t) (("1" (replace -11 :hide? t) (("1" (replace -7 :hide? t) (("1" (replace -11 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -6 :hide? t) (("1" (replace -5 :hide? t) (("1" (replace -10 :hide? t) (("1" (replace -4 :hide? t) (("1" (hide-all-but (-1 8)) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA
                                                                                              (k: nat):
                                                                                              Bern_split_left_mono
                                                                                              (translist
                                                                                               (polylist
                                                                                                (mb!1,
                                                                                                 bsdegmono!1,
                                                                                                 nvars!1,
                                                                                                 terms!1))
                                                                                               (k),
                                                                                               bsdegmono!1)
                                                                                              (mod
                                                                                               (vs!1
                                                                                                (translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1)),
                                                                                                 bsdegmono!1,
                                                                                                 nvars!1,
                                                                                                 terms!1,
                                                                                                 cf!1,
                                                                                                 level!1)`2,
                                                                                                nvars!1))" "vs!1") (("1" (assert) (("1" (typepred "a2l__Bern_coeffs_minmax
                                                                                              (bspoly!1,
                                                                                               bsdegmono!1,
                                                                                               cf!1,
                                                                                               nvars!1,
                                                                                               terms!1,
                                                                                               level!1,
                                                                                               intendpts!1)") (("1" (inst -1 "translist
                                                                                                  (polylist
                                                                                                   (mb!1,
                                                                                                    bsdegmono!1,
                                                                                                    nvars!1,
                                                                                                    terms!1))") (("1" (assert) (("1" (case "intendpts!1
                                                                 WITH [(mod
                                                                        (vs!1
                                                                         (translist
                                                                          (polylist
                                                                           (mb!1,
                                                                            bsdegmono!1,
                                                                            nvars!1,
                                                                            terms!1)),
                                                                          bsdegmono!1,
                                                                          nvars!1,
                                                                          terms!1,
                                                                          cf!1,
                                                                          level!1)`2,
                                                                         nvars!1))
                                                                       `2
                                                                       := TRUE] = LAMBDA (i: nat):
                                                   (intendpts!1(i)`1,
                                                    i =
                                                     mod(vs!1(translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1)),
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1,
                                                              cf!1,
                                                              level!1)`2,
                                                         nvars!1)
                                                     OR intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (decompose-equality) (("1" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1)),
                                                bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                           nvars!1)") (("1" (case "bla = x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1)),
                                                bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                           nvars!1)") (("2" (case "bla = x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 1) (("2" (replace -21 :hide? t) (("2" (replace -20 :hide? t) (("2" (replace -19 :hide? t) (("2" (replace -18 :hide? t) (("2" (replace -17 :hide? t) (("2" (replace -16 :hide? t) (("2" (replace -15 :hide? t) (("2" (hide -14) (("2" (replace -13 :hide? t) (("2" (replace -12 :hide? t) (("2" (replace -10 :hide? t) (("2" (replace -10 :hide? t) (("2" (replace -9 :hide? t) (("2" (replace -8 :hide? t) (("2" (replace -7 :hide? t) (("2" (replace -6 :hide? t) (("2" (replace -5 :hide? t) (("2" (replace -4 :hide? t) (("2" (replace -3 :hide? t) (("2" (replace -2 :hide? t) (("2" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("2" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                                                                      (bspoly!1,
                                                                                                       bsdegmono!1,
                                                                                                       cf!1,
                                                                                                       nvars!1,
                                                                                                       terms!1,
                                                                                                       level!1,
                                                                                                       intendpts!1)") (("2" (inst -1 "translist
                                                                                                       (polylist
                                                                                                        (mb!1,
                                                                                                         bsdegmono!1,
                                                                                                         nvars!1,
                                                                                                         terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)
                                                                                                                        (mod
                                                                                                                         (vs!1
                                                                                                                          (translist
                                                                                                                           (polylist
                                                                                                                            (mb!1,
                                                                                                                             bsdegmono!1,
                                                                                                                             nvars!1,
                                                                                                                             terms!1)),
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1,
                                                                                                                           cf!1,
                                                                                                                           level!1)`2,
                                                                                                                          nvars!1)),
                                                                                              bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                                                                              1 + level!1, localexit!1, globalexit!1,
                                                                                              intendpts!1
                                                                                                WITH [(mod(vs!1
                                                                                                           (translist
                                                                                                            (polylist
                                                                                                             (mb!1,
                                                                                                              bsdegmono!1,
                                                                                                              nvars!1,
                                                                                                              terms!1)),
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1,
                                                                                                            cf!1,
                                                                                                            level!1)`2,
                                                                                                           nvars!1))
                                                                                                        `2
                                                                                                        := TRUE],
                                                                                              varselect!1,
                                                                                              combine(omm!1,
                                                                                                      Bern_coeffs_minmax(translist
                                                                                                                         (polylist
                                                                                                                          (mb!1,
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1)),
                                                                                                                         bsdegmono!1,
                                                                                                                         cf!1,
                                                                                                                         nvars!1,
                                                                                                                         terms!1,
                                                                                                                         level!1,
                                                                                                                         intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                                                                             (k: nat):
                                                                                                             Bern_split_left_mono
                                                                                                             (translist
                                                                                                              (polylist
                                                                                                               (mb!1,
                                                                                                                bsdegmono!1,
                                                                                                                nvars!1,
                                                                                                                terms!1))
                                                                                                              (k),
                                                                                                              bsdegmono!1)
                                                                                                             (mod
                                                                                                              (vs!1
                                                                                                               (translist
                                                                                                                (polylist
                                                                                                                 (mb!1,
                                                                                                                  bsdegmono!1,
                                                                                                                  nvars!1,
                                                                                                                  terms!1)),
                                                                                                                bsdegmono!1,
                                                                                                                nvars!1,
                                                                                                                terms!1,
                                                                                                                cf!1,
                                                                                                                level!1)`2,
                                                                                                               nvars!1))" "vs!1") (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA (k: nat):
                                                                                                          Bern_split_right_mono(translist
                                                                                                                                (polylist
                                                                                                                                 (mb!1,
                                                                                                                                  bsdegmono!1,
                                                                                                                                  nvars!1,
                                                                                                                                  terms!1))
                                                                                                                                (k),
                                                                                                                                bsdegmono!1)
                                                                                                                               (mod
                                                                                                                                (vs!1
                                                                                                                                 (translist
                                                                                                                                  (polylist
                                                                                                                                   (mb!1,
                                                                                                                                    bsdegmono!1,
                                                                                                                                    nvars!1,
                                                                                                                                    terms!1)),
                                                                                                                                  bsdegmono!1,
                                                                                                                                  nvars!1,
                                                                                                                                  terms!1,
                                                                                                                                  cf!1,
                                                                                                                                  level!1)`2,
                                                                                                                                 nvars!1))" "vs!1") (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "translist
                                                                                                                     (polylist
                                                                                                                      (mb!1,
                                                                                                                       bsdegmono!1,
                                                                                                                       nvars!1,
                                                                                                                       terms!1))" "mod(vs!1
                                                                                                                     (translist
                                                                                                                      (polylist
                                                                                                                       (mb!1,
                                                                                                                        bsdegmono!1,
                                                                                                                        nvars!1,
                                                                                                                        terms!1)),
                                                                                                                      bsdegmono!1,
                                                                                                                      nvars!1,
                                                                                                                      terms!1,
                                                                                                                      cf!1,
                                                                                                                      level!1)`2,
                                                                                                                     nvars!1)") (("1" (use "polylist_represents_translist_polylist") (("1" (case "intendpts!1
                                                                      WITH [(mod
                                                                             (vs!1
                                                                              (translist
                                                                               (polylist
                                                                                (mb!1,
                                                                                 bsdegmono!1,
                                                                                 nvars!1,
                                                                                 terms!1)),
                                                                               bsdegmono!1,
                                                                               nvars!1,
                                                                               terms!1,
                                                                               cf!1,
                                                                               level!1)`2,
                                                                              nvars!1))
                                                                            `2
                                                                            := TRUE] = LAMBDA (i: nat):
                                                           (intendpts!1(i)`1,
                                                            i =
                                                             mod(vs!1(translist
                                                                      (polylist
                                                                       (mb!1,
                                                                        bsdegmono!1,
                                                                        nvars!1,
                                                                        terms!1)),
                                                                      bsdegmono!1,
                                                                      nvars!1,
                                                                      terms!1,
                                                                      cf!1,
                                                                      level!1)`2,
                                                                 nvars!1)
                                                             OR intendpts!1(i)`2)") (("1" (replace -1 :hide? t) (("1" (case "intendpts!1
                                                                 WITH [(mod
                                                                        (vs!1
                                                                         (translist
                                                                          (polylist
                                                                           (mb!1,
                                                                            bsdegmono!1,
                                                                            nvars!1,
                                                                            terms!1)),
                                                                          bsdegmono!1,
                                                                          nvars!1,
                                                                          terms!1,
                                                                          cf!1,
                                                                          level!1)`2,
                                                                         nvars!1))
                                                                       `1
                                                                       := TRUE] = LAMBDA (i: nat):
                                                (i =
                                                  mod(vs!1(translist(polylist(mb!1,
                                                                              bsdegmono!1,
                                                                              nvars!1,
                                                                              terms!1)),
                                                           bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                                      nvars!1)
                                                  OR intendpts!1(i)`1,
                                                 intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1)),
                                                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                         bsdegmono!1,
                                                                         nvars!1,
                                                                         terms!1)),
                                                      bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                                 nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                                                                                                 (polylist
                                                                                                                                                                                  (mb!1,
                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                   terms!1))" "mod(vs!1
                                                                 (translist
                                                                  (polylist
                                                                   (mb!1,
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1)),
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1,
                                                                  cf!1,
                                                                  level!1)`2,
                                                                 nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                          Bern_split_left_mono(translist
                                                                                                               (polylist
                                                                                                                (mb!1,
                                                                                                                 bsdegmono!1,
                                                                                                                 nvars!1,
                                                                                                                 terms!1))
                                                                                                               (k),
                                                                                                               bsdegmono!1)
                                                                                                              (mod
                                                                                                               (vs!1
                                                                                                                (translist
                                                                                                                 (polylist
                                                                                                                  (mb!1,
                                                                                                                   bsdegmono!1,
                                                                                                                   nvars!1,
                                                                                                                   terms!1)),
                                                                                                                 bsdegmono!1,
                                                                                                                 nvars!1,
                                                                                                                 terms!1,
                                                                                                                 cf!1,
                                                                                                                 level!1)`2,
                                                                                                                nvars!1))" "vs!1") (("2" (replace -1 :hide? t) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                                                                    (bspoly!1,
                                                                                                     bsdegmono!1,
                                                                                                     cf!1,
                                                                                                     nvars!1,
                                                                                                     terms!1,
                                                                                                     level!1,
                                                                                                     intendpts!1)") (("2" (inst -1 "translist
                                                                                                     (polylist
                                                                                                      (mb!1,
                                                                                                       bsdegmono!1,
                                                                                                       nvars!1,
                                                                                                       terms!1))") (("1" (assert) (("1" (case "intendpts!1
                                                         WITH [(mod
                                                                (vs!1
                                                                 (translist
                                                                  (polylist
                                                                   (mb!1,
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1)),
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1,
                                                                  cf!1,
                                                                  level!1)`2,
                                                                 nvars!1))
                                                               `2
                                                               := TRUE] = LAMBDA (i: nat):
                                                        (intendpts!1(i)`1,
                                                         i =
                                                          mod(vs!1(translist
                                                                   (polylist
                                                                    (mb!1,
                                                                     bsdegmono!1,
                                                                     nvars!1,
                                                                     terms!1)),
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1,
                                                                   cf!1,
                                                                   level!1)`2,
                                                              nvars!1)
                                                          OR intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1)),
                                                bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                           nvars!1)") (("2" (case "bla = x!1") (("1" (decompose-equality) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -3 1 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "NOT varsel!1`1") (("1" (assert) (("1" (replace -19 :hide? t) (("1" (replace -18 :hide? t) (("1" (replace -17 :hide? t) (("1" (replace -16 :hide? t) (("1" (replace -15 :hide? t) (("1" (replace -14 :hide? t) (("1" (replace -13 :hide? t) (("1" (hide -12) (("1" (replace -11 :hide? t) (("1" (replace -10 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -7 :hide? t) (("1" (replace -6 :hide? t) (("1" (replace -5 :hide? t) (("1" (replace -4 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -2 :hide? t) (("1" (replace -1 :hide? t) (("1" (assert) (("1" (lift-if 3) (("1" (split 3) (("1" (flatten) (("1" (hide-all-but (-1 11)) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA
                                                                            (k: nat):
                                                                            Bern_split_right_mono
                                                                            (translist
                                                                             (polylist
                                                                              (mb!1,
                                                                               bsdegmono!1,
                                                                               nvars!1,
                                                                               terms!1))
                                                                             (k),
                                                                             bsdegmono!1)
                                                                            (mod
                                                                             (vs!1
                                                                              (translist
                                                                               (polylist
                                                                                (mb!1,
                                                                                 bsdegmono!1,
                                                                                 nvars!1,
                                                                                 terms!1)),
                                                                               bsdegmono!1,
                                                                               nvars!1,
                                                                               terms!1,
                                                                               cf!1,
                                                                               level!1)`2,
                                                                              nvars!1))" "vs!1") (("1" (typepred "a2l__Bern_coeffs_minmax
                                                                                                    (bspoly!1,
                                                                                                     bsdegmono!1,
                                                                                                     cf!1,
                                                                                                     nvars!1,
                                                                                                     terms!1,
                                                                                                     level!1,
                                                                                                     intendpts!1)") (("1" (inst -1 "translist
                                                                                                     (polylist
                                                                                                      (mb!1,
                                                                                                       bsdegmono!1,
                                                                                                       nvars!1,
                                                                                                       terms!1))") (("1" (assert) (("1" (case "(LAMBDA (i: nat):
                                                     ((i =
                                                       mod(vs!1(translist
                                                                (polylist
                                                                 (mb!1,
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1)),
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1,
                                                                cf!1,
                                                                level!1)`2,
                                                           nvars!1))
                                                       OR intendpts!1(i)`1,
                                                      intendpts!1(i)`2)) = intendpts!1
                                                                   WITH [(mod
                                                                          (vs!1
                                                                           (translist
                                                                            (polylist
                                                                             (mb!1,
                                                                              bsdegmono!1,
                                                                              nvars!1,
                                                                              terms!1)),
                                                                            bsdegmono!1,
                                                                            nvars!1,
                                                                            terms!1,
                                                                            cf!1,
                                                                            level!1)`2,
                                                                           nvars!1))
                                                                         `1
                                                                         := TRUE]") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1)),
                                                bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                           nvars!1)") (("2" (case "bla = x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                     (polylist
                                                                                                      (mb!1,
                                                                                                       bsdegmono!1,
                                                                                                       nvars!1,
                                                                                                       terms!1))" "mod(vs!1
                                                                                                     (translist
                                                                                                      (polylist
                                                                                                       (mb!1,
                                                                                                        bsdegmono!1,
                                                                                                        nvars!1,
                                                                                                        terms!1)),
                                                                                                      bsdegmono!1,
                                                                                                      nvars!1,
                                                                                                      terms!1,
                                                                                                      cf!1,
                                                                                                      level!1)`2,
                                                                                                     nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but 2) (("2" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("2" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                                                                      (bspoly!1,
                                                                                                       bsdegmono!1,
                                                                                                       cf!1,
                                                                                                       nvars!1,
                                                                                                       terms!1,
                                                                                                       level!1,
                                                                                                       intendpts!1)") (("2" (inst -1 "translist
                                                                                                       (polylist
                                                                                                        (mb!1,
                                                                                                         bsdegmono!1,
                                                                                                         nvars!1,
                                                                                                         terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)
                                                                                                                        (mod
                                                                                                                         (vs!1
                                                                                                                          (translist
                                                                                                                           (polylist
                                                                                                                            (mb!1,
                                                                                                                             bsdegmono!1,
                                                                                                                             nvars!1,
                                                                                                                             terms!1)),
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1,
                                                                                                                           cf!1,
                                                                                                                           level!1)`2,
                                                                                                                          nvars!1)),
                                                                                              bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                                                                              1 + level!1, localexit!1, globalexit!1,
                                                                                              intendpts!1
                                                                                                WITH [(mod(vs!1
                                                                                                           (translist
                                                                                                            (polylist
                                                                                                             (mb!1,
                                                                                                              bsdegmono!1,
                                                                                                              nvars!1,
                                                                                                              terms!1)),
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1,
                                                                                                            cf!1,
                                                                                                            level!1)`2,
                                                                                                           nvars!1))
                                                                                                        `1
                                                                                                        := TRUE],
                                                                                              varselect!1,
                                                                                              combine(omm!1,
                                                                                                      Bern_coeffs_minmax(translist
                                                                                                                         (polylist
                                                                                                                          (mb!1,
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1)),
                                                                                                                         bsdegmono!1,
                                                                                                                         cf!1,
                                                                                                                         nvars!1,
                                                                                                                         terms!1,
                                                                                                                         level!1,
                                                                                                                         intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                                                                             (k: nat):
                                                                                                             Bern_split_right_mono
                                                                                                             (translist
                                                                                                              (polylist
                                                                                                               (mb!1,
                                                                                                                bsdegmono!1,
                                                                                                                nvars!1,
                                                                                                                terms!1))
                                                                                                              (k),
                                                                                                              bsdegmono!1)
                                                                                                             (mod
                                                                                                              (vs!1
                                                                                                               (translist
                                                                                                                (polylist
                                                                                                                 (mb!1,
                                                                                                                  bsdegmono!1,
                                                                                                                  nvars!1,
                                                                                                                  terms!1)),
                                                                                                                bsdegmono!1,
                                                                                                                nvars!1,
                                                                                                                terms!1,
                                                                                                                cf!1,
                                                                                                                level!1)`2,
                                                                                                               nvars!1))" "vs!1") (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "translist
                                                                                                                     (polylist
                                                                                                                      (mb!1,
                                                                                                                       bsdegmono!1,
                                                                                                                       nvars!1,
                                                                                                                       terms!1))" "mod(vs!1
                                                                                                                     (translist
                                                                                                                      (polylist
                                                                                                                       (mb!1,
                                                                                                                        bsdegmono!1,
                                                                                                                        nvars!1,
                                                                                                                        terms!1)),
                                                                                                                      bsdegmono!1,
                                                                                                                      nvars!1,
                                                                                                                      terms!1,
                                                                                                                      cf!1,
                                                                                                                      level!1)`2,
                                                                                                                     nvars!1)") (("1" (use "polylist_represents_translist_polylist") (("1" (case "intendpts!1
                                                               WITH [(mod
                                                                      (vs!1
                                                                       (translist
                                                                        (polylist
                                                                         (mb!1,
                                                                          bsdegmono!1,
                                                                          nvars!1,
                                                                          terms!1)),
                                                                        bsdegmono!1,
                                                                        nvars!1,
                                                                        terms!1,
                                                                        cf!1,
                                                                        level!1)`2,
                                                                       nvars!1))
                                                                     `1
                                                                     := TRUE] = (LAMBDA (i: nat):
                                              (i =
                                                mod(vs!1(translist(polylist(mb!1,
                                                                            bsdegmono!1,
                                                                            nvars!1,
                                                                            terms!1)),
                                                         bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                                    nvars!1)
                                                OR intendpts!1(i)`1,
                                               intendpts!1(i)`2))") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                         bsdegmono!1,
                                                                         nvars!1,
                                                                         terms!1)),
                                                      bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                                 nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                                                                                                 (polylist
                                                                                                                                                                                  (mb!1,
                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                   terms!1))" "mod(vs!1
                                                                 (translist
                                                                  (polylist
                                                                   (mb!1,
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1)),
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1,
                                                                  cf!1,
                                                                  level!1)`2,
                                                                 nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                                                  Bern_split_left_mono(translist
                                                                                                                        (polylist
                                                                                                                         (mb!1,
                                                                                                                          bsdegmono!1,
                                                                                                                          nvars!1,
                                                                                                                          terms!1))
                                                                                                                        (k),
                                                                                                                        bsdegmono!1)
                                                                                                                       (mod
                                                                                                                        (vs!1
                                                                                                                         (translist
                                                                                                                          (polylist
                                                                                                                           (mb!1,
                                                                                                                            bsdegmono!1,
                                                                                                                            nvars!1,
                                                                                                                            terms!1)),
                                                                                                                          bsdegmono!1,
                                                                                                                          nvars!1,
                                                                                                                          terms!1,
                                                                                                                          cf!1,
                                                                                                                          level!1)`2,
                                                                                                                         nvars!1))" "vs!1") (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                           (polylist
                                                                                                            (mb!1,
                                                                                                             bsdegmono!1,
                                                                                                             nvars!1,
                                                                                                             terms!1))" "mod(vs!1
                                                                                                           (translist
                                                                                                            (polylist
                                                                                                             (mb!1,
                                                                                                              bsdegmono!1,
                                                                                                              nvars!1,
                                                                                                              terms!1)),
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1,
                                                                                                            cf!1,
                                                                                                            level!1)`2,
                                                                                                           nvars!1)") (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (typepred "a2l__Bern_coeffs_minmax
                                                                                                      (bspoly!1,
                                                                                                       bsdegmono!1,
                                                                                                       cf!1,
                                                                                                       nvars!1,
                                                                                                       terms!1,
                                                                                                       level!1,
                                                                                                       intendpts!1)") (("1" (inst -1 "translist
                                                                                                       (polylist
                                                                                                        (mb!1,
                                                                                                         bsdegmono!1,
                                                                                                         nvars!1,
                                                                                                         terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)
                                                                                                                        (mod
                                                                                                                         (vs!1
                                                                                                                          (translist
                                                                                                                           (polylist
                                                                                                                            (mb!1,
                                                                                                                             bsdegmono!1,
                                                                                                                             nvars!1,
                                                                                                                             terms!1)),
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1,
                                                                                                                           cf!1,
                                                                                                                           level!1)`2,
                                                                                                                          nvars!1)),
                                                                                              bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                                                                              1 + level!1, localexit!1, globalexit!1,
                                                                                              intendpts!1
                                                                                                WITH [(mod(vs!1
                                                                                                           (translist
                                                                                                            (polylist
                                                                                                             (mb!1,
                                                                                                              bsdegmono!1,
                                                                                                              nvars!1,
                                                                                                              terms!1)),
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1,
                                                                                                            cf!1,
                                                                                                            level!1)`2,
                                                                                                           nvars!1))
                                                                                                        `1
                                                                                                        := TRUE],
                                                                                              varselect!1,
                                                                                              combine(omm!1,
                                                                                                      Bern_coeffs_minmax(translist
                                                                                                                         (polylist
                                                                                                                          (mb!1,
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1)),
                                                                                                                         bsdegmono!1,
                                                                                                                         cf!1,
                                                                                                                         nvars!1,
                                                                                                                         terms!1,
                                                                                                                         level!1,
                                                                                                                         intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                                                                             (k: nat):
                                                                                                             Bern_split_right_mono
                                                                                                             (translist
                                                                                                              (polylist
                                                                                                               (mb!1,
                                                                                                                bsdegmono!1,
                                                                                                                nvars!1,
                                                                                                                terms!1))
                                                                                                              (k),
                                                                                                              bsdegmono!1)
                                                                                                             (mod
                                                                                                              (vs!1
                                                                                                               (translist
                                                                                                                (polylist
                                                                                                                 (mb!1,
                                                                                                                  bsdegmono!1,
                                                                                                                  nvars!1,
                                                                                                                  terms!1)),
                                                                                                                bsdegmono!1,
                                                                                                                nvars!1,
                                                                                                                terms!1,
                                                                                                                cf!1,
                                                                                                                level!1)`2,
                                                                                                               nvars!1))" "vs!1") (("1" (case "intendpts!1
                                                                    WITH [(mod
                                                                           (vs!1
                                                                            (translist
                                                                             (polylist
                                                                              (mb!1,
                                                                               bsdegmono!1,
                                                                               nvars!1,
                                                                               terms!1)),
                                                                             bsdegmono!1,
                                                                             nvars!1,
                                                                             terms!1,
                                                                             cf!1,
                                                                             level!1)`2,
                                                                            nvars!1))
                                                                          `1
                                                                          := TRUE] =  LAMBDA
                                                                       (i: nat):
                                                                       (i
                                                                        =
                                                                        mod
                                                                        (vs!1
                                                                         (translist
                                                                          (polylist
                                                                           (mb!1,
                                                                            bsdegmono!1,
                                                                            nvars!1,
                                                                            terms!1)),
                                                                          bsdegmono!1,
                                                                          nvars!1,
                                                                          terms!1,
                                                                          cf!1,
                                                                          level!1)`2,
                                                                         nvars!1)
                                                                        OR
                                                                        intendpts!1(i)`1,
                                                                        intendpts!1(i)`2)") (("1" (replace -1 :hide? t) (("1" (case "intendpts!1
                                                               WITH [(mod
                                                                      (vs!1
                                                                       (translist
                                                                        (polylist
                                                                         (mb!1,
                                                                          bsdegmono!1,
                                                                          nvars!1,
                                                                          terms!1)),
                                                                        bsdegmono!1,
                                                                        nvars!1,
                                                                        terms!1,
                                                                        cf!1,
                                                                        level!1)`2,
                                                                       nvars!1))
                                                                     `2
                                                                     := TRUE] = LAMBDA (i: nat):
                                                              (intendpts!1(i)`1,
                                                               i =
                                                                mod(vs!1(translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1)),
                                                                         bsdegmono!1,
                                                                         nvars!1,
                                                                         terms!1,
                                                                         cf!1,
                                                                         level!1)`2,
                                                                    nvars!1)
                                                                OR intendpts!1(i)`2)") (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                         bsdegmono!1,
                                                                         nvars!1,
                                                                         terms!1)),
                                                      bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                                 nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                                                       bsdegmono!1,
                                                                       nvars!1,
                                                                       terms!1)),
                                                    bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                                               nvars!1)") (("2" (case "bla = x!1") (("1" (decompose-equality) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                                       (polylist
                                                                                                                        (mb!1,
                                                                                                                         bsdegmono!1,
                                                                                                                         nvars!1,
                                                                                                                         terms!1))" "mod(vs!1
                                                                                                                       (translist
                                                                                                                        (polylist
                                                                                                                         (mb!1,
                                                                                                                          bsdegmono!1,
                                                                                                                          nvars!1,
                                                                                                                          terms!1)),
                                                                                                                        bsdegmono!1,
                                                                                                                        nvars!1,
                                                                                                                        terms!1,
                                                                                                                        cf!1,
                                                                                                                        level!1)`2,
                                                                                                                       nvars!1)") (("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                     (polylist
                                                                                      (mb!1,
                                                                                       bsdegmono!1,
                                                                                       nvars!1,
                                                                                       terms!1))" "mod(vs!1
                                                                                     (translist
                                                                                      (polylist
                                                                                       (mb!1,
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1)),
                                                                                      bsdegmono!1,
                                                                                      nvars!1,
                                                                                      terms!1,
                                                                                      cf!1,
                                                                                      level!1)`2,
                                                                                     nvars!1)") (("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "vs!1") (("2" (expand "represents" -1) (("2" (inst? -1 :where 1) (("2" (inst -1 "translist
                                                                                                                                                       (polylist
                                                                                                                                                        (mb!1,
                                                                                                                                                         bsdegmono!1,
                                                                                                                                                         nvars!1,
                                                                                                                                                         terms!1))") (("2" (inst -1 "nvars!1" "terms!1" "bsdegmono!1") (("2" (split -1) (("1" (inst?) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "mb!1" "v!1") (("2" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "v!1 >= 0") (("1" (assert) (("1" (hide-all-but 1) (("1" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "mb!1" "v!1") (("1" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ((represents? const-decl "bool" multibernstein_into_polylist nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (TRUE const-decl "bool" booleans nil) (combine const-decl "Outminmax" minmax nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (posint nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (a2l__Bern_split_right_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (below type-eq-decl nil naturalnumbers nil) (level!1 skolem-const-decl "upto(depth!1)" a2l__bernstein_minmax nil) (depth!1 skolem-const-decl "nat" a2l__bernstein_minmax nil) (cf!1 skolem-const-decl "{cf | multipolynomial_represents?[terms!1, nvars!1, bsdegmono!1](bspoly!1)}" a2l__bernstein_minmax nil) (vs!1 skolem-const-decl "{vs: VarSelector | represents(varselect!1, vs)}" a2l__bernstein_minmax nil) (varselect!1 skolem-const-decl "a2l__VarSelector" a2l__bernstein_minmax nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (a2l__Bern_coeffs_minmax const-decl "{result: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb)):
     result =
      Bern_coeffs_minmax(mb, bsdegmono, cf, nvars, terms, depth, intendpts)}" a2l__bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (polylist_represents_translist_polylist formula-decl nil a2l__bernstein_minmax nil) (mb!1 skolem-const-decl "{mb: MultiBernstein | represents(bspoly!1, mb)}" a2l__bernstein_minmax nil) (bspoly!1 skolem-const-decl "PolyList" a2l__bernstein_minmax nil) (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (terms!1 skolem-const-decl "posnat" a2l__bernstein_minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (a2l__Bern_split_left_mpoly__homomorphic formula-decl nil a2l__bernstein_minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (Coeff type-eq-decl nil util nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (translist const-decl "real" util nil) (MultiPolynomial type-eq-decl nil util nil) (polylist const-decl "PolyList" util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (nil application-judgement "below(m)" mod nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (PolyList type-eq-decl nil util nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (a2l__Bernstein_minmax_rec subtype "minmax.combine_lr(a2l__bernstein_minmax.v, a2l__bernstein_minmax.bslrleft, a2l__bernstein_minmax.bslrright)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}")) (a2l__Bernstein_minmax_rec_TCC10-2 nil 3687112448 ("" (skosimp*) (("" (replace -1 :hide? t) (("" (case "multipolynomial_represents?
                                             [terms!1, nvars!1, bsdegmono!1]
                                             (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_left" -1) (("1" (assert) (("1" (hide "mp_reps_left") (("1" (case "multipolynomial_represents?
                                                   [terms!1, nvars!1, bsdegmono!1]
                                                   (a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_right" -1) (("1" (assert) (("1" (hide "mp_reps_right") (("1" (case "varselect!1(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, level!1) =
                                                 vs!1(translist(polylist(mb!1, bsdegmono!1, nvars!1, terms!1)),
                                                      bsdegmono!1, nvars!1, terms!1, cf!1, level!1)") (("1" (assert) (("1" (replace -1 :hide? t) (("1" (case "represents_polylist_multipolynomial
                       [terms!1, nvars!1, bsdegmono!1]
                       (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)
                                                  (mod
                                                   (vs!1
                                                    (translist
                                                     (polylist
                                                      (mb!1,
                                                       bsdegmono!1,
                                                       nvars!1,
                                                       terms!1)),
                                                     bsdegmono!1,
                                                     nvars!1,
                                                     terms!1,
                                                     cf!1,
                                                     level!1)`2,
                                                    nvars!1)),
                        LAMBDA (k: nat):
                          Bern_split_left_mono(translist(polylist
                                                         (mb!1,
                                                          bsdegmono!1,
                                                          nvars!1,
                                                          terms!1))
                                                        (k),
                                               bsdegmono!1)
                                              (mod(vs!1
                                                   (translist
                                                    (polylist
                                                     (mb!1,
                                                      bsdegmono!1,
                                                      nvars!1,
                                                      terms!1)),
                                                    bsdegmono!1,
                                                    nvars!1,
                                                    terms!1,
                                                    cf!1,
                                                    level!1)`2,
                                                   nvars!1)))") (("1" (assert) (("1" (hide -1) (("1" (expand "Bernstein_minmax_rec") (("1" (lift-if 6) (("1" (split 6) (("1" (flatten) (("1" (hide 1) (("1" (split -1) (("1" (hide 1) (("1" (invoke (typepred "%1") (! -2 2)) (("1" (inst -1 "translist
                                                                                                               (polylist
                                                                                                                (mb!1,
                                                                                                                 bsdegmono!1,
                                                                                                                 nvars!1,
                                                                                                                 terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (invoke (typepred "%1") (! -2 2)) (("2" (inst -1 "translist
                                                                                                               (polylist
                                                                                                                (mb!1,
                                                                                                                 bsdegmono!1,
                                                                                                                 nvars!1,
                                                                                                                 terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil) ("3" (invoke (typepred "%1") (! -2 2)) (("3" (inst -1 "translist
                                                                                                               (polylist
                                                                                                                (mb!1,
                                                                                                                 bsdegmono!1,
                                                                                                                 nvars!1,
                                                                                                                 terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split 4) (("1" (flatten) (("1" (case "varsel!1`1") (("1" (replace -1 *) (("1" (split 1) (("1" (flatten) (("1" (hide 1) (("1" (replace -18 :hide? t) (("1" (replace -12 :hide? t) (("1" (replace -7 :hide? t) (("1" (replace -11 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -6 :hide? t) (("1" (replace -5 :hide? t) (("1" (replace -10 :hide? t) (("1" (replace -4 :hide? t) (("1" (hide-all-but (-1 8)) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA
                                                                            (k: nat):
                                                                            Bern_split_left_mono
                                                                            (translist
                                                                             (polylist
                                                                              (mb!1,
                                                                               bsdegmono!1,
                                                                               nvars!1,
                                                                               terms!1))
                                                                             (k),
                                                                             bsdegmono!1)
                                                                            (mod
                                                                             (vs!1
                                                                              (translist
                                                                               (polylist
                                                                                (mb!1,
                                                                                 bsdegmono!1,
                                                                                 nvars!1,
                                                                                 terms!1)),
                                                                               bsdegmono!1,
                                                                               nvars!1,
                                                                               terms!1,
                                                                               cf!1,
                                                                               level!1)`2,
                                                                              nvars!1))" "vs!1") (("1" (assert) (("1" (typepred "a2l__Bern_coeffs_minmax
                                                                            (bspoly!1,
                                                                             bsdegmono!1,
                                                                             cf!1,
                                                                             nvars!1,
                                                                             terms!1,
                                                                             level!1,
                                                                             intendpts!1)") (("1" (inst -1 "translist
                                                                                (polylist
                                                                                 (mb!1,
                                                                                  bsdegmono!1,
                                                                                  nvars!1,
                                                                                  terms!1))") (("1" (assert) (("1" (case "intendpts!1
                                        WITH [(mod
                                               (vs!1
                                                (translist
                                                 (polylist
                                                  (mb!1,
                                                   bsdegmono!1,
                                                   nvars!1,
                                                   terms!1)),
                                                 bsdegmono!1,
                                                 nvars!1,
                                                 terms!1,
                                                 cf!1,
                                                 level!1)`2,
                                                nvars!1))
                                              `2
                                              := TRUE] = LAMBDA (i: nat):
                          (intendpts!1(i)`1,
                           i =
                            mod(vs!1(translist
                                     (polylist
                                      (mb!1,
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1)),
                                     bsdegmono!1,
                                     nvars!1,
                                     terms!1,
                                     cf!1,
                                     level!1)`2,
                                nvars!1)
                            OR intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (decompose-equality) (("1" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("1" (case "bla = x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 1) (("2" (replace -21 :hide? t) (("2" (replace -20 :hide? t) (("2" (replace -19 :hide? t) (("2" (replace -18 :hide? t) (("2" (replace -17 :hide? t) (("2" (replace -16 :hide? t) (("2" (replace -15 :hide? t) (("2" (hide -14) (("2" (replace -13 :hide? t) (("2" (replace -12 :hide? t) (("2" (replace -11 :hide? t) (("2" (replace -10 :hide? t) (("2" (replace -9 :hide? t) (("2" (replace -8 :hide? t) (("2" (replace -7 :hide? t) (("2" (replace -6 :hide? t) (("2" (replace -5 :hide? t) (("2" (replace -4 :hide? t) (("2" (replace -3 :hide? t) (("2" (replace -2 :hide? t) (("2" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("2" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                                                (bspoly!1,
                                                                                 bsdegmono!1,
                                                                                 cf!1,
                                                                                 nvars!1,
                                                                                 terms!1,
                                                                                 level!1,
                                                                                 intendpts!1)") (("2" (inst -1 "translist
                                                                                 (polylist
                                                                                  (mb!1,
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)
                                                                                                (mod
                                                                                                 (vs!1
                                                                                                  (translist
                                                                                                   (polylist
                                                                                                    (mb!1,
                                                                                                     bsdegmono!1,
                                                                                                     nvars!1,
                                                                                                     terms!1)),
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1,
                                                                                                   cf!1,
                                                                                                   level!1)`2,
                                                                                                  nvars!1)),
                                                                      bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                                                      1 + level!1, localexit!1, globalexit!1,
                                                                      intendpts!1
                                                                        WITH [(mod(vs!1
                                                                                   (translist
                                                                                    (polylist
                                                                                     (mb!1,
                                                                                      bsdegmono!1,
                                                                                      nvars!1,
                                                                                      terms!1)),
                                                                                    bsdegmono!1,
                                                                                    nvars!1,
                                                                                    terms!1,
                                                                                    cf!1,
                                                                                    level!1)`2,
                                                                                   nvars!1))
                                                                                `2
                                                                                := TRUE],
                                                                      varselect!1,
                                                                      combine(omm!1,
                                                                              Bern_coeffs_minmax(translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1)),
                                                                                                 bsdegmono!1,
                                                                                                 cf!1,
                                                                                                 nvars!1,
                                                                                                 terms!1,
                                                                                                 level!1,
                                                                                                 intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                                                     (k: nat):
                                                                                     Bern_split_left_mono
                                                                                     (translist
                                                                                      (polylist
                                                                                       (mb!1,
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1))
                                                                                      (k),
                                                                                      bsdegmono!1)
                                                                                     (mod
                                                                                      (vs!1
                                                                                       (translist
                                                                                        (polylist
                                                                                         (mb!1,
                                                                                          bsdegmono!1,
                                                                                          nvars!1,
                                                                                          terms!1)),
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1,
                                                                                        cf!1,
                                                                                        level!1)`2,
                                                                                       nvars!1))" "vs!1") (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA (k: nat):
                                                                                  Bern_split_right_mono(translist
                                                                                                        (polylist
                                                                                                         (mb!1,
                                                                                                          bsdegmono!1,
                                                                                                          nvars!1,
                                                                                                          terms!1))
                                                                                                        (k),
                                                                                                        bsdegmono!1)
                                                                                                       (mod
                                                                                                        (vs!1
                                                                                                         (translist
                                                                                                          (polylist
                                                                                                           (mb!1,
                                                                                                            bsdegmono!1,
                                                                                                            nvars!1,
                                                                                                            terms!1)),
                                                                                                          bsdegmono!1,
                                                                                                          nvars!1,
                                                                                                          terms!1,
                                                                                                          cf!1,
                                                                                                          level!1)`2,
                                                                                                         nvars!1))" "vs!1") (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "translist
                                                                                           (polylist
                                                                                            (mb!1,
                                                                                             bsdegmono!1,
                                                                                             nvars!1,
                                                                                             terms!1))" "mod(vs!1
                                                                                           (translist
                                                                                            (polylist
                                                                                             (mb!1,
                                                                                              bsdegmono!1,
                                                                                              nvars!1,
                                                                                              terms!1)),
                                                                                            bsdegmono!1,
                                                                                            nvars!1,
                                                                                            terms!1,
                                                                                            cf!1,
                                                                                            level!1)`2,
                                                                                           nvars!1)") (("1" (use "polylist_represents_translist_polylist") (("1" (case "intendpts!1
                                     WITH [(mod
                                            (vs!1
                                             (translist
                                              (polylist
                                               (mb!1,
                                                bsdegmono!1,
                                                nvars!1,
                                                terms!1)),
                                              bsdegmono!1,
                                              nvars!1,
                                              terms!1,
                                              cf!1,
                                              level!1)`2,
                                             nvars!1))
                                           `2
                                           := TRUE] = LAMBDA (i: nat):
                          (intendpts!1(i)`1,
                           i =
                            mod(vs!1(translist
                                     (polylist
                                      (mb!1,
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1)),
                                     bsdegmono!1,
                                     nvars!1,
                                     terms!1,
                                     cf!1,
                                     level!1)`2,
                                nvars!1)
                            OR intendpts!1(i)`2)") (("1" (replace -1 :hide? t) (("1" (case "intendpts!1
                              WITH [(mod
                                     (vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1))
                                    `1
                                    := TRUE] = LAMBDA (i: nat):
             (i =
               mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)
               OR intendpts!1(i)`1,
              intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                                                                       (polylist
                                                                                                                                                        (mb!1,
                                                                                                                                                         bsdegmono!1,
                                                                                                                                                         nvars!1,
                                                                                                                                                         terms!1))" "mod(vs!1
                                       (translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                       nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                      Bern_split_left_mono(translist
                                                                                           (polylist
                                                                                            (mb!1,
                                                                                             bsdegmono!1,
                                                                                             nvars!1,
                                                                                             terms!1))
                                                                                           (k),
                                                                                           bsdegmono!1)
                                                                                          (mod
                                                                                           (vs!1
                                                                                            (translist
                                                                                             (polylist
                                                                                              (mb!1,
                                                                                               bsdegmono!1,
                                                                                               nvars!1,
                                                                                               terms!1)),
                                                                                             bsdegmono!1,
                                                                                             nvars!1,
                                                                                             terms!1,
                                                                                             cf!1,
                                                                                             level!1)`2,
                                                                                            nvars!1))" "vs!1") (("2" (replace -1 :hide? t) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                                                (bspoly!1,
                                                                                 bsdegmono!1,
                                                                                 cf!1,
                                                                                 nvars!1,
                                                                                 terms!1,
                                                                                 level!1,
                                                                                 intendpts!1)") (("2" (inst -1 "translist
                                                                                 (polylist
                                                                                  (mb!1,
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1))") (("1" (assert) (("1" (case "intendpts!1
                              WITH [(mod
                                     (vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1))
                                    `2
                                    := TRUE] = LAMBDA (i: nat):
                             (intendpts!1(i)`1,
                              i =
                               mod(vs!1(translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                   nvars!1)
                               OR intendpts!1(i)`2)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (decompose-equality) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -3 1 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "NOT varsel!1`1") (("1" (assert) (("1" (replace -19 :hide? t) (("1" (replace -18 :hide? t) (("1" (replace -17 :hide? t) (("1" (replace -16 :hide? t) (("1" (replace -15 :hide? t) (("1" (replace -14 :hide? t) (("1" (replace -13 :hide? t) (("1" (hide -12) (("1" (replace -11 :hide? t) (("1" (replace -10 :hide? t) (("1" (replace -9 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -7 :hide? t) (("1" (replace -6 :hide? t) (("1" (replace -5 :hide? t) (("1" (replace -4 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -2 :hide? t) (("1" (replace -1 :hide? t) (("1" (assert) (("1" (lift-if 3) (("1" (split 3) (("1" (flatten) (("1" (hide-all-but (-1 11)) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA
                                                          (k: nat):
                                                          Bern_split_right_mono
                                                          (translist
                                                           (polylist
                                                            (mb!1,
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1))
                                                           (k),
                                                           bsdegmono!1)
                                                          (mod
                                                           (vs!1
                                                            (translist
                                                             (polylist
                                                              (mb!1,
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1)),
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1,
                                                             cf!1,
                                                             level!1)`2,
                                                            nvars!1))" "vs!1") (("1" (typepred "a2l__Bern_coeffs_minmax
                                                                                (bspoly!1,
                                                                                 bsdegmono!1,
                                                                                 cf!1,
                                                                                 nvars!1,
                                                                                 terms!1,
                                                                                 level!1,
                                                                                 intendpts!1)") (("1" (inst -1 "translist
                                                                                 (polylist
                                                                                  (mb!1,
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1))") (("1" (assert) (("1" (case "(LAMBDA (i: nat):
                          ((i =
                            mod(vs!1(translist
                                     (polylist
                                      (mb!1,
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1)),
                                     bsdegmono!1,
                                     nvars!1,
                                     terms!1,
                                     cf!1,
                                     level!1)`2,
                                nvars!1))
                            OR intendpts!1(i)`1,
                           intendpts!1(i)`2)) = intendpts!1
                                        WITH [(mod
                                               (vs!1
                                                (translist
                                                 (polylist
                                                  (mb!1,
                                                   bsdegmono!1,
                                                   nvars!1,
                                                   terms!1)),
                                                 bsdegmono!1,
                                                 nvars!1,
                                                 terms!1,
                                                 cf!1,
                                                 level!1)`2,
                                                nvars!1))
                                              `1
                                              := TRUE]") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                 (polylist
                                                                                  (mb!1,
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1))" "mod(vs!1
                                                                                 (translist
                                                                                  (polylist
                                                                                   (mb!1,
                                                                                    bsdegmono!1,
                                                                                    nvars!1,
                                                                                    terms!1)),
                                                                                  bsdegmono!1,
                                                                                  nvars!1,
                                                                                  terms!1,
                                                                                  cf!1,
                                                                                  level!1)`2,
                                                                                 nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but 2) (("2" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("2" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                                                (bspoly!1,
                                                                                 bsdegmono!1,
                                                                                 cf!1,
                                                                                 nvars!1,
                                                                                 terms!1,
                                                                                 level!1,
                                                                                 intendpts!1)") (("2" (inst -1 "translist
                                                                                 (polylist
                                                                                  (mb!1,
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)
                                                                                                (mod
                                                                                                 (vs!1
                                                                                                  (translist
                                                                                                   (polylist
                                                                                                    (mb!1,
                                                                                                     bsdegmono!1,
                                                                                                     nvars!1,
                                                                                                     terms!1)),
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1,
                                                                                                   cf!1,
                                                                                                   level!1)`2,
                                                                                                  nvars!1)),
                                                                      bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                                                      1 + level!1, localexit!1, globalexit!1,
                                                                      intendpts!1
                                                                        WITH [(mod(vs!1
                                                                                   (translist
                                                                                    (polylist
                                                                                     (mb!1,
                                                                                      bsdegmono!1,
                                                                                      nvars!1,
                                                                                      terms!1)),
                                                                                    bsdegmono!1,
                                                                                    nvars!1,
                                                                                    terms!1,
                                                                                    cf!1,
                                                                                    level!1)`2,
                                                                                   nvars!1))
                                                                                `1
                                                                                := TRUE],
                                                                      varselect!1,
                                                                      combine(omm!1,
                                                                              Bern_coeffs_minmax(translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1)),
                                                                                                 bsdegmono!1,
                                                                                                 cf!1,
                                                                                                 nvars!1,
                                                                                                 terms!1,
                                                                                                 level!1,
                                                                                                 intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                                                     (k: nat):
                                                                                     Bern_split_right_mono
                                                                                     (translist
                                                                                      (polylist
                                                                                       (mb!1,
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1))
                                                                                      (k),
                                                                                      bsdegmono!1)
                                                                                     (mod
                                                                                      (vs!1
                                                                                       (translist
                                                                                        (polylist
                                                                                         (mb!1,
                                                                                          bsdegmono!1,
                                                                                          nvars!1,
                                                                                          terms!1)),
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1,
                                                                                        cf!1,
                                                                                        level!1)`2,
                                                                                       nvars!1))" "vs!1") (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "translist
                                                                                           (polylist
                                                                                            (mb!1,
                                                                                             bsdegmono!1,
                                                                                             nvars!1,
                                                                                             terms!1))" "mod(vs!1
                                                                                           (translist
                                                                                            (polylist
                                                                                             (mb!1,
                                                                                              bsdegmono!1,
                                                                                              nvars!1,
                                                                                              terms!1)),
                                                                                            bsdegmono!1,
                                                                                            nvars!1,
                                                                                            terms!1,
                                                                                            cf!1,
                                                                                            level!1)`2,
                                                                                           nvars!1)") (("1" (use "polylist_represents_translist_polylist") (("1" (case "intendpts!1
                              WITH [(mod
                                     (vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1))
                                    `1
                                    := TRUE] = (LAMBDA (i: nat):
             (i =
               mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)
               OR intendpts!1(i)`1,
              intendpts!1(i)`2))") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                                                                                       (polylist
                                                                                                                                                        (mb!1,
                                                                                                                                                         bsdegmono!1,
                                                                                                                                                         nvars!1,
                                                                                                                                                         terms!1))" "mod(vs!1
                                       (translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                       nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                                              Bern_split_left_mono(translist
                                                                                                    (polylist
                                                                                                     (mb!1,
                                                                                                      bsdegmono!1,
                                                                                                      nvars!1,
                                                                                                      terms!1))
                                                                                                    (k),
                                                                                                    bsdegmono!1)
                                                                                                   (mod
                                                                                                    (vs!1
                                                                                                     (translist
                                                                                                      (polylist
                                                                                                       (mb!1,
                                                                                                        bsdegmono!1,
                                                                                                        nvars!1,
                                                                                                        terms!1)),
                                                                                                      bsdegmono!1,
                                                                                                      nvars!1,
                                                                                                      terms!1,
                                                                                                      cf!1,
                                                                                                      level!1)`2,
                                                                                                     nvars!1))" "vs!1") (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                       (polylist
                                                                                        (mb!1,
                                                                                         bsdegmono!1,
                                                                                         nvars!1,
                                                                                         terms!1))" "mod(vs!1
                                                                                       (translist
                                                                                        (polylist
                                                                                         (mb!1,
                                                                                          bsdegmono!1,
                                                                                          nvars!1,
                                                                                          terms!1)),
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1,
                                                                                        cf!1,
                                                                                        level!1)`2,
                                                                                       nvars!1)") (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (typepred "a2l__Bern_coeffs_minmax
                                                                                (bspoly!1,
                                                                                 bsdegmono!1,
                                                                                 cf!1,
                                                                                 nvars!1,
                                                                                 terms!1,
                                                                                 level!1,
                                                                                 intendpts!1)") (("1" (inst -1 "translist
                                                                                 (polylist
                                                                                  (mb!1,
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)
                                                                                                (mod
                                                                                                 (vs!1
                                                                                                  (translist
                                                                                                   (polylist
                                                                                                    (mb!1,
                                                                                                     bsdegmono!1,
                                                                                                     nvars!1,
                                                                                                     terms!1)),
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1,
                                                                                                   cf!1,
                                                                                                   level!1)`2,
                                                                                                  nvars!1)),
                                                                      bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                                                      1 + level!1, localexit!1, globalexit!1,
                                                                      intendpts!1
                                                                        WITH [(mod(vs!1
                                                                                   (translist
                                                                                    (polylist
                                                                                     (mb!1,
                                                                                      bsdegmono!1,
                                                                                      nvars!1,
                                                                                      terms!1)),
                                                                                    bsdegmono!1,
                                                                                    nvars!1,
                                                                                    terms!1,
                                                                                    cf!1,
                                                                                    level!1)`2,
                                                                                   nvars!1))
                                                                                `1
                                                                                := TRUE],
                                                                      varselect!1,
                                                                      combine(omm!1,
                                                                              Bern_coeffs_minmax(translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1)),
                                                                                                 bsdegmono!1,
                                                                                                 cf!1,
                                                                                                 nvars!1,
                                                                                                 terms!1,
                                                                                                 level!1,
                                                                                                 intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                                                     (k: nat):
                                                                                     Bern_split_right_mono
                                                                                     (translist
                                                                                      (polylist
                                                                                       (mb!1,
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1))
                                                                                      (k),
                                                                                      bsdegmono!1)
                                                                                     (mod
                                                                                      (vs!1
                                                                                       (translist
                                                                                        (polylist
                                                                                         (mb!1,
                                                                                          bsdegmono!1,
                                                                                          nvars!1,
                                                                                          terms!1)),
                                                                                        bsdegmono!1,
                                                                                        nvars!1,
                                                                                        terms!1,
                                                                                        cf!1,
                                                                                        level!1)`2,
                                                                                       nvars!1))" "vs!1") (("1" (case "intendpts!1
                                     WITH [(mod
                                            (vs!1
                                             (translist
                                              (polylist
                                               (mb!1,
                                                bsdegmono!1,
                                                nvars!1,
                                                terms!1)),
                                              bsdegmono!1,
                                              nvars!1,
                                              terms!1,
                                              cf!1,
                                              level!1)`2,
                                             nvars!1))
                                           `1
                                           := TRUE] =  LAMBDA
                                        (i: nat):
                                        (i
                                         =
                                         mod
                                         (vs!1
                                          (translist
                                           (polylist
                                            (mb!1,
                                             bsdegmono!1,
                                             nvars!1,
                                             terms!1)),
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1,
                                           cf!1,
                                           level!1)`2,
                                          nvars!1)
                                         OR
                                         intendpts!1(i)`1,
                                         intendpts!1(i)`2)") (("1" (replace -1 :hide? t) (("1" (case "intendpts!1
                              WITH [(mod
                                     (vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1))
                                    `2
                                    := TRUE] = LAMBDA (i: nat):
                             (intendpts!1(i)`1,
                              i =
                               mod(vs!1(translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                   nvars!1)
                               OR intendpts!1(i)`2)") (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (assert) (("1" (decompose-equality) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("2" (name-replace "bla" "mod(vs!1(translist(polylist(mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1)),
                        bsdegmono!1, nvars!1, terms!1, cf!1, level!1)`2,
                   nvars!1)") (("2" (case "bla = x!1") (("1" (decompose-equality) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                                             (polylist
                                                                                              (mb!1,
                                                                                               bsdegmono!1,
                                                                                               nvars!1,
                                                                                               terms!1))" "mod(vs!1
                                                                                             (translist
                                                                                              (polylist
                                                                                               (mb!1,
                                                                                                bsdegmono!1,
                                                                                                nvars!1,
                                                                                                terms!1)),
                                                                                              bsdegmono!1,
                                                                                              nvars!1,
                                                                                              terms!1,
                                                                                              cf!1,
                                                                                              level!1)`2,
                                                                                             nvars!1)") (("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                           (polylist
                                                                            (mb!1,
                                                                             bsdegmono!1,
                                                                             nvars!1,
                                                                             terms!1))" "mod(vs!1
                                                                           (translist
                                                                            (polylist
                                                                             (mb!1,
                                                                              bsdegmono!1,
                                                                              nvars!1,
                                                                              terms!1)),
                                                                            bsdegmono!1,
                                                                            nvars!1,
                                                                            terms!1,
                                                                            cf!1,
                                                                            level!1)`2,
                                                                           nvars!1)") (("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "vs!1") (("2" (expand "represents" -1) (("2" (inst? -1 :where 1) (("2" (inst -1 "translist
                                                                                                                                               (polylist
                                                                                                                                                (mb!1,
                                                                                                                                                 bsdegmono!1,
                                                                                                                                                 nvars!1,
                                                                                                                                                 terms!1))") (("2" (inst -1 "nvars!1" "terms!1" "bsdegmono!1") (("2" (split -1) (("1" (inst?) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents?") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "mb!1" "v!1") (("2" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "v!1 >= 0") (("1" (assert) (("1" (hide-all-but 1) (("1" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents?") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "mb!1" "v!1") (("1" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ((represents? const-decl "bool" multibernstein_into_polylist nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (combine const-decl "Outminmax" minmax nil) (le_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (Coeff type-eq-decl nil util nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (translist const-decl "real" util nil) (MultiPolynomial type-eq-decl nil util nil) (polylist const-decl "PolyList" util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (PolyList type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil)) nil (a2l__Bernstein_minmax_rec subtype "minmax.combine_lr(a2l__bernstein_minmax.v, a2l__bernstein_minmax.bslrleft, a2l__bernstein_minmax.bslrright)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}")) (a2l__Bernstein_minmax_rec_TCC10-1 nil 3686059360 ("" (skosimp*) (("" (replace -1 :hide? t) (("" (case "multipolynomial_represents?
                                      [terms!1, nvars!1, maximum_degree(bsdegmono!1, nvars!1)]
                                      (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_left" -1) (("1" (assert) (("1" (hide "mp_reps_left") (("1" (case "multipolynomial_represents?
                                          [terms!1, nvars!1, maximum_degree(bsdegmono!1, nvars!1)]
                                          (a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)(v!1))") (("1" (label "mp_reps_right" -1) (("1" (assert) (("1" (hide "mp_reps_right") (("1" (case "varselect!1(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, level!1) =
                                      vs!1(translist(polylist(mb!1, bsdegmono!1, nvars!1, terms!1)),
                                           bsdegmono!1, nvars!1, terms!1, cf!1, level!1)") (("1" (assert) (("1" (replace -1 :hide? t) (("1" (case "represents_polylist_multipolynomial
          [terms!1, nvars!1, maximum_degree(bsdegmono!1, nvars!1)]
          (a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)
                                     (mod
                                      (vs!1
                                       (translist
                                        (polylist
                                         (mb!1,
                                          bsdegmono!1,
                                          nvars!1,
                                          terms!1)),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        level!1)`2,
                                       nvars!1)),
           LAMBDA (k: nat):
             Bern_split_left_mono(translist(polylist
                                            (mb!1,
                                             bsdegmono!1,
                                             nvars!1,
                                             terms!1))
                                           (k),
                                  bsdegmono!1)
                                 (mod(vs!1
                                      (translist
                                       (polylist
                                        (mb!1,
                                         bsdegmono!1,
                                         nvars!1,
                                         terms!1)),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       level!1)`2,
                                      nvars!1)))") (("1" (assert) (("1" (hide -1) (("1" (expand "Bernstein_minmax_rec") (("1" (lift-if 6) (("1" (split 6) (("1" (flatten) (("1" (hide 1) (("1" (split -1) (("1" (hide 1) (("1" (invoke (typepred "%1") (! -2 2)) (("1" (inst -1 "translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (invoke (typepred "%1") (! -2 2)) (("2" (inst -1 "translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil) ("3" (invoke (typepred "%1") (! -2 2)) (("3" (inst -1 "translist
                                                                                                 (polylist
                                                                                                  (mb!1,
                                                                                                   bsdegmono!1,
                                                                                                   nvars!1,
                                                                                                   terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split 4) (("1" (flatten) (("1" (case "varsel!1`1") (("1" (replace -1 *) (("1" (split 1) (("1" (flatten) (("1" (hide 1) (("1" (replace -18 :hide? t) (("1" (replace -12 :hide? t) (("1" (replace -7 :hide? t) (("1" (replace -11 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -6 :hide? t) (("1" (replace -5 :hide? t) (("1" (replace -10 :hide? t) (("1" (replace -4 :hide? t) (("1" (hide-all-but (-1 8)) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA
                                                          (k: nat):
                                                          Bern_split_left_mono
                                                          (translist
                                                           (polylist
                                                            (mb!1,
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1))
                                                           (k),
                                                           bsdegmono!1)
                                                          (mod
                                                           (vs!1
                                                            (translist
                                                             (polylist
                                                              (mb!1,
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1)),
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1,
                                                             cf!1,
                                                             level!1)`2,
                                                            nvars!1))" "vs!1") (("1" (assert) (("1" (typepred "a2l__Bern_coeffs_minmax
                                                          (bspoly!1,
                                                           bsdegmono!1,
                                                           cf!1,
                                                           nvars!1,
                                                           terms!1,
                                                           level!1,
                                                           intendpts!1)") (("1" (inst -1 "translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1))") (("1" (assert) nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 1) (("2" (replace -21 :hide? t) (("2" (replace -20 :hide? t) (("2" (replace -19 :hide? t) (("2" (replace -18 :hide? t) (("2" (replace -17 :hide? t) (("2" (replace -16 :hide? t) (("2" (replace -15 :hide? t) (("2" (hide -14) (("2" (replace -13 :hide? t) (("2" (replace -12 :hide? t) (("2" (replace -11 :hide? t) (("2" (replace -10 :hide? t) (("2" (replace -9 :hide? t) (("2" (replace -8 :hide? t) (("2" (replace -7 :hide? t) (("2" (replace -6 :hide? t) (("2" (replace -5 :hide? t) (("2" (replace -4 :hide? t) (("2" (replace -3 :hide? t) (("2" (replace -2 :hide? t) (("2" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("2" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                          (bspoly!1,
                                                           bsdegmono!1,
                                                           cf!1,
                                                           nvars!1,
                                                           terms!1,
                                                           level!1,
                                                           intendpts!1)") (("2" (inst -1 "translist
                                                           (polylist
                                                            (mb!1,
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_left_mpoly(bspoly!1, bsdegmono!1)
                                                                        (mod
                                                                         (vs!1
                                                                          (translist
                                                                           (polylist
                                                                            (mb!1,
                                                                             bsdegmono!1,
                                                                             nvars!1,
                                                                             terms!1)),
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1,
                                                                           cf!1,
                                                                           level!1)`2,
                                                                          nvars!1)),
                                              bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                              1 + level!1, localexit!1, globalexit!1,
                                              intendpts!1
                                                WITH [(mod(vs!1
                                                           (translist
                                                            (polylist
                                                             (mb!1,
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1)),
                                                            bsdegmono!1,
                                                            nvars!1,
                                                            terms!1,
                                                            cf!1,
                                                            level!1)`2,
                                                           nvars!1))
                                                        `2
                                                        := TRUE],
                                              varselect!1,
                                              combine(omm!1,
                                                      Bern_coeffs_minmax(translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1)),
                                                                         bsdegmono!1,
                                                                         cf!1,
                                                                         nvars!1,
                                                                         terms!1,
                                                                         level!1,
                                                                         intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                             (k: nat):
                                                             Bern_split_left_mono
                                                             (translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1))
                                                              (k),
                                                              bsdegmono!1)
                                                             (mod
                                                              (vs!1
                                                               (translist
                                                                (polylist
                                                                 (mb!1,
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1)),
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1,
                                                                cf!1,
                                                                level!1)`2,
                                                               nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA (k: nat):
                                                          Bern_split_right_mono(translist
                                                                                (polylist
                                                                                 (mb!1,
                                                                                  bsdegmono!1,
                                                                                  nvars!1,
                                                                                  terms!1))
                                                                                (k),
                                                                                bsdegmono!1)
                                                                               (mod
                                                                                (vs!1
                                                                                 (translist
                                                                                  (polylist
                                                                                   (mb!1,
                                                                                    bsdegmono!1,
                                                                                    nvars!1,
                                                                                    terms!1)),
                                                                                  bsdegmono!1,
                                                                                  nvars!1,
                                                                                  terms!1,
                                                                                  cf!1,
                                                                                  level!1)`2,
                                                                                 nvars!1))" "vs!1") (("1" (hide 2) (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "translist
                                                                   (polylist
                                                                    (mb!1,
                                                                     bsdegmono!1,
                                                                     nvars!1,
                                                                     terms!1))" "mod(vs!1
                                                                   (translist
                                                                    (polylist
                                                                     (mb!1,
                                                                      bsdegmono!1,
                                                                      nvars!1,
                                                                      terms!1)),
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1,
                                                                    cf!1,
                                                                    level!1)`2,
                                                                   nvars!1)") (("1" (hide 2) (("1" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                  Bern_split_left_mono(translist
                                                                       (polylist
                                                                        (mb!1,
                                                                         bsdegmono!1,
                                                                         nvars!1,
                                                                         terms!1))
                                                                       (k),
                                                                       bsdegmono!1)
                                                                      (mod
                                                                       (vs!1
                                                                        (translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1)),
                                                                         bsdegmono!1,
                                                                         nvars!1,
                                                                         terms!1,
                                                                         cf!1,
                                                                         level!1)`2,
                                                                        nvars!1))" "vs!1") (("2" (replace -1 :hide? t) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                            (bspoly!1,
                                                             bsdegmono!1,
                                                             cf!1,
                                                             nvars!1,
                                                             terms!1,
                                                             level!1,
                                                             intendpts!1)") (("2" (inst -1 "translist
                                                             (polylist
                                                              (mb!1,
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1))") (("1" (assert) nil nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -3 1 :hide? t) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "NOT varsel!1`1") (("1" (assert) (("1" (replace -19 :hide? t) (("1" (replace -18 :hide? t) (("1" (replace -17 :hide? t) (("1" (replace -16 :hide? t) (("1" (replace -15 :hide? t) (("1" (replace -14 :hide? t) (("1" (replace -13 :hide? t) (("1" (hide -12) (("1" (replace -11 :hide? t) (("1" (replace -10 :hide? t) (("1" (replace -9 :hide? t) (("1" (replace -8 :hide? t) (("1" (replace -7 :hide? t) (("1" (replace -6 :hide? t) (("1" (replace -5 :hide? t) (("1" (replace -4 :hide? t) (("1" (replace -3 :hide? t) (("1" (replace -2 :hide? t) (("1" (replace -1 :hide? t) (("1" (assert) (("1" (lift-if 3) (("1" (split 3) (("1" (flatten) (("1" (hide-all-but (-1 11)) (("1" (invoke (typepred "%1") (! 1 1)) (("1" (inst -1 "LAMBDA
                                        (k: nat):
                                        Bern_split_right_mono
                                        (translist
                                         (polylist
                                          (mb!1,
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1))
                                         (k),
                                         bsdegmono!1)
                                        (mod
                                         (vs!1
                                          (translist
                                           (polylist
                                            (mb!1,
                                             bsdegmono!1,
                                             nvars!1,
                                             terms!1)),
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1,
                                           cf!1,
                                           level!1)`2,
                                          nvars!1))" "vs!1") (("1" (typepred "a2l__Bern_coeffs_minmax
                                                            (bspoly!1,
                                                             bsdegmono!1,
                                                             cf!1,
                                                             nvars!1,
                                                             terms!1,
                                                             level!1,
                                                             intendpts!1)") (("1" (inst -1 "translist
                                                             (polylist
                                                              (mb!1,
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1))") (("1" (assert) nil nil) ("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                             (polylist
                                                              (mb!1,
                                                               bsdegmono!1,
                                                               nvars!1,
                                                               terms!1))" "mod(vs!1
                                                             (translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1)),
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1,
                                                              cf!1,
                                                              level!1)`2,
                                                             nvars!1)") (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide-all-but 2) (("2" (invoke (case "%1 = %2") (! 1 1 1) (! 1 2 1)) (("2" (invoke (case "%1 = %2") (! 1 1 2) (! 1 2 2)) (("1" (invoke (case "%1 = %2") (! 1 1 3) (! 1 2 3)) (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (typepred "a2l__Bern_coeffs_minmax
                                                          (bspoly!1,
                                                           bsdegmono!1,
                                                           cf!1,
                                                           nvars!1,
                                                           terms!1,
                                                           level!1,
                                                           intendpts!1)") (("2" (inst -1 "translist
                                                           (polylist
                                                            (mb!1,
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)
                                                                        (mod
                                                                         (vs!1
                                                                          (translist
                                                                           (polylist
                                                                            (mb!1,
                                                                             bsdegmono!1,
                                                                             nvars!1,
                                                                             terms!1)),
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1,
                                                                           cf!1,
                                                                           level!1)`2,
                                                                          nvars!1)),
                                              bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                              1 + level!1, localexit!1, globalexit!1,
                                              intendpts!1
                                                WITH [(mod(vs!1
                                                           (translist
                                                            (polylist
                                                             (mb!1,
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1)),
                                                            bsdegmono!1,
                                                            nvars!1,
                                                            terms!1,
                                                            cf!1,
                                                            level!1)`2,
                                                           nvars!1))
                                                        `1
                                                        := TRUE],
                                              varselect!1,
                                              combine(omm!1,
                                                      Bern_coeffs_minmax(translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1)),
                                                                         bsdegmono!1,
                                                                         cf!1,
                                                                         nvars!1,
                                                                         terms!1,
                                                                         level!1,
                                                                         intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                             (k: nat):
                                                             Bern_split_right_mono
                                                             (translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1))
                                                              (k),
                                                              bsdegmono!1)
                                                             (mod
                                                              (vs!1
                                                               (translist
                                                                (polylist
                                                                 (mb!1,
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1)),
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1,
                                                                cf!1,
                                                                level!1)`2,
                                                               nvars!1))" "vs!1") (("1" (hide 2) (("1" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "translist
                                                                   (polylist
                                                                    (mb!1,
                                                                     bsdegmono!1,
                                                                     nvars!1,
                                                                     terms!1))" "mod(vs!1
                                                                   (translist
                                                                    (polylist
                                                                     (mb!1,
                                                                      bsdegmono!1,
                                                                      nvars!1,
                                                                      terms!1)),
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1,
                                                                    cf!1,
                                                                    level!1)`2,
                                                                   nvars!1)") (("1" (hide 2) (("1" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 1)) (("2" (inst -1 "LAMBDA (k: nat):
                                                          Bern_split_left_mono(translist
                                                                                (polylist
                                                                                 (mb!1,
                                                                                  bsdegmono!1,
                                                                                  nvars!1,
                                                                                  terms!1))
                                                                                (k),
                                                                                bsdegmono!1)
                                                                               (mod
                                                                                (vs!1
                                                                                 (translist
                                                                                  (polylist
                                                                                   (mb!1,
                                                                                    bsdegmono!1,
                                                                                    nvars!1,
                                                                                    terms!1)),
                                                                                  bsdegmono!1,
                                                                                  nvars!1,
                                                                                  terms!1,
                                                                                  cf!1,
                                                                                  level!1)`2,
                                                                                 nvars!1))" "vs!1") (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                   (polylist
                                                                    (mb!1,
                                                                     bsdegmono!1,
                                                                     nvars!1,
                                                                     terms!1))" "mod(vs!1
                                                                   (translist
                                                                    (polylist
                                                                     (mb!1,
                                                                      bsdegmono!1,
                                                                      nvars!1,
                                                                      terms!1)),
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1,
                                                                    cf!1,
                                                                    level!1)`2,
                                                                   nvars!1)") (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (typepred "a2l__Bern_coeffs_minmax
                                                          (bspoly!1,
                                                           bsdegmono!1,
                                                           cf!1,
                                                           nvars!1,
                                                           terms!1,
                                                           level!1,
                                                           intendpts!1)") (("1" (inst -1 "translist
                                                           (polylist
                                                            (mb!1,
                                                             bsdegmono!1,
                                                             nvars!1,
                                                             terms!1))") (("1" (replace -1 :hide? t) (("1" (typepred "v1!1(a2l__Bern_split_right_mpoly(bspoly!1, bsdegmono!1)
                                                                        (mod
                                                                         (vs!1
                                                                          (translist
                                                                           (polylist
                                                                            (mb!1,
                                                                             bsdegmono!1,
                                                                             nvars!1,
                                                                             terms!1)),
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1,
                                                                           cf!1,
                                                                           level!1)`2,
                                                                          nvars!1)),
                                              bsdegmono!1, nvars!1, terms!1, cf!1, depth!1,
                                              1 + level!1, localexit!1, globalexit!1,
                                              intendpts!1
                                                WITH [(mod(vs!1
                                                           (translist
                                                            (polylist
                                                             (mb!1,
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1)),
                                                            bsdegmono!1,
                                                            nvars!1,
                                                            terms!1,
                                                            cf!1,
                                                            level!1)`2,
                                                           nvars!1))
                                                        `1
                                                        := TRUE],
                                              varselect!1,
                                              combine(omm!1,
                                                      Bern_coeffs_minmax(translist
                                                                         (polylist
                                                                          (mb!1,
                                                                           bsdegmono!1,
                                                                           nvars!1,
                                                                           terms!1)),
                                                                         bsdegmono!1,
                                                                         cf!1,
                                                                         nvars!1,
                                                                         terms!1,
                                                                         level!1,
                                                                         intendpts!1)))") (("1" (inst -1 "LAMBDA
                                                             (k: nat):
                                                             Bern_split_right_mono
                                                             (translist
                                                              (polylist
                                                               (mb!1,
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1))
                                                              (k),
                                                              bsdegmono!1)
                                                             (mod
                                                              (vs!1
                                                               (translist
                                                                (polylist
                                                                 (mb!1,
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1)),
                                                                bsdegmono!1,
                                                                nvars!1,
                                                                terms!1,
                                                                cf!1,
                                                                level!1)`2,
                                                               nvars!1))" "vs!1") (("1" (replace -1 :hide? t) (("1" (propax) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                   (polylist
                                                                    (mb!1,
                                                                     bsdegmono!1,
                                                                     nvars!1,
                                                                     terms!1))" "mod(vs!1
                                                                   (translist
                                                                    (polylist
                                                                     (mb!1,
                                                                      bsdegmono!1,
                                                                      nvars!1,
                                                                      terms!1)),
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1,
                                                                    cf!1,
                                                                    level!1)`2,
                                                                   nvars!1)") (("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "translist
                                                                 (polylist
                                                                  (mb!1,
                                                                   bsdegmono!1,
                                                                   nvars!1,
                                                                   terms!1))" "mod(vs!1
                                                                 (translist
                                                                  (polylist
                                                                   (mb!1,
                                                                    bsdegmono!1,
                                                                    nvars!1,
                                                                    terms!1)),
                                                                  bsdegmono!1,
                                                                  nvars!1,
                                                                  terms!1,
                                                                  cf!1,
                                                                  level!1)`2,
                                                                 nvars!1)") (("2" (hide 2) (("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (typepred "vs!1") (("2" (expand "represents" -1) (("2" (inst? -1 :where 1) (("2" (inst -1 "translist
                                                                                                                                       (polylist
                                                                                                                                        (mb!1,
                                                                                                                                         bsdegmono!1,
                                                                                                                                         nvars!1,
                                                                                                                                         terms!1))") (("2" (inst -1 "nvars!1" "terms!1" "maximum_degree(bsdegmono!1,nvars!1)") (("2" (split -1) (("1" (inst -1 "bsdegmono!1" "cf!1" "level!1") nil nil) ("2" (use "polylist_represents_translist_polylist") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "a2l__Bern_split_right_mpoly__homomorphic") (("2" (expand "multipolynomial_represents?") (("2" (expand "represents_polylist_multipolynomial") (("2" (expand "represents?") (("2" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("2" (inst -1 "mb!1" "v!1") (("2" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "v!1 >= 0") (("1" (assert) (("1" (hide-all-but 1) (("1" (lemma "a2l__Bern_split_left_mpoly__homomorphic") (("1" (expand "multipolynomial_represents?") (("1" (expand "represents_polylist_multipolynomial") (("1" (expand "represents?") (("1" (inst -1 "bspoly!1" " bsdegmono!1" "nvars!1" "terms!1" "cf!1" "_" "_") (("1" (inst -1 "mb!1" "v!1") (("1" (inst? 1 :where -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ((represents? const-decl "bool" arrays_into_lists structures) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (combine const-decl "Outminmax" minmax nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (Coeff type-eq-decl nil util nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (translist const-decl "real" util nil) (MultiPolynomial type-eq-decl nil util nil) (polylist const-decl "PolyList" util nil) (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein nil) (PolyList type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (maximum_degree def-decl "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util nil) (DegreeMono type-eq-decl nil util nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein nil)) nil (a2l__Bernstein_minmax_rec subtype "minmax.combine_lr(a2l__bernstein_minmax.v, a2l__bernstein_minmax.bslrleft, a2l__bernstein_minmax.bslrright)" "{result: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): result = bernstein_minmax.Bernstein_minmax_rec(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.level, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs, a2l__bernstein_minmax.omm)}"))) (a2l__Bernstein_minmax_TCC1 0 (a2l__Bernstein_minmax_TCC1-1 nil 3686059464 ("" (subtype-tcc) nil nil) nil nil (a2l__Bernstein_minmax subtype "0" "upto(a2l__bernstein_minmax.depth)"))) (a2l__Bernstein_minmax_TCC2 0 (a2l__Bernstein_minmax_TCC2-1 nil 3686059464 ("" (skosimp*) (("" (expand "Bernstein_minmax") (("" (invoke (typepred "%1") (! 1 1)) (("" (inst -1 "mb!1" "vs!1") nil nil)) nil)) nil)) nil) ((Bernstein_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (empty_minmax const-decl "Outminmax" minmax nil) (a2l__Bernstein_minmax_rec def-decl "{result: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb),
           vs: VarSelector | represents(varselect, vs)):
     result =
      Bernstein_minmax_rec(mb, bsdegmono, nvars, terms, cf, depth, level,
                           localexit, globalexit, intendpts, vs, omm)}" a2l__bernstein_minmax nil) (Bernstein_minmax_rec def-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (multipolynomial_represents? const-decl "bool" multibernstein_into_polylist nil) (= const-decl "[T, T -> boolean]" equalities nil) (Outminmax type-eq-decl nil minmax nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (VarSelector type-eq-decl nil vardirselector nil) (Coeff type-eq-decl nil util nil) (represents const-decl "bool" multibernstein_into_polylist nil) (DegreeMono type-eq-decl nil util nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (PolyList type-eq-decl nil util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (a2l__Bernstein_minmax subtype "a2l__bernstein_minmax.a2l__Bernstein_minmax_rec(a2l__bernstein_minmax.bspoly, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, 0, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, a2l__bernstein_minmax.varselect, minmax.empty_minmax)" "{omm: minmax.Outminmax | FORALL (mb: util.MultiBernstein | multibernstein_into_polylist[a2l__bernstein_minmax.terms, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.bsdegmono].represents(a2l__bernstein_minmax.bspoly, mb), vs: vardirselector.VarSelector | vardirselector_into_a2lvardirselector.represents(a2l__bernstein_minmax.varselect, vs)): omm = bernstein_minmax.Bernstein_minmax(mb, a2l__bernstein_minmax.bsdegmono, a2l__bernstein_minmax.nvars, a2l__bernstein_minmax.terms, a2l__bernstein_minmax.cf, a2l__bernstein_minmax.depth, a2l__bernstein_minmax.localexit, a2l__bernstein_minmax.globalexit, a2l__bernstein_minmax.intendpts, vs)}"))))
