(bernstein_minmax (unit_box_lb_id 0 (unit_box_lb_id-2 "" 3790097946 ("" (case "FORALL (bsdegmono: DegreeMono, bspoly, bspolz: MultiBernstein,
              cf: Coeff, intendpts: IntervalEndpoints,
              nvars, terms: posnat,omm):
        (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
           bspoly(t)(v)(i) = bspolz(t)(v)(i))
         IMPLIES
         unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm) IMPLIES
          unit_box_lb?(bspolz, bsdegmono, nvars, terms, cf, intendpts)(omm)") (("1" (skeep) (("1" (decompose-equality) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (inst -2 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "terms" "x!1") (("1" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -2 "bsdegmono" "bspolz" "bspoly" "cf" "intendpts" "nvars" "terms" "x!1") (("2" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (skeep) (("3" (inst? -2) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (expand "unit_box_lb?") (("2" (ground) (("2" (lemma "multibs_eval_id") (("2" (inst -1 "bspoly" "bspolz" "bsdegmono" "cf" "nvars" "terms") (("2" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (multibs_eval_id formula-decl nil multi_bernstein nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil)) shostak) (unit_box_lb_id-1 nil 3507234900 ("" (case "FORALL (bsdegmono: DegreeMono, bspoly, bspolz: MultiBernstein,
              cf: Coeff, intendpts: IntervalEndpoints,
              nvars, terms: posnat,omm):
        (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
           bspoly(t)(v)(i) = bspolz(t)(v)(i))
         IMPLIES
         unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm) IMPLIES
          unit_box_lb?(bspolz, bsdegmono, nvars, terms, cf, intendpts)(omm)") (("1" (skeep) (("1" (decompose-equality) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (inst -2 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "terms" "x!1") (("1" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -2 "bsdegmono" "bspolz" "bspoly" "cf" "intendpts" "nvars" "terms" "x!1") (("2" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (skeep) (("3" (inst? -2) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (expand "unit_box_lb?") (("2" (ground) (("2" (replaces -2) (("2" (replaces -2) (("2" (lemma "multibs_eval_id") (("2" (inst -1 "bspoly" "bspolz" "bsdegmono" "cf" "nvars" "terms") (("2" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((multibs_eval_id formula-decl nil multi_bernstein nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil)) shostak)) (unit_box_ub_id 0 (unit_box_ub_id-2 "" 3790097946 ("" (case "FORALL (bsdegmono: DegreeMono, bspoly, bspolz: MultiBernstein,
                            cf: Coeff, intendpts: IntervalEndpoints,
                            nvars, terms: posnat,omm):
                      (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
                         bspoly(t)(v)(i) = bspolz(t)(v)(i))
                       IMPLIES
                       unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm) IMPLIES
                        unit_box_ub?(bspolz, bsdegmono, nvars, terms, cf, intendpts)(omm)") (("1" (skeep) (("1" (decompose-equality) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (inst -2 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "terms" "x!1") (("1" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -2 "bsdegmono" "bspolz" "bspoly" "cf" "intendpts" "nvars" "terms" "x!1") (("2" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (skeep) (("3" (inst? -2) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (expand "unit_box_ub?") (("2" (ground) (("2" (lemma "multibs_eval_id") (("2" (inst -1 "bspoly" "bspolz" "bsdegmono" "cf" "nvars" "terms") (("2" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (multibs_eval_id formula-decl nil multi_bernstein nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil)) shostak) (unit_box_ub_id-1 nil 3507235724 ("" (case "FORALL (bsdegmono: DegreeMono, bspoly, bspolz: MultiBernstein,
                            cf: Coeff, intendpts: IntervalEndpoints,
                            nvars, terms: posnat,omm):
                      (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
                         bspoly(t)(v)(i) = bspolz(t)(v)(i))
                       IMPLIES
                       unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm) IMPLIES
                        unit_box_ub?(bspolz, bsdegmono, nvars, terms, cf, intendpts)(omm)") (("1" (skeep) (("1" (decompose-equality) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (inst -2 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "terms" "x!1") (("1" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -2 "bsdegmono" "bspolz" "bspoly" "cf" "intendpts" "nvars" "terms" "x!1") (("2" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (skeep) (("3" (inst? -2) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (expand "unit_box_ub?") (("2" (ground) (("2" (replaces -2) (("2" (replaces -2) (("2" (lemma "multibs_eval_id") (("2" (inst -1 "bspoly" "bspolz" "bsdegmono" "cf" "nvars" "terms") (("2" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((multibs_eval_id formula-decl nil multi_bernstein nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil)) nil)) (sound_id 0 (sound_id-1 nil 3509143268 ("" (case "FORALL (bsdegmono: DegreeMono, bspoly, bspolz: MultiBernstein,
              cf: Coeff, intendpts: IntervalEndpoints, nvars: posnat,
              omm: Outminmax, terms: posnat):
        (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
           bspoly(t)(v)(i) = bspolz(t)(v)(i))
         IMPLIES
         sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm) IMPLIES
          sound?(bspolz, bsdegmono, nvars, terms, cf, intendpts)(omm)") (("1" (skeep) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (inst -2 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "omm" "terms") (("1" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -2 "bsdegmono" "bspolz" "bspoly" "cf" "intendpts" "nvars" "omm" "terms") (("2" (split -2) (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (skeep) (("3" (inst? -2) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (expand "sound?") (("2" (flatten) (("2" (split) (("1" (lemma "forall_X_between_id") (("1" (inst -1 "cf" _ _ "bspoly" "bspolz" "bsdegmono" "nvars" "terms") (("1" (inst? -1) (("1" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "unit_box_lb_id") (("2" (inst -1 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "terms") (("2" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("3" (lemma "unit_box_ub_id") (("3" (inst -1 "bsdegmono" "bspoly" "bspolz" "cf" "intendpts" "nvars" "terms") (("3" (split -1) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((forall_X_between_id formula-decl nil multi_bernstein nil) (unit_box_lb_id formula-decl nil bernstein_minmax nil) (unit_box_ub_id formula-decl nil bernstein_minmax nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (sound? const-decl "bool" bernstein_minmax nil)) shostak)) (sound_lb_le_ub 0 (sound_lb_le_ub-1 nil 3509729500 ("" (skeep) (("" (expand "sound?") (("" (flatten) (("" (hide (-2 -3)) (("" (expand "forall_X_between") (("" (inst - "LAMBDA (adsfjkl:nat): 0") (("" (split -) (("1" (flatten) (("1" (expand "lb_le_ub?") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "unitbox?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sound? const-decl "bool" bernstein_minmax nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Vars type-eq-decl nil util nil) (unitbox? const-decl "bool" util nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (lb_le_ub? const-decl "bool" minmax nil) (forall_X_between const-decl "bool" multi_bernstein nil)) shostak)) (combine_sound 0 (combine_sound-1 nil 3508072307 ("" (skeep) (("" (skosimp*) (("" (expand "sound?") (("" (split +) (("1" (expand "forall_X_between") (("1" (skosimp*) (("1" (inst - "X!1") (("1" (flatten) (("1" (split -) (("1" (hide -3) (("1" (hide (-3 -4 -5 -6 -7 -8)) (("1" (grind :exclude ("multibs_eval" "unitbox?")) nil nil)) nil)) nil) ("2" (assert) (("2" (hide 1) (("2" (hide (-3 -4 -5 -6 -7 -8)) (("2" (grind :exclude ("multibs_eval" "unitbox?")) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (hide (-2 -4)) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (expand "combine") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "combine") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil) ("4" (hide (-1 -2 -3 -4 -5)) (("4" (expand "length_eq?") (("4" (expand "combine") (("4" (lift-if) (("4" (ground) (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (lift-if) (("2" (ground) nil nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil) ("5" (lift-if) (("5" (ground) nil nil)) nil) ("6" (lift-if) (("6" (ground) nil nil)) nil) ("7" (lift-if) (("7" (ground) nil nil)) nil) ("8" (lift-if) (("8" (ground) nil nil)) nil) ("9" (lift-if) (("9" (ground) nil nil)) nil) ("10" (lift-if) (("10" (ground) nil nil)) nil) ("11" (lift-if) (("11" (ground) nil nil)) nil) ("12" (lift-if) (("12" (ground) nil nil)) nil) ("13" (lift-if) (("13" (ground) nil nil)) nil) ("14" (lift-if) (("14" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (combine const-decl "Outminmax" minmax nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Vars type-eq-decl nil util nil) (unitbox? const-decl "bool" util nil) (nvars skolem-const-decl "posnat" bernstein_minmax nil) (X!1 skolem-const-decl "Vars" bernstein_minmax nil) (forall_X_between const-decl "bool" multi_bernstein nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (length_eq? const-decl "bool" minmax nil) (sound? const-decl "bool" bernstein_minmax nil)) shostak)) (Bern_coeffs_minmax_rec_TCC1 0 (Bern_coeffs_minmax_rec_TCC1-1 nil 3505487851 ("" (skosimp*) (("" (replace -1) (("" (typepred "ep!1") (("" (expand "edge_point?") (("" (flatten) (("" (split +) (("1" (skosimp*) (("1" (case "multibscoeff(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(nf!1) =
                                                                                                             multibscoeff(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(f!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "single_outminmax") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "multibscoeff_id") (("2" (hide 2) (("2" (expand "eq_below_mono?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "single_outminmax") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "NOT ep!1") (("1" (assert) nil nil) ("2" (assert) (("2" (hide -1) (("2" (case "NOT length(thisvar!1) = nvars!1") (("1" (hide 2) (("1" (expand "corner_to_point") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (split +) (("1" (skosimp*) (("1" (inst - "iup!1") (("1" (expand "corner_to_point") (("1" (replace -8) (("1" (rewrite "array2list_inv") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -9 +) (("2" (replace -7 +) (("2" (replace -6 +) (("2" (replace -8) (("2" (lemma "multibs_cornerpoint_coeff") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (rewrite "multibs_eval_below_mono") (("1" (hide 2) (("1" (skosimp*) (("1" (expand "corner_to_point" +) (("1" (rewrite "array2list_inv") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "corner_point?") (("2" (skosimp*) (("2" (typepred "ep!1") (("2" (expand "edge_point?") (("2" (inst - "j!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "single_outminmax") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "NOT ep!1") (("1" (assert) nil nil) ("2" (assert) (("2" (hide -1) (("2" (case "NOT length(thisvar!1) = nvars!1") (("1" (hide 2) (("1" (expand "corner_to_point") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (split +) (("1" (skosimp*) (("1" (inst - "iup!1") (("1" (expand "corner_to_point") (("1" (replace -8) (("1" (rewrite "array2list_inv") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -9 +) (("2" (replace -7 +) (("2" (replace -6 +) (("2" (replace -8 +) (("2" (lemma "multibs_cornerpoint_coeff") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (rewrite "multibs_eval_below_mono") (("1" (hide 2) (("1" (skosimp*) (("1" (expand "corner_to_point" +) (("1" (rewrite "array2list_inv") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "corner_point?") (("2" (skosimp*) (("2" (typepred "ep!1") (("2" (expand "edge_point?") (("2" (inst - "j!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (expand "length_eq?") (("4" (expand "single_outminmax") (("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("5" (expand "single_outminmax") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (multibscoeff const-decl "real" multi_bernstein nil) (Coeff type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (= const-decl "[T, T -> boolean]" equalities nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (single_outminmax const-decl "Outminmax" minmax nil) (multibscoeff_id formula-decl nil multi_bernstein nil) (eq_below_mono? const-decl "bool" util nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (length def-decl "nat" list_props nil) (corner_to_point const-decl "{l: listn[real](nvars) | unitbox?(nvars)(list2array(0)(l))}" util nil) (int_minus_int_is_int application-judgement "int" integers nil) (subrange type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (array2list_inv formula-decl nil array2list structures) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (unitbox? const-decl "bool" util nil) (listn type-eq-decl nil listn structures) (list2array def-decl "T" array2list structures) (Vars type-eq-decl nil util nil) (multibs_eval_below_mono formula-decl nil multi_bernstein nil) (corner_point? const-decl "bool" util nil) (multibs_cornerpoint_coeff formula-decl nil multi_bernstein nil) (interval_between? const-decl "bool" util nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil)) nil (Bern_coeffs_minmax_rec subtype "minmax.single_outminmax(bernstein_minmax.thiscoeff, bernstein_minmax.thisachval, bernstein_minmax.thisvar, bernstein_minmax.depth)" "{omm: minmax.Outminmax |      (FORALL (nf: util.CoeffMono): booleans.IMPLIES(FORALL (i: naturalnumbers.below(bernstein_minmax.nvars)): booleans.AND(reals.<=(nf(i), bernstein_minmax.bsdegmono(i)), (booleans.IMPLIES(reals.<=(bernstein_minmax.v, i), bernstein_minmax.f(i) = nf(i)))), booleans.AND(reals.<=(omm`lb_min, multi_bernstein.multibscoeff(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms)(nf)), reals.<=(multi_bernstein.multibscoeff(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms)(nf), omm`ub_max)))) AND bernstein_minmax.unit_box_lb?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts)(omm) AND bernstein_minmax.unit_box_ub?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts)(omm) AND minmax.length_eq?(bernstein_minmax.nvars)(omm) AND (omm`max_depth = bernstein_minmax.depth)}"))) (Bern_coeffs_minmax_rec_TCC2 0 (Bern_coeffs_minmax_rec_TCC2-1 nil 3505487851 ("" (skosimp*) (("" (assert) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (Bern_coeffs_minmax_rec subtype "(number_fields.-)(bernstein_minmax.v, 1)" "nat"))) (Bern_coeffs_minmax_rec_TCC3 0 (Bern_coeffs_minmax_rec_TCC3-1 nil 3508188890 ("" (skosimp*) (("" (replaces -3) (("" (expand "edge_point?") (("" (typepred "ep!1") (("" (expand "edge_point?") (("" (flatten) (("" (assert) (("" (flatten) (("" (assert) (("" (skosimp*) (("" (replace -4) (("" (case "i!1 = v!1-1") (("1" (replace -1) (("1" (assert) (("1" (ground) nil nil)) nil)) nil) ("2" (inst - "i!1") (("1" (assert) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IntervalEndpoints type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (DegreeMono type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (subrange type-eq-decl nil integers nil) (i!1 skolem-const-decl "subrange(v!1 - 1, nvars!1 - 1)" bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" bernstein_minmax nil) (v!1 skolem-const-decl "nat" bernstein_minmax nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (edge_point? const-decl "bool" util nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (Bern_coeffs_minmax_rec subtype "bernstein_minmax.nep" "(util.edge_point?(bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.nf, bernstein_minmax.intendpts, (number_fields.-)(bernstein_minmax.v, 1)))"))) (Bern_coeffs_minmax_rec_TCC4 0 (Bern_coeffs_minmax_rec_TCC4-1 nil 3508188890 ("" (skosimp*) (("" (assert) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (Bern_coeffs_minmax_rec termination "bernstein_minmax.Bern_coeffs_minmax_rec(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.nf, bernstein_minmax.depth, bernstein_minmax.intendpts, (number_fields.-)(bernstein_minmax.v, 1), bernstein_minmax.nep)" "nil"))) (Bern_coeffs_minmax_rec_TCC5 0 (Bern_coeffs_minmax_rec_TCC5-1 nil 3509113200 ("" (skosimp*) (("" (assert) (("" (ground) nil nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (Bern_coeffs_minmax_rec subtype "LAMBDA (d: naturalnumbers.upto(bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)))): LET nf = bernstein_minmax.f WITH [((number_fields.-)(bernstein_minmax.v, 1)) := d], nep = booleans.AND(bernstein_minmax.ep, (booleans.OR(booleans.AND(d = 0, bernstein_minmax.iepts`1), booleans.AND(bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)) /= 0, booleans.AND(d = bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)), bernstein_minmax.iepts`2))))) IN bernstein_minmax.Bern_coeffs_minmax_rec(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.nf, bernstein_minmax.depth, bernstein_minmax.intendpts, (number_fields.-)(bernstein_minmax.v, 1), bernstein_minmax.nep)" "IterateBody[Outminmax](0, bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)))"))) (Bern_coeffs_minmax_rec_TCC6 0 (Bern_coeffs_minmax_rec_TCC6-2 "" 3804471825 ("" (skosimp*) (("" (lemma "Bern_coeffs_minmax_rec_TCC3") (("" (label "nepep" -1) (("" (hide "nepep") (("" (split +) (("1" (skosimp*) (("1" (split) (("1" (lemma "iterate_left_induction[Outminmax]") (("1" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1-1)),a:Outminmax): FORALL (k:upto(i)): a`lb_min <= multibscoeff(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(nf!1 WITH [(v!1-1):=k])") (("1" (split -) (("1" (inst -2 "v!1-1") (("1" (flatten) (("1" (inst -1 "nf!1(v!1-1)") (("1" (assert) (("1" (hide -3) (("1" (case-replace "nf!1 WITH [(v!1 - 1) := nf!1(v!1 - 1)] = nf!1") (("1" (hide-all-but 1) (("1" (decompose-equality 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but 1) (("2" (typepred "ep!1") (("2" (expand "edge_point?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep :preds? t) (("2" (beta) (("2" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                f!1 WITH [(v!1 - 1) := 0], depth!1, intendpts!1, v!1 - 1,
                                                                                                ep!1 AND
                                                                                                 (iepts!1`1 OR
                                                                                                   bsdegmono!1(v!1 - 1) /= 0 AND
                                                                                                    0 = bsdegmono!1(v!1 - 1) AND iepts!1`2))") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (inst? -1) (("1" (assert) (("1" (hide 2) (("1" (skosimp :preds? t) (("1" (case-replace "v!1-1=i!1") (("1" (assert) nil nil) ("2" (assert) (("2" (inst? -) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (split -1) (("1" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("1" (inst - "0" "f!1 WITH [(v!1 - 1) := 0]" _) (("1" (inst?) (("1" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (replaces -3) nil nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (hide 2) (("3" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil) ("4" (hide 2) (("4" (assert) nil nil)) nil) ("5" (hide 2) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (beta) (("3" (assert) (("3" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                                              terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                                              depth!1, intendpts!1, v!1 - 1,
                                                                                                                                              ep!1 AND
                                                                                                                                               1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                                                iepts!1`2)") (("1" (replaces -1) (("1" (expand "combine") (("1" (rewrite "min_le") (("1" (flatten) (("1" (case "k!2 = 1+k!1") (("1" (typepred "iggy") (("1" (inst?) (("1" (assert) (("1" (skosimp* :preds? t) (("1" (case "v!1-1 = i!1") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst? -10) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]" _) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -5) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)" _ _ _) (("3" (inst -1 "d!1" "nf!2" _) (("3" (assert) (("3" (inst?) (("3" (split -1) (("1" (propax) nil nil) ("2" (replaces -3) (("2" (replaces -4) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "iterate_left_induction[Outminmax]") (("2" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): FORALL (k:upto(i)): multibscoeff(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(nf!1 WITH [(v!1-1):=k]) <= a`ub_max") (("1" (split -) (("1" (inst -2 "v!1-1") (("1" (flatten) (("1" (inst -1 "nf!1(v!1-1)") (("1" (assert) (("1" (hide -3) (("1" (case-replace "nf!1 WITH [(v!1 - 1) := nf!1(v!1 - 1)] = nf!1") (("1" (hide-all-but 1) (("1" (decompose-equality 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but 1) (("2" (typepred "ep!1") (("2" (expand "edge_point?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep :preds? t) (("2" (beta) (("2" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                 f!1 WITH [(v!1 - 1) := 0], depth!1, intendpts!1, v!1 - 1,
                                                                                                                 ep!1 AND
                                                                                                                  (iepts!1`1 OR
                                                                                                                    bsdegmono!1(v!1 - 1) /= 0 AND
                                                                                                                     0 = bsdegmono!1(v!1 - 1) AND iepts!1`2))") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (inst? -1) (("1" (assert) (("1" (hide 2) (("1" (skosimp :preds? t) (("1" (case-replace "v!1-1=i!1") (("1" (assert) nil nil) ("2" (assert) (("2" (inst? -) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (split -1) (("1" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("1" (inst - "0" "f!1 WITH [(v!1 - 1) := 0]" _) (("1" (inst?) (("1" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (replaces -3) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil) ("4" (hide 2) (("4" (assert) nil nil)) nil) ("5" (hide 2) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (beta) (("3" (assert) (("3" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                                                               terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                                                               depth!1, intendpts!1, v!1 - 1,
                                                                                                                                                               ep!1 AND
                                                                                                                                                                1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                                                                 iepts!1`2)") (("1" (replaces -1) (("1" (expand "combine") (("1" (rewrite "le_max") (("1" (flatten) (("1" (case "k!2 = 1+k!1") (("1" (typepred "iggy") (("1" (inst?) (("1" (assert) (("1" (skosimp* :preds? t) (("1" (case "v!1-1 = i!1") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst? -10) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]" _) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -5) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)" _ _ _) (("3" (inst -1 "d!1" "nf!2" _) (("3" (assert) (("3" (inst?) (("3" (split -1) (("1" (propax) nil nil) ("2" (replaces -3) (("2" (replaces -4) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "iterate_left_induction[Outminmax]") (("2" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): unit_box_lb?(bspoly!1,bsdegmono!1,nvars!1,terms!1,cf!1,intendpts!1)(a)") (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                      terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                      depth!1, intendpts!1, v!1 - 1,
                                                                                                                      ep!1 AND
                                                                                                                       1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                        iepts!1`2)") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (hide -1 -3 -4) (("1" (expand "unit_box_lb?") (("1" (expand "combine") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]" _) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)" _ _ _) (("3" (inst -1 "d!1" "nf!1" _) (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("3" (lemma "iterate_left_induction[Outminmax]") (("3" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): unit_box_ub?(bspoly!1,bsdegmono!1,nvars!1,terms!1,cf!1,intendpts!1)(a)") (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                      terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                      depth!1, intendpts!1, v!1 - 1,
                                                                                                                      ep!1 AND
                                                                                                                       1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                        iepts!1`2)") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (hide (-1 -2 -4)) (("1" (expand "unit_box_ub?") (("1" (expand "combine") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]" _) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (ground) nil nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)" _ _ _) (("3" (inst -1 "d!1" "nf!1" _) (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("4" (lemma "iterate_left_induction[Outminmax]") (("4" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): length_eq?(nvars!1)(a)") (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                      terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                      depth!1, intendpts!1, v!1 - 1,
                                                                                                                      ep!1 AND
                                                                                                                       1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                        iepts!1`2)") (("1" (replace -1) (("1" (hide -1) (("1" (typepred "iggy") (("1" (hide (-1 -2 -3)) (("1" (expand "length_eq?") (("1" (grind :exclude ("length" "cons?")) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]" _) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)" _ _ _) (("3" (inst -1 "d!1" "nf!1" _) (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("5" (lemma "iterate_left_induction[Outminmax]") (("5" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): a`max_depth=depth!1") (("1" (assert) (("1" (hide 2) (("1" (split) (("1" (typepred "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                           f!1 WITH [(v!1 - 1) := 0], depth!1, intendpts!1, v!1 - 1,
                           ep!1 AND
                            (iepts!1`1 OR
                              bsdegmono!1(v!1 - 1) /= 0 AND
                               0 = bsdegmono!1(v!1 - 1) AND iepts!1`2))") (("1" (propax) nil nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "0" "f!1 WITH [(v!1 - 1) := 0]" _) (("2" (inst?) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                          terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                          depth!1, intendpts!1, v!1 - 1,
                                                                                                                          ep!1 AND
                                                                                                                           1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                            iepts!1`2)") (("1" (replace -1) (("1" (hide -1) (("1" (typepred "iggy") (("1" (hide (-1 -2 -3)) (("1" (expand "combine") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)" _ _ _) (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]" _) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)" _ _ _) (("3" (inst -1 "d!1" "nf!1" _) (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Bern_coeffs_minmax_rec_TCC3 subtype-tcc nil bernstein_minmax nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (k!1 skolem-const-decl "below(bsdegmono!1(v!1 - 1))" bernstein_minmax nil) (k!2 skolem-const-decl "upto(1 + k!1)" bernstein_minmax nil) (le_max formula-decl nil real_defs nil) (Outminmax type-eq-decl nil minmax nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real nonempty-type-from-decl nil reals nil) (iterate_left_induction formula-decl nil for_iterate structures) (PRED type-eq-decl nil defined_types nil) (k!1 skolem-const-decl "below(bsdegmono!1(v!1 - 1))" bernstein_minmax nil) (k!2 skolem-const-decl "upto(1 + k!1)" bernstein_minmax nil) (min_le formula-decl nil real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (TRUE const-decl "bool" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (nf!1 skolem-const-decl "CoeffMono" bernstein_minmax nil) (combine const-decl "Outminmax" minmax nil) (length_eq? const-decl "bool" minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (multibscoeff const-decl "real" multi_bernstein nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (Coeff type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (IterateBody type-eq-decl nil for_iterate structures) (subrange type-eq-decl nil integers nil) (upfrom nonempty-type-eq-decl nil integers nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil) (DegreeMono type-eq-decl nil util nil) (bsdegmono!1 skolem-const-decl "DegreeMono" bernstein_minmax nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (CoeffMono type-eq-decl nil util nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (f!1 skolem-const-decl "CoeffMono" bernstein_minmax nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil) (nvars!1 skolem-const-decl "posnat" bernstein_minmax nil) (intendpts!1 skolem-const-decl "IntervalEndpoints" bernstein_minmax nil) (ep!1 skolem-const-decl "(edge_point?(bsdegmono!1, nvars!1, f!1, intendpts!1, v!1))" bernstein_minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (iepts!1 skolem-const-decl "[bool, bool]" bernstein_minmax nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (v!1 skolem-const-decl "nat" bernstein_minmax nil) (int_minus_int_is_int application-judgement "int" integers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak (Bern_coeffs_minmax_rec subtype "for_iterate[Outminmax].iterate_left(0, bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)), LAMBDA (d: naturalnumbers.upto(bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)))): LET nf = bernstein_minmax.f WITH [((number_fields.-)(bernstein_minmax.v, 1)) := d], nep = booleans.AND(bernstein_minmax.ep, (booleans.OR(booleans.AND(d = 0, bernstein_minmax.iepts`1), booleans.AND(bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)) /= 0, booleans.AND(d = bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)), bernstein_minmax.iepts`2))))) IN bernstein_minmax.Bern_coeffs_minmax_rec(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.nf, bernstein_minmax.depth, bernstein_minmax.intendpts, (number_fields.-)(bernstein_minmax.v, 1), bernstein_minmax.nep), minmax.combine)" "{omm: minmax.Outminmax |      (FORALL (nf: util.CoeffMono): booleans.IMPLIES(FORALL (i: naturalnumbers.below(bernstein_minmax.nvars)): booleans.AND(reals.<=(nf(i), bernstein_minmax.bsdegmono(i)), (booleans.IMPLIES(reals.<=(bernstein_minmax.v, i), bernstein_minmax.f(i) = nf(i)))), booleans.AND(reals.<=(omm`lb_min, multi_bernstein.multibscoeff(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms)(nf)), reals.<=(multi_bernstein.multibscoeff(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms)(nf), omm`ub_max)))) AND bernstein_minmax.unit_box_lb?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts)(omm) AND bernstein_minmax.unit_box_ub?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts)(omm) AND minmax.length_eq?(bernstein_minmax.nvars)(omm) AND (omm`max_depth = bernstein_minmax.depth)}")) (Bern_coeffs_minmax_rec_TCC6-1 nil 3509113200 ("" (skosimp*) (("" (lemma "Bern_coeffs_minmax_rec_TCC3") (("" (label "nepep" -1) (("" (hide "nepep") (("" (split +) (("1" (skosimp*) (("1" (split) (("1" (lemma "iterate_left_induction[Outminmax]") (("1" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1-1)),a:Outminmax): FORALL (k:upto(i)): a`lb_min <= multibscoeff(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(nf!1 WITH [(v!1-1):=k])") (("1" (split -) (("1" (inst -2 "v!1-1") (("1" (flatten) (("1" (inst -1 "nf!1(v!1-1)") (("1" (assert) (("1" (hide -3) (("1" (case-replace "nf!1 WITH [(v!1 - 1) := nf!1(v!1 - 1)] = nf!1") (("1" (hide-all-but 1) (("1" (decompose-equality 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but 1) (("2" (typepred "ep!1") (("2" (expand "edge_point?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep :preds? t) (("2" (beta) (("2" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                               f!1 WITH [(v!1 - 1) := 0], depth!1, intendpts!1, v!1 - 1,
                                                                               ep!1 AND
                                                                                (iepts!1`1 OR
                                                                                  bsdegmono!1(v!1 - 1) /= 0 AND
                                                                                   0 = bsdegmono!1(v!1 - 1) AND iepts!1`2))") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (inst? -1) (("1" (assert) (("1" (hide 2) (("1" (skosimp :preds? t) (("1" (case-replace "v!1-1=i!1") (("1" (assert) nil nil) ("2" (assert) (("2" (inst? -) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (split -1) (("1" (inst - "intendpts!1(v!1 - 1)") (("1" (inst - "0" "f!1 WITH [(v!1 - 1) := 0]") (("1" (inst?) (("1" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (replaces -3) nil nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (hide 2) (("3" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil) ("4" (hide 2) (("4" (assert) nil nil)) nil) ("5" (hide 2) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (beta) (("3" (assert) (("3" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                             terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                             depth!1, intendpts!1, v!1 - 1,
                                                                                                                             ep!1 AND
                                                                                                                              1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                               iepts!1`2)") (("1" (replaces -1) (("1" (expand "combine") (("1" (rewrite "min_le") (("1" (flatten) (("1" (case "k!2 = 1+k!1") (("1" (typepred "iggy") (("1" (inst?) (("1" (assert) (("1" (skosimp* :preds? t) (("1" (case "v!1-1 = i!1") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst? -10) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -5) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)") (("3" (inst -1 "d!1" "nf!2") (("3" (assert) (("3" (inst?) (("3" (split -1) (("1" (propax) nil nil) ("2" (replaces -3) (("2" (replaces -4) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "iterate_left_induction[Outminmax]") (("2" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): FORALL (k:upto(i)): multibscoeff(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(nf!1 WITH [(v!1-1):=k]) <= a`ub_max") (("1" (split -) (("1" (inst -2 "v!1-1") (("1" (flatten) (("1" (inst -1 "nf!1(v!1-1)") (("1" (assert) (("1" (hide -3) (("1" (case-replace "nf!1 WITH [(v!1 - 1) := nf!1(v!1 - 1)] = nf!1") (("1" (hide-all-but 1) (("1" (decompose-equality 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but 1) (("2" (typepred "ep!1") (("2" (expand "edge_point?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep :preds? t) (("2" (beta) (("2" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                f!1 WITH [(v!1 - 1) := 0], depth!1, intendpts!1, v!1 - 1,
                                                                                                ep!1 AND
                                                                                                 (iepts!1`1 OR
                                                                                                   bsdegmono!1(v!1 - 1) /= 0 AND
                                                                                                    0 = bsdegmono!1(v!1 - 1) AND iepts!1`2))") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (inst? -1) (("1" (assert) (("1" (hide 2) (("1" (skosimp :preds? t) (("1" (case-replace "v!1-1=i!1") (("1" (assert) nil nil) ("2" (assert) (("2" (inst? -) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (split -1) (("1" (inst - "intendpts!1(v!1 - 1)") (("1" (inst - "0" "f!1 WITH [(v!1 - 1) := 0]") (("1" (inst?) (("1" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (replaces -3) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (assert) nil nil)) nil) ("4" (hide 2) (("4" (assert) nil nil)) nil) ("5" (hide 2) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (beta) (("3" (assert) (("3" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                                                              terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                                                              depth!1, intendpts!1, v!1 - 1,
                                                                                                                                              ep!1 AND
                                                                                                                                               1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                                                                iepts!1`2)") (("1" (replaces -1) (("1" (expand "combine") (("1" (rewrite "le_max") (("1" (flatten) (("1" (case "k!2 = 1+k!1") (("1" (typepred "iggy") (("1" (inst?) (("1" (assert) (("1" (skosimp* :preds? t) (("1" (case "v!1-1 = i!1") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst? -10) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -5) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)") (("3" (inst -1 "d!1" "nf!2") (("3" (assert) (("3" (inst?) (("3" (split -1) (("1" (propax) nil nil) ("2" (replaces -3) (("2" (replaces -4) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "iterate_left_induction[Outminmax]") (("2" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): unit_box_lb?(bspoly!1,bsdegmono!1,nvars!1,terms!1,cf!1,intendpts!1)(a)") (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                           terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                           depth!1, intendpts!1, v!1 - 1,
                                                                                                           ep!1 AND
                                                                                                            1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                             iepts!1`2)") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (hide -1 -3 -4) (("1" (expand "unit_box_lb?") (("1" (expand "combine") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)") (("3" (inst -1 "d!1" "nf!1") (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("3" (lemma "iterate_left_induction[Outminmax]") (("3" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): unit_box_ub?(bspoly!1,bsdegmono!1,nvars!1,terms!1,cf!1,intendpts!1)(a)") (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                           terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                           depth!1, intendpts!1, v!1 - 1,
                                                                                                           ep!1 AND
                                                                                                            1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                             iepts!1`2)") (("1" (replaces -1) (("1" (typepred "iggy") (("1" (hide (-1 -2 -4)) (("1" (expand "unit_box_ub?") (("1" (expand "combine") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (ground) nil nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)") (("3" (inst -1 "d!1" "nf!1") (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("4" (lemma "iterate_left_induction[Outminmax]") (("4" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): length_eq?(nvars!1)(a)") (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                           terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                           depth!1, intendpts!1, v!1 - 1,
                                                                                                           ep!1 AND
                                                                                                            1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                             iepts!1`2)") (("1" (replace -1) (("1" (hide -1) (("1" (typepred "iggy") (("1" (hide (-1 -2 -3)) (("1" (expand "length_eq?") (("1" (grind :exclude ("length" "cons?")) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)") (("3" (inst -1 "d!1" "nf!1") (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil) ("5" (lemma "iterate_left_induction[Outminmax]") (("5" (inst?) (("1" (inst -1 "LAMBDA(i:upto(bsdegmono!1(v!1 - 1)),a:Outminmax): a`max_depth=depth!1") (("1" (assert) (("1" (hide 2) (("1" (split) (("1" (typepred "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                   f!1 WITH [(v!1 - 1) := 0], depth!1, intendpts!1, v!1 - 1,
                   ep!1 AND
                    (iepts!1`1 OR
                      bsdegmono!1(v!1 - 1) /= 0 AND
                       0 = bsdegmono!1(v!1 - 1) AND iepts!1`2))") (("1" (propax) nil nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "0" "f!1 WITH [(v!1 - 1) := 0]") (("2" (inst?) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (name "iggy" "v1!1(bspoly!1, bsdegmono!1, cf!1, nvars!1,
                                                                                                             terms!1, f!1 WITH [(v!1 - 1) := 1 + k!1],
                                                                                                             depth!1, intendpts!1, v!1 - 1,
                                                                                                             ep!1 AND
                                                                                                              1 + k!1 = bsdegmono!1(v!1 - 1) AND
                                                                                                               iepts!1`2)") (("1" (replace -1) (("1" (hide -1) (("1" (typepred "iggy") (("1" (hide (-1 -2 -3)) (("1" (expand "combine") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (reveal "nepep") (("2" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("2" (assert) (("2" (inst - "intendpts!1(v!1 - 1)") (("2" (inst - "1+k!1" "f!1 WITH [(v!1 - 1) := 1 + k!1]") (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skosimp*) (("2" (ground) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp* :preds? t) (("3" (reveal "nepep") (("3" (inst -1 "bsdegmono!1" "nvars!1" "f!1" "intendpts!1" "v!1" "ep!1") (("3" (assert) (("3" (inst -1 "intendpts!1(v!1 - 1)") (("3" (inst -1 "d!1" "nf!1") (("3" (assert) (("3" (inst?) (("3" (assert) (("3" (replace -3) (("3" (replace -4) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)) nil) ("6" (hide 2) (("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)) nil) ("7" (hide 2) (("7" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((gt_realorder name-judgement "RealOrder" real_orders reals) (Outminmax type-eq-decl nil minmax nil) (iterate_left_induction formula-decl nil for_iterate structures) (lt_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (combine const-decl "Outminmax" minmax nil) (length_eq? const-decl "bool" minmax nil) (multibscoeff const-decl "real" multi_bernstein nil) (Coeff type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (IterateBody type-eq-decl nil for_iterate structures) (DegreeMono type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (edge_point? const-decl "bool" util nil) (ge_realorder name-judgement "RealOrder" real_orders reals)) nil (Bern_coeffs_minmax_rec subtype "for_iterate[Outminmax].iterate_left(0, bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)), LAMBDA (d: naturalnumbers.upto(bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)))): LET nf = bernstein_minmax.f WITH [((number_fields.-)(bernstein_minmax.v, 1)) := d], nep = booleans.AND(bernstein_minmax.ep, (booleans.OR(booleans.AND(d = 0, bernstein_minmax.iepts`1), booleans.AND(bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)) /= 0, booleans.AND(d = bernstein_minmax.bsdegmono((number_fields.-)(bernstein_minmax.v, 1)), bernstein_minmax.iepts`2))))) IN bernstein_minmax.Bern_coeffs_minmax_rec(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.nf, bernstein_minmax.depth, bernstein_minmax.intendpts, (number_fields.-)(bernstein_minmax.v, 1), bernstein_minmax.nep), minmax.combine)" "{omm: minmax.Outminmax |      (FORALL (nf: util.CoeffMono): booleans.IMPLIES(FORALL (i: naturalnumbers.below(bernstein_minmax.nvars)): booleans.AND(reals.<=(nf(i), bernstein_minmax.bsdegmono(i)), (booleans.IMPLIES(reals.<=(bernstein_minmax.v, i), bernstein_minmax.f(i) = nf(i)))), booleans.AND(reals.<=(omm`lb_min, multi_bernstein.multibscoeff(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms)(nf)), reals.<=(multi_bernstein.multibscoeff(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms)(nf), omm`ub_max)))) AND bernstein_minmax.unit_box_lb?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts)(omm) AND bernstein_minmax.unit_box_ub?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts)(omm) AND minmax.length_eq?(bernstein_minmax.nvars)(omm) AND (omm`max_depth = bernstein_minmax.depth)}"))) (Bern_coeffs_minmax_rec_TCC7 0 (Bern_coeffs_minmax_rec_TCC7-1 nil 3509113200 ("" (skosimp*) (("" (assert) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals)) nil (Bern_coeffs_minmax_rec subtype "(number_fields.-)(bernstein_minmax.v, 1)" "nat"))) (Bern_coeffs_minmax_TCC1 0 (Bern_coeffs_minmax_TCC1-1 nil 3506785112 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (edge_point? const-decl "bool" util nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (Bern_coeffs_minmax subtype "booleans.TRUE" "(util.edge_point?(bernstein_minmax.bsdegmono, bernstein_minmax.nvars, LAMBDA (i: naturalnumbers.nat) -> real: 0, bernstein_minmax.intendpts, bernstein_minmax.nvars))"))) (Bern_coeffs_minmax_TCC2 0 (Bern_coeffs_minmax_TCC2-1 nil 3508188890 ("" (skosimp*) (("" (expand "sound?") (("" (name-replace "BC" "Bern_coeffs_minmax_rec(bspoly!1,
                                                          bsdegmono!1,
                                                          cf!1,
                                                          nvars!1,
                                                          terms!1,
                                                          LAMBDA (i: nat): 0,
                                                          depth!1,
                                                          intendpts!1,
                                                          nvars!1,
                                                          TRUE)") (("" (typepred "BC") (("" (hide -2 -3) (("" (lemma "forall_X_between_minmax") (("" (expand "le_below_mono?") (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sound? const-decl "bool" bernstein_minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (forall_X_between_minmax formula-decl nil multi_bernstein nil) (le_below_mono? const-decl "bool" util nil) (TRUE const-decl "bool" booleans nil) (Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
        (FORALL (nf: CoeffMono):
           (FORALL (i: below(nvars)):
              nf(i) <= bsdegmono(i) AND (v <= i IMPLIES f(i) = nf(i)))
            IMPLIES
            omm`lb_min <=
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf)
             AND
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf) <=
              omm`ub_max)
    AND unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND length_eq?(nvars)(omm) AND (omm`max_depth = depth)}" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (multibscoeff const-decl "real" multi_bernstein nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (edge_point? const-decl "bool" util nil) (IntervalEndpoints type-eq-decl nil util nil) (CoeffMono type-eq-decl nil util nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Outminmax type-eq-decl nil minmax nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real nonempty-type-from-decl nil reals nil)) nil (Bern_coeffs_minmax subtype "bernstein_minmax.Bern_coeffs_minmax_rec(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.cf, bernstein_minmax.nvars, bernstein_minmax.terms, LAMBDA (i: naturalnumbers.nat) -> real: 0, bernstein_minmax.depth, bernstein_minmax.intendpts, bernstein_minmax.nvars, booleans.TRUE)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))"))) (Bern_coeffs_minmax_length 0 (Bern_coeffs_minmax_length-1 nil 3509140650 ("" (skeep) (("" (beta) (("" (typepred "Bern_coeffs_minmax(bspoly,
                                      bsdegmono,
                                      cf,
                                      nvars,
                                      terms,
                                      depth,
                                      intendpts)") (("" (expand "sound?") (("" (flatten) nil nil)) nil)) nil)) nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil)) shostak)) (Bern_coeffs_minmax_maxdepth 0 (Bern_coeffs_minmax_maxdepth-1 nil 3511525224 ("" (skeep) (("" (beta) (("" (expand "Bern_coeffs_minmax") (("" (typepred "Bern_coeffs_minmax_rec(bspoly, bsdegmono, cf, nvars, terms,
                             LAMBDA (i: nat): 0, depth, intendpts, nvars,
                             TRUE)") (("" (propax) nil nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (Bern_coeffs_minmax_rec def-decl "{omm: Outminmax |
        (FORALL (nf: CoeffMono):
           (FORALL (i: below(nvars)):
              nf(i) <= bsdegmono(i) AND (v <= i IMPLIES f(i) = nf(i)))
            IMPLIES
            omm`lb_min <=
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf)
             AND
             multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(nf) <=
              omm`ub_max)
    AND unit_box_lb?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND unit_box_ub?(bspoly, bsdegmono, nvars, terms, cf, intendpts)(omm)
    AND length_eq?(nvars)(omm) AND (omm`max_depth = depth)}" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (multibscoeff const-decl "real" multi_bernstein nil) (= const-decl "[T, T -> boolean]" equalities nil) (Outminmax type-eq-decl nil minmax nil) (list type-decl nil list_adt nil) (edge_point? const-decl "bool" util nil) (IntervalEndpoints type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (DegreeMono type-eq-decl nil util nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (CoeffMono type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil)) shostak)) (Bern_coeffs_minmax_var 0 (Bern_coeffs_minmax_var-1 nil 3509141362 ("" (skeep) (("" (name-replace "OMM" "Bern_coeffs_minmax(bspoly, bsdegmono, cf, nvars, terms, depth,
                                       intendpts)") (("" (beta) (("" (flatten) (("" (typepred "OMM") (("" (expand "sound?") (("" (flatten) (("" (expand "unit_box_lb?") (("" (expand "unit_box_ub?") (("" (expand "length_eq?") (("" (case "cons?(OMM`lb_var) AND cons?(OMM`ub_var)") (("1" (flatten) (("1" (assert) (("1" (flatten) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide-all-but (-4 -5 1)) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real nonempty-type-from-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (list type-decl nil list_adt nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util nil) (sound? const-decl "bool" bernstein_minmax nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (NOT const-decl "[bool -> bool]" booleans nil)) shostak)) (list2array_sound_pi 0 (list2array_sound_pi-1 nil 3614592873 ("" (induct "l") (("1" (grind) (("1" (expand "list2array") (("1" (propax) nil nil)) nil)) nil) ("2" (skeep) (("2" (skeep) (("2" (expand "list2array" 1) (("2" (inst -1 "t") (("2" (replace -1 1 :hide? t) (("2" (beta) (("2" (expand "nth") (("2" (decompose-equality) (("1" (lift-if) (("1" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) (("3" (expand "length") (("3" (lift-if) (("3" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (int_minus_int_is_int application-judgement "int" integers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (cons2_var skolem-const-decl "list[real]" bernstein_minmax nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (cons1_var skolem-const-decl "real" bernstein_minmax nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil) (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (list2array def-decl "T" array2list structures) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil)) shostak)) (Bernstein_minmax_rec_TCC1 0 (Bernstein_minmax_rec_TCC1-1 nil 3505493924 ("" (subtype-tcc) nil nil) nil nil (Bernstein_minmax_rec subtype "(number_fields.-)(bernstein_minmax.depth, bernstein_minmax.level)" "naturalnumber"))) (Bernstein_minmax_rec_TCC2 0 (Bernstein_minmax_rec_TCC2-1 "" 3804476737 ("" (skosimp* :preds? t) (("" (hide (-1 -2 -3 -4 -7 -8)) (("" (expand "sound?") (("" (flatten) (("" (assert) (("" (case "multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)") (("1" (expand "forall_X_between") (("1" (expand "unit_box_lb?") (("1" (expand "unit_box_ub?") (("1" (ground) (("1" (skosimp*) (("1" (inst -9 "X!1") (("1" (ground) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -6 "X!1") (("2" (ground) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -6 "X!1") (("3" (ground) nil nil)) nil)) nil) ("4" (skosimp*) (("4" (inst - "X!1") (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 -3 -4 2)) (("2" (lemma "multibs_eval_id") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Vars type-eq-decl nil util nil) (= const-decl "[T, T -> boolean]" equalities nil) (multibs_eval const-decl "real" multi_bernstein nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval_id formula-decl nil multi_bernstein nil) (translist_polylist_id formula-decl nil util nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (MultiPolynomial type-eq-decl nil util nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (sound? const-decl "bool" bernstein_minmax nil)) shostak (Bernstein_minmax_rec subtype "bernstein_minmax.minmax" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC2-3 "New proof" 3507232724 ("" (skosimp* :preds? t) (("" (hide (-2 -3 -4 -5 -7 -8)) (("" (expand "sound?") (("" (flatten) (("" (assert) (("" (case "multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)") (("1" (expand "forall_X_between") (("1" (expand "unit_box_lb?") (("1" (expand "unit_box_ub?") (("1" (ground) (("1" (skosimp*) (("1" (inst -9 "X!1") (("1" (ground) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -6 "X!1") (("2" (ground) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -6 "X!1") (("3" (ground) nil nil)) nil)) nil) ("4" (skosimp*) (("4" (inst - "X!1") (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 -3 -4 2)) (("2" (lemma "multibs_eval_id") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Vars type-eq-decl nil util nil) (multibs_eval const-decl "real" multi_bernstein nil) (le_realorder name-judgement "RealOrder" real_orders reals) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval_id formula-decl nil multi_bernstein nil) (translist_polylist_id formula-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil)) shostak (Bernstein_minmax_rec subtype "bernstein_minmax.minmax" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))"))) (Bernstein_minmax_rec_TCC3 0 (Bernstein_minmax_rec_TCC3-1 nil 3883807284 ("" (skeep*) (("" (typepred "mod(varsel`2, nvars)") (("" (propax) nil nil)) nil)) nil) ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "below(m)" mod nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (Bernstein_minmax_rec subtype "mod.mod(bernstein_minmax.varsel`2, bernstein_minmax.nvars)" "{x: {k | reals.<(real_defs.abs(mod.k), real_defs.abs(bernstein_minmax.nvars))} | reals.<(x, bernstein_minmax.nvars)}"))) (Bernstein_minmax_rec_TCC4 0 (Bernstein_minmax_rec_TCC3-1 nil 3505493924 ("" (skosimp*) (("" (assert) nil nil)) nil) ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (nil application-judgement "below(m)" mod nil)) nil (Bernstein_minmax_rec subtype "bernstein_minmax.v" "nat"))) (Bernstein_minmax_rec_TCC5 0 (Bernstein_minmax_rec_TCC4-1 nil 3505493924 ("" (skosimp*) (("" (assert) nil nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "below(m)" mod nil)) nil (Bernstein_minmax_rec subtype "bernstein_minmax.level" "upto(bernstein_minmax.depth)"))) (Bernstein_minmax_rec_TCC6 0 (Bernstein_minmax_rec_TCC5-1 nil 3505493924 ("" (skosimp*) (("" (assert) nil nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "below(m)" mod nil)) nil (Bernstein_minmax_rec termination "bernstein_minmax.Bernstein_minmax_rec(bernstein_minmax.LR1, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.depth, bernstein_minmax.level, bernstein_minmax.localexit, bernstein_minmax.globalexit, bernstein_minmax.LR1intendpts, bernstein_minmax.varselect, bernstein_minmax.newmm1)" "nil"))) (Bernstein_minmax_rec_TCC7 0 (Bernstein_minmax_rec_TCC7-1 "" 3884388703 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                                                                                                (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                                                            (bslr1!1),
                                                                                                                                                                                                                                                                                                         minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                    (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                                                                 level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (hide-all-but (-3 -8 1)) (("1" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("1" (rewrite "list2array_sound") (("1" (ground) (("1" (replace -4) (("1" (assert) nil nil)) nil) ("2" (replace -3) (("2" (assert) nil nil)) nil) ("3" (replace -3) (("3" (propax) nil nil)) nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (assert) (("2" (replace 1) (("2" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("2" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("3" (split -3) (("1" (flatten) (("1" (assert) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("4" (assert) (("4" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                                            (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                                    WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                                                                            := 2 *
                                                                                                                                                                                                                                                                                                                                                                                                                                                list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (setnth
                                                                                                                                                                                                                                                                                                                                                                                                                                                           (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (replace -3) (("1" (reveal "setnthlength") (("1" (inst?) (("1" (replace -5) (("1" (assert) (("1" (name-replace "nn" "nth[real](bslr1!1`lb_var, v!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("1" (assert) (("1" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (assert) (("2" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("2" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("3" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("4" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                                            (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                                    WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                                                                            := 2 *
                                                                                                                                                                                                                                                                                                                                                                                                                                                list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (setnth
                                                                                                                                                                                                                                                                                                                                                                                                                                                           (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (replace -4) (("1" (replace -3) (("1" (name-replace "nn" "nth[real](bslr1!1`ub_var, v!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                     level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                     level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                                           (bslr1!1),
                                                                                                                                                                                                                                                                                        minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                           (bslr1!1),
                                                                                                                                                                                                                                                                        minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                      (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                                                  (bslr1!1),
                                                                                                                                                                                                                               minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                    (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                                                                 level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("1" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("2" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("3" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (name-replace "nn" "nth[real](bslr1!1`lb_var, iup!1)") (("4" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                             WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                     := 2 *
                                                                                                                                                                                                                                                                                                                                                                         list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                   (setnth
                                                                                                                                                                                                                                                                                                                                                                                    (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                                                                                                                                     LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                                                   (v!1)
                                                                                                                                                                                                                                                                                                                                                                         - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (replace -4) (("1" (replace -3) (("1" (name-replace "nn" "nth(bslr1!1`lb_var, v!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("1" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("2" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("3" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (name-replace "nn" "nth[real](bslr1!1`ub_var, iup!1)") (("4" (split -3) (("1" (flatten) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                             WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                     := 2 *
                                                                                                                                                                                                                                                                                                                                                                         list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                   (setnth
                                                                                                                                                                                                                                                                                                                                                                                    (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                                                                                                                                     LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                                                   (v!1)
                                                                                                                                                                                                                                                                                                                                                                         - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (replace -4) (("1" (replace -3) (("1" (name-replace "nn" "nth[real](bslr1!1`ub_var, v!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                         level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                         level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) nil shostak (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-8 "[mmoscato] in some places I have to replace manually (expand \"list2array\") for several (rewrite  \"list2array_sound\") because the auto-write & assert strategy didn't work. All of this cases have the list2array function appearing among the consequents." 3614511657 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                                                                               (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                                           (bslr1!1),
                                                                                                                                                                                                                                                                                        minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                 (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                                               level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                           (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                   v!1,
                                                                                                                                                                                                                                                                                                                                                   LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                         WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                                                 := 2 *
                                                                                                                                                                                                                                                                                                                                                                                                                     list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                               (setnth
                                                                                                                                                                                                                                                                                                                                                                                                                                (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                               (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                           (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                   v!1,
                                                                                                                                                                                                                                                                                                                                                   LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                         WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                                                 := 2 *
                                                                                                                                                                                                                                                                                                                                                                                                                     list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                               (setnth
                                                                                                                                                                                                                                                                                                                                                                                                                                (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                               (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                   level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                   level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                      (bslr1!1),
                                                                                                                                                                                                                                                                   minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                        (bslr1!1),
                                                                                                                                                                                                                                                     minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                     (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                                 (bslr1!1),
                                                                                                                                                                                                              minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                 (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                                               level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                          (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                  v!1,
                                                                                                                                                                                                                                                                                                                                                  LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                  WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                          := 2 *
                                                                                                                                                                                                                                                                                                                                              list2array(0)
                                                                                                                                                                                                                                                                                                                                                        (setnth
                                                                                                                                                                                                                                                                                                                                                         (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                                                                                                                                          LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                        (v!1)
                                                                                                                                                                                                                                                                                                                                              - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (auto-rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                          (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                  v!1,
                                                                                                                                                                                                                                                                                                                                                  LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                  WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                          := 2 *
                                                                                                                                                                                                                                                                                                                                              list2array(0)
                                                                                                                                                                                                                                                                                                                                                        (setnth
                                                                                                                                                                                                                                                                                                                                                         (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                                                                                                                                          LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                        (v!1)
                                                                                                                                                                                                                                                                                                                                              - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide "setnthlength") (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                       level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                       level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((translist_polylist_id formula-decl nil util nil) (combine_l const-decl "Outminmax" minmax nil) (unitbox? const-decl "bool" util nil) (le_realorder name-judgement "RealOrder" real_orders reals) (forall_X_between const-decl "bool" multi_bernstein nil) (Vars type-eq-decl nil util nil) (interval_between? const-decl "bool" util nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (list2array_sound formula-decl nil array2list structures) (list2array def-decl "T" array2list structures) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (length_eq? const-decl "bool" minmax nil) (outminmax_translate const-decl "Outminmax" minmax nil) (combine const-decl "Outminmax" minmax nil) (combine_r const-decl "Outminmax" minmax nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) shostak (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-7 "[mmoscato] I replaced one occurrence of (rewrite \"list2array_sound\") by (then (auto-rewrite \"list2array_sound\") (assert)) and that closed the branch. I will try the same in the others occurrences of (rewrite \"list2array_sound\")" 3614509105 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                                                                               (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                                           (bslr1!1),
                                                                                                                                                                                                                                                                                        minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                 (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                                               level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))))))))) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (ground) nil))))))))))))))))) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil))))))))))))))))))))))) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil) ("7" (postpone) nil) ("8" (postpone) nil))))))))))))))))))))) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (then (auto-rewrite "list2array_sound") (assert)) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil))))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                           (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                   v!1,
                                                                                                                                                                                                                                                                                                                                                   LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                         WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                                                 := 2 *
                                                                                                                                                                                                                                                                                                                                                                                                                     list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                               (setnth
                                                                                                                                                                                                                                                                                                                                                                                                                                (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                               (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil))))))))))))) ("2" (flatten) (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil))))))) ("2" (postpone) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil) ("7" (postpone) nil) ("8" (postpone) nil))))))))))))))))))))))) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil) ("2" (postpone) nil))))))))))))))))))))))))))) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil))))))))))))))))))))))))) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (then (auto-rewrite "list2array_sound") (assert)) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil))))))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                           (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                   v!1,
                                                                                                                                                                                                                                                                                                                                                   LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                         WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                                                 := 2 *
                                                                                                                                                                                                                                                                                                                                                                                                                     list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                                               (setnth
                                                                                                                                                                                                                                                                                                                                                                                                                                (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                                               (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil))))))))))))) ("2" (flatten) (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil))))))) ("2" (postpone) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                   level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil))))))) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                   level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil))))))))))) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                      (bslr1!1),
                                                                                                                                                                                                                                                                   minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil))) ("2" (hide-all-but (-2 2)) (("2" (grind) nil))) ("3" (hide-all-but (-2 2)) (("3" (grind) nil))) ("4" (hide-all-but (-2 2)) (("4" (grind) nil))) ("5" (hide-all-but (-2 2)) (("5" (grind) nil))) ("6" (hide-all-but (-2 2)) (("6" (grind) nil))) ("7" (hide-all-but (-2 2)) (("7" (grind) nil))) ("8" (hide-all-but (-2 2)) (("8" (grind) nil))))))))))))))))))))))))))))) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                        (bslr1!1),
                                                                                                                                                                                                                                                     minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil))) ("2" (expand "unit_box_ub?") (("2" (propax) nil))) ("3" (expand "length_eq?") (("3" (propax) nil))))))))))))))))))))))))))))))))))))) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                     (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                                 (bslr1!1),
                                                                                                                                                                                                              minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                 (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                                               level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))))) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil) ("5" (postpone) nil) ("6" (postpone) nil) ("7" (postpone) nil) ("8" (postpone) nil))))))))))))))))))))))) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil))))))))))))))))))))))) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil))))))))))))))))))))))) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (then (auto-rewrite "list2array_sound") (assert)) (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil))))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                          (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                  v!1,
                                                                                                                                                                                                                                                                                                                                                  LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                  WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                          := 2 *
                                                                                                                                                                                                                                                                                                                                              list2array(0)
                                                                                                                                                                                                                                                                                                                                                        (setnth
                                                                                                                                                                                                                                                                                                                                                         (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                                                                                                                                          LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                        (v!1)
                                                                                                                                                                                                                                                                                                                                              - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil))) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil))))))))))))) ("2" (flatten) (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil))))))) ("2" (postpone) nil))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil))) ("2" (hide-all-but (-2 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil))))))))))))))))))))))) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil))))))))))))))))))))))) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil))))))))))))))))))))))) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (then (auto-rewrite "list2array_sound") (assert)) (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil))))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                          (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                  v!1,
                                                                                                                                                                                                                                                                                                                                                  LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                  WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                          := 2 *
                                                                                                                                                                                                                                                                                                                                              list2array(0)
                                                                                                                                                                                                                                                                                                                                                        (setnth
                                                                                                                                                                                                                                                                                                                                                         (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                                                                                                                                          LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                                                        (v!1)
                                                                                                                                                                                                                                                                                                                                              - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil))) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil))))))))))))) ("2" (flatten) (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil))))))) ("2" (postpone) nil))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                       level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil))))))))))))))))) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                       level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil))))))))))) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil))) ("2" (hide-all-but (-2 2)) (("2" (grind) nil))) ("3" (hide-all-but (-2 2)) (("3" (grind) nil))) ("4" (hide-all-but (-2 2)) (("4" (grind) nil))) ("5" (hide-all-but (-2 2)) (("5" (grind) nil))) ("6" (hide-all-but (-2 2)) (("6" (grind) nil))) ("7" (hide-all-but (-2 2)) (("7" (grind) nil))) ("8" (hide-all-but (-2 2)) (("8" (grind) nil))))))))))))))))))))))))))) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil))))))))) ("2" (expand "unit_box_ub?") (("2" (propax) nil))) ("3" (expand "length_eq?") (("3" (propax) nil))))))))))))))))))))))))))))))))))))))) ("2" (propax) nil))))) ("2" (assert) nil))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil)))))))) nil) ((real_times_real_is_real application-judgement "real" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (translist_polylist_id formula-decl nil util nil) (sound_id formula-decl nil bernstein_minmax nil) (TRUE const-decl "bool" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (combine_l const-decl "Outminmax" minmax nil) (combine_sound formula-decl nil bernstein_minmax nil) (unitbox? const-decl "bool" util nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (forall_X_between const-decl "bool" multi_bernstein nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (Bern_coeffs_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (Vars type-eq-decl nil util nil) (FALSE const-decl "bool" booleans nil) (interval_between? const-decl "bool" util nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (list2array_sound formula-decl nil array2list structures) (list2array def-decl "T" array2list structures) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (outminmax_translate const-decl "Outminmax" minmax nil) (combine const-decl "Outminmax" minmax nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (nil application-judgement "below(m)" mod nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (combine_r const-decl "Outminmax" minmax nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (sound? const-decl "bool" bernstein_minmax nil) (v!1 skolem-const-decl "{x: {k | abs(k) < abs(nvars!1)} | x < nvars!1}" bernstein_minmax nil) (nvars!1 skolem-const-decl "posnat" bernstein_minmax nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (listn type-eq-decl nil listn structures) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) nil (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-6 "[mmoscato] I replaced one occurrence of (rewrite \"list2array_sound\") by (then (auto-rewrite \"list2array_sound\") (assert)) and that closed the branch. I will try the same in the others occurrences of (rewrite \"list2array_sound\")" 3614509018 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                                                              (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                          (bslr1!1),
                                                                                                                                                                                                                                                                       minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                              (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                             level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (auto-rewrite "list2array_sound") (("1" (assert) (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (rewrite "list2array_sound") (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (rewrite "list2array_sound") (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                      (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                              v!1,
                                                                                                                                                                                                                                                                                                                                                                                              LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                              WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                      := 2 *
                                                                                                                                                                                                                                                                                                                                                                                          list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                    (setnth
                                                                                                                                                                                                                                                                                                                                                                                                     (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                    (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                      (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                              v!1,
                                                                                                                                                                                                                                                                                                                                                                                              LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                              WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                      := 2 *
                                                                                                                                                                                                                                                                                                                                                                                          list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                    (setnth
                                                                                                                                                                                                                                                                                                                                                                                                     (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                    (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                 level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                 level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                 (bslr1!1),
                                                                                                                                                                                                                                              minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                     (bslr1!1),
                                                                                                                                                                                                                                  minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                    (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                (bslr1!1),
                                                                                                                                                                                             minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                              (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                             level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                               (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                       v!1,
                                                                                                                                                                                                                                                                                                                       LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                       WITH [(v!1)
                                                                                                                                                                                                                                                                                                               := 2 *
                                                                                                                                                                                                                                                                                                                   list2array(0)
                                                                                                                                                                                                                                                                                                                             (setnth
                                                                                                                                                                                                                                                                                                                              (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                               v!1,
                                                                                                                                                                                                                                                                                                                               LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                             (v!1)
                                                                                                                                                                                                                                                                                                                   - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (rewrite "list2array_sound") (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                               (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                       v!1,
                                                                                                                                                                                                                                                                                                                       LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                       WITH [(v!1)
                                                                                                                                                                                                                                                                                                               := 2 *
                                                                                                                                                                                                                                                                                                                   list2array(0)
                                                                                                                                                                                                                                                                                                                             (setnth
                                                                                                                                                                                                                                                                                                                              (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                               v!1,
                                                                                                                                                                                                                                                                                                                               LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                             (v!1)
                                                                                                                                                                                                                                                                                                                   - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (ground) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (ground) (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                     level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                     level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) nil shostak (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-5 nil 3614508687 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                                                              (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                                          (bslr1!1),
                                                                                                                                                                                                                                                                       minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                              (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                             level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))))))))) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (then (auto-rewrite "list2array_sound") (assert)) (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil))))))))))))))))) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (rewrite "list2array_sound") (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (rewrite "list2array_sound") (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil))))))))))))))))))))) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                      (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                              v!1,
                                                                                                                                                                                                                                                                                                                                                                                              LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                              WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                      := 2 *
                                                                                                                                                                                                                                                                                                                                                                                          list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                    (setnth
                                                                                                                                                                                                                                                                                                                                                                                                     (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                    (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil))))))))))))))))))))))) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))))))) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) nil))))))))))))))))))))))) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                      (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                              v!1,
                                                                                                                                                                                                                                                                                                                                                                                              LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                              WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                                                      := 2 *
                                                                                                                                                                                                                                                                                                                                                                                          list2array(0)
                                                                                                                                                                                                                                                                                                                                                                                                    (setnth
                                                                                                                                                                                                                                                                                                                                                                                                     (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                                                    (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                 level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil))))))) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                 level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil))))))))))) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                 (bslr1!1),
                                                                                                                                                                                                                                              minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil))) ("2" (hide-all-but (-2 2)) (("2" (grind) nil))) ("3" (hide-all-but (-2 2)) (("3" (grind) nil))) ("4" (hide-all-but (-2 2)) (("4" (grind) nil))) ("5" (hide-all-but (-2 2)) (("5" (grind) nil))) ("6" (hide-all-but (-2 2)) (("6" (grind) nil))) ("7" (hide-all-but (-2 2)) (("7" (grind) nil))) ("8" (hide-all-but (-2 2)) (("8" (grind) nil))))))))))))))))))))))))))))) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                     (bslr1!1),
                                                                                                                                                                                                                                  minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil))) ("2" (expand "unit_box_ub?") (("2" (propax) nil))) ("3" (expand "length_eq?") (("3" (propax) nil))))))))))))))))))))))))))))))))))))) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                    (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                (bslr1!1),
                                                                                                                                                                                             minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                              (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                                             level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))))) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil))))))))))))))))))))) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                               (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                       v!1,
                                                                                                                                                                                                                                                                                                                       LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                       WITH [(v!1)
                                                                                                                                                                                                                                                                                                               := 2 *
                                                                                                                                                                                                                                                                                                                   list2array(0)
                                                                                                                                                                                                                                                                                                                             (setnth
                                                                                                                                                                                                                                                                                                                              (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                               v!1,
                                                                                                                                                                                                                                                                                                                               LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                             (v!1)
                                                                                                                                                                                                                                                                                                                   - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil))) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil))) ("2" (hide-all-but (-2 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (rewrite "list2array_sound") (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil))))))))))))))))))))) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil))))))))))))))))))))) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                               (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                       v!1,
                                                                                                                                                                                                                                                                                                                       LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                       WITH [(v!1)
                                                                                                                                                                                                                                                                                                               := 2 *
                                                                                                                                                                                                                                                                                                                   list2array(0)
                                                                                                                                                                                                                                                                                                                             (setnth
                                                                                                                                                                                                                                                                                                                              (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                               v!1,
                                                                                                                                                                                                                                                                                                                               LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                                             (v!1)
                                                                                                                                                                                                                                                                                                                   - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil))) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                     level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil))))))))))))))))) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                     level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil))))))))))) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil))) ("2" (hide-all-but (-2 2)) (("2" (grind) nil))) ("3" (hide-all-but (-2 2)) (("3" (grind) nil))) ("4" (hide-all-but (-2 2)) (("4" (grind) nil))) ("5" (hide-all-but (-2 2)) (("5" (grind) nil))) ("6" (hide-all-but (-2 2)) (("6" (grind) nil))) ("7" (hide-all-but (-2 2)) (("7" (grind) nil))) ("8" (hide-all-but (-2 2)) (("8" (grind) nil))))))))))))))))))))))))))) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil))))))))) ("2" (expand "unit_box_ub?") (("2" (propax) nil))) ("3" (expand "length_eq?") (("3" (propax) nil))))))))))))))))))))))))))))))))))))))) ("2" (propax) nil))))) ("2" (assert) nil))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-4 nil 3614445262 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                                             (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                                         (bslr1!1),
                                                                                                                                                                                                                                                      minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                           (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                           level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))))))))) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (rewrite "list2array_sound") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil))))))))))))))))) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (rewrite "list2array_sound") (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (rewrite "list2array_sound") (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil))))))))))))))))))))) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                               (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                       v!1,
                                                                                                                                                                                                                                                                                                       LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                           (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                   v!1,
                                                                                                                                                                                                                                                                                                                                                                   LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                   WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                           := 2 *
                                                                                                                                                                                                                                                                                                                                                               list2array(0)
                                                                                                                                                                                                                                                                                                                                                                         (setnth
                                                                                                                                                                                                                                                                                                                                                                          (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                         (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil))))))))))))))))))))))) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))))))) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) nil))))))))))))))))))))))) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                               (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                       v!1,
                                                                                                                                                                                                                                                                                                       LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                                           (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                   v!1,
                                                                                                                                                                                                                                                                                                                                                                   LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                   WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                                           := 2 *
                                                                                                                                                                                                                                                                                                                                                               list2array(0)
                                                                                                                                                                                                                                                                                                                                                                         (setnth
                                                                                                                                                                                                                                                                                                                                                                          (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                                                         (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                               level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil))))))) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                               level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil))))))))))) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                            (bslr1!1),
                                                                                                                                                                                                                         minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil))) ("2" (hide-all-but (-2 2)) (("2" (grind) nil))) ("3" (hide-all-but (-2 2)) (("3" (grind) nil))) ("4" (hide-all-but (-2 2)) (("4" (grind) nil))) ("5" (hide-all-but (-2 2)) (("5" (grind) nil))) ("6" (hide-all-but (-2 2)) (("6" (grind) nil))) ("7" (hide-all-but (-2 2)) (("7" (grind) nil))) ("8" (hide-all-but (-2 2)) (("8" (grind) nil))))))))))))))))))))))))))))) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                  (bslr1!1),
                                                                                                                                                                                                               minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil))) ("2" (expand "unit_box_ub?") (("2" (propax) nil))) ("3" (expand "length_eq?") (("3" (propax) nil))))))))))))))))))))))))))))))))))))) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                   (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                               (bslr1!1),
                                                                                                                                                                            minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                           (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                                           level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))))) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (rewrite "list2array_sound") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) nil))))))))))))))))))))) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil))))))))))))))))))))) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                    (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                            v!1,
                                                                                                                                                                                                                                                                                            LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                            WITH [(v!1)
                                                                                                                                                                                                                                                                                    := 2 *
                                                                                                                                                                                                                                                                                        list2array(0)
                                                                                                                                                                                                                                                                                                  (setnth
                                                                                                                                                                                                                                                                                                   (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                    v!1,
                                                                                                                                                                                                                                                                                                    LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                  (v!1)
                                                                                                                                                                                                                                                                                        - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil))) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil))) ("2" (hide-all-but (-2 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (rewrite "list2array_sound") (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil))))))))))))))))))))) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (rewrite "list2array_sound") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil))))))))))))))))))))) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (rewrite "list2array_sound") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                    (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                            v!1,
                                                                                                                                                                                                                                                                                            LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                            WITH [(v!1)
                                                                                                                                                                                                                                                                                    := 2 *
                                                                                                                                                                                                                                                                                        list2array(0)
                                                                                                                                                                                                                                                                                                  (setnth
                                                                                                                                                                                                                                                                                                   (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                    v!1,
                                                                                                                                                                                                                                                                                                    LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                                                  (v!1)
                                                                                                                                                                                                                                                                                        - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil))) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (rewrite "list2array_sound") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil))))))))))))) ("2" (flatten) (("2" (rewrite "list2array_sound") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil))) ("2" (hide-all-but (-1 1)) (("2" (grind) nil))))))))))))))))))))))))))))))))))))))) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                   level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil))))))))))))))))) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                   level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil))))))))))) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil))) ("2" (hide-all-but (-2 2)) (("2" (grind) nil))) ("3" (hide-all-but (-2 2)) (("3" (grind) nil))) ("4" (hide-all-but (-2 2)) (("4" (grind) nil))) ("5" (hide-all-but (-2 2)) (("5" (grind) nil))) ("6" (hide-all-but (-2 2)) (("6" (grind) nil))) ("7" (hide-all-but (-2 2)) (("7" (grind) nil))) ("8" (hide-all-but (-2 2)) (("8" (grind) nil))))))))))))))))))))))))))) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil))))))))) ("2" (expand "unit_box_ub?") (("2" (propax) nil))) ("3" (expand "length_eq?") (("3" (propax) nil))))))))))))))))))))))))))))))))))))))) ("2" (propax) nil))))) ("2" (assert) nil))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-3 nil 3509876005 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                                            (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                                        (bslr1!1),
                                                                                                                                                                                                                                     minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                        (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                         level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (expand "list2array") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                         (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                        v!1,
                                                                                                                                                                                                                                                                                                                                        LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                        WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                := 2 *
                                                                                                                                                                                                                                                                                                                                    list2array(0)
                                                                                                                                                                                                                                                                                                                                              (setnth
                                                                                                                                                                                                                                                                                                                                               (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                              (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (expand "list2array") (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                                         (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                                                (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                        v!1,
                                                                                                                                                                                                                                                                                                                                        LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                        WITH [(v!1)
                                                                                                                                                                                                                                                                                                                                := 2 *
                                                                                                                                                                                                                                                                                                                                    list2array(0)
                                                                                                                                                                                                                                                                                                                                              (setnth
                                                                                                                                                                                                                                                                                                                                               (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                                              (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                             level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                             level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                       (bslr1!1),
                                                                                                                                                                                                    minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                               (bslr1!1),
                                                                                                                                                                                            minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                  (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                              (bslr1!1),
                                                                                                                                                           minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                        (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                                         level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (expand "list2array") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                         (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                 WITH [(v!1)
                                                                                                                                                                                                                                                         := 2 *
                                                                                                                                                                                                                                                             list2array(0)
                                                                                                                                                                                                                                                                       (setnth
                                                                                                                                                                                                                                                                        (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                       (v!1)
                                                                                                                                                                                                                                                             - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (expand "list2array") (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                         (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                 WITH [(v!1)
                                                                                                                                                                                                                                                         := 2 *
                                                                                                                                                                                                                                                             list2array(0)
                                                                                                                                                                                                                                                                       (setnth
                                                                                                                                                                                                                                                                        (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                                                       (v!1)
                                                                                                                                                                                                                                                             - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                                         (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                 level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                 level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((translist_polylist_id formula-decl nil util nil) (combine const-decl "Outminmax" minmax nil) (outminmax_translate const-decl "Outminmax" minmax nil) (length_eq? const-decl "bool" minmax nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (interval_between? const-decl "bool" util nil) (Vars type-eq-decl nil util nil) (forall_X_between const-decl "bool" multi_bernstein nil) (unitbox? const-decl "bool" util nil) (combine_l const-decl "Outminmax" minmax nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (combine_r const-decl "Outminmax" minmax nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) nil (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-2 nil 3508085494 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst? -1) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_this!1(v!1, bslr1!1, minmax!1)" "terms!1") (("1" (replaces -3 :dir rl) (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                           (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                                       (bslr1!1),
                                                                                                                                                                                                                    minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                     (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                       level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (expand "list2array") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                   (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                             WITH [(v!1)
                                                                                                                                                                                                                                                                                                     := 2 *
                                                                                                                                                                                                                                                                                                         list2array(0)
                                                                                                                                                                                                                                                                                                                   (setnth
                                                                                                                                                                                                                                                                                                                    (bslr1!1`lb_var,
                                                                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                                                                     LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                   (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (expand "list2array") (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_left_def") (("3" (inst - "list2array(0)
                                                                                                                                                                                                                                                   (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("3" (case "(list2array(0)
                                                                                                                                                                                                                                                                                                     (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                             v!1,
                                                                                                                                                                                                                                                                                                             LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                             WITH [(v!1)
                                                                                                                                                                                                                                                                                                     := 2 *
                                                                                                                                                                                                                                                                                                         list2array(0)
                                                                                                                                                                                                                                                                                                                   (setnth
                                                                                                                                                                                                                                                                                                                    (bslr1!1`ub_var,
                                                                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                                                                     LAMBDA (x: real): x / 2))
                                                                                                                                                                                                                                                                                                                   (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                           level!1, intendpts!1)") (("4" (expand "sound?" -1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                           level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                  (bslr1!1),
                                                                                                                                                                               minmax!1)") (("2" (hide-all-but (-6 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                            (bslr1!1),
                                                                                                                                                                         minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                 (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                             (bslr1!1),
                                                                                                                                          minmax!1))") (("1" (hide 6) (("1" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                     (bslr1!1)) AND length_eq?(nvars!1)(minmax!1)") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                                                                                                                       level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide "lengthlems") (("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (expand "list2array") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                              (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                      WITH [(v!1)
                                                                                                                                                                                                                              := 2 *
                                                                                                                                                                                                                                  list2array(0)
                                                                                                                                                                                                                                            (setnth
                                                                                                                                                                                                                                             (bslr1!1`lb_var,
                                                                                                                                                                                                                                              v!1,
                                                                                                                                                                                                                                              LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                            (v!1)
                                                                                                                                                                                                                                  - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (expand "list2array") (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "outminmax_translate") (("3" (assert) (("3" (expand "length_eq?") (("3" (assert) (("3" (hide -4) (("3" (hide -4) (("3" (lemma "Bern_eval_right_def") (("3" (case "(list2array(0)
                                                                                                                                                                                                                              (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                      WITH [(v!1)
                                                                                                                                                                                                                              := 2 *
                                                                                                                                                                                                                                  list2array(0)
                                                                                                                                                                                                                                            (setnth
                                                                                                                                                                                                                                             (bslr1!1`ub_var,
                                                                                                                                                                                                                                              v!1,
                                                                                                                                                                                                                                              LAMBDA (x: real): (1 + x) / 2))
                                                                                                                                                                                                                                            (v!1)
                                                                                                                                                                                                                                  - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                                                                                                                                                         v!1,
                                                                                                                                                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bp!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide "lengthlems") (("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                               level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred "Bern_coeffs_minmax(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                               level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (typepred "bslr1!1") (("2" (typepred "minmax!1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 2)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 2)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 2)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 2)) (("4" (grind) nil nil)) nil) ("5" (hide-all-but (-2 2)) (("5" (grind) nil nil)) nil) ("6" (hide-all-but (-2 2)) (("6" (grind) nil nil)) nil) ("7" (hide-all-but (-2 2)) (("7" (grind) nil nil)) nil) ("8" (hide-all-but (-2 2)) (("8" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (typepred "setnth(ll, zz, ff)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((translist_polylist_id formula-decl nil util nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (Vars type-eq-decl nil util nil) (forall_X_between const-decl "bool" multi_bernstein nil) (unitbox? const-decl "bool" util nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) nil (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC6-1 nil 3507233025 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (skosimp*) (("1" (case "multibs_eval(LAMBDA (k: nat):
                         Bern_split_left_mono(bspoly!1(k), bsdegmono!1)(v!1),
                       bsdegmono!1, cf!1, nvars!1, terms!1) = multibs_eval(spleft!1,
                       bsdegmono!1, cf!1, nvars!1, terms!1)") (("1" (label "spleftname2" -1) (("1" (hide "spleftname2") (("1" (case "multibs_eval(LAMBDA (k: nat):
                         Bern_split_right_mono(bspoly!1(k), bsdegmono!1)(v!1),
                       bsdegmono!1, cf!1, nvars!1, terms!1) = multibs_eval(spright!1,
                       bsdegmono!1, cf!1, nvars!1, terms!1)") (("1" (label "sprightname2" -1) (("1" (hide "sprightname2") (("1" (lemma "Bern_coeffs_minmax_id") (("1" (inst - "bsdegmono!1" "bspoly!1" "cf!1" "intendpts!1" "level!1" "nvars!1" "terms!1") (("1" (replace -2 -1 :dir rl) (("1" (assert) (("1" (replace -3 -1 :dir rl) (("1" (label "minmaxname2" -1) (("1" (hide "minmaxname2") (("1" (typepred "bslr1!1") (("1" (case "varsel!1`1") (("1" (assert) (("1" (hide -1) (("1" (replace -16) (("1" (replace -15) (("1" (replace -14) (("1" (replace -12) (("1" (replace -11) (("1" (expand "combine_l" +) (("1" (case "NOT sound?(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                    (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                (bslr1!1),
                                                                                                                             minmax!1))") (("1" (hide 6) (("1" (rewrite "combine_sound") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (reveal "minmaxname2") (("1" (typepred "Bern_coeffs_minmax(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                               level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (hide -2) (("1" (hide -2) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (expand "outminmax_translate") (("1" (expand "list2array") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -14) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (expand "length_eq?") (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (assert) (("3" (replace -13) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (expand "length_eq?") (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (assert) (("4" (replace -14) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "outminmax_translate") (("5" (assert) (("5" (expand "length_eq?") (("5" (assert) (("5" (hide -4) (("5" (hide -4) (("5" (lemma "Bern_eval_left_def") (("5" (inst - "list2array(0)
                                                                                                                             (setnth(bslr1!1`lb_var,
                                                                                                                                     v!1,
                                                                                                                                     LAMBDA (x: real): x / 2))" "bsdegmono!1" "bspoly!1" "cf!1" "nvars!1" "terms!1" "v!1") (("5" (case "(list2array(0)
                                                                                                                                                      (setnth(bslr1!1`lb_var,
                                                                                                                                                              v!1,
                                                                                                                                                              LAMBDA (x: real): x / 2))
                                                                                                                                              WITH [(v!1)
                                                                                                                                                      := 2 *
                                                                                                                                                          list2array(0)
                                                                                                                                                                    (setnth
                                                                                                                                                                     (bslr1!1`lb_var,
                                                                                                                                                                      v!1,
                                                                                                                                                                      LAMBDA (x: real): x / 2))
                                                                                                                                                                    (v!1)]) = list2array(0)(bslr1!1`lb_var)") (("1" (reveal "spleftname2") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (expand "list2array") (("1" (assert) (("1" (replace -8) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (hide -5) (("2" (replace -13) (("2" (assert) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -13) (("3" (hide -5) (("3" (replace -14) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (inst - "iup!1") (("3" (assert) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -12) (("4" (replace -14) (("4" (assert) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "outminmax_translate") (("5" (assert) (("5" (expand "length_eq?") (("5" (assert) (("5" (hide -4) (("5" (hide -4) (("5" (lemma "Bern_eval_left_def") (("5" (inst - "list2array(0)
                                                                                                                             (setnth(bslr1!1`ub_var,
                                                                                                                                     v!1,
                                                                                                                                     LAMBDA (x: real): x / 2))" "bsdegmono!1" "bspoly!1" "cf!1" "nvars!1" "terms!1" "v!1") (("5" (case "(list2array(0)
                                                                                                                                                      (setnth(bslr1!1`ub_var,
                                                                                                                                                              v!1,
                                                                                                                                                              LAMBDA (x: real): x / 2))
                                                                                                                                              WITH [(v!1)
                                                                                                                                                      := 2 *
                                                                                                                                                          list2array(0)
                                                                                                                                                                    (setnth
                                                                                                                                                                     (bslr1!1`ub_var,
                                                                                                                                                                      v!1,
                                                                                                                                                                      LAMBDA (x: real): x / 2))
                                                                                                                                                                    (v!1)]) = list2array(0)(bslr1!1`ub_var)") (("1" (reveal "spleftname2") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (reveal "minmaxname2") (("4" (typepred "Bern_coeffs_minmax(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                   level!1, intendpts!1)") (("4" (replace "minmaxname2") (("4" (expand "sound?" -1) (("4" (propax) nil nil)) nil)) nil)) nil)) nil) ("5" (reveal "minmaxname2") (("5" (typepred "Bern_coeffs_minmax(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                   level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "mc11" "combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                           (bslr1!1),
                                                                        minmax!1)") (("2" (replace -1) (("2" (hide-all-but (-2 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 1) (("2" (replace -16) (("2" (replace -15) (("2" (replace -14) (("2" (replace -12) (("2" (replace -11) (("2" (expand "combine_r" +) (("2" (case "NOT sound?(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                          (combine(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                      (bslr1!1),
                                                   minmax!1))") (("1" (hide 6) (("1" (rewrite "combine_sound") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): False") (("1" (skosimp*) (("1" (reveal "minmaxname2") (("1" (typepred "Bern_coeffs_minmax(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                                                                                                               level!1, intendpts!1)") (("1" (hide 2) (("1" (expand "sound?") (("1" (flatten) (("1" (expand "forall_X_between") (("1" (inst - "X!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "sound?") (("2" (flatten) (("2" (hide -1) (("2" (hide -2) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (assert) (("2" (case "cons?(bslr1!1`lb_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -14) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (expand "list2array") (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (assert) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -15) (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (replace -15) (("3" (flatten) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (replace -15) (("4" (flatten) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "outminmax_translate") (("5" (assert) (("5" (expand "length_eq?") (("5" (assert) (("5" (hide -4) (("5" (hide -4) (("5" (lemma "Bern_eval_right_def") (("5" (case "(list2array(0)
                                                                               (setnth(bslr1!1`lb_var,
                                                                                       v!1,
                                                                                       LAMBDA (x: real): (1 + x) / 2))
                                                                       WITH [(v!1)
                                                                               := 2 *
                                                                                   list2array(0)
                                                                                             (setnth
                                                                                              (bslr1!1`lb_var,
                                                                                               v!1,
                                                                                               LAMBDA (x: real): (1 + x) / 2))
                                                                                             (v!1)
                                                                                   - 1]) = list2array(0)(bslr1!1`lb_var)") (("1" (inst - "list2array(0)
                                                                                                                                 (setnth(bslr1!1`lb_var,
                                                                                                                                         v!1,
                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bspoly!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (reveal "sprightname2") (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (expand "sound?") (("3" (flatten) (("3" (hide -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (flatten) (("3" (assert) (("3" (case "cons?(bslr1!1`ub_var)") (("1" (assert) (("1" (flatten) (("1" (split +) (("1" (expand "outminmax_translate") (("1" (replace -3) (("1" (assert) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "iup!1") (("2" (flatten) (("2" (split +) (("1" (flatten) (("1" (replace -16) (("1" (expand "outminmax_translate") (("1" (expand "length_eq?") (("1" (flatten) (("1" (assert) (("1" (expand "list2array") (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "iup!1") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -15) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (expand "list2array") (("2" (assert) (("2" (assert) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (replace -16) (("3" (expand "outminmax_translate") (("3" (expand "length_eq?") (("3" (expand "list2array") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (inst - "iup!1") (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (replace -15) (("4" (expand "outminmax_translate") (("4" (expand "length_eq?") (("4" (expand "list2array") (("4" (assert) (("4" (assert) (("4" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("4" (inst - "iup!1") (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "outminmax_translate") (("5" (assert) (("5" (expand "length_eq?") (("5" (assert) (("5" (hide -4) (("5" (hide -4) (("5" (lemma "Bern_eval_right_def") (("5" (case "(list2array(0)
                                                                               (setnth(bslr1!1`ub_var,
                                                                                       v!1,
                                                                                       LAMBDA (x: real): (1 + x) / 2))
                                                                       WITH [(v!1)
                                                                               := 2 *
                                                                                   list2array(0)
                                                                                             (setnth
                                                                                              (bslr1!1`ub_var,
                                                                                               v!1,
                                                                                               LAMBDA (x: real): (1 + x) / 2))
                                                                                             (v!1)
                                                                                   - 1]) = list2array(0)(bslr1!1`ub_var)") (("1" (inst - "list2array(0)
                                                                                                                                 (setnth(bslr1!1`ub_var,
                                                                                                                                         v!1,
                                                                                                                                         LAMBDA (x: real): (1 + x) / 2))" "bsdegmono!1" "bspoly!1" "cf!1" "nvars!1" "terms!1" "v!1") (("1" (reveal "sprightname2") (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (hide -1) (("2" (decompose-equality 1) (("2" (lift-if 1) (("2" (split +) (("1" (flatten) (("1" (expand "list2array") (("1" (lift-if) (("1" (assert) (("1" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "list2array") (("2" (assert) (("2" (lift-if) (("2" (replace -3) (("2" (reveal "setnthlength") (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (hide -1) (("2" (replace -3) (("2" (lift-if +) (("2" (ground) (("2" (typepred "setnth(bslr1!1`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "x!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (expand "length_eq?") (("2" (hide -2) (("2" (assert) (("2" (lift-if -1) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (expand "sound?") (("4" (flatten) (("4" (hide -1) (("4" (hide -2) (("4" (reveal "minmaxname2") (("4" (typepred "Bern_coeffs_minmax(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                       level!1, intendpts!1)") (("4" (expand "sound?") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (reveal "minmaxname2") (("5" (typepred "Bern_coeffs_minmax(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1,
                                       level!1, intendpts!1)") (("5" (expand "sound?") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 5)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (split +) (("1" (hide -1) (("1" (hide -2) (("1" (hide -2) (("1" (expand "unit_box_lb?") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "unit_box_ub?") (("2" (propax) nil nil)) nil) ("3" (expand "length_eq?") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -6) (("2" (decompose-equality 1) (("2" (case "v!1>=0") (("1" (hide-all-but (-1 -2 1)) (("1" (expand "multibs_eval") (("1" (rewrite "sigma_eq") (("1" (hide 2) (("1" (skosimp*) (("1" (case "bsproduct_eval(Bern_split_right_mono(bspoly!1(n!1), bsdegmono!1)
                                           (v!1),
                      bsdegmono!1, nvars!1)
                     (x!1)
       =
        bsproduct_eval(Bern_split_right_mono(bp!1(n!1), bsdegmono!1)(v!1),
                       bsdegmono!1, nvars!1)
                      (x!1)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (expand "bsproduct_eval") (("2" (rewrite "product_eq") (("1" (hide 2) (("1" (skosimp*) (("1" (rewrite "sigma_eq") (("1" (hide 2) (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (expand "Bern_split_right_mono") (("1" (lift-if +) (("1" (split +) (("1" (flatten) (("1" (inst?) (("1" (inst - "n!1" "n!2" "n!3") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) nil nil (Bernstein_minmax_rec subtype "bernstein_minmax.combine_this(bernstein_minmax.v, bernstein_minmax.bslr1, bernstein_minmax.minmax)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))"))) (Bernstein_minmax_rec_TCC8 0 (Bernstein_minmax_rec_TCC8-1 "" 3884309298 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                   (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                               (bslrleft!1),
                                                                                                                                                            outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                               (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                 (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                           (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                             bsdegmono!1)
                                                                                                                                                                                                                                                                                            (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                                                                                  terms!1,
                                                                                                                                                                                                                                                  cf!1,
                                                                                                                                                                                                                                                  depth!1,
                                                                                                                                                                                                                                                  level1!1,
                                                                                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                                                                                  nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (name-replace "nn" "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (name-replace "n1" "nth(nn, iup!1)") (("1" (name-replace "n2" "nth[real](rr1`lb_var, iup!1)") (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (name-replace "nn" "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (name-replace "n1" "nth(nn, iup!1)") (("2" (name-replace "n2" "nth[real](rr1`lb_var, iup!1)") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (name-replace "nn" "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (name-replace "n1" "nth(nn, iup!1)") (("3" (name-replace "n2" "nth[real](rr1`lb_var, iup!1)") (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (name-replace "nn" "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("4" (name-replace "n1" "nth(nn, iup!1)") (("4" (name-replace "n2" "nth[real](rr1`lb_var, iup!1)") (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                             nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (name-replace "nn" "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (name-replace "n1" "nth(nn, iup!1)") (("1" (name-replace "n2" "nth[real](rr2`ub_var, iup!1)") (("1" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (name-replace "nn" "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (name-replace "n1" "nth(nn, iup!1)") (("1" (name-replace "n2" "nth[real](rr1`lb_var, iup!1)") (("1" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                       (LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],
                                                                                                                                                                                                        varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (name-replace "nn" "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (name-replace "n1" "nth(nn, iup!1)") (("1" (name-replace "n2" "nth[real](rr2`ub_var, iup!1)") (("1" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                     (LAMBDA
                                                                                                                                                                      (k: nat):
                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                      nvars!1,
                                                                                                                                                                      terms!1,
                                                                                                                                                                      cf!1,
                                                                                                                                                                      depth!1,
                                                                                                                                                                      level1!1,
                                                                                                                                                                      localexit!1,
                                                                                                                                                                      globalexit!1,
                                                                                                                                                                      intendpts!1
                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                      varselect!1,
                                                                                                                                                                      nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                    (LAMBDA
                                                                                                                                                                     (k: nat):
                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                     nvars!1,
                                                                                                                                                                     terms!1,
                                                                                                                                                                     cf!1,
                                                                                                                                                                     depth!1,
                                                                                                                                                                     level1!1,
                                                                                                                                                                     localexit!1,
                                                                                                                                                                     globalexit!1,
                                                                                                                                                                     intendpts!1
                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                     varselect!1,
                                                                                                                                                                     nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil) ("6" (assert) nil nil) ("7" (reveal "level" "depth") (("7" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((real_times_real_is_real application-judgement "real" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (translist_polylist_id formula-decl nil util nil) (TRUE const-decl "bool" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nvars!1 skolem-const-decl "posnat" bernstein_minmax nil) (v!1 skolem-const-decl "{x: {k | abs(k) < abs(nvars!1)} | x < nvars!1}" bernstein_minmax nil) (combine_lr const-decl "Outminmax" minmax nil) (Outminmax type-eq-decl nil minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (sound? const-decl "bool" bernstein_minmax nil) (combine const-decl "Outminmax" minmax nil) (outminmax_translate const-decl "Outminmax" minmax nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (combine_sound formula-decl nil bernstein_minmax nil) (real_plus_real_is_real application-judgement "real" reals nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (real_minus_real_is_real application-judgement "real" reals nil) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval const-decl "real" multi_bernstein nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (unitbox? const-decl "bool" util nil) (Vars type-eq-decl nil util nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (unit_box_lb? const-decl "bool" bernstein_minmax nil) (list2array_sound formula-decl nil array2list structures) (rr1 skolem-const-decl "(sound?(LAMBDA (k: nat): Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
        bsdegmono!1, nvars!1, terms!1, cf!1,
        intendpts!1 WITH [(v!1)`2 := TRUE]))" bernstein_minmax nil) (intendpts!1 skolem-const-decl "IntervalEndpoints" bernstein_minmax nil) (cf!1 skolem-const-decl "Coeff" bernstein_minmax nil) (terms!1 skolem-const-decl "posnat" bernstein_minmax nil) (bsdegmono!1 skolem-const-decl "DegreeMono" bernstein_minmax nil) (bp!1 skolem-const-decl "[nat -> [nat -> [nat -> real]]]" bernstein_minmax nil) (XYZ skolem-const-decl "[nat -> real]" bernstein_minmax nil) (x!1 skolem-const-decl "nat" bernstein_minmax nil) (list2array_sound_pi formula-decl nil bernstein_minmax nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (interval_between? const-decl "bool" util nil) (unit_box_ub? const-decl "bool" bernstein_minmax nil) (rr2 skolem-const-decl "(sound?(LAMBDA (k: nat): Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
        bsdegmono!1, nvars!1, terms!1, cf!1,
        intendpts!1 WITH [(v!1)`2 := TRUE]))" bernstein_minmax nil) (XYZ skolem-const-decl "[nat -> real]" bernstein_minmax nil) (x!1 skolem-const-decl "nat" bernstein_minmax nil) (rr1 skolem-const-decl "(sound?(LAMBDA (k: nat): Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
        bsdegmono!1, nvars!1, terms!1, cf!1,
        intendpts!1 WITH [(v!1)`1 := TRUE]))" bernstein_minmax nil) (XYZ skolem-const-decl "[nat -> real]" bernstein_minmax nil) (x!1 skolem-const-decl "nat" bernstein_minmax nil) (rr2 skolem-const-decl "(sound?(LAMBDA (k: nat): Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
        bsdegmono!1, nvars!1, terms!1, cf!1,
        intendpts!1 WITH [(v!1)`1 := TRUE]))" bernstein_minmax nil) (XYZ skolem-const-decl "[nat -> real]" bernstein_minmax nil) (x!1 skolem-const-decl "nat" bernstein_minmax nil) (length_eq? const-decl "bool" minmax nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "below(m)" mod nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (posint nonempty-type-eq-decl nil integers nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (VarSelector type-eq-decl nil vardirselector nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (sound_id formula-decl nil bernstein_minmax nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (listn type-eq-decl nil listn structures) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) shostak (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-14 "" 3790097983 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                   (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                               (bslrleft!1),
                                                                                                                                                            outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                               (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                 (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                           (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                             bsdegmono!1)
                                                                                                                                                                                                                                                                                            (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                                                                                  terms!1,
                                                                                                                                                                                                                                                  cf!1,
                                                                                                                                                                                                                                                  depth!1,
                                                                                                                                                                                                                                                  level1!1,
                                                                                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                                                                                  nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                             nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                       (LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],
                                                                                                                                                                                                        varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                     (LAMBDA
                                                                                                                                                                      (k: nat):
                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                      nvars!1,
                                                                                                                                                                      terms!1,
                                                                                                                                                                      cf!1,
                                                                                                                                                                      depth!1,
                                                                                                                                                                      level1!1,
                                                                                                                                                                      localexit!1,
                                                                                                                                                                      globalexit!1,
                                                                                                                                                                      intendpts!1
                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                      varselect!1,
                                                                                                                                                                      nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                    (LAMBDA
                                                                                                                                                                     (k: nat):
                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                     nvars!1,
                                                                                                                                                                     terms!1,
                                                                                                                                                                     cf!1,
                                                                                                                                                                     depth!1,
                                                                                                                                                                     level1!1,
                                                                                                                                                                     localexit!1,
                                                                                                                                                                     globalexit!1,
                                                                                                                                                                     intendpts!1
                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                     varselect!1,
                                                                                                                                                                     nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil) ("6" (assert) nil nil) ("7" (reveal "level" "depth") (("7" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((translist_polylist_id formula-decl nil util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (combine_lr const-decl "Outminmax" minmax nil) (Outminmax type-eq-decl nil minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (combine const-decl "Outminmax" minmax nil) (outminmax_translate const-decl "Outminmax" minmax nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval const-decl "real" multi_bernstein nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (unitbox? const-decl "bool" util nil) (Vars type-eq-decl nil util nil) (list2array_sound formula-decl nil array2list structures) (interval_between? const-decl "bool" util nil) (length_eq? const-decl "bool" minmax nil) (le_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (VarSelector type-eq-decl nil vardirselector nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) shostak (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-13 "[mmoscato] I took the original proof and replaced every (expand \"list2array\") with these strategies: (then (auto-rewrite \"list2array_sound\")(assert)) when the function list2array was fully instantiated, and  (then (auto-rewrite \"list2array_sound_pi\")(assert)) when it wasn't. " 3614592592 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                   (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                               (bslrleft!1),
                                                                                                                                                            outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                               (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                 (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                           (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                             bsdegmono!1)
                                                                                                                                                                                                                                                                                            (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                                                                                  terms!1,
                                                                                                                                                                                                                                                  cf!1,
                                                                                                                                                                                                                                                  depth!1,
                                                                                                                                                                                                                                                  level1!1,
                                                                                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                                                                                  nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                             nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                       (LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],
                                                                                                                                                                                                        varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                     (LAMBDA
                                                                                                                                                                      (k: nat):
                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                      nvars!1,
                                                                                                                                                                      terms!1,
                                                                                                                                                                      cf!1,
                                                                                                                                                                      depth!1,
                                                                                                                                                                      level1!1,
                                                                                                                                                                      localexit!1,
                                                                                                                                                                      globalexit!1,
                                                                                                                                                                      intendpts!1
                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                      varselect!1,
                                                                                                                                                                      nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                    (LAMBDA
                                                                                                                                                                     (k: nat):
                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                     nvars!1,
                                                                                                                                                                     terms!1,
                                                                                                                                                                     cf!1,
                                                                                                                                                                     depth!1,
                                                                                                                                                                     level1!1,
                                                                                                                                                                     localexit!1,
                                                                                                                                                                     globalexit!1,
                                                                                                                                                                     intendpts!1
                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                     varselect!1,
                                                                                                                                                                     nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil) ("6" (assert) nil nil) ("7" (reveal "level" "depth") (("7" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((translist_polylist_id formula-decl nil util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (combine_lr const-decl "Outminmax" minmax nil) (Outminmax type-eq-decl nil minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (combine const-decl "Outminmax" minmax nil) (outminmax_translate const-decl "Outminmax" minmax nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval const-decl "real" multi_bernstein nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (unitbox? const-decl "bool" util nil) (Vars type-eq-decl nil util nil) (list2array_sound formula-decl nil array2list structures) (interval_between? const-decl "bool" util nil) (length_eq? const-decl "bool" minmax nil) (le_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (VarSelector type-eq-decl nil vardirselector nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) shostak (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-12 "[mmoscato] It only rests to close the branchs where list2array appears partially instantiated." 3614592294 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                   (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                               (bslrleft!1),
                                                                                                                                                            outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                               (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                 (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                           (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                             bsdegmono!1)
                                                                                                                                                                                                                                                                                            (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                                                                                  terms!1,
                                                                                                                                                                                                                                                  cf!1,
                                                                                                                                                                                                                                                  depth!1,
                                                                                                                                                                                                                                                  level1!1,
                                                                                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                                                                                  nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound_pi") (assert)) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (reveal "v") (("3" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                             nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound_pi") (assert)) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound_pi") (assert)) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                       (LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],
                                                                                                                                                                                                        varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound_pi") (assert)) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                     (LAMBDA
                                                                                                                                                                      (k: nat):
                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                      nvars!1,
                                                                                                                                                                      terms!1,
                                                                                                                                                                      cf!1,
                                                                                                                                                                      depth!1,
                                                                                                                                                                      level1!1,
                                                                                                                                                                      localexit!1,
                                                                                                                                                                      globalexit!1,
                                                                                                                                                                      intendpts!1
                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                      varselect!1,
                                                                                                                                                                      nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                    (LAMBDA
                                                                                                                                                                     (k: nat):
                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                     nvars!1,
                                                                                                                                                                     terms!1,
                                                                                                                                                                     cf!1,
                                                                                                                                                                     depth!1,
                                                                                                                                                                     level1!1,
                                                                                                                                                                     localexit!1,
                                                                                                                                                                     globalexit!1,
                                                                                                                                                                     intendpts!1
                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                     varselect!1,
                                                                                                                                                                     nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) ((setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures) (listn type-eq-decl nil listn structures) (MultiBernstein type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (length_eq? const-decl "bool" minmax nil) (interval_between? const-decl "bool" util nil) (list2array_sound formula-decl nil array2list structures) (Vars type-eq-decl nil util nil) (unitbox? const-decl "bool" util nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (multibs_eval const-decl "real" multi_bernstein nil) (forall_X_between const-decl "bool" multi_bernstein nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (outminmax_translate const-decl "Outminmax" minmax nil) (combine const-decl "Outminmax" minmax nil) (Coeff type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Outminmax type-eq-decl nil minmax nil) (combine_lr const-decl "Outminmax" minmax nil) (translist_polylist_id formula-decl nil util nil)) nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-11 "[mmoscato] It only rests to close the branchs where list2array appears partially instantiated." 3614527744 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                                (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                            (bslrleft!1),
                                                                                                                                                                                                         outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                            (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                                                                    (v1!1
                                                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_left_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`2 := true],
                                                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                                                      nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                                                      nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                                   ((v1!1
                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                      Bern_split_left_mono
                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                      WITH [v!1`2 := true],
                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                      nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                                   ((v1!1
                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                      nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                        Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                                            (v!1),
                                                                                                                                                                                                                                                                                                                                                      bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                                                      depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                                                                                                                        WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                                                                      varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                    Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                                  bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                                 (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                        Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                                             (v!1),
                                                                                                                                                                                                                                                                                                                                                      bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                                                      depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                                                                                                                        WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                                                                                                      varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                    Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                                  bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                                 (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                                                                                      (LAMBDA
                                                                                                                                                                                                                                                                                                                       (k: nat):
                                                                                                                                                                                                                                                                                                                       Bern_split_left_mono
                                                                                                                                                                                                                                                                                                                       (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                       bsdegmono!1,
                                                                                                                                                                                                                                                                                                                       nvars!1,
                                                                                                                                                                                                                                                                                                                       terms!1,
                                                                                                                                                                                                                                                                                                                       cf!1,
                                                                                                                                                                                                                                                                                                                       depth!1,
                                                                                                                                                                                                                                                                                                                       level1!1,
                                                                                                                                                                                                                                                                                                                       localexit!1,
                                                                                                                                                                                                                                                                                                                       globalexit!1,
                                                                                                                                                                                                                                                                                                                       intendpts!1
                                                                                                                                                                                                                                                                                                                       WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                                       varselect!1,
                                                                                                                                                                                                                                                                                                                       nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (eta "[nat -> real]") (("3" (inst -1 "list2array(0)(rr1`lb_var)") (("3" (replace -1 -3 :dir RL :hide? t) (("3" (postpone) nil))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                                                                                                                                  terms!1,
                                                                                                                                                                                                                                                                                                  cf!1,
                                                                                                                                                                                                                                                                                                  depth!1,
                                                                                                                                                                                                                                                                                                  level1!1,
                                                                                                                                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                                                                                                                                  nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat): IF i < nvars!1 THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                                                                          i)
                                                                                                                                                                                                                                                                                                                                                               ELSE 0
                                                                                                                                                                                                                                                                                                                                                               ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                                                       IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                                               Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                                                             bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                                                            ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                                                                             WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                                                                             nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                               IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                                                 THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                                                          i)
                                                                                                                                                                                                                                                                                                                                                               ELSE 0
                                                                                                                                                                                                                                                                                                                                                               ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                                                       IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                                               Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                                                             bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                                                            ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                                                                                            (LAMBDA
                                                                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                                                                             nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound_pi") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                               IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                                                 THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                                                 v!1,
                                                                                                                                                                                                                                                                                                                                                                                 LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                                                          i)
                                                                                                                                                                                                                                                                                                                                                               ELSE 0
                                                                                                                                                                                                                                                                                                                                                               ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                                                       IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                                               Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                                                             bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                                                            ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_right_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`1 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                                                                                   (LAMBDA
                                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                                    Bern_split_left_mono
                                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                                    WITH [v!1`2 := true],
                                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                                    nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-10 "[mmoscato] It only rests to close the branchs where list2array appears partially instantiated." 3614526978 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                 (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                             (bslrleft!1),
                                                                                                                                                                                          outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                             (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                                                   (v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_right_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`1 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                ((v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                ((v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                             Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                 (v!1),
                                                                                                                                                                                                                                                                                                                           bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                           depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                                           varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                     Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                  (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                             Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                  (v!1),
                                                                                                                                                                                                                                                                                                                           bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                           depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                                                                           varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                     Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                  (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                                                                                                                                (k: nat):
                                                                                                                                                                                                                                                                                                Bern_split_left_mono
                                                                                                                                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                                                                                                                                nvars!1,
                                                                                                                                                                                                                                                                                                terms!1,
                                                                                                                                                                                                                                                                                                cf!1,
                                                                                                                                                                                                                                                                                                depth!1,
                                                                                                                                                                                                                                                                                                level1!1,
                                                                                                                                                                                                                                                                                                localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                varselect!1,
                                                                                                                                                                                                                                                                                                nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (eta "[nat -> real]") (("3" (inst -1 "list2array(0)(rr1`lb_var)") (("3" (replace -1 -3 :dir RL :hide? t) (("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                                                                           (k: nat):
                                                                                                                                                                                                                                                                           Bern_split_left_mono
                                                                                                                                                                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                                                                                                                           nvars!1,
                                                                                                                                                                                                                                                                           terms!1,
                                                                                                                                                                                                                                                                           cf!1,
                                                                                                                                                                                                                                                                           depth!1,
                                                                                                                                                                                                                                                                           level1!1,
                                                                                                                                                                                                                                                                           localexit!1,
                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                           WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                           varselect!1,
                                                                                                                                                                                                                                                                           nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                                                      nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                                                      nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                                                (k: nat):
                                                                                                                                                                                                                Bern_split_right_mono
                                                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                                                nvars!1,
                                                                                                                                                                                                                terms!1,
                                                                                                                                                                                                                cf!1,
                                                                                                                                                                                                                depth!1,
                                                                                                                                                                                                                level1!1,
                                                                                                                                                                                                                localexit!1,
                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                WITH [v!1`1 := true],
                                                                                                                                                                                                                varselect!1,
                                                                                                                                                                                                                nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                                                              (LAMBDA
                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                               Bern_split_left_mono
                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                               WITH [v!1`2 := true],
                                                                                                                                                                                                               varselect!1,
                                                                                                                                                                                                               nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil) ("6" (assert) nil nil) ("7" (reveal "level" "depth") (("7" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) nil shostak (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-9 "[mmoscato] Several branches were closed by replacing (expand \"list2array\") by (then (auto-rewrite \"list2array_sound\")(assert))" 3614515251 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                 (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                             (bslrleft!1),
                                                                                                                                                                                          outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                             (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                                                   (v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_right_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`1 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                ((v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                ((v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                             Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                 (v!1),
                                                                                                                                                                                                                                                                                                                           bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                           depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                                           varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                     Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                  (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                             Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                  (v!1),
                                                                                                                                                                                                                                                                                                                           bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                           depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                                                                           varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                     Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                  (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                                                                                                                                (k: nat):
                                                                                                                                                                                                                                                                                                Bern_split_left_mono
                                                                                                                                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                                                                                                                                nvars!1,
                                                                                                                                                                                                                                                                                                terms!1,
                                                                                                                                                                                                                                                                                                cf!1,
                                                                                                                                                                                                                                                                                                depth!1,
                                                                                                                                                                                                                                                                                                level1!1,
                                                                                                                                                                                                                                                                                                localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                varselect!1,
                                                                                                                                                                                                                                                                                                nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (reveal "v") (("3" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                                                                           (k: nat):
                                                                                                                                                                                                                                                                           Bern_split_left_mono
                                                                                                                                                                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                                                                                                                           nvars!1,
                                                                                                                                                                                                                                                                           terms!1,
                                                                                                                                                                                                                                                                           cf!1,
                                                                                                                                                                                                                                                                           depth!1,
                                                                                                                                                                                                                                                                           level1!1,
                                                                                                                                                                                                                                                                           localexit!1,
                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                           WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                           varselect!1,
                                                                                                                                                                                                                                                                           nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                                                      nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                                                      nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                                                (k: nat):
                                                                                                                                                                                                                Bern_split_right_mono
                                                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                                                nvars!1,
                                                                                                                                                                                                                terms!1,
                                                                                                                                                                                                                cf!1,
                                                                                                                                                                                                                depth!1,
                                                                                                                                                                                                                level1!1,
                                                                                                                                                                                                                localexit!1,
                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                WITH [v!1`1 := true],
                                                                                                                                                                                                                varselect!1,
                                                                                                                                                                                                                nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                                                              (LAMBDA
                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                               Bern_split_left_mono
                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                               WITH [v!1`2 := true],
                                                                                                                                                                                                               varselect!1,
                                                                                                                                                                                                               nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-8 "[mmoscato] Several branches were closed by replacing (expand \"list2array\") by (then (auto-rewrite \"list2array_sound\")(assert))" 3614515081 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                                 (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                             (bslrleft!1),
                                                                                                                                                                                          outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                             (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                                                   (v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                                                    (LAMBDA
                                                                                                                                                                                                                                     (k: nat):
                                                                                                                                                                                                                                     Bern_split_right_mono
                                                                                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                                                                                     nvars!1,
                                                                                                                                                                                                                                     terms!1,
                                                                                                                                                                                                                                     cf!1,
                                                                                                                                                                                                                                     depth!1,
                                                                                                                                                                                                                                     level1!1,
                                                                                                                                                                                                                                     localexit!1,
                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                     WITH [v!1`1 := true],
                                                                                                                                                                                                                                     varselect!1,
                                                                                                                                                                                                                                     nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                                ((v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                                ((v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                             Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                 (v!1),
                                                                                                                                                                                                                                                                                                                           bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                           depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                                           varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                     Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                  (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                             Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1)
                                                                                                                                                                                                                                                                                                                                                  (v!1),
                                                                                                                                                                                                                                                                                                                           bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                                           depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                                                                           varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                     Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                  (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                                                                                                                                (k: nat):
                                                                                                                                                                                                                                                                                                Bern_split_left_mono
                                                                                                                                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                                                                                                                                nvars!1,
                                                                                                                                                                                                                                                                                                terms!1,
                                                                                                                                                                                                                                                                                                cf!1,
                                                                                                                                                                                                                                                                                                depth!1,
                                                                                                                                                                                                                                                                                                level1!1,
                                                                                                                                                                                                                                                                                                localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                varselect!1,
                                                                                                                                                                                                                                                                                                nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (repeat (rewrite "list2array_sound")) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (repeat (rewrite "list2array_sound")) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (reveal "v") (("3" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                                                                           (k: nat):
                                                                                                                                                                                                                                                                           Bern_split_left_mono
                                                                                                                                                                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                                                                                                                           nvars!1,
                                                                                                                                                                                                                                                                           terms!1,
                                                                                                                                                                                                                                                                           cf!1,
                                                                                                                                                                                                                                                                           depth!1,
                                                                                                                                                                                                                                                                           level1!1,
                                                                                                                                                                                                                                                                           localexit!1,
                                                                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                                                                           WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                           varselect!1,
                                                                                                                                                                                                                                                                           nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (repeat (rewrite "list2array_sound")) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (repeat (rewrite "list2array_sound")) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                                                      nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (repeat (rewrite "list2array_sound")) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (repeat (rewrite "list2array_sound")) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                                                                     (LAMBDA
                                                                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                                                                      nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (repeat (rewrite "list2array_sound")) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (repeat (rewrite "list2array_sound")) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                    IF i < nvars!1
                                                                                                                                                                                                                                                                                                                                      THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                                                      v!1,
                                                                                                                                                                                                                                                                                                                                                      LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                                               i)
                                                                                                                                                                                                                                                                                                                                    ELSE 0
                                                                                                                                                                                                                                                                                                                                    ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                                                          IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                                                Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                                                              bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                                                             ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil))) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                                                (k: nat):
                                                                                                                                                                                                                Bern_split_right_mono
                                                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                                                nvars!1,
                                                                                                                                                                                                                terms!1,
                                                                                                                                                                                                                cf!1,
                                                                                                                                                                                                                depth!1,
                                                                                                                                                                                                                level1!1,
                                                                                                                                                                                                                localexit!1,
                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                WITH [v!1`1 := true],
                                                                                                                                                                                                                varselect!1,
                                                                                                                                                                                                                nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                                                              (LAMBDA
                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                               Bern_split_left_mono
                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                               WITH [v!1`2 := true],
                                                                                                                                                                                                               varselect!1,
                                                                                                                                                                                                               nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-7 "[mmoscato] Several branches were closed by replacing (expand \"list2array\") by (then (auto-rewrite \"list2array_sound\")(assert))" 3614514344 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                  (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                              (bslrleft!1),
                                                                                                                                                                           outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                              (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                                  (v1!1
                                                                                                                                                                                                                   (LAMBDA
                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                    Bern_split_left_mono
                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                    WITH [v!1`2 := true],
                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                    nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                                   (LAMBDA
                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                    Bern_split_right_mono
                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                    WITH [v!1`1 := true],
                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                    nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                             ((v1!1
                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                (k: nat):
                                                                                                                                                                                Bern_split_left_mono
                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                nvars!1,
                                                                                                                                                                                terms!1,
                                                                                                                                                                                cf!1,
                                                                                                                                                                                depth!1,
                                                                                                                                                                                level1!1,
                                                                                                                                                                                localexit!1,
                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                intendpts!1
                                                                                                                                                                                WITH [v!1`2 := true],
                                                                                                                                                                                varselect!1,
                                                                                                                                                                                nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                             ((v1!1
                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                (k: nat):
                                                                                                                                                                                Bern_split_right_mono
                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                nvars!1,
                                                                                                                                                                                terms!1,
                                                                                                                                                                                cf!1,
                                                                                                                                                                                depth!1,
                                                                                                                                                                                level1!1,
                                                                                                                                                                                localexit!1,
                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                intendpts!1
                                                                                                                                                                                WITH [v!1`1 := true],
                                                                                                                                                                                varselect!1,
                                                                                                                                                                                nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                                                      (v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                      Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                    bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                   (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                                                        bsdegmono!1)
                                                                                                                                                                                                                                                                                                                       (v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                  WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                                                varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                      Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                    bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                   (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                                        (LAMBDA
                                                                                                                                                                                                                                                                         (k: nat):
                                                                                                                                                                                                                                                                         Bern_split_left_mono
                                                                                                                                                                                                                                                                         (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                         bsdegmono!1,
                                                                                                                                                                                                                                                                         nvars!1,
                                                                                                                                                                                                                                                                         terms!1,
                                                                                                                                                                                                                                                                         cf!1,
                                                                                                                                                                                                                                                                         depth!1,
                                                                                                                                                                                                                                                                         level1!1,
                                                                                                                                                                                                                                                                         localexit!1,
                                                                                                                                                                                                                                                                         globalexit!1,
                                                                                                                                                                                                                                                                         intendpts!1
                                                                                                                                                                                                                                                                         WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                         varselect!1,
                                                                                                                                                                                                                                                                         nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                                                    Bern_split_left_mono
                                                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                                                    WITH [v!1`2 := true],
                                                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                                                    nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                                               Bern_split_right_mono
                                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                                               WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                               nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                                              (LAMBDA
                                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                                               Bern_split_right_mono
                                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                                               WITH [v!1`1 := true],
                                                                                                                                                                                                                               varselect!1,
                                                                                                                                                                                                                               nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (auto-rewrite "list2array_sound") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (auto-rewrite "list2array_sound") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                                          (LAMBDA
                                                                                                                                                                                           (k: nat):
                                                                                                                                                                                           Bern_split_right_mono
                                                                                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                                           nvars!1,
                                                                                                                                                                                           terms!1,
                                                                                                                                                                                           cf!1,
                                                                                                                                                                                           depth!1,
                                                                                                                                                                                           level1!1,
                                                                                                                                                                                           localexit!1,
                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                           WITH [v!1`1 := true],
                                                                                                                                                                                           varselect!1,
                                                                                                                                                                                           nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                                         (LAMBDA
                                                                                                                                                                                          (k: nat):
                                                                                                                                                                                          Bern_split_left_mono
                                                                                                                                                                                          (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                          bsdegmono!1,
                                                                                                                                                                                          nvars!1,
                                                                                                                                                                                          terms!1,
                                                                                                                                                                                          cf!1,
                                                                                                                                                                                          depth!1,
                                                                                                                                                                                          level1!1,
                                                                                                                                                                                          localexit!1,
                                                                                                                                                                                          globalexit!1,
                                                                                                                                                                                          intendpts!1
                                                                                                                                                                                          WITH [v!1`2 := true],
                                                                                                                                                                                          varselect!1,
                                                                                                                                                                                          nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil) ("6" (assert) nil nil) ("7" (reveal "level" "depth") (("7" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) nil shostak (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-6 "" 3614513968 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                                  (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                                              (bslrleft!1),
                                                                                                                                                                           outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                                              (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                                  (v1!1
                                                                                                                                                                                                                   (LAMBDA
                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                    Bern_split_left_mono
                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                    WITH [v!1`2 := true],
                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                    nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                                   (LAMBDA
                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                    Bern_split_right_mono
                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                    WITH [v!1`1 := true],
                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                    nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                             ((v1!1
                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                (k: nat):
                                                                                                                                                                                Bern_split_left_mono
                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                nvars!1,
                                                                                                                                                                                terms!1,
                                                                                                                                                                                cf!1,
                                                                                                                                                                                depth!1,
                                                                                                                                                                                level1!1,
                                                                                                                                                                                localexit!1,
                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                intendpts!1
                                                                                                                                                                                WITH [v!1`2 := true],
                                                                                                                                                                                varselect!1,
                                                                                                                                                                                nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                             ((v1!1
                                                                                                                                                                               (LAMBDA
                                                                                                                                                                                (k: nat):
                                                                                                                                                                                Bern_split_right_mono
                                                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                bsdegmono!1,
                                                                                                                                                                                nvars!1,
                                                                                                                                                                                terms!1,
                                                                                                                                                                                cf!1,
                                                                                                                                                                                depth!1,
                                                                                                                                                                                level1!1,
                                                                                                                                                                                localexit!1,
                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                intendpts!1
                                                                                                                                                                                WITH [v!1`1 := true],
                                                                                                                                                                                varselect!1,
                                                                                                                                                                                nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                                                      (v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                                                varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                      Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                    bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                   (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                                                        bsdegmono!1)
                                                                                                                                                                                                                                                                                                                       (v!1),
                                                                                                                                                                                                                                                                                                bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                                                depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                                                globalexit!1,
                                                                                                                                                                                                                                                                                                intendpts!1
                                                                                                                                                                                                                                                                                                  WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                                                varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                      Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                    bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                   (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                                        (LAMBDA
                                                                                                                                                                                                                                                                         (k: nat):
                                                                                                                                                                                                                                                                         Bern_split_left_mono
                                                                                                                                                                                                                                                                         (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                         bsdegmono!1,
                                                                                                                                                                                                                                                                         nvars!1,
                                                                                                                                                                                                                                                                         terms!1,
                                                                                                                                                                                                                                                                         cf!1,
                                                                                                                                                                                                                                                                         depth!1,
                                                                                                                                                                                                                                                                         level1!1,
                                                                                                                                                                                                                                                                         localexit!1,
                                                                                                                                                                                                                                                                         globalexit!1,
                                                                                                                                                                                                                                                                         intendpts!1
                                                                                                                                                                                                                                                                         WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                         varselect!1,
                                                                                                                                                                                                                                                                         nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (reveal "v") (("3" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                                                                    Bern_split_left_mono
                                                                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                                                                    WITH [v!1`2 := true],
                                                                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                                                                    nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                                               Bern_split_right_mono
                                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                                               WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                               nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                                              (LAMBDA
                                                                                                                                                                                                                               (k: nat):
                                                                                                                                                                                                                               Bern_split_right_mono
                                                                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                                                                               nvars!1,
                                                                                                                                                                                                                               terms!1,
                                                                                                                                                                                                                               cf!1,
                                                                                                                                                                                                                               depth!1,
                                                                                                                                                                                                                               level1!1,
                                                                                                                                                                                                                               localexit!1,
                                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                                               WITH [v!1`1 := true],
                                                                                                                                                                                                                               varselect!1,
                                                                                                                                                                                                                               nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array_sound") (assert)) (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array_sound") (assert)) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                         IF i < nvars!1
                                                                                                                                                                                                                                                                                                           THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                                           v!1,
                                                                                                                                                                                                                                                                                                                           LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                                                    i)
                                                                                                                                                                                                                                                                                                         ELSE 0
                                                                                                                                                                                                                                                                                                         ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                                             IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                                                 Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                                                              ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                                          (LAMBDA
                                                                                                                                                                                           (k: nat):
                                                                                                                                                                                           Bern_split_right_mono
                                                                                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                                           nvars!1,
                                                                                                                                                                                           terms!1,
                                                                                                                                                                                           cf!1,
                                                                                                                                                                                           depth!1,
                                                                                                                                                                                           level1!1,
                                                                                                                                                                                           localexit!1,
                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                           WITH [v!1`1 := true],
                                                                                                                                                                                           varselect!1,
                                                                                                                                                                                           nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                                         (LAMBDA
                                                                                                                                                                                          (k: nat):
                                                                                                                                                                                          Bern_split_left_mono
                                                                                                                                                                                          (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                          bsdegmono!1,
                                                                                                                                                                                          nvars!1,
                                                                                                                                                                                          terms!1,
                                                                                                                                                                                          cf!1,
                                                                                                                                                                                          depth!1,
                                                                                                                                                                                          level1!1,
                                                                                                                                                                                          localexit!1,
                                                                                                                                                                                          globalexit!1,
                                                                                                                                                                                          intendpts!1
                                                                                                                                                                                          WITH [v!1`2 := true],
                                                                                                                                                                                          varselect!1,
                                                                                                                                                                                          nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-5 "" 3614513781 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                                   (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                               (bslrleft!1),
                                                                                                                                                            outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                               (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                                 (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_left_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`2 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                                  (LAMBDA
                                                                                                                                                                                                   (k: nat):
                                                                                                                                                                                                   Bern_split_right_mono
                                                                                                                                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                   bsdegmono!1,
                                                                                                                                                                                                   nvars!1,
                                                                                                                                                                                                   terms!1,
                                                                                                                                                                                                   cf!1,
                                                                                                                                                                                                   depth!1,
                                                                                                                                                                                                   level1!1,
                                                                                                                                                                                                   localexit!1,
                                                                                                                                                                                                   globalexit!1,
                                                                                                                                                                                                   intendpts!1
                                                                                                                                                                                                   WITH [v!1`1 := true],
                                                                                                                                                                                                   varselect!1,
                                                                                                                                                                                                   nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                          ((v1!1
                                                                                                                                                            (LAMBDA
                                                                                                                                                             (k: nat):
                                                                                                                                                             Bern_split_right_mono
                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                             bsdegmono!1,
                                                                                                                                                             nvars!1,
                                                                                                                                                             terms!1,
                                                                                                                                                             cf!1,
                                                                                                                                                             depth!1,
                                                                                                                                                             level1!1,
                                                                                                                                                             localexit!1,
                                                                                                                                                             globalexit!1,
                                                                                                                                                             intendpts!1
                                                                                                                                                             WITH [v!1`1 := true],
                                                                                                                                                             varselect!1,
                                                                                                                                                             nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                                           (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`2 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                                             bsdegmono!1)
                                                                                                                                                                                                                                                                                            (v!1),
                                                                                                                                                                                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                                                     globalexit!1,
                                                                                                                                                                                                                                                                     intendpts!1
                                                                                                                                                                                                                                                                       WITH [v!1`1 := true],
                                                                                                                                                                                                                                                                     varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                       Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                     bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                    (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                                                                                  terms!1,
                                                                                                                                                                                                                                                  cf!1,
                                                                                                                                                                                                                                                  depth!1,
                                                                                                                                                                                                                                                  level1!1,
                                                                                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                                                                                  nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array") (assert)) (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array") (assert)) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (reveal "v") (("3" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                                             (k: nat):
                                                                                                                                                                                                                             Bern_split_left_mono
                                                                                                                                                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                             bsdegmono!1,
                                                                                                                                                                                                                             nvars!1,
                                                                                                                                                                                                                             terms!1,
                                                                                                                                                                                                                             cf!1,
                                                                                                                                                                                                                             depth!1,
                                                                                                                                                                                                                             level1!1,
                                                                                                                                                                                                                             localexit!1,
                                                                                                                                                                                                                             globalexit!1,
                                                                                                                                                                                                                             intendpts!1
                                                                                                                                                                                                                             WITH [v!1`2 := true],
                                                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                                             nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array") (assert)) (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array") (assert)) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array") (assert)) (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array") (assert)) (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                                       (LAMBDA
                                                                                                                                                                                                        (k: nat):
                                                                                                                                                                                                        Bern_split_right_mono
                                                                                                                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                        bsdegmono!1,
                                                                                                                                                                                                        nvars!1,
                                                                                                                                                                                                        terms!1,
                                                                                                                                                                                                        cf!1,
                                                                                                                                                                                                        depth!1,
                                                                                                                                                                                                        level1!1,
                                                                                                                                                                                                        localexit!1,
                                                                                                                                                                                                        globalexit!1,
                                                                                                                                                                                                        intendpts!1
                                                                                                                                                                                                        WITH [v!1`1 := true],
                                                                                                                                                                                                        varselect!1,
                                                                                                                                                                                                        nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (then (auto-rewrite "list2array") (assert)) (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (then (auto-rewrite "list2array") (assert)) (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                                              IF i < nvars!1
                                                                                                                                                                                                                                                                                THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                                                v!1,
                                                                                                                                                                                                                                                                                                LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                                                         i)
                                                                                                                                                                                                                                                                              ELSE 0
                                                                                                                                                                                                                                                                              ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                                                IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                                     (LAMBDA
                                                                                                                                                                      (k: nat):
                                                                                                                                                                      Bern_split_right_mono
                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                      nvars!1,
                                                                                                                                                                      terms!1,
                                                                                                                                                                      cf!1,
                                                                                                                                                                      depth!1,
                                                                                                                                                                      level1!1,
                                                                                                                                                                      localexit!1,
                                                                                                                                                                      globalexit!1,
                                                                                                                                                                      intendpts!1
                                                                                                                                                                      WITH [v!1`1 := true],
                                                                                                                                                                      varselect!1,
                                                                                                                                                                      nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                                                    (LAMBDA
                                                                                                                                                                     (k: nat):
                                                                                                                                                                     Bern_split_left_mono
                                                                                                                                                                     (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                     bsdegmono!1,
                                                                                                                                                                     nvars!1,
                                                                                                                                                                     terms!1,
                                                                                                                                                                     cf!1,
                                                                                                                                                                     depth!1,
                                                                                                                                                                     level1!1,
                                                                                                                                                                     localexit!1,
                                                                                                                                                                     globalexit!1,
                                                                                                                                                                     intendpts!1
                                                                                                                                                                     WITH [v!1`2 := true],
                                                                                                                                                                     varselect!1,
                                                                                                                                                                     nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) nil nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-4 "" 3509876190 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                                    (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                                (bslrleft!1),
                                                                                                                                             outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                                (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                                                (v1!1
                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                  Bern_split_left_mono
                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                  terms!1,
                                                                                                                                                                                  cf!1,
                                                                                                                                                                                  depth!1,
                                                                                                                                                                                  level1!1,
                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                  WITH [v!1`2 := true],
                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                  nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                                 (LAMBDA
                                                                                                                                                                                  (k: nat):
                                                                                                                                                                                  Bern_split_right_mono
                                                                                                                                                                                  (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                  bsdegmono!1,
                                                                                                                                                                                  nvars!1,
                                                                                                                                                                                  terms!1,
                                                                                                                                                                                  cf!1,
                                                                                                                                                                                  depth!1,
                                                                                                                                                                                  level1!1,
                                                                                                                                                                                  localexit!1,
                                                                                                                                                                                  globalexit!1,
                                                                                                                                                                                  intendpts!1
                                                                                                                                                                                  WITH [v!1`1 := true],
                                                                                                                                                                                  varselect!1,
                                                                                                                                                                                  nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil))))))) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil))))))))))) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                       ((v1!1
                                                                                                                                         (LAMBDA
                                                                                                                                          (k: nat):
                                                                                                                                          Bern_split_left_mono
                                                                                                                                          (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                          bsdegmono!1,
                                                                                                                                          nvars!1,
                                                                                                                                          terms!1,
                                                                                                                                          cf!1,
                                                                                                                                          depth!1,
                                                                                                                                          level1!1,
                                                                                                                                          localexit!1,
                                                                                                                                          globalexit!1,
                                                                                                                                          intendpts!1
                                                                                                                                          WITH [v!1`2 := true],
                                                                                                                                          varselect!1,
                                                                                                                                          nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                       ((v1!1
                                                                                                                                         (LAMBDA
                                                                                                                                          (k: nat):
                                                                                                                                          Bern_split_right_mono
                                                                                                                                          (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                          bsdegmono!1,
                                                                                                                                          nvars!1,
                                                                                                                                          terms!1,
                                                                                                                                          cf!1,
                                                                                                                                          depth!1,
                                                                                                                                          level1!1,
                                                                                                                                          localexit!1,
                                                                                                                                          globalexit!1,
                                                                                                                                          intendpts!1
                                                                                                                                          WITH [v!1`1 := true],
                                                                                                                                          varselect!1,
                                                                                                                                          nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                            Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                                                (v!1),
                                                                                                                                                                                                                                          bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                          depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                          globalexit!1,
                                                                                                                                                                                                                                          intendpts!1
                                                                                                                                                                                                                                            WITH [v!1`2 := true],
                                                                                                                                                                                                                                          varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                        Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                     (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                                            Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                                                  bsdegmono!1)
                                                                                                                                                                                                                                                                 (v!1),
                                                                                                                                                                                                                                          bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                                                          depth!1, level1!1, localexit!1,
                                                                                                                                                                                                                                          globalexit!1,
                                                                                                                                                                                                                                          intendpts!1
                                                                                                                                                                                                                                            WITH [v!1`1 := true],
                                                                                                                                                                                                                                          varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                        Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                      bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                     (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (reveal "v") (("2" (assert) nil))))))))) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                                          (LAMBDA
                                                                                                                                                                                                                           (k: nat):
                                                                                                                                                                                                                           Bern_split_left_mono
                                                                                                                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                           bsdegmono!1,
                                                                                                                                                                                                                           nvars!1,
                                                                                                                                                                                                                           terms!1,
                                                                                                                                                                                                                           cf!1,
                                                                                                                                                                                                                           depth!1,
                                                                                                                                                                                                                           level1!1,
                                                                                                                                                                                                                           localexit!1,
                                                                                                                                                                                                                           globalexit!1,
                                                                                                                                                                                                                           intendpts!1
                                                                                                                                                                                                                           WITH [v!1`2 := true],

                                                                                                                                                                                                                           varselect!1,
                                                                                                                                                                                                                           nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                   IF i < nvars!1
                                                                                                                                                                                                                                                     THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                     LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                              i)
                                                                                                                                                                                                                                                   ELSE 0
                                                                                                                                                                                                                                                   ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                   IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                   Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                 bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (reveal "v") (("3" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                                                      (k: nat):
                                                                                                                                                                                                      Bern_split_left_mono
                                                                                                                                                                                                      (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                      bsdegmono!1,
                                                                                                                                                                                                      nvars!1,
                                                                                                                                                                                                      terms!1,
                                                                                                                                                                                                      cf!1,
                                                                                                                                                                                                      depth!1,
                                                                                                                                                                                                      level1!1,
                                                                                                                                                                                                      localexit!1,
                                                                                                                                                                                                      globalexit!1,
                                                                                                                                                                                                      intendpts!1
                                                                                                                                                                                                      WITH [v!1`2 := true],
                                                                                                                                                                                                      varselect!1,
                                                                                                                                                                                                      nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                   IF i < nvars!1
                                                                                                                                                                                                                                                     THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                     LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                                              i)
                                                                                                                                                                                                                                                   ELSE 0
                                                                                                                                                                                                                                                   ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                   IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                   Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                 bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                                                 (k: nat):
                                                                                                                                                                                 Bern_split_right_mono
                                                                                                                                                                                 (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                 bsdegmono!1,
                                                                                                                                                                                 nvars!1,
                                                                                                                                                                                 terms!1,
                                                                                                                                                                                 cf!1,
                                                                                                                                                                                 depth!1,
                                                                                                                                                                                 level1!1,
                                                                                                                                                                                 localexit!1,
                                                                                                                                                                                 globalexit!1,
                                                                                                                                                                                 intendpts!1
                                                                                                                                                                                 WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                                                 nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (expand "interval_between?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                   IF i < nvars!1
                                                                                                                                                                                                                                                     THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                     LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                              i)
                                                                                                                                                                                                                                                   ELSE 0
                                                                                                                                                                                                                                                   ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                   IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                   Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                 bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (grind) nil))))))))))))))))))))) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                                                (LAMBDA
                                                                                                                                                                                 (k: nat):
                                                                                                                                                                                 Bern_split_right_mono
                                                                                                                                                                                 (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                 bsdegmono!1,
                                                                                                                                                                                 nvars!1,
                                                                                                                                                                                 terms!1,
                                                                                                                                                                                 cf!1,
                                                                                                                                                                                 depth!1,
                                                                                                                                                                                 level1!1,
                                                                                                                                                                                 localexit!1,
                                                                                                                                                                                 globalexit!1,
                                                                                                                                                                                 intendpts!1
                                                                                                                                                                                 WITH [v!1`1 := true],
                                                                                                                                                                                 varselect!1,
                                                                                                                                                                                 nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (expand "interval_between?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (expand "interval_between?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil))))))))))))))))))))))))) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil))))) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil))))) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil))))) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil))))))))))))))))))))))))))))))))))))))))))))) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (expand "interval_between?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                                                   IF i < nvars!1
                                                                                                                                                                                                                                                     THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                                                     v!1,
                                                                                                                                                                                                                                                                     LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                                              i)
                                                                                                                                                                                                                                                   ELSE 0
                                                                                                                                                                                                                                                   ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                                                   IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                                                   Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                                                 bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                                                ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil))))))))))))))) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil))) ("2" (assert) nil))))))))) ("2" (skosimp*) (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (assert) nil))))) ("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil))))))))))))))))))))))))))))) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                                                (LAMBDA
                                                                                                                                                 (k: nat):
                                                                                                                                                 Bern_split_right_mono
                                                                                                                                                 (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                 bsdegmono!1,
                                                                                                                                                 nvars!1,
                                                                                                                                                 terms!1,
                                                                                                                                                 cf!1,
                                                                                                                                                 depth!1,
                                                                                                                                                 level1!1,
                                                                                                                                                 localexit!1,
                                                                                                                                                 globalexit!1,
                                                                                                                                                 intendpts!1
                                                                                                                                                 WITH [v!1`1 := true],
                                                                                                                                                 varselect!1,
                                                                                                                                                 nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                                               (LAMBDA
                                                                                                                                                (k: nat):
                                                                                                                                                Bern_split_left_mono
                                                                                                                                                (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                bsdegmono!1,
                                                                                                                                                nvars!1,
                                                                                                                                                terms!1,
                                                                                                                                                cf!1,
                                                                                                                                                depth!1,
                                                                                                                                                level1!1,
                                                                                                                                                localexit!1,
                                                                                                                                                globalexit!1,
                                                                                                                                                intendpts!1
                                                                                                                                                WITH [v!1`2 := true],
                                                                                                                                                varselect!1,
                                                                                                                                                nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil) ("4" (grind) nil))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil))))))) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil))))))) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil))))) ("6" (assert) nil) ("7" (reveal "level" "depth") (("7" (assert) nil))))))))) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "interval_between?") (("2" (expand "unit_box_ub?") (("2" (expand "interval_between?") (("2" (expand "length_eq?") (("2" (ground) nil))))))))))))))))))) ("3" (assert) nil))))))) ("2" (propax) nil))) ("2" (assert) nil))))))))))))))))) ("2" (hide 2) (("2" (grind-reals) nil))))))))) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil)))))))) nil) ((translist_polylist_id formula-decl nil util nil) (combine_lr const-decl "Outminmax" minmax nil) (Outminmax type-eq-decl nil minmax nil) (IntervalEndpoints type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (combine const-decl "Outminmax" minmax nil) (outminmax_translate const-decl "Outminmax" minmax nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval const-decl "real" multi_bernstein nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (unitbox? const-decl "bool" util nil) (Vars type-eq-decl nil util nil) (interval_between? const-decl "bool" util nil) (length_eq? const-decl "bool" minmax nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (VarSelector type-eq-decl nil vardirselector nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-3 "" 3509205758 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (lemma "translist_polylist_id") (("1" (inst?) (("1" (replaces -2 :dir rl) (("1" (lemma "sound_id") (("1" (inst -1 "bsdegmono!1" "bp!1" "bspoly!1" "cf!1" "intendpts!1" "nvars!1" "combine_lr(v!1, bslrleft!1, bslrright!1)" "terms!1") (("1" (split -1) (("1" (replaces -1 :dir rl) (("1" (expand "combine_lr") (("1" (case "NOT sound?(bp!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                                                                                     (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                                                 (bslrleft!1),
                                                                                                                              outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                                                 (bslrright!1)))") (("1" (label "depth" 2) (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                                                                                               (v1!1
                                                                                                                                                                (LAMBDA
                                                                                                                                                                 (k: nat):
                                                                                                                                                                 Bern_split_left_mono
                                                                                                                                                                 (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                 bsdegmono!1,
                                                                                                                                                                 nvars!1,
                                                                                                                                                                 terms!1,
                                                                                                                                                                 cf!1,
                                                                                                                                                                 depth!1,
                                                                                                                                                                 level1!1,
                                                                                                                                                                 localexit!1,
                                                                                                                                                                 globalexit!1,
                                                                                                                                                                 intendpts!1
                                                                                                                                                                 WITH [v!1`2 := true],
                                                                                                                                                                 varselect!1,
                                                                                                                                                                 nmm1)) AND bslrright!1 = (v1!1
                                                                                                                                                                (LAMBDA
                                                                                                                                                                 (k: nat):
                                                                                                                                                                 Bern_split_right_mono
                                                                                                                                                                 (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                 bsdegmono!1,
                                                                                                                                                                 nvars!1,
                                                                                                                                                                 terms!1,
                                                                                                                                                                 cf!1,
                                                                                                                                                                 depth!1,
                                                                                                                                                                 level1!1,
                                                                                                                                                                 localexit!1,
                                                                                                                                                                 globalexit!1,
                                                                                                                                                                 intendpts!1
                                                                                                                                                                 WITH [v!1`1 := true],
                                                                                                                                                                 varselect!1,
                                                                                                                                                                 nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (assert) (("1" (assert) (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                                                    ((v1!1
                                                                                                                      (LAMBDA
                                                                                                                       (k: nat):
                                                                                                                       Bern_split_left_mono
                                                                                                                       (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                       bsdegmono!1,
                                                                                                                       nvars!1,
                                                                                                                       terms!1,
                                                                                                                       cf!1,
                                                                                                                       depth!1,
                                                                                                                       level1!1,
                                                                                                                       localexit!1,
                                                                                                                       globalexit!1,
                                                                                                                       intendpts!1
                                                                                                                       WITH [v!1`2 := true],
                                                                                                                       varselect!1,
                                                                                                                       nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                                                    ((v1!1
                                                                                                                      (LAMBDA
                                                                                                                       (k: nat):
                                                                                                                       Bern_split_right_mono
                                                                                                                       (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                       bsdegmono!1,
                                                                                                                       nvars!1,
                                                                                                                       terms!1,
                                                                                                                       cf!1,
                                                                                                                       depth!1,
                                                                                                                       level1!1,
                                                                                                                       localexit!1,
                                                                                                                       globalexit!1,
                                                                                                                       intendpts!1
                                                                                                                       WITH [v!1`1 := true],
                                                                                                                       varselect!1,
                                                                                                                       nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                 Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                                                                                                                                     (v!1),
                                                                                                                                                                                                               bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                               depth!1, level1!1, localexit!1,
                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                                 WITH [v!1`2 := true],
                                                                                                                                                                                                               varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                         Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                       bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                      (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                                                                                                                                 Bern_split_right_mono(bp!1(k),
                                                                                                                                                                                                                                       bsdegmono!1)
                                                                                                                                                                                                                                      (v!1),
                                                                                                                                                                                                               bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                                                                                                                               depth!1, level1!1, localexit!1,
                                                                                                                                                                                                               globalexit!1,
                                                                                                                                                                                                               intendpts!1
                                                                                                                                                                                                                 WITH [v!1`1 := true],
                                                                                                                                                                                                               varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                         Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                       bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                      (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("1" (inst - "X!1") (("1" (assert) nil nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal "v") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                                                                                                                   (LAMBDA
                                                                                                                                                                                                    (k: nat):
                                                                                                                                                                                                    Bern_split_left_mono
                                                                                                                                                                                                    (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                    bsdegmono!1,
                                                                                                                                                                                                    nvars!1,
                                                                                                                                                                                                    terms!1,
                                                                                                                                                                                                    cf!1,
                                                                                                                                                                                                    depth!1,
                                                                                                                                                                                                    level1!1,
                                                                                                                                                                                                    localexit!1,
                                                                                                                                                                                                    globalexit!1,
                                                                                                                                                                                                    intendpts!1
                                                                                                                                                                                                    WITH [v!1`2 := true],
         
                                                                                                                                                                                                    varselect!1,
                                                                                                                                                                                                    nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (replace -6) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                        IF i < nvars!1
                                                                                                                                                                                                                          THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                          LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                   i)
                                                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                                                        ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                      IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (reveal "v") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                    Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                 ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (reveal "v") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                                                                                                               (k: nat):
                                                                                                                                                                               Bern_split_left_mono
                                                                                                                                                                               (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                               bsdegmono!1,
                                                                                                                                                                               nvars!1,
                                                                                                                                                                               terms!1,
                                                                                                                                                                               cf!1,
                                                                                                                                                                               depth!1,
                                                                                                                                                                               level1!1,
                                                                                                                                                                               localexit!1,
                                                                                                                                                                               globalexit!1,
                                                                                                                                                                               intendpts!1
                                                                                                                                                                               WITH [v!1`2 := true],
                                                                                                                                                                               varselect!1,
                                                                                                                                                                               nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("3" (replace -2) (("3" (reveal "v") (("3" (assert) (("3" (replace -8) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                        IF i < nvars!1
                                                                                                                                                                                                                          THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                          LAMBDA (x: real): x / 2),
                                                                                                                                                                                                                                   i)
                                                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                                                        ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                      IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                    Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                 ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                                                                                                                          (k: nat):
                                                                                                                                                          Bern_split_right_mono
                                                                                                                                                          (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                          bsdegmono!1,
                                                                                                                                                          nvars!1,
                                                                                                                                                          terms!1,
                                                                                                                                                          cf!1,
                                                                                                                                                          depth!1,
                                                                                                                                                          level1!1,
                                                                                                                                                          localexit!1,
                                                                                                                                                          globalexit!1,
                                                                                                                                                          intendpts!1
                                                                                                                                                          WITH [v!1`1 := true],                                                                                                                                                                                             varselect!1,
                                                                                                                                                          nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr1") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -3)) (("3" (expand "length_eq?") (("3" (expand "unit_box_lb?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (replace -7) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (hide -3) (("3" (replace -5) (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                        IF i < nvars!1
                                                                                                                                                                                                                          THEN nth(setnth(rr1`lb_var,
                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                          LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                   i)
                                                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                                                        ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                      IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                    Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                 ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                                                                                                                         (LAMBDA
                                                                                                                                                          (k: nat):
                                                                                                                                                          Bern_split_right_mono
                                                                                                                                                          (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                          bsdegmono!1,
                                                                                                                                                          nvars!1,
                                                                                                                                                          terms!1,
                                                                                                                                                          cf!1,
                                                                                                                                                          depth!1,
                                                                                                                                                          level1!1,
                                                                                                                                                          localexit!1,
                                                                                                                                                          globalexit!1,
                                                                                                                                                          intendpts!1
                                                                                                                                                          WITH [v!1`1 := true],
                                                                                                                                                          varselect!1,
                                                                                                                                                          nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (flatten) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (flatten) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil) ("4" (flatten) (("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred "rr2") (("3" (expand "sound?") (("3" (flatten) (("3" (hide (-1 -2)) (("3" (expand "length_eq?") (("3" (expand "unit_box_ub?") (("3" (assert) (("3" (flatten) (("3" (hide -2) (("3" (expand "outminmax_translate") (("3" (expand "list2array") (("3" (assert) (("3" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("3" (replace -2) (("3" (hide -3) (("3" (replace -5) (("3" (replace -6) (("3" (reveal "v") (("3" (assert) (("3" (hide "v") (("3" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                                                                                                                                        IF i < nvars!1
                                                                                                                                                                                                                          THEN nth(setnth(rr2`ub_var,
                                                                                                                                                                                                                                          v!1,
                                                                                                                                                                                                                                          LAMBDA (x: real): (1 + x) / 2),
                                                                                                                                                                                                                                   i)
                                                                                                                                                                                                                        ELSE 0
                                                                                                                                                                                                                        ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                                                                                                                                                      IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                                                                                                                                                    Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                                                                                                                                                  bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                                                                                                                                                                 ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bp!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                                                                                                           (LAMBDA
                                                                                                                            (k: nat):
                                                                                                                            Bern_split_right_mono
                                                                                                                            (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                            bsdegmono!1,
                                                                                                                            nvars!1,
                                                                                                                            terms!1,
                                                                                                                            cf!1,
                                                                                                                            depth!1,
                                                                                                                            level1!1,
                                                                                                                            localexit!1,
                                                                                                                            globalexit!1,
                                                                                                                            intendpts!1
                                                                                                                            WITH [v!1`1 := true],
                                                                                                                            varselect!1,
                                                                                                                            nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                                                                                                          (LAMBDA
                                                                                                                           (k: nat):
                                                                                                                           Bern_split_left_mono
                                                                                                                           (bp!1(k), bsdegmono!1)(v!1),
                                                                                                                           bsdegmono!1,
                                                                                                                           nvars!1,
                                                                                                                           terms!1,
                                                                                                                           cf!1,
                                                                                                                           depth!1,
                                                                                                                           level1!1,
                                                                                                                           localexit!1,
                                                                                                                           globalexit!1,
                                                                                                                           intendpts!1
                                                                                                                           WITH [v!1`2 := true],
                                                                                                                           varselect!1,
                                                                                                                           nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (flatten) (("3" (reveal "level" "depth") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (flatten) (("4" (reveal "v") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (reveal "level" "depth") (("4" (assert) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil) ("6" (assert) nil nil) ("7" (reveal "level" "depth") (("7" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "unit_box_ub?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (typepred "setnth(ll!1, zz!1, ff!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((translist_polylist_id formula-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (Bern_eval_right_def formula-decl nil multi_bernstein nil) (forall_X_between const-decl "bool" multi_bernstein nil) (multibs_eval const-decl "real" multi_bernstein nil) (Bern_eval_left_def formula-decl nil multi_bernstein nil) (unitbox? const-decl "bool" util nil) (Vars type-eq-decl nil util nil) (Bern_split_right_mono const-decl "real" multi_bernstein nil) (Bern_split_left_mono const-decl "real" multi_bernstein nil) (DegreeMono type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) shostak (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-2 nil 3508087858 ("" (case "FORALL (ff:[real->real],zz:nat,ll:list[real]): length(ll) = length(setnth(ll,zz,ff))") (("1" (label "setnthlength" -1) (("1" (hide "setnthlength") (("1" (case "FORALL (c1,c2:real,aa1,aa2:real): aa1=aa2 IMPLIES c1*aa1*c2 = c1*aa2*c2") (("1" (label "reallems" -1) (("1" (hide "reallems") (("1" (skosimp*) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                         Bern_split_left_mono(bspoly!1(k), bsdegmono!1)(v!1),
                                                                                       bsdegmono!1, cf!1, nvars!1, terms!1) = multibs_eval(spleft!1,
                                                                                       bsdegmono!1, cf!1, nvars!1, terms!1)") (("1" (label "spleftname2" -1) (("1" (hide "spleftname2") (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                     Bern_split_right_mono(bspoly!1(k), bsdegmono!1)(v!1),
                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1) = multibs_eval(spright!1,
                                                                                                   bsdegmono!1, cf!1, nvars!1, terms!1)") (("1" (label "sprightname2" -1) (("1" (hide "sprightname2") (("1" (lemma "Bern_coeffs_minmax_id") (("1" (inst - "bsdegmono!1" "bspoly!1" "cf!1" "intendpts!1" "level!1" "nvars!1" "terms!1") (("1" (replace -2 -1 :dir rl) (("1" (assert) (("1" (replace -3 -1 :dir rl) (("1" (label "minmaxname2" -1) (("1" (hide "minmaxname2") (("1" (expand "combine_lr") (("1" (case "NOT sound?(bspoly!1, bsdegmono!1, nvars!1, terms!1, cf!1, intendpts!1)
                                                         (combine(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                                                                     (bslrleft!1),
                                                                  outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                                                                     (bslrright!1)))") (("1" (hide-all-but (1 -)) (("1" (case "NOT EXISTS (nmm1,nmm2:Outminmax): (bslrleft!1=
                                                                                           (v1!1
                                                                                            (LAMBDA
                                                                                             (k: nat):
                                                                                             Bern_split_left_mono
                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                             bsdegmono!1,
                                                                                             nvars!1,
                                                                                             terms!1,
                                                                                             cf!1,
                                                                                             depth!1,
                                                                                             level1!1,
                                                                                             localexit!1,
                                                                                             globalexit!1,
                                                                                             intendpts!1
                                                                                             WITH [(v!1)
                                                                                                   := (intendpts!1(v!1)`1,
                                                                                                       TRUE)],
                                                                                             varselect!1,
                                                                                             nmm1)) AND bslrright!1 = (v1!1
                                                                                            (LAMBDA
                                                                                             (k: nat):
                                                                                             Bern_split_right_mono
                                                                                             (bp!1(k), bsdegmono!1)(v!1),
                                                                                             bsdegmono!1,
                                                                                             nvars!1,
                                                                                             terms!1,
                                                                                             cf!1,
                                                                                             depth!1,
                                                                                             level1!1,
                                                                                             localexit!1,
                                                                                             globalexit!1,
                                                                                             intendpts!1
                                                                                             WITH [(v!1)
                                                                                                   := (TRUE,
                                                                                                       intendpts!1(v!1)`2)],
                                                                                             varselect!1,
                                                                                             nmm2)))") (("1" (hide 2) (("1" (case "NOT varsel!1`1") (("1" (inst + "newmm2!1" "newmm1!1") (("1" (ground) nil nil)) nil) ("2" (assert) (("2" (inst + "newmm1!1" "newmm2!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (label "bslrleftname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "bslrrightname2" -1) (("2" (replace -1 +) (("2" (hide -1) (("2" (label "finalone" 1) (("2" (hide "finalone") (("2" (label "bp" -1) (("2" (hide -1) (("2" (label "minmax" -1) (("2" (hide -1) (("2" (label "varsel" -1) (("2" (hide -1) (("2" (label "v" -1) (("2" (hide -1) (("2" (label "spleft" -1) (("2" (hide -1) (("2" (label "spright" -1) (("2" (hide -1) (("2" (label "ipleft" -1) (("2" (hide -1) (("2" (label "ipright" -1) (("2" (hide -1) (("2" (label "LR2" -1) (("2" (hide -1) (("2" (label "LR1" -1) (("2" (hide -1) (("2" (label "LR1intendpts" -1) (("2" (hide -1) (("2" (label "LR2intendpts" -1) (("2" (hide -1) (("2" (label "combinethis" -1) (("2" (hide -1) (("2" (label "newmm1" -1) (("2" (hide -1) (("2" (label "level" -1) (("2" (hide -1) (("2" (label "bslr1" -1) (("2" (hide -1) (("2" (label "newmm2" -1) (("2" (hide -1) (("2" (label "bslr2" -1) (("2" (hide -1) (("2" (label "bslrleft" -1) (("2" (hide -1) (("2" (label "bslrright" -1) (("2" (hide -1) (("2" (reveal "finalone") (("2" (case "length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): x / 2)
                                        ((v1!1
                                          (LAMBDA
                                           (k: nat):
                                           Bern_split_left_mono
                                           (bp!1(k), bsdegmono!1)(v!1),
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1,
                                           cf!1,
                                           depth!1,
                                           level1!1,
                                           localexit!1,
                                           globalexit!1,
                                           intendpts!1
                                           WITH [(v!1)
                                                 := (intendpts!1(v!1)`1,
                                                     TRUE)],
                                           varselect!1,
                                           nmm1!1)))) AND length_eq?(nvars!1)(outminmax_translate(v!1, LAMBDA (x: real): (1 + x) / 2)
                                        ((v1!1
                                          (LAMBDA
                                           (k: nat):
                                           Bern_split_right_mono
                                           (bp!1(k), bsdegmono!1)(v!1),
                                           bsdegmono!1,
                                           nvars!1,
                                           terms!1,
                                           cf!1,
                                           depth!1,
                                           level1!1,
                                           localexit!1,
                                           globalexit!1,
                                           intendpts!1
                                           WITH [(v!1)
                                                 := (TRUE,
                                                     intendpts!1(v!1)`2)],
                                           varselect!1,
                                           nmm2!1))))") (("1" (label "lengthlems" -1) (("1" (flatten) (("1" (rewrite "combine_sound") (("1" (hide "lengthlems") (("1" (hide 2) (("1" (inst + "LAMBDA (XYZ:Vars): XYZ(v!1)<=1/2") (("1" (skosimp*) (("1" (split) (("1" (flatten) (("1" (name "rr1" "v1!1(LAMBDA (k: nat):
                                                                                                       Bern_split_left_mono(bp!1(k), bsdegmono!1)
                                                                                                                           (v!1),
                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                     globalexit!1,
                                                                                                     intendpts!1
                                                                                                       WITH [(v!1)
                                                                                                             := (intendpts!1(v!1)`1, TRUE)],
                                                                                                     varselect!1, nmm1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "outminmax_translate") (("1" (assert) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-2 -3)) (("1" (expand "forall_X_between") (("1" (inst - "X!1 WITH [v!1:=2*X!1(v!1)]") (("1" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1)])") (("1" (assert) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                 Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                              (X!1 WITH [v!1 := 2 * X!1(v!1)])=multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "X!1") (("2" (assert) (("2" (lemma "multibs_eval_id") (("2" (inst - "bspoly!1" "bp!1" "bsdegmono!1" "cf!1" "nvars!1" "terms!1") (("2" (assert) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst - "bsdegmono!1" "bspoly!1" "nvars!1" "terms!1" "t!1" "v!2" "i!1") (("2" (reveal "bp") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (-1 -2 2)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (name "rr2" "v1!1(LAMBDA (k: nat):
                                                                                                       Bern_split_right_mono(bp!1(k),
                                                                                                                             bsdegmono!1)
                                                                                                                            (v!1),
                                                                                                     bsdegmono!1, nvars!1, terms!1, cf!1,
                                                                                                     depth!1, level1!1, localexit!1,
                                                                                                     globalexit!1,
                                                                                                     intendpts!1
                                                                                                       WITH [(v!1)
                                                                                                             := (TRUE, intendpts!1(v!1)`2)],
                                                                                                     varselect!1, nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "outminmax_translate") (("2" (assert) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-2 -3)) (("2" (expand "forall_X_between") (("2" (inst - "X!1 WITH [v!1:=2*X!1(v!1)-1]") (("2" (case "unitbox?(nvars!1)(X!1 WITH [v!1 := 2 * X!1(v!1) - 1])") (("1" (assert) (("1" (hide 1) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                 Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                               bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                              (X!1 WITH [v!1 := 2 * X!1(v!1) - 1])=multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(X!1)") (("1" (ground) nil nil) ("2" (hide (-2 2)) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "X!1") (("2" (assert) (("2" (lemma "multibs_eval_id") (("2" (inst - "bspoly!1" "bp!1" "bsdegmono!1" "cf!1" "nvars!1" "terms!1") (("2" (assert) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst - "bsdegmono!1" "bspoly!1" "nvars!1" "terms!1" "t!1" "v!2" "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide (3 -)) (("2" (typepred "X!1") (("2" (expand "unitbox?") (("2" (skosimp*) (("2" (inst - "j!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide "lengthlems") (("2" (name "rr1" "v1!1
                                                                                                       (LAMBDA
                                                                                                        (k: nat):
                                                                                                        Bern_split_left_mono
                                                                                                        (bp!1(k), bsdegmono!1)(v!1),
                                                                                                        bsdegmono!1,
                                                                                                        nvars!1,
                                                                                                        terms!1,
                                                                                                        cf!1,
                                                                                                        depth!1,
                                                                                                        level1!1,
                                                                                                        localexit!1,
                                                                                                        globalexit!1,
                                                                                                        intendpts!1
                                                                                                        WITH [(v!1)
                                                                                                              := (intendpts!1(v!1)`1,
                                                                                                                  TRUE)],
                                                                                                        varselect!1,
                                                                                                        nmm1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (expand "unit_box_lb?") (("2" (flatten) (("2" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (ground) nil nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil) ("5" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                      IF i < nvars!1
                                                                                                        THEN nth(setnth(rr1`lb_var,
                                                                                                                        v!1,
                                                                                                                        LAMBDA (x: real): x / 2),
                                                                                                                 i)
                                                                                                      ELSE 0
                                                                                                      ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                            IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) (("2" (lemma "multibs_eval_id") (("2" (inst - "bspoly!1" "bp!1" "bsdegmono!1" "cf!1" "nvars!1" "terms!1") (("2" (assert) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst - "bsdegmono!1" "bspoly!1" "nvars!1" "terms!1" "t!1" "v!2" "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide "lengthlems") (("3" (hide 2) (("3" (name "rr2" "v1!1(LAMBDA
                                                                                   (k: nat):
                                                                                   Bern_split_left_mono
                                                                                   (bp!1(k), bsdegmono!1)(v!1),
                                                                                   bsdegmono!1,
                                                                                   nvars!1,
                                                                                   terms!1,
                                                                                   cf!1,
                                                                                   depth!1,
                                                                                   level1!1,
                                                                                   localexit!1,
                                                                                   globalexit!1,
                                                                                   intendpts!1
                                                                                   WITH [(v!1)
                                                                                         := (intendpts!1(v!1)`1,
                                                                                             TRUE)],
                                                                                   varselect!1,
                                                                                   nmm1!1)") (("3" (replace -1) (("3" (hide -1) (("3" (expand "unit_box_ub?") (("3" (flatten) (("3" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (ground) nil nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil) ("5" (replace -9) (("5" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                      IF i < nvars!1
                                                                                                        THEN nth(setnth(rr2`ub_var,
                                                                                                                        v!1,
                                                                                                                        LAMBDA (x: real): x / 2),
                                                                                                                 i)
                                                                                                      ELSE 0
                                                                                                      ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)]) = (LAMBDA (i: nat):
                                                                                                            IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                  Bern_split_left_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)])) = multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_left_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) (("2" (lemma "multibs_eval_id") (("2" (inst - "bspoly!1" "bp!1" "bsdegmono!1" "cf!1" "nvars!1" "terms!1") (("2" (assert) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst - "bsdegmono!1" "bspoly!1" "nvars!1" "terms!1" "t!1" "v!2" "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): x / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (hide "lengthlems") (("4" (name "rr1" "v1!1(LAMBDA
                                                              (k: nat):
                                                              Bern_split_right_mono
                                                              (bp!1(k), bsdegmono!1)(v!1),
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1,
                                                              cf!1,
                                                              depth!1,
                                                              level1!1,
                                                              localexit!1,
                                                              globalexit!1,
                                                              intendpts!1
                                                              WITH [(v!1)
                                                                    := (TRUE,
                                                                        intendpts!1(v!1)`2)],
                                                              varselect!1,
                                                              nmm2!1)") (("4" (replace -1) (("4" (hide -1) (("4" (expand "unit_box_lb?") (("4" (flatten) (("4" (case "cons?(rr1`lb_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr1") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -3)) (("1" (expand "length_eq?") (("1" (expand "unit_box_lb?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr1") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -3)) (("2" (expand "length_eq?") (("2" (expand "unit_box_lb?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (replace -8) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (ground) nil nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil) ("5" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                      IF i < nvars!1
                                                                                                        THEN nth(setnth(rr1`lb_var,
                                                                                                                        v!1,
                                                                                                                        LAMBDA (x: real): (1 + x) / 2),
                                                                                                                 i)
                                                                                                      ELSE 0
                                                                                                      ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                            IF i < nvars!1 THEN nth(rr1`lb_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) (("2" (lemma "multibs_eval_id") (("2" (inst - "bspoly!1" "bp!1" "bsdegmono!1" "cf!1" "nvars!1" "terms!1") (("2" (assert) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst - "bsdegmono!1" "bspoly!1" "nvars!1" "terms!1" "t!1" "v!2" "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr1`lb_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide "lengthlems") (("5" (hide 2) (("5" (name "rr2" "v1!1
                                                             (LAMBDA
                                                              (k: nat):
                                                              Bern_split_right_mono
                                                              (bp!1(k), bsdegmono!1)(v!1),
                                                              bsdegmono!1,
                                                              nvars!1,
                                                              terms!1,
                                                              cf!1,
                                                              depth!1,
                                                              level1!1,
                                                              localexit!1,
                                                              globalexit!1,
                                                              intendpts!1
                                                              WITH [(v!1)
                                                                    := (TRUE,
                                                                        intendpts!1(v!1)`2)],
                                                              varselect!1,
                                                              nmm2!1)") (("5" (replace -1) (("5" (hide -1) (("5" (expand "unit_box_ub?") (("5" (flatten) (("5" (case "cons?(rr2`ub_var)") (("1" (split +) (("1" (expand "outminmax_translate" +) (("1" (lift-if) (("1" (typepred "rr2") (("1" (expand "sound?") (("1" (flatten) (("1" (hide (-1 -2)) (("1" (expand "length_eq?") (("1" (expand "unit_box_ub?") (("1" (assert) (("1" (flatten) (("1" (reveal "v") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "rr2") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2)) (("2" (expand "length_eq?") (("2" (expand "unit_box_ub?") (("2" (assert) (("2" (flatten) (("2" (inst - "iup!1") (("2" (flatten) (("2" (expand "outminmax_translate") (("2" (expand "list2array") (("2" (assert) (("2" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("2" (replace -2) (("2" (inst - "iup!1") (("2" (assert) (("2" (split +) (("1" (ground) nil nil) ("2" (flatten) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil) ("5" (replace -9) (("5" (name "XYZ" "(LAMBDA (i: nat):
                                                                                                      IF i < nvars!1
                                                                                                        THEN nth(setnth(rr2`ub_var,
                                                                                                                        v!1,
                                                                                                                        LAMBDA (x: real): (1 + x) / 2),
                                                                                                                 i)
                                                                                                      ELSE 0
                                                                                                      ENDIF)") (("1" (case "(XYZ WITH [v!1:=2*XYZ(v!1)-1]) = (LAMBDA (i: nat):
                                                                                                            IF i < nvars!1 THEN nth(rr2`ub_var, i) ELSE 0 ENDIF)") (("1" (replace -2) (("1" (replace -1 :dir rl) (("1" (case "multibs_eval(LAMBDA (k: nat):
                                                                                                                  Bern_split_right_mono(bp!1(k), bsdegmono!1)(v!1),
                                                                                                                bsdegmono!1, cf!1, nvars!1, terms!1)
                                                                                                               ((XYZ WITH [v!1 := 2 * XYZ(v!1)-1])) = multibs_eval(bspoly!1, bsdegmono!1, cf!1, nvars!1, terms!1)(XYZ)") (("1" (assert) nil nil) ("2" (hide-all-but 1) (("2" (lemma "Bern_eval_right_def") (("2" (inst?) (("2" (inst - "XYZ") (("2" (assert) (("2" (lemma "multibs_eval_id") (("2" (inst - "bspoly!1" "bp!1" "bsdegmono!1" "cf!1" "nvars!1" "terms!1") (("2" (assert) (("2" (lemma "translist_polylist_id") (("2" (skosimp*) (("2" (inst - "bsdegmono!1" "bspoly!1" "nvars!1" "terms!1" "t!1" "v!2" "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (decompose-equality) (("1" (lift-if) (("1" (expand "XYZ") (("1" (typepred "setnth(rr2`ub_var, v!1, LAMBDA (x: real): (1 + x) / 2)") (("1" (inst - "x!1") (("1" (lift-if) (("1" (ground) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "outminmax_translate") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (name "llj" "v1!1
                                       (LAMBDA
                                        (k: nat):
                                        Bern_split_right_mono
                                        (bp!1(k), bsdegmono!1)(v!1),
                                        bsdegmono!1,
                                        nvars!1,
                                        terms!1,
                                        cf!1,
                                        depth!1,
                                        level1!1,
                                        localexit!1,
                                        globalexit!1,
                                        intendpts!1
                                        WITH [(v!1)
                                              := (TRUE,
                                                  intendpts!1(v!1)`2)],
                                        varselect!1,
                                        nmm2!1)") (("2" (replace -1) (("2" (hide -1) (("2" (name "lli" "v1!1
                                      (LAMBDA
                                       (k: nat):
                                       Bern_split_left_mono
                                       (bp!1(k), bsdegmono!1)(v!1),
                                       bsdegmono!1,
                                       nvars!1,
                                       terms!1,
                                       cf!1,
                                       depth!1,
                                       level1!1,
                                       localexit!1,
                                       globalexit!1,
                                       intendpts!1
                                       WITH [(v!1)
                                             := (intendpts!1(v!1)`1,
                                                 TRUE)],
                                       varselect!1,
                                       nmm1!1)") (("2" (replace -1) (("2" (hide -) (("2" (typepred "llj") (("2" (typepred "lli") (("2" (expand "sound?") (("2" (flatten) (("2" (hide (-1 -2 -3 -5 -6 -7)) (("2" (split +) (("1" (hide -2) (("1" (expand "length_eq?") (("1" (expand "outminmax_translate") (("1" (lift-if) (("1" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 1)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 1)) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "length_eq?") (("2" (expand "outminmax_translate") (("2" (lift-if) (("2" (ground) (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil) ("3" (hide-all-but (-2 1)) (("3" (grind) nil nil)) nil) ("4" (hide-all-but (-2 1)) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-1 6)) (("2" (expand "sound?") (("2" (flatten) (("2" (assert) (("2" (expand "unit_box_lb?") (("2" (expand "unit_box_ub?") (("2" (expand "length_eq?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -6 +) (("2" (hide-all-but (-1 1)) (("2" (lemma "multibs_eval_id") (("2" (inst?) (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (expand "Bern_split_right_mono") (("1" (lift-if) (("1" (lemma "translist_polylist_id") (("1" (split +) (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "sigma_const_restrict_eq") (("1" (hide 2) (("1" (decompose-equality) (("1" (expand "restrict") (("1" (lift-if) (("1" (ground) (("1" (inst?) (("1" (inst - "t!1" "v!1" "bsdegmono!1(v!1)-x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (reveal -4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -5) (("2" (hide-all-but (-1 1 -4)) (("2" (lemma "multibs_eval_id") (("2" (inst?) (("1" (assert) (("1" (hide 2) (("1" (skosimp*) (("1" (expand "Bern_split_left_mono") (("1" (lemma "translist_polylist_id") (("1" (lift-if) (("1" (split +) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (rewrite "sigma_const_restrict_eq") (("1" (hide 2) (("1" (decompose-equality) (("1" (expand "restrict") (("1" (lift-if) (("1" (ground) (("1" (inst?) (("1" (inst - "t!1" "v!1" "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (C const-decl "posnat" binomial reals) (sigma_const_restrict_eq formula-decl nil sigma reals) (restrict const-decl "[T -> real]" sigma reals) (listn type-eq-decl nil listn structures) (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)) nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))")) (Bernstein_minmax_rec_TCC7-1 nil 3507233025 ("" (subtype-tcc) nil nil) nil nil (Bernstein_minmax_rec subtype "minmax.combine_lr(bernstein_minmax.v, bernstein_minmax.bslrleft, bernstein_minmax.bslrright)" "(bernstein_minmax.sound?(bernstein_minmax.bspoly, bernstein_minmax.bsdegmono, bernstein_minmax.nvars, bernstein_minmax.terms, bernstein_minmax.cf, bernstein_minmax.intendpts))"))) (Bernstein_minmax_TCC1 0 (Bernstein_minmax_TCC1-1 nil 3507233025 ("" (subtype-tcc) nil nil) nil nil (Bernstein_minmax subtype "0" "upto(bernstein_minmax.depth)"))))
