(strat_util (multipoly_minmax_sound 0 (multipoly_minmax_sound-1 nil 3509989257 ("" (skeep) (("" (expand "multipoly_minmax") (("" (typepred "multipolynomial_minmax(mp`mpoly,
                                                   mp`mdeg,
                                                   mv`numvars,
                                                   mp`terms,
                                                   mp`mcoeff,
                                                   mv`vars_lb,
                                                   mv`vars_ub,
                                                   depth,
                                                   eps_localexit(precision),
                                                   false_globalexit,
                                                   mv`iepts,
                                                   LAMBDA (i: nat): (TRUE, TRUE),
                                                   varselect)") (("" (name-replace "SPF" "multipolynomial_minmax(mp`mpoly,
                                                   mp`mdeg,
                                                   mv`numvars,
                                                   mp`terms,
                                                   mp`mcoeff,
                                                   mv`vars_lb,
                                                   mv`vars_ub,
                                                   depth,
                                                   eps_localexit(precision),
                                                   false_globalexit,
                                                   mv`iepts,
                                                   LAMBDA (i: nat): (TRUE, TRUE),
                                                   varselect)") (("" (expand "sound_poly?") (("" (assert) (("" (split -1) (("1" (flatten) (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((multipoly_minmax const-decl "Outminmax" strat_util nil) (= const-decl "[T, T -> boolean]" equalities nil) (bounded_points_exclusive? const-decl "bool" util nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (bounded_points_true? const-decl "bool" util nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (sound_poly? const-decl "bool" poly_minmax nil) (MPoly type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (TRUE const-decl "bool" booleans nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (eps_localexit const-decl "bool" minmax nil) (false_globalexit const-decl "bool" minmax nil)) shostak)) (multipoly_strategy_TCC1 0 (multipoly_strategy_TCC1-1 nil 3509445920 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (sound_poly? const-decl "bool" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (rel_counterex const-decl "bool" minmax nil) (rel_localexit const-decl "bool" minmax nil) (below type-eq-decl nil naturalnumbers nil) (mv!1 skolem-const-decl "MVars" strat_util nil) (depth!1 skolem-const-decl "nat" strat_util nil) (< const-decl "bool" reals nil) (realorder? const-decl "bool" real_orders reals) (sound_poly_inf? const-decl "bool" poly_minmax nil) (inf_box_poly_ub? const-decl "bool" poly_minmax nil) (inf_box_poly_lb? const-decl "bool" poly_minmax nil) (forall_X_poly_rel const-decl "bool" multi_polynomial nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (length_eq? const-decl "bool" minmax nil) (box_poly_ub? const-decl "bool" poly_minmax nil) (box_poly_lb? const-decl "bool" poly_minmax nil) (forall_X_poly_between const-decl "bool" multi_polynomial nil) (multipoly_eval const-decl "real" multi_polynomial nil) (polyproduct_eval const-decl "real" multi_polynomial nil) (polynomial const-decl "[real -> real]" polynomials reals) (^ const-decl "real" exponentiation nil) (boxbetween? const-decl "bool" util nil) (interval_between? const-decl "bool" util nil) (bounded_points_true? const-decl "bool" util nil) (bounded_points_exclusive? const-decl "bool" util nil) (lt_below? const-decl "bool" util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (int_minus_int_is_int application-judgement "int" integers nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (single_outminmax const-decl "Outminmax" minmax nil) (empty_minmax const-decl "Outminmax" minmax nil) (Bernstein_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (denormalize_listreal const-decl "listn[real](length(l))" util nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil)) nil (multipoly_strategy subtype "strat_util.omm`ub_var" "(list_adt[real].cons?)"))) (multipoly_strategy_TCC2 0 (multipoly_strategy_TCC2-1 nil 3509445920 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (sound_poly? const-decl "bool" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (rel_counterex const-decl "bool" minmax nil) (rel_localexit const-decl "bool" minmax nil) (below type-eq-decl nil naturalnumbers nil) (mv!1 skolem-const-decl "MVars" strat_util nil) (depth!1 skolem-const-decl "nat" strat_util nil) (< const-decl "bool" reals nil) (realorder? const-decl "bool" real_orders reals) (sound_poly_inf? const-decl "bool" poly_minmax nil) (inf_box_poly_ub? const-decl "bool" poly_minmax nil) (inf_box_poly_lb? const-decl "bool" poly_minmax nil) (forall_X_poly_rel const-decl "bool" multi_polynomial nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (length_eq? const-decl "bool" minmax nil) (box_poly_ub? const-decl "bool" poly_minmax nil) (box_poly_lb? const-decl "bool" poly_minmax nil) (forall_X_poly_between const-decl "bool" multi_polynomial nil) (multipoly_eval const-decl "real" multi_polynomial nil) (polyproduct_eval const-decl "real" multi_polynomial nil) (polynomial const-decl "[real -> real]" polynomials reals) (^ const-decl "real" exponentiation nil) (boxbetween? const-decl "bool" util nil) (interval_between? const-decl "bool" util nil) (bounded_points_true? const-decl "bool" util nil) (bounded_points_exclusive? const-decl "bool" util nil) (lt_below? const-decl "bool" util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (int_minus_int_is_int application-judgement "int" integers nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (single_outminmax const-decl "Outminmax" minmax nil) (empty_minmax const-decl "Outminmax" minmax nil) (Bernstein_minmax const-decl "(sound?(bspoly, bsdegmono, nvars, terms, cf, intendpts))" bernstein_minmax nil) (denormalize_listreal const-decl "listn[real](length(l))" util nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_real_is_real application-judgement "real" reals nil)) nil (multipoly_strategy subtype "strat_util.omm`lb_var" "(list_adt[real].cons?)"))) (multipoly_strategy_true 0 (multipoly_strategy_true-3 "" 3790098077 ("" (skeep) (("" (expand "multipoly_strategy" :assert? none) (("" (beta) (("" (name-replace "mm" "multipolynomial_minmax(mpr`mpoly,
                                                               mpr`mdeg,
                                                               mv`numvars,
                                                               mpr`terms,
                                                               mpr`mcoeff,
                                                               mv`vars_lb,
                                                               mv`vars_ub,
                                                               depth,
                                                               rel_localexit(mpr`rel),
                                                               rel_globalexit(mpr`rel,depth,true),
                                                               mv`iepts,
                                                               mv`bdpts,
                                                               varselect)") (("" (lift-if) (("" (assert) (("" (split -3) (("1" (typepred "mm") (("1" (expand "rel_localexit") (("1" (lemma "sound_poly_lb_le_ub") (("1" (inst?) (("1" (assert) (("1" (label "lbleub" -1) (("1" (hide "lbleub") (("1" (expand "sound_poly?") (("1" (split -1) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "forall_X_poly_interval") (("1" (expand "forall_X_poly_between") (("1" (skeep) (("1" (inst? -) (("1" (assert) (("1" (flatten) (("1" (name-replace "meval" "multipoly_eval(mpr`mpoly, mpr`mdeg, mpr`mcoeff, mv`numvars,
                                                                                      mpr`terms)
                                                                                     (X)") (("1" (hide-all-but (-2 -3 -7 1)) (("1" (typepred "mpr`rel") (("1" (expand "realorder?") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst? -1) (("2" (flatten) (("2" (hide -2 -3) (("2" (typepred "mpr`rel") (("2" (expand "realorder?") (("2" (split -2) (("1" (expand "forall_X_poly_interval") (("1" (expand "forall_X_poly_rel") (("1" (propax) nil nil)) nil)) nil) ("2" (reveal "lbleub") (("2" (expand "lb_le_ub?") (("2" (hide-all-but (-1 -2 -4 -5 1)) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (reveal "lbleub") (("3" (expand "lb_le_ub?") (("3" (hide-all-but (-1 -2 -4 -5 1)) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((multipoly_strategy const-decl "Outcome" strat_util nil) (real nonempty-type-from-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (list type-decl nil list_adt nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (sound_poly? const-decl "bool" poly_minmax nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (realorder? const-decl "bool" real_orders reals) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (TRUE const-decl "bool" booleans nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (sound_poly_lb_le_ub formula-decl nil poly_minmax nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (forall_X_poly_interval const-decl "bool" multi_polynomial nil) (multipoly_eval const-decl "real" multi_polynomial nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (forall_X_poly_between const-decl "bool" multi_polynomial nil) (sound_poly_inf? const-decl "bool" poly_minmax nil) (forall_X_poly_rel const-decl "bool" multi_polynomial nil) (lb_le_ub? const-decl "bool" minmax nil)) shostak) (multipoly_strategy_true-2 "" 3758307765 ("" (skeep) (("" (expand "multipoly_strategy" :assert? none) (("" (beta) (("" (name-replace "mm" "multipolynomial_minmax(mpr`mpoly,
                                                               mpr`mdeg,
                                                               mv`numvars,
                                                               mpr`terms,
                                                               mpr`mcoeff,
                                                               mv`vars_lb,
                                                               mv`vars_ub,
                                                               depth,
                                                               rel_localexit(mpr`rel),
                                                               rel_globalexit(mpr`rel,depth,true),
                                                               mv`iepts,
                                                               mv`bdpts,
                                                               varselect)") (("" (lift-if) (("" (assert) (("" (split -3) (("1" (typepred "mm") (("1" (expand "rel_localexit") (("1" (lemma "sound_poly_lb_le_ub") (("1" (inst?) (("1" (assert) (("1" (label "lbleub" -1) (("1" (hide "lbleub") (("1" (expand "sound_poly?") (("1" (split -1) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "forall_X_poly_interval") (("1" (expand "forall_X_poly_between") (("1" (expand "eval_X_poly_between" -2) (("1" (skeep) (("1" (inst? -) (("1" (expand "eval_X_poly_rel") (("1" (assert) (("1" (flatten) (("1" (name-replace "meval" "multipoly_eval(mpr`mpoly, mpr`mdeg, mpr`mcoeff, mv`numvars,
                                                                                      mpr`terms)
                                                                                     (X)") (("1" (hide-all-but (-2 -3 -7 1)) (("1" (typepred "mpr`rel") (("1" (expand "realorder?") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst? -1) (("2" (flatten) (("2" (hide -2 -3) (("2" (typepred "mpr`rel") (("2" (expand "realorder?") (("2" (split -2) (("1" (expand "forall_X_poly_interval") (("1" (expand "forall_X_poly_rel") (("1" (expand "eval_X_poly_rel") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (reveal "lbleub") (("2" (expand "lb_le_ub?") (("2" (hide-all-but (-1 -2 -4 -5 1)) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (reveal "lbleub") (("3" (expand "lb_le_ub?") (("3" (hide-all-but (-1 -2 -4 -5 1)) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (sound_poly? const-decl "bool" poly_minmax nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (realorder? const-decl "bool" real_orders reals) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (sound_poly_lb_le_ub formula-decl nil poly_minmax nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (forall_X_poly_interval const-decl "bool" multi_polynomial nil) (multipoly_eval const-decl "real" multi_polynomial nil) (le_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (forall_X_poly_between const-decl "bool" multi_polynomial nil) (sound_poly_inf? const-decl "bool" poly_minmax nil) (forall_X_poly_rel const-decl "bool" multi_polynomial nil) (lb_le_ub? const-decl "bool" minmax nil)) shostak) (multipoly_strategy_true-1 nil 3509487957 ("" (skeep) (("" (expand "multipoly_strategy" :assert? none) (("" (beta) (("" (name-replace "mm" "multipolynomial_minmax(mpr`mpoly,
                                                             mpr`mdeg,
                                                             mv`numvars,
                                                             mpr`terms,
                                                             mpr`mcoeff,
                                                             mv`vars_lb,
                                                             mv`vars_ub,
                                                             depth,
                                                             rel_localexit(mpr`rel),
                                                             rel_globalexit(mpr`rel,depth,true),
                                                             mv`iepts,
                                                             mv`bdpts,
                                                             varselect)") (("" (lift-if) (("" (assert) (("" (split -3) (("1" (typepred "mm") (("1" (expand "rel_localexit") (("1" (lemma "sound_poly_lb_le_ub") (("1" (inst?) (("1" (assert) (("1" (label "lbleub" -1) (("1" (hide "lbleub") (("1" (expand "sound_poly?") (("1" (split -1) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "forall_X_poly_interval") (("1" (expand "forall_X_poly_between") (("1" (skeep) (("1" (inst? -) (("1" (assert) (("1" (flatten) (("1" (name-replace "meval" "multipoly_eval(mpr`mpoly, mpr`mdeg, mpr`mcoeff, mv`numvars,
                                                                                mpr`terms)
                                                                               (X)") (("1" (hide-all-but (-2 -3 -7 1)) (("1" (typepred "mpr`rel") (("1" (expand "realorder?") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst? -1) (("2" (flatten) (("2" (hide -2 -3) (("2" (typepred "mpr`rel") (("2" (expand "realorder?") (("2" (split -2) (("1" (expand "forall_X_poly_interval") (("1" (expand "forall_X_poly_rel") (("1" (propax) nil nil)) nil)) nil) ("2" (reveal "lbleub") (("2" (expand "lb_le_ub?") (("2" (hide-all-but (-1 -2 -4 -5 1)) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (reveal "lbleub") (("3" (expand "lb_le_ub?") (("3" (hide-all-but (-1 -2 -4 -5 1)) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (sound_poly? const-decl "bool" poly_minmax nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (realorder? const-decl "bool" real_orders reals) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (sound_poly_lb_le_ub formula-decl nil poly_minmax nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (forall_X_poly_interval const-decl "bool" multi_polynomial nil) (eval_X_poly_between macro-decl "bool" multi_polynomial nil) (multipoly_eval const-decl "real" multi_polynomial nil) (le_realorder name-judgement "RealOrder" real_orders reals) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (gt_realorder name-judgement "RealOrder" real_orders reals) (eval_X_poly_rel macro-decl "bool" multi_polynomial nil) (forall_X_poly_between const-decl "bool" multi_polynomial nil) (sound_poly_inf? const-decl "bool" poly_minmax nil) (forall_X_poly_rel const-decl "bool" multi_polynomial nil) (lb_le_ub? const-decl "bool" minmax nil)) shostak)) (multipoly_strategy_false 1 (multipoly_strategy_false-2 nil 3509800905 ("" (skeep) (("" (expand "multipoly_strategy" :assert? none) (("" (beta) (("" (name-replace "mm" "multipolynomial_minmax
                                                              (mpr`mpoly,
                                                               mpr`mdeg,
                                                               mv`numvars,
                                                               mpr`terms,
                                                               mpr`mcoeff,
                                                               mv`vars_lb,
                                                               mv`vars_ub,
                                                               depth,
                                                               rel_localexit(mpr`rel),
                                                               rel_globalexit
                                                               (mpr`rel, depth, FALSE),
                                                               mv`iepts,
                                                               mv`bdpts,
                                                               varselect)") (("" (lift-if) (("" (assert) (("" (ground) (("" (expand "forall_X_poly_interval") (("" (expand "rel_counterex") (("" (ground) (("1" (inst - "list2array(0)(mm`ub_var)") (("1" (split -) (("1" (typepred "mm") (("1" (expand "sound_poly?") (("1" (split -) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "box_poly_ub?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst - "mpr`rel") (("2" (flatten) (("2" (expand "inf_box_poly_ub?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (expand "sound_poly?") (("2" (expand "sound_poly_fin?") (("2" (expand "sound_poly_inf?") (("2" (expand "boxbetween?") (("2" (expand "box_poly_ub?") (("2" (expand "inf_box_poly_ub?") (("2" (ground) (("2" (inst - "<") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst - "list2array(0)(mm`lb_var)") (("2" (split -) (("1" (typepred "mm") (("1" (expand "sound_poly?") (("1" (split -) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "box_poly_lb?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst - "mpr`rel") (("2" (flatten) (("2" (expand "inf_box_poly_lb?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (expand "sound_poly?") (("2" (expand "sound_poly_fin?") (("2" (expand "sound_poly_inf?") (("2" (expand "boxbetween?") (("2" (expand "box_poly_lb?") (("2" (expand "inf_box_poly_lb?") (("2" (ground) (("2" (inst - ">") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((list type-decl nil list_adt nil) (Outminmax type-eq-decl nil minmax nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (sound_poly? const-decl "bool" poly_minmax nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (realorder? const-decl "bool" real_orders reals) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (forall_X_poly_interval const-decl "bool" multi_polynomial nil) (inf_box_poly_ub? const-decl "bool" poly_minmax nil) (sound_poly_inf? const-decl "bool" poly_minmax nil) (box_poly_ub? const-decl "bool" poly_minmax nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (boxbetween? const-decl "bool" util nil) (every adt-def-decl "boolean" list_adt nil) (list2array def-decl "T" array2list structures) (inf_box_poly_lb? const-decl "bool" poly_minmax nil) (box_poly_lb? const-decl "bool" poly_minmax nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (rel_counterex const-decl "bool" minmax nil)) nil) (multipoly_strategy_false-1 nil 3509798902 ("" (skeep) (("" (expand "multipoly_strategy" :assert? none) (("" (beta) (("" (name-replace "mm" "multipolynomial_minmax
                                                                (mpr`mpoly,
                                                                 mpr`mdeg,
                                                                 mv`numvars,
                                                                 mpr`terms,
                                                                 mpr`mcoeff,
                                                                 mv`vars_lb,
                                                                 mv`vars_ub,
                                                                 depth,
                                                                 rel_localexit(mpr`rel),
                                                                 rel_globalexit
                                                                 (mpr`rel, depth, FALSE),
                                                                 mv`iepts,
                                                                 mv`bdpts,
                                                                 varselect)") (("" (lift-if) (("" (assert) (("" (ground) (("" (expand "forall_X_poly_interval") (("" (expand "rel_counterex") (("" (ground) (("1" (inst - "list2array(0)(mm`ub_var)") (("1" (split -) (("1" (typepred "mm") (("1" (expand "sound_poly?") (("1" (split -) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "box_poly_ub?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst - "mpr`rel") (("2" (flatten) (("2" (expand "inf_box_poly_ub?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (expand "sound_poly?") (("2" (expand "sound_poly_fin?") (("2" (expand "sound_poly_inf?") (("2" (expand "boxbetween?") (("2" (expand "box_poly_ub?") (("2" (expand "inf_box_poly_ub?") (("2" (ground) (("2" (inst - "<") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst - "list2array(0)(mm`lb_var)") (("2" (split -) (("1" (typepred "mm") (("1" (expand "sound_poly?") (("1" (split -) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "box_poly_lb?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst - "mpr`rel") (("2" (flatten) (("2" (expand "inf_box_poly_lb?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (expand "sound_poly?") (("2" (expand "sound_poly_fin?") (("2" (expand "sound_poly_inf?") (("2" (expand "boxbetween?") (("2" (expand "box_poly_lb?") (("2" (expand "inf_box_poly_lb?") (("2" (ground) (("2" (inst - ">") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((multipoly_strategy const-decl "Outcome" strat_util nil) (real nonempty-type-from-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (list type-decl nil list_adt nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (sound_poly? const-decl "bool" poly_minmax nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (realorder? const-decl "bool" real_orders reals) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (FALSE const-decl "bool" booleans nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (forall_X_poly_interval const-decl "bool" multi_polynomial nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (inf_box_poly_ub? const-decl "bool" poly_minmax nil) (sound_poly_inf? const-decl "bool" poly_minmax nil) (box_poly_ub? const-decl "bool" poly_minmax nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boxbetween? const-decl "bool" util nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (list2array def-decl "T" array2list structures) (inf_box_poly_lb? const-decl "bool" poly_minmax nil) (box_poly_lb? const-decl "bool" poly_minmax nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rel_counterex const-decl "bool" minmax nil)) shostak)) (multipoly_strategy_counterexample 0 (multipoly_strategy_counterexample-1 nil 3509877763 ("" (skeep) (("" (expand "multipoly_strategy" :assert? none) (("" (beta) (("" (name-replace "mm" "multipolynomial_minmax
                                                                            (mpr`mpoly,
                                                                             mpr`mdeg,
                                                                             mv`numvars,
                                                                             mpr`terms,
                                                                             mpr`mcoeff,
                                                                             mv`vars_lb,
                                                                             mv`vars_ub,
                                                                             depth,
                                                                             rel_localexit(mpr`rel),
                                                                             rel_globalexit
                                                                             (mpr`rel, depth, FALSE),
                                                                             mv`iepts,
                                                                             mv`bdpts,
                                                                             varselect)") (("" (flatten) (("" (lift-if) (("" (ground) (("1" (expand "rel_counterex") (("1" (flatten) (("1" (typepred "mm") (("1" (expand "sound_poly?") (("1" (split -) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "box_poly_ub?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst - "mpr`rel") (("2" (flatten) (("2" (expand "inf_box_poly_ub?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (expand "sound_poly?") (("2" (expand "sound_poly_fin?") (("2" (expand "sound_poly_inf?") (("2" (expand "boxbetween?") (("2" (expand "box_poly_ub?") (("2" (expand "inf_box_poly_ub?") (("2" (expand "rel_counterex") (("2" (ground) (("2" (inst - "<") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "rel_counterex") (("3" (flatten) (("3" (typepred "mm") (("3" (expand "sound_poly?") (("3" (split -) (("1" (flatten) (("1" (expand "sound_poly_fin?") (("1" (flatten) (("1" (expand "box_poly_lb?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "sound_poly_inf?") (("2" (inst - "mpr`rel") (("2" (flatten) (("2" (expand "inf_box_poly_lb?") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (typepred "mm") (("4" (expand "sound_poly?") (("4" (expand "sound_poly_fin?") (("4" (expand "sound_poly_inf?") (("4" (expand "boxbetween?") (("4" (expand "box_poly_lb?") (("4" (expand "inf_box_poly_lb?") (("4" (expand "rel_counterex") (("4" (ground) (("4" (inst - ">") (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((multipoly_strategy const-decl "Outcome" strat_util nil) (real nonempty-type-from-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (list type-decl nil list_adt nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Outminmax type-eq-decl nil minmax nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (Polynomial type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Coeff type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (VarSelector type-eq-decl nil vardirselector nil) (sound_poly? const-decl "bool" poly_minmax nil) (multipolynomial_minmax const-decl "(sound_poly?(mpoly, polydegmono, nvars, terms, cf, Avars, Bvars,
             boundedpts, intendpts))" poly_minmax nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (MVars type-eq-decl nil MPoly nil) (realorder? const-decl "bool" real_orders reals) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (FALSE const-decl "bool" booleans nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (box_poly_lb? const-decl "bool" poly_minmax nil) (inf_box_poly_lb? const-decl "bool" poly_minmax nil) (boxbetween? const-decl "bool" util nil) (< const-decl "bool" reals nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rel_counterex const-decl "bool" minmax nil) (NOT const-decl "[bool -> bool]" booleans nil) (sound_poly_fin? const-decl "bool" poly_minmax nil) (box_poly_ub? const-decl "bool" poly_minmax nil) (sound_poly_inf? const-decl "bool" poly_minmax nil) (inf_box_poly_ub? const-decl "bool" poly_minmax nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil)) (a2l__multipoly_strategy_TCC1 0 (a2l__multipoly_strategy_TCC1-1 nil 3687535336 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (rel_localexit const-decl "bool" minmax nil) (rel_counterex const-decl "bool" minmax nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (int_minus_int_is_int application-judgement "int" integers nil) (multipoly_translate const-decl "Polyproduct" multi_polynomial nil) (bs_convert_poly const-decl "Polyproduct" poly2bernstein nil) (array2list const-decl "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" array2list structures) (polylist const-decl "PolyList" util nil) (single_outminmax const-decl "Outminmax" minmax nil) (empty_minmax const-decl "Outminmax" minmax nil) (a2l__Bernstein_minmax const-decl "{omm: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb),
           vs: VarSelector | represents(varselect, vs)):
     omm =
      Bernstein_minmax(mb, bsdegmono, nvars, terms, cf, depth, localexit,
                       globalexit, intendpts, vs)}" a2l__bernstein_minmax nil) (denormalize_listreal const-decl "listn[real](length(l))" util nil) (a2l__multipolynomial_minmax const-decl "Outminmax" poly_minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil)) nil (a2l__multipoly_strategy subtype "strat_util.omm`ub_var" "(list_adt[real].cons?)"))) (a2l__multipoly_strategy_TCC2 0 (a2l__multipoly_strategy_TCC2-1 nil 3687535336 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (rel_localexit const-decl "bool" minmax nil) (rel_counterex const-decl "bool" minmax nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (rel_localexit_inv application-judgement "(localexit_inv?)" minmax nil) (int_minus_int_is_int application-judgement "int" integers nil) (multipoly_translate const-decl "Polyproduct" multi_polynomial nil) (bs_convert_poly const-decl "Polyproduct" poly2bernstein nil) (array2list const-decl "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" array2list structures) (polylist const-decl "PolyList" util nil) (single_outminmax const-decl "Outminmax" minmax nil) (empty_minmax const-decl "Outminmax" minmax nil) (a2l__Bernstein_minmax const-decl "{omm: Outminmax |
   FORALL (mb: MultiBernstein | represents(bspoly, mb),
           vs: VarSelector | represents(varselect, vs)):
     omm =
      Bernstein_minmax(mb, bsdegmono, nvars, terms, cf, depth, localexit,
                       globalexit, intendpts, vs)}" a2l__bernstein_minmax nil) (denormalize_listreal const-decl "listn[real](length(l))" util nil) (a2l__multipolynomial_minmax const-decl "Outminmax" poly_minmax nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil)) nil (a2l__multipoly_strategy subtype "strat_util.omm`lb_var" "(list_adt[real].cons?)"))) (a2l__multipoly_strategy__equivalence 0 (a2l__multipoly_strategy__equivalence-1 nil 3687537101 ("" (skeep :preds? t) (("" (expand "a2l__multipoly_strategy") (("" (expand "multipoly_strategy") (("" (lemma "a2l__multipolynomial_minmax__equivalence") (("" (inst? - :where 1) (("" (replace -1 :hide? t) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((a2l__multipoly_strategy const-decl "Outcome" strat_util nil) (a2l__multipolynomial_minmax__equivalence formula-decl nil poly_minmax nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (PolyList type-eq-decl nil util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (VarSelector type-eq-decl nil vardirselector nil) (MultiBernstein type-eq-decl nil util nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (rel_localexit const-decl "bool" minmax nil) (rel_globalexit const-decl "bool" minmax nil) (realorder? const-decl "bool" real_orders reals) (Outminmax type-eq-decl nil minmax nil) (list type-decl nil list_adt nil) (MPolyRel type-eq-decl nil MPoly nil) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil) (posnat nonempty-type-eq-decl nil integers nil) (IntervalEndpoints type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (multipoly_strategy const-decl "Outcome" strat_util nil)) shostak)) (a2l__multipoly_strategy_true 0 (a2l__multipoly_strategy_true-1 nil 3687535443 ("" (skeep :preds? t) (("" (lemma "a2l__multipoly_strategy__equivalence") (("" (inst -1 "_" "_" "_" "_" "represented_by(a2l__varselect)" "_") (("" (inst?) (("1" (replace -1 :hide? t) (("1" (lemma "multipoly_strategy_true") (("1" (inst? -) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((a2l__multipoly_strategy__equivalence formula-decl nil strat_util nil) (a2l__varselect skolem-const-decl "a2l__VarSelector" strat_util nil) (TRUE const-decl "bool" booleans nil) (MultiPolynomial type-eq-decl nil util nil) (RealOrder type-eq-decl nil real_orders reals) (MPolyRel type-eq-decl nil MPoly nil) (IntervalEndpoints type-eq-decl nil util nil) (Vars type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil) (multipoly_strategy_true formula-decl nil strat_util nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (represented_by const-decl "{vs: VarSelector | represents(a2l__varselect, vs)}" vardirselector_into_a2lvardirselector nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (PolyList type-eq-decl nil util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (VarSelector type-eq-decl nil vardirselector nil) (Coeff type-eq-decl nil util nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (DegreeMono type-eq-decl nil util nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak)) (a2l__multipoly_strategy_false 0 (a2l__multipoly_strategy_false-1 nil 3687618961 ("" (skeep :preds? t) (("" (lemma "a2l__multipoly_strategy__equivalence") (("" (inst? -1 :where -6) (("" (replace -1 :hide? t) (("" (lemma "multipoly_strategy_false") (("" (inst? -) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((a2l__multipoly_strategy__equivalence formula-decl nil strat_util nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (multipoly_strategy_false formula-decl nil strat_util nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (PolyList type-eq-decl nil util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (VarSelector type-eq-decl nil vardirselector nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MPolyRel type-eq-decl nil MPoly nil) (posnat nonempty-type-eq-decl nil integers nil) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (FALSE const-decl "bool" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak)) (a2l__multipoly_strategy_counterexample 0 (a2l__multipoly_strategy_counterexample-1 nil 3687619421 ("" (skeep :preds? t) (("" (lemma "a2l__multipoly_strategy__equivalence") (("" (inst? -1 :where 1) (("" (replace -1 :hide? t) (("" (lemma "multipoly_strategy_counterexample") (("" (inst? -) nil nil)) nil)) nil)) nil)) nil)) nil) ((a2l__multipoly_strategy__equivalence formula-decl nil strat_util nil) (multipoly_strategy_counterexample formula-decl nil strat_util nil) (represents const-decl "bool" vardirselector_into_a2lvardirselector nil) (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil) (PolyList type-eq-decl nil util nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (VarSelector type-eq-decl nil vardirselector nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (MultiBernstein type-eq-decl nil util nil) (Polyproduct type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil) (IntervalEndpoints type-eq-decl nil util nil) (MPolyRel type-eq-decl nil MPoly nil) (posnat nonempty-type-eq-decl nil integers nil) (RealOrder type-eq-decl nil real_orders reals) (MultiPolynomial type-eq-decl nil util nil) (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil) (FALSE const-decl "bool" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak)))
