(|multi_bernstein|
 (|bsproduct_eval_TCC1| 0
  (|bsproduct_eval_TCC1-1| |nil| 3498406967 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|bsproduct_eval| SUBTYPE "multi_bernstein.bsdegmono(multi_bernstein.i)"
    "above((number_fields.-)(multi_bernstein.j, 1))")))
 (|multibs_eval_rec_TCC1| 0
  (|multibs_eval_rec_TCC1-1| |nil| 3498990086 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|multibs_eval_rec| SUBTYPE "multi_bernstein.bsdegmono(multi_bernstein.k)"
    "above((number_fields.-)(multi_bernstein.f(multi_bernstein.k), 1))")))
 (|multibs_eval_rec_TCC2| 0
  (|multibs_eval_rec_TCC2-1| |nil| 3498990086 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|multibs_eval_rec| SUBTYPE "(number_fields.-)(multi_bernstein.v, 1)"
    "nat")))
 (|multibs_eval_rec_TCC3| 0
  (|multibs_eval_rec_TCC3-1| |nil| 3498990086 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|multibs_eval_rec| TERMINATION
    "multi_bernstein.multibs_eval_rec(multi_bernstein.bspoly, multi_bernstein.bsdegmono, multi_bernstein.cf, multi_bernstein.nvars, multi_bernstein.terms, (number_fields.-)(multi_bernstein.v, 1))"
    "NIL")))
 (|multibs_eval_1_term| 0
  (|multibs_eval_1_term-2| "" 3790097887
   ("" (EXPAND "multibs_eval")
    (("" (EXPAND "sigma")
      (("" (EXPAND "sigma")
        ((""
          (CASE "FORALL (X: Vars, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                          cf: Coeff, mvars: nat):
                                    cf(0) * bsproduct_eval(bspoly(0), bsdegmono, mvars+1)(X) =
                                     multibs_eval_rec(bspoly, bsdegmono, cf, mvars+1, 1, mvars+1)
                                                     (LAMBDA (i: nat): 0)(X)")
          (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "mvars")
              (("1" (SKEEP)
                (("1" (ASSERT)
                  (("1" (EXPAND "bsproduct_eval")
                    (("1" (EXPAND "product")
                      (("1" (EXPAND "product")
                        (("1" (EXPAND "multibs_eval_rec")
                          (("1" (REWRITE "sigma_scal" :DIR RL)
                            (("1" (REWRITE "sigma_restrict_eq")
                              (("1" (DECOMPOSE-EQUALITY)
                                (("1" (EXPAND "restrict")
                                  (("1" (LIFT-IF)
                                    (("1" (GROUND)
                                      (("1" (HIDE 3)
                                        (("1" (EXPAND "multibs_eval_rec")
                                          (("1" (EXPAND "product")
                                            (("1" (EXPAND "product")
                                              (("1"
                                                (EXPAND "multibs_eval_mono")
                                                (("1" (EXPAND "sigma")
                                                  (("1" (EXPAND "sigma")
                                                    (("1" (EXPAND "product")
                                                      (("1" (EXPAND "product")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (ASSERT)
                      (("2" (EXPAND "bsproduct_eval" +)
                        (("2" (EXPAND "product" + 1)
                          (("2" (LEMMA "sigma_scal")
                            (("2"
                              (INST - "LAMBDA (j: nat):
                                        IF j > bsdegmono(1 + vv) THEN 0
                                        ELSE bspoly(0)(1 + vv)(j) *
                                              Bern(j, bsdegmono(1 + vv))(X(1 + vv))
                                        ENDIF"
                               "cf(0) *
                                 product(0, vv,
                                         LAMBDA (i: nat):
                                           sigma(0, bsdegmono(i),
                                                 LAMBDA (j: nat):
                                                   IF j > bsdegmono(i) THEN 0
                                                   ELSE bspoly(0)(i)(j) *
                                                         Bern(j, bsdegmono(i))(X(i))
                                                   ENDIF))"
                               "bsdegmono(1+vv)" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 :DIR RL)
                                  (("1" (HIDE -1)
                                    (("1" (EXPAND "multibs_eval_rec" +)
                                      (("1" (REWRITE "sigma_restrict_eq")
                                        (("1" (DECOMPOSE-EQUALITY)
                                          (("1" (EXPAND "restrict")
                                            (("1" (LIFT-IF)
                                              (("1" (GROUND)
                                                (("1" (HIDE 3)
                                                  (("1"
                                                    (EXPAND "bsproduct_eval")
                                                    (("1" (INST?)
                                                      (("1" (INST - "cf")
                                                        (("1"
                                                          (MULT-BY -1
                                                           "bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv))")
                                                          (("1" (REPLACE -1)
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (CASE
                                                                    "FORALL (rr:nat,cgm:CoeffMono): rr<=vv IMPLIES multibs_eval_rec(bspoly, bsdegmono, cf, 1 + vv, 1, 1 + rr)
                                                                                                  (cgm)(X)
                                                                                   * (bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv)))
                                                                                   =
                                                                                   multibs_eval_rec(bspoly, bsdegmono, cf, 2 + vv, 1, 1 + rr)
                                                                                                   (cgm WITH [(1 + vv) := x!1])(X)")
                                                                (("1" (INST?)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (INDUCT
                                                                     "rr")
                                                                    (("1"
                                                                      (SKEEP)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "multibs_eval_rec")
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "sigma_scal")
                                                                            (("1"
                                                                              (INST
                                                                               -
                                                                               "(LAMBDA (d: nat):
                                                                                      multibs_eval_rec(bspoly, bsdegmono, cf, 1 + vv, 1, 0)
                                                                                                      (cgm WITH [(0) := d])(X))"
                                                                               "(bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv)))"
                                                                               "bsdegmono(0)"
                                                                               "0")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1
                                                                                 :DIR
                                                                                 RL)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "sigma_restrict_eq")
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (LIFT-IF)
                                                                                          (("1"
                                                                                            (GROUND)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               3)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "multibs_eval_rec")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "multibs_eval_mono")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "sigma")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "sigma")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "product"
                                                                                                         +
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "product"
                                                                                                           +
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "NOT product(0, vv,
                                                             LAMBDA (k: nat):
                                                               IF cgm WITH [(0) := x!2](k) <= bsdegmono(k)
                                                                 THEN Bern(cgm WITH [(0) := x!2](k), bsdegmono(k))(X(k))
                                                               ELSE 1
                                                               ENDIF) = product(0, vv,
                                                              LAMBDA (k: nat):
                                                                IF cgm WITH [(1 + vv) := x!1, (0) := x!2](k) <=
                                                                    bsdegmono(k)
                                                                  THEN Bern(cgm WITH [(1 + vv) := x!1, (0) := x!2](k),
                                                                            bsdegmono(k))
                                                                           (X(k))
                                                                ELSE 1
                                                                ENDIF)")
                                                                                                            (("1"
                                                                                                              (HIDE
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "product_restrict_eq")
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (DECOMPOSE-EQUALITY)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "restrict")
                                                                                                                      (("1"
                                                                                                                        (LIFT-IF)
                                                                                                                        (("1"
                                                                                                                          (GROUND)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (SKOSIMP*)
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("3"
                                                                                                                      (SKOSIMP*)
                                                                                                                      (("3"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               :DIR
                                                                                                               RL)
                                                                                                              (("2"
                                                                                                                (HIDE
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (CASE
                                                                                                                      "product(0, vv,
                                                                 LAMBDA (j: nat): bspoly(0)(j)(cgm WITH [(0) := x!2](j)))=product(0, vv,
                                                                  LAMBDA (j: nat):
                                                                    bspoly(0)(j)(cgm WITH [(1 + vv) := x!1, (0) := x!2](j)))")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     3)
                                                                                                                    (("2"
                                                                                                                      (REWRITE
                                                                                                                       "product_restrict_eq")
                                                                                                                      (("2"
                                                                                                                        (HIDE
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (DECOMPOSE-EQUALITY)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "restrict")
                                                                                                                            (("2"
                                                                                                                              (LIFT-IF)
                                                                                                                              (("2"
                                                                                                                                (GROUND)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("3"
                                                                                                              (SKOSIMP*)
                                                                                                              (("3"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("4"
                                                                                                              (SKOSIMP*)
                                                                                                              (("4"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (SKOLEM 1
                                                                       "rr")
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (SKEEP)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "multibs_eval_rec"
                                                                               +)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "sigma_scal")
                                                                                (("2"
                                                                                  (INST?)
                                                                                  (("2"
                                                                                    (INST
                                                                                     -
                                                                                     "(bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv)))")
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (REWRITE
                                                                                           "sigma_restrict_eq")
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (DECOMPOSE-EQUALITY)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (LIFT-IF)
                                                                                                  (("2"
                                                                                                    (GROUND)
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -
                                                                                                       "cgm WITH [(1 + rr) := x!2]")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (SKOSIMP*)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (ASSERT) NIL NIL)) NIL)
                                         ("3" (SKOSIMP*)
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval_rec| DEF-DECL "real" |multi_bernstein| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|multibs_eval_mono| CONST-DECL "real" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|vv| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|x!2| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|cgm| SKOLEM-CONST-DECL "CoeffMono" |multi_bernstein| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL))
   SHOSTAK)
  (|multibs_eval_1_term-1| |nil| 3499083500
   ("" (EXPAND "multibs_eval")
    (("" (EXPAND "sigma")
      (("" (EXPAND "sigma")
        ((""
          (CASE "FORALL (X: Vars, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                          cf: Coeff, mvars: nat):
                                    cf(0) * bsproduct_eval(bspoly(0), bsdegmono, mvars+1)(X) =
                                     multibs_eval_rec(bspoly, bsdegmono, cf, mvars+1, 1, mvars+1)
                                                     (LAMBDA (i: nat): 0)(X)")
          (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "mvars")
              (("1" (SKEEP)
                (("1" (ASSERT)
                  (("1" (EXPAND "bsproduct_eval")
                    (("1" (EXPAND "product")
                      (("1" (EXPAND "product")
                        (("1" (EXPAND "multibs_eval_rec")
                          (("1" (REWRITE "sigma_scal" :DIR RL)
                            (("1" (REWRITE "sigma_restrict_eq")
                              (("1" (DECOMPOSE-EQUALITY)
                                (("1" (EXPAND "restrict")
                                  (("1" (LIFT-IF)
                                    (("1" (GROUND)
                                      (("1" (HIDE 3)
                                        (("1" (EXPAND "multibs_eval_rec")
                                          (("1" (EXPAND "product")
                                            (("1" (EXPAND "product")
                                              (("1"
                                                (EXPAND "multibs_eval_mono")
                                                (("1" (EXPAND "sigma")
                                                  (("1" (EXPAND "sigma")
                                                    (("1" (EXPAND "product")
                                                      (("1" (EXPAND "product")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (ASSERT)
                      (("2" (EXPAND "bsproduct_eval" +)
                        (("2" (EXPAND "product" + 1)
                          (("2" (LEMMA "sigma_scal")
                            (("2"
                              (INST - "LAMBDA (j: nat):
                                        IF j > bsdegmono(1 + vv) THEN 0
                                        ELSE bspoly(0)(1 + vv)(j) *
                                              Bern(j, bsdegmono(1 + vv))(X(1 + vv))
                                        ENDIF"
                               "cf(0) *
                                 product(0, vv,
                                         LAMBDA (i: nat):
                                           sigma(0, bsdegmono(i),
                                                 LAMBDA (j: nat):
                                                   IF j > bsdegmono(i) THEN 0
                                                   ELSE bspoly(0)(i)(j) *
                                                         Bern(j, bsdegmono(i))(X(i))
                                                   ENDIF))"
                               "bsdegmono(1+vv)" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 :DIR RL)
                                  (("1" (HIDE -1)
                                    (("1" (EXPAND "multibs_eval_rec" +)
                                      (("1" (REWRITE "sigma_restrict_eq")
                                        (("1" (DECOMPOSE-EQUALITY)
                                          (("1" (EXPAND "restrict")
                                            (("1" (LIFT-IF)
                                              (("1" (GROUND)
                                                (("1" (HIDE 3)
                                                  (("1"
                                                    (EXPAND "bsproduct_eval")
                                                    (("1" (INST?)
                                                      (("1" (INST - "cf")
                                                        (("1"
                                                          (MULT-BY -1
                                                           "bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv))")
                                                          (("1" (REPLACE -1)
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (CASE
                                                                    "FORALL (rr:nat,cgm:CoeffMono): rr<=vv IMPLIES multibs_eval_rec(bspoly, bsdegmono, cf, 1 + vv, 1, 1 + rr)
                                                                                                  (cgm)(X)
                                                                                   * (bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv)))
                                                                                   =
                                                                                   multibs_eval_rec(bspoly, bsdegmono, cf, 2 + vv, 1, 1 + rr)
                                                                                                   (cgm WITH [(1 + vv) := x!1])(X)")
                                                                (("1" (INST?)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (INDUCT
                                                                     "rr")
                                                                    (("1"
                                                                      (SKEEP)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "multibs_eval_rec")
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "sigma_scal")
                                                                            (("1"
                                                                              (INST
                                                                               -
                                                                               "(LAMBDA (d: nat):
                                                                                      multibs_eval_rec(bspoly, bsdegmono, cf, 1 + vv, 1, 0)
                                                                                                      (cgm WITH [(0) := d])(X))"
                                                                               "(bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv)))"
                                                                               "bsdegmono(0)"
                                                                               "0")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1
                                                                                 :DIR
                                                                                 RL)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "sigma_restrict_eq")
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (LIFT-IF)
                                                                                          (("1"
                                                                                            (GROUND)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               3)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "multibs_eval_rec")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "multibs_eval_mono")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "sigma")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "sigma")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "product"
                                                                                                         +
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "product"
                                                                                                           +
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "NOT product(0, vv,
                                                             LAMBDA (k: nat):
                                                               IF cgm WITH [(0) := x!2](k) <= bsdegmono(k)
                                                                 THEN Bern(cgm WITH [(0) := x!2](k), bsdegmono(k))(X(k))
                                                               ELSE 1
                                                               ENDIF) = product(0, vv,
                                                              LAMBDA (k: nat):
                                                                IF cgm WITH [(1 + vv) := x!1, (0) := x!2](k) <=
                                                                    bsdegmono(k)
                                                                  THEN Bern(cgm WITH [(1 + vv) := x!1, (0) := x!2](k),
                                                                            bsdegmono(k))
                                                                           (X(k))
                                                                ELSE 1
                                                                ENDIF)")
                                                                                                            (("1"
                                                                                                              (HIDE
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "product_restrict_eq")
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (DECOMPOSE-EQUALITY)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "restrict")
                                                                                                                      (("1"
                                                                                                                        (LIFT-IF)
                                                                                                                        (("1"
                                                                                                                          (GROUND)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (SKOSIMP*)
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("3"
                                                                                                                      (SKOSIMP*)
                                                                                                                      (("3"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               :DIR
                                                                                                               RL)
                                                                                                              (("2"
                                                                                                                (HIDE
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (CASE
                                                                                                                      "product(0, vv,
                                                                 LAMBDA (j: nat): bspoly(0)(j)(cgm WITH [(0) := x!2](j)))=product(0, vv,
                                                                  LAMBDA (j: nat):
                                                                    bspoly(0)(j)(cgm WITH [(1 + vv) := x!1, (0) := x!2](j)))")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     3)
                                                                                                                    (("2"
                                                                                                                      (REWRITE
                                                                                                                       "product_restrict_eq")
                                                                                                                      (("2"
                                                                                                                        (HIDE
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (DECOMPOSE-EQUALITY)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "restrict")
                                                                                                                            (("2"
                                                                                                                              (LIFT-IF)
                                                                                                                              (("2"
                                                                                                                                (GROUND)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("3"
                                                                                                              (SKOSIMP*)
                                                                                                              (("3"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("4"
                                                                                                              (SKOSIMP*)
                                                                                                              (("4"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (SKOLEM 1
                                                                       "rr")
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (SKEEP)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "multibs_eval_rec"
                                                                               +)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "sigma_scal")
                                                                                (("2"
                                                                                  (INST?)
                                                                                  (("2"
                                                                                    (INST
                                                                                     -
                                                                                     "(bspoly(0)(1 + vv)(x!1) * Bern(x!1, bsdegmono(1 + vv))(X(1 + vv)))")
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (REWRITE
                                                                                           "sigma_restrict_eq")
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (DECOMPOSE-EQUALITY)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "restrict")
                                                                                                (("2"
                                                                                                  (LIFT-IF)
                                                                                                  (("2"
                                                                                                    (GROUND)
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -
                                                                                                       "cgm WITH [(1 + rr) := x!2]")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (SKOSIMP*)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3" (SKOSIMP*)
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL)
                                           ("4" (SKOSIMP*)
                                            (("4" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (ASSERT) NIL NIL)) NIL)
                                         ("3" (SKOSIMP*)
                                          (("3" (ASSERT) NIL NIL)) NIL)
                                         ("4" (SKOSIMP*)
                                          (("4" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)
                               ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma| DEF-DECL "real" |sigma| |reals|)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|))
   NIL))
 (|multibs_eval_equiv| 0
  (|multibs_eval_equiv-3| |nil| 3499083601
   (""
    (CASE "FORALL (X: Vars, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                                                                         cf: Coeff, nvars, terms: posnat,cfn:nat,ct:nat,lb:nat,pz:nat): lb<=pz AND cfn+lb<=ct AND ct<=terms-1 IMPLIES LET cfnew = (LAMBDA (i:nat): IF i<=cfn+lb AND i>=cfn THEN cf(i) ELSE 0 ENDIF) IN
                                                                                                   multibs_eval(bspoly, bsdegmono, cfnew, nvars, terms)(X) =
                                                                                                    multibs_eval_rec(bspoly, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                                    (LAMBDA (i: nat): 0)(X)")
    (("1" (SKEEP)
      (("1"
        (INST - "X" "bsdegmono" "bspoly" "cf" "nvars" "terms" "0" "terms-1"
         "terms-1" "terms-1")
        (("1" (ASSERT)
          (("1"
            (CASE "multibs_eval(bspoly, bsdegmono,
                                                                                                                                        LAMBDA (i: nat):
                                                                                                                                          IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                        nvars, terms)
                                                                                                                                       (X) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X) AND multibs_eval_rec(bspoly, bsdegmono,
                                                                                                                                             LAMBDA (i: nat):
                                                                                                                                               IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                             nvars, terms, nvars)
                                                                                                                                            (LAMBDA (i: nat): 0)(X) = multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                                                                                                            (LAMBDA (i: nat): 0)(X)")
            (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (HIDE -1)
                (("2" (SPLIT)
                  (("1" (EXPAND "multibs_eval")
                    (("1" (REWRITE "sigma_restrict_eq")
                      (("1" (HIDE 2)
                        (("1" (DECOMPOSE-EQUALITY)
                          (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2"
                    (CASE
                        "FORALL (v:nat,cfmono:CoeffMono): v<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                                                                                                                                                                LAMBDA (i: nat):
                                                                                                                                                                                                  IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                                                                                nvars, terms, v)
                                                                                                                                                                                               (cfmono)(X)
                                                                                                                                                                                =
                                                                                                                                                                                multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                                                                                                                                (cfmono)(X)")
                    (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (HIDE 2)
                      (("2" (INDUCT "v")
                        (("1" (SKEEP)
                          (("1" (EXPAND "multibs_eval_rec")
                            (("1"
                              (CASE "multibs_eval_mono(bspoly, bsdegmono,
                                                                                                                                                                                                                                                     LAMBDA (i: nat):
                                                                                                                                                                                                                                                       IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                                                                                                                                     nvars, terms)
                                                                                                                                                                                                                                                    (cfmono)
                                                                                                                                                                                                                                    =
                                                                                                                                                                                                                                    multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cfmono)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "multibs_eval_mono")
                                  (("2" (REWRITE "sigma_restrict_eq")
                                    (("2" (HIDE 2)
                                      (("2" (DECOMPOSE-EQUALITY)
                                        (("2" (EXPAND "restrict")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM 1 "v")
                          (("2" (FLATTEN)
                            (("2" (SKEEP)
                              (("2" (EXPAND "multibs_eval_rec" +)
                                (("2" (REWRITE "sigma_restrict_eq")
                                  (("2" (HIDE 2)
                                    (("2" (DECOMPOSE-EQUALITY)
                                      (("2" (EXPAND "restrict")
                                        (("2" (LIFT-IF)
                                          (("2" (GROUND)
                                            (("2" (INST?) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "pz")
        (("1" (ASSERT) NIL NIL)
         ("2" (SKEEP)
          (("2" (CASE "lb = 0")
            (("1" (REPLACE -1)
              (("1" (HIDE -1)
                (("1" (HIDE -1)
                  (("1" (NAME "bspolynew" "LAMBDA (i:nat): bspoly(i+cfn)")
                    (("1" (LEMMA "multibs_eval_1_term")
                      (("1"
                        (INST - "X" "bsdegmono" "bspolynew"
                         "LAMBDA (i:nat): IF i=0 THEN cf(cfn) ELSE 0 ENDIF"
                         "nvars")
                        (("1"
                          (CASE "multibs_eval(bspolynew, bsdegmono,
                                                                                           LAMBDA (i: nat): IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                                           nvars, 1)
                                                                                          (X)=
                                                                               multibs_eval(bspoly, bsdegmono,
                                                                                           LAMBDA (i: nat):
                                                                                             IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                                           nvars, terms)
                                                                                          (X)
                                                                               and
                                                                               multibs_eval_rec(bspoly, bsdegmono,
                                                                                                LAMBDA (i: nat):
                                                                                                  IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                                                nvars, terms, nvars)
                                                                                               (LAMBDA (i: nat): 0)(X)=
                                                                               multibs_eval_rec(bspolynew, bsdegmono,
                                                                                                LAMBDA (i: nat):
                                                                                                  IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                                                nvars, 1, nvars)
                                                                                               (LAMBDA (i: nat): 0)(X)")
                          (("1" (ASSERT)
                            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                           ("2" (HIDE 2)
                            (("2" (HIDE -1)
                              (("2" (SPLIT)
                                (("1" (EXPAND "multibs_eval")
                                  (("1" (EXPAND "sigma" + 1)
                                    (("1" (EXPAND "sigma" + 1)
                                      (("1" (LEMMA "sigma_split")
                                        (("1" (INST?)
                                          (("1" (INST - "cfn")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (LEMMA "sigma_split")
                                                    (("1"
                                                      (INST -
                                                       "LAMBDA (i_1: nat):
                                                                         IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                          bsproduct_eval(bspoly(i_1), bsdegmono, nvars)(X)"
                                                       "cfn" "0" "cfn-1")
                                                      (("1" (ASSERT)
                                                        (("1" (REPLACE -1)
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE
                                                                  "sigma(0, cfn - 1,
                                                                                                LAMBDA (i_1: nat):
                                                                                                  IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                                   bsproduct_eval(bspoly(i_1), bsdegmono, nvars)(X))=0 AND 0=
                                                                                           sigma(1 + cfn, terms - 1,
                                                                                                 LAMBDA (i_1: nat):
                                                                                                   IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                                    bsproduct_eval(bspoly(i_1), bsdegmono, nvars)(X))")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 :DIR
                                                                       RL)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sigma")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sigma")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "bspolynew")
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE 2)
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (CASE
                                      "FORALL (cfm:CoeffMono,vv:nat): vv<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                                                         LAMBDA (i: nat):
                                                                                           IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                                         nvars, terms, vv)
                                                                                        (cfm)(X)
                                                                         =
                                                                         multibs_eval_rec(bspolynew, bsdegmono,
                                                                                          LAMBDA (i: nat):
                                                                                            IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                                          nvars, 1, vv)
                                                                                         (cfm)(X)")
                                  (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "vv")
                                      (("1" (SKEEP)
                                        (("1" (EXPAND "multibs_eval_rec")
                                          (("1"
                                            (CASE
                                                "multibs_eval_mono(bspoly, bsdegmono,
                                                                                                          LAMBDA (i: nat):
                                                                                                            IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                                                          nvars, terms)
                                                                                                         (cfm)
                                                                                         =
                                                                                         multibs_eval_mono(bspolynew, bsdegmono,
                                                                                                           LAMBDA (i: nat):
                                                                                                             IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                                                           nvars, 1)
                                                                                                          (cfm)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (EXPAND "multibs_eval_mono")
                                                (("2" (EXPAND "sigma" + 2)
                                                  (("2" (EXPAND "sigma" + 2)
                                                    (("2" (EXPAND "bspolynew")
                                                      (("2"
                                                        (LEMMA "sigma_split")
                                                        (("2" (INST?)
                                                          (("2" (INST - "cfn")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (REPLACE -1)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "sigma_split")
                                                                    (("2"
                                                                      (INST -
                                                                       "(LAMBDA (i_1: nat):
                                                                                    IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                     product(0, nvars - 1,
                                                                                             LAMBDA (j: nat): bspoly(i_1)(j)(cfm(j))))"
                                                                       "cfn"
                                                                       "0"
                                                                       "cfn-1")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("2"
                                                                            (HIDE
                                                                             -1)
                                                                            (("2"
                                                                              (CASE
                                                                                  "sigma(0, cfn - 1,
                                                                                                      (LAMBDA (i_1: nat):
                                                                                                         IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                                          product(0, nvars - 1,
                                                                                                                  LAMBDA (j: nat): bspoly(i_1)(j)(cfm(j)))))=0 AND 0=
                                                                                                 sigma(1 + cfn, terms - 1,
                                                                                                       LAMBDA (i_1: nat):
                                                                                                         IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                                          product(0, nvars - 1,
                                                                                                                  LAMBDA (j: nat): bspoly(i_1)(j)(cfm(j))))")
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "sigma")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "sigma_restrict_eq_0")
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REWRITE
                                                                                     "sigma_restrict_eq_0")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOLEM 1 "vv")
                                        (("2" (FLATTEN)
                                          (("2" (SKEEP)
                                            (("2" (EXPAND "multibs_eval_rec" +)
                                              (("2"
                                                (REWRITE "sigma_restrict_eq")
                                                (("2" (HIDE 2)
                                                  (("2" (DECOMPOSE-EQUALITY)
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (LIFT-IF)
                                                        (("2" (GROUND)
                                                          (("2" (INST?) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL)
         ("3" (SKOLEM 1 "pz")
          (("3" (FLATTEN)
            (("3" (SKEEP)
              (("3" (CASE "lb = 0")
                (("1" (INST?)
                  (("1" (INST - "cfn+lb") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (LABEL "lbzero" 1)
                  (("2" (HIDE "lbzero")
                    (("2"
                      (NAME "cflow"
                            "LAMBDA (i:nat): IF i<=cfn+lb-1 AND i>=cfn THEN cf(i) ELSE 0 ENDIF")
                      (("2"
                        (NAME "cfhigh"
                              "LAMBDA (i:nat): IF i=cfn+lb THEN cf(i) ELSE 0 ENDIF")
                        (("2"
                          (CASE "multibs_eval(bspoly, bsdegmono,
                                                        LAMBDA (i: nat):
                                                          IF i <= cfn + lb AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                        nvars, terms)
                                                       (X) = multibs_eval(bspoly, bsdegmono,
                                                        cflow,
                                                        nvars, terms)
                                                       (X)+multibs_eval(bspoly, bsdegmono,
                                                        cfhigh,
                                                        nvars, terms)
                                                       (X)")
                          (("1" (REPLACE -1)
                            (("1"
                              (CASE "multibs_eval_rec(bspoly, bsdegmono,
                                                                   LAMBDA (i: nat):
                                                                     IF i <= cfn + lb AND i >= cfn THEN cf(i)
                                                                     ELSE 0
                                                                     ENDIF,
                                                                   nvars, terms, nvars)
                                                                  (LAMBDA (i: nat): 0)(X) = multibs_eval_rec(bspoly, bsdegmono,
                                                                   cflow,
                                                                   nvars, terms, nvars)
                                                                  (LAMBDA (i: nat): 0)(X)+multibs_eval_rec(bspoly, bsdegmono,
                                                                   cfhigh,
                                                                   nvars, terms, nvars)
                                                                  (LAMBDA (i: nat): 0)(X)")
                              (("1" (REPLACE -1)
                                (("1" (HIDE -1)
                                  (("1" (HIDE -1)
                                    (("1" (REVEAL "lbzero")
                                      (("1"
                                        (INST-CP - "X" "bsdegmono" "bspoly"
                                         "cf" "nvars" "terms" "cfn" "ct"
                                         "lb-1")
                                        (("1" (HIDE "lbzero")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -2)
                                              (("1"
                                                (INST - "X" "bsdegmono"
                                                 "bspoly" "cf" "nvars" "terms"
                                                 "cfn+lb" "ct" "0")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE "(LAMBDA (i: nat):
                                                                            IF i <= cfn + lb AND i >= cfn + lb THEN cf(i)
                                                                            ELSE 0
                                                                            ENDIF) = cfhigh")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (EXPAND "cfhigh")
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY)
                                                          (("2" (LIFT-IF)
                                                            (("2" (LIFT-IF)
                                                              (("2" (GROUND)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (HIDE -1)
                                  (("2" (HIDE -1)
                                    (("2" (HIDE -1)
                                      (("2" (HIDE -1)
                                        (("2"
                                          (CASE
                                              "FORALL (v:nat,iggy:CoeffMono): v<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                         LAMBDA (i: nat):
                                                           IF i <= cfn + lb AND i >= cfn THEN cf(i)
                                                           ELSE 0
                                                           ENDIF,
                                                         nvars, terms, v)
                                                        (iggy)(X)
                                         =
                                         multibs_eval_rec(bspoly, bsdegmono, cflow, nvars, terms, v)
                                                         (iggy)(X)
                                          +
                                          multibs_eval_rec(bspoly, bsdegmono, cfhigh, nvars, terms, v)
                                                          (iggy)(X)")
                                          (("1" (INST?)
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (HIDE 2)
                                            (("2" (INDUCT "v")
                                              (("1" (SKEEP)
                                                (("1"
                                                  (EXPAND "multibs_eval_rec")
                                                  (("1"
                                                    (CASE
                                                        "multibs_eval_mono(bspoly, bsdegmono,
                                                                  LAMBDA (i: nat):
                                                                    IF i <= cfn + lb AND i >= cfn THEN cf(i)
                                                                    ELSE 0
                                                                    ENDIF,
                                                                  nvars, terms)
                                                                 (iggy)
                                                 =
                                                 multibs_eval_mono(bspoly, bsdegmono, cfhigh, nvars, terms)(iggy)
                                                  +
                                                  multibs_eval_mono(bspoly, bsdegmono, cflow, nvars, terms)(iggy)")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2"
                                                        (EXPAND
                                                         "multibs_eval_mono")
                                                        (("2"
                                                          (REWRITE "sigma_sum")
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (REWRITE
                                                               "sigma_restrict_eq")
                                                              (("2" (HIDE 2)
                                                                (("2"
                                                                  (DECOMPOSE-EQUALITY)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "restrict")
                                                                    (("2"
                                                                      (LIFT-IF)
                                                                      (("2"
                                                                        (GROUND)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "cfhigh")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "cflow")
                                                                            (("1"
                                                                              (LIFT-IF)
                                                                              (("1"
                                                                                (LIFT-IF)
                                                                                (("1"
                                                                                  (GROUND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "cfhigh")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "cflow")
                                                                            (("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (EXPAND
                                                                           "cflow")
                                                                          (("3"
                                                                            (EXPAND
                                                                             "cfhigh")
                                                                            (("3"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOLEM 1 "v")
                                                (("2" (FLATTEN)
                                                  (("2" (SKEEP)
                                                    (("2"
                                                      (EXPAND
                                                       "multibs_eval_rec" +)
                                                      (("2"
                                                        (REWRITE "sigma_sum" +)
                                                        (("2"
                                                          (REWRITE
                                                           "sigma_restrict_eq")
                                                          (("2" (HIDE 2)
                                                            (("2"
                                                              (DECOMPOSE-EQUALITY)
                                                              (("2"
                                                                (EXPAND
                                                                 "restrict")
                                                                (("2" (LIFT-IF)
                                                                  (("2"
                                                                    (GROUND)
                                                                    (("2"
                                                                      (INST?)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (HIDE -1)
                              (("2" (HIDE -1)
                                (("2" (HIDE -1)
                                  (("2" (EXPAND "multibs_eval")
                                    (("2" (REWRITE "sigma_sum")
                                      (("2" (REWRITE "sigma_restrict_eq")
                                        (("2" (DECOMPOSE-EQUALITY)
                                          (("2" (HIDE 2)
                                            (("2" (EXPAND "restrict")
                                              (("2" (LIFT-IF)
                                                (("2" (GROUND)
                                                  (("1" (EXPAND "cfhigh")
                                                    (("1" (EXPAND "cflow")
                                                      (("1" (LIFT-IF)
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "cfhigh")
                                                    (("2" (EXPAND "cflow")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (EXPAND "cfhigh")
                                                    (("3" (EXPAND "cflow")
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cfhigh| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (|lb| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|sigma_sum| FORMULA-DECL NIL |sigma| |reals|)
    (|cflow| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (|multibs_eval_1_term| FORMULA-DECL NIL |multi_bernstein| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|bspolynew| SKOLEM-CONST-DECL "[nat -> Polyproduct]" |multi_bernstein|
     NIL)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|multibs_eval_mono| CONST-DECL "real" |multi_bernstein| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|multibs_eval_rec| DEF-DECL "real" |multi_bernstein| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL)
  (|multibs_eval_equiv-2| |nil| 3499083540
   (""
    (CASE "FORALL (X: Vars, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                                                                  cf: Coeff, nvars, terms: posnat,cfn:nat,ct:nat,lb:nat,pz:nat): lb<=pz AND cfn+lb<=ct AND ct<=terms-1 IMPLIES LET cfnew = (LAMBDA (i:nat): IF i<=cfn+lb AND i>=cfn THEN cf(i) ELSE 0 ENDIF) IN
                                                                                            multibs_eval(bspoly, bsdegmono, cfnew, nvars, terms)(X) =
                                                                                             multibs_eval_rec(bspoly, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                             (LAMBDA (i: nat): 0)(X)")
    (("1" (SKEEP)
      (("1"
        (INST - "X" "bsdegmono" "bspoly" "cf" "nvars" "terms" "0" "terms-1"
         "terms-1" "terms-1")
        (("1" (ASSERT)
          (("1"
            (CASE "multibs_eval(bspoly, bsdegmono,
                                                                                                                               LAMBDA (i: nat):
                                                                                                                                 IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                               nvars, terms)
                                                                                                                              (X) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X) AND multibs_eval_rec(bspoly, bsdegmono,
                                                                                                                                    LAMBDA (i: nat):
                                                                                                                                      IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                    nvars, terms, nvars)
                                                                                                                                   (LAMBDA (i: nat): 0)(X) = multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                                                                                                   (LAMBDA (i: nat): 0)(X)")
            (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL)))))
             ("2" (HIDE 2)
              (("2" (HIDE -1)
                (("2" (SPLIT)
                  (("1" (EXPAND "multibs_eval")
                    (("1" (REWRITE "sigma_restrict_eq")
                      (("1" (HIDE 2)
                        (("1" (DECOMPOSE-EQUALITY)
                          (("1" (EXPAND "restrict")
                            (("1" (PROPAX) NIL)))))))))))
                   ("2"
                    (CASE
                        "FORALL (v:nat,cfmono:CoeffMono): v<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                                                                                                                                                   LAMBDA (i: nat):
                                                                                                                                                                                     IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                                                                   nvars, terms, v)
                                                                                                                                                                                  (cfmono)(X)
                                                                                                                                                                   =
                                                                                                                                                                   multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                                                                                                                   (cfmono)(X)")
                    (("1" (INST?) (("1" (ASSERT) NIL)))
                     ("2" (HIDE 2)
                      (("2" (INDUCT "v")
                        (("1" (SKEEP)
                          (("1" (EXPAND "multibs_eval_rec")
                            (("1"
                              (CASE "multibs_eval_mono(bspoly, bsdegmono,
                                                                                                                                                                                                                                    LAMBDA (i: nat):
                                                                                                                                                                                                                                      IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                                                                                                                                                                                    nvars, terms)
                                                                                                                                                                                                                                   (cfmono)
                                                                                                                                                                                                                   =
                                                                                                                                                                                                                   multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cfmono)")
                              (("1" (ASSERT) NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "multibs_eval_mono")
                                  (("2" (REWRITE "sigma_restrict_eq")
                                    (("2" (HIDE 2)
                                      (("2" (DECOMPOSE-EQUALITY)
                                        (("2" (EXPAND "restrict")
                                          (("2" (PROPAX) NIL)))))))))))))))))))
                         ("2" (SKOLEM 1 "v")
                          (("2" (FLATTEN)
                            (("2" (SKEEP)
                              (("2" (EXPAND "multibs_eval_rec" +)
                                (("2" (REWRITE "sigma_restrict_eq")
                                  (("2" (HIDE 2)
                                    (("2" (DECOMPOSE-EQUALITY)
                                      (("2" (EXPAND "restrict")
                                        (("2" (LIFT-IF)
                                          (("2" (GROUND)
                                            (("2" (INST?)
                                              NIL)))))))))))))))))))))))))))))))))))))))))
     ("2" (HIDE 2)
      (("2" (INDUCT "pz")
        (("1" (ASSERT) NIL)
         ("2" (SKEEP)
          (("2" (CASE "lb = 0")
            (("1" (REPLACE -1)
              (("1" (HIDE -1)
                (("1" (HIDE -1)
                  (("1" (NAME "bspolynew" "LAMBDA (i:nat): bspoly(i+cfn)")
                    (("1" (LEMMA "multibs_eval_equiv2")
                      (("1"
                        (INST - "X" "bsdegmono" "bspolynew"
                         "LAMBDA (i:nat): IF i=0 THEN cf(cfn) ELSE 0 ENDIF"
                         "nvars")
                        (("1"
                          (CASE "multibs_eval(bspolynew, bsdegmono,
                                                                              LAMBDA (i: nat): IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                              nvars, 1)
                                                                             (X)=
                                                                  multibs_eval(bspoly, bsdegmono,
                                                                              LAMBDA (i: nat):
                                                                                IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                              nvars, terms)
                                                                             (X)
                                                                  and
                                                                  multibs_eval_rec(bspoly, bsdegmono,
                                                                                   LAMBDA (i: nat):
                                                                                     IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                                   nvars, terms, nvars)
                                                                                  (LAMBDA (i: nat): 0)(X)=
                                                                  multibs_eval_rec(bspolynew, bsdegmono,
                                                                                   LAMBDA (i: nat):
                                                                                     IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                                   nvars, 1, nvars)
                                                                                  (LAMBDA (i: nat): 0)(X)")
                          (("1" (ASSERT)
                            (("1" (FLATTEN) (("1" (ASSERT) NIL)))))
                           ("2" (HIDE 2)
                            (("2" (HIDE -1)
                              (("2" (SPLIT)
                                (("1" (EXPAND "multibs_eval")
                                  (("1" (EXPAND "sigma" + 1)
                                    (("1" (EXPAND "sigma" + 1)
                                      (("1" (LEMMA "sigma_split")
                                        (("1" (INST?)
                                          (("1" (INST - "cfn")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (LEMMA "sigma_split")
                                                    (("1"
                                                      (INST -
                                                       "LAMBDA (i_1: nat):
                                                             IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                              bsproduct_eval(bspoly(i_1), bsdegmono, nvars)(X)"
                                                       "cfn" "0" "cfn-1")
                                                      (("1" (ASSERT)
                                                        (("1" (REPLACE -1)
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE
                                                                  "sigma(0, cfn - 1,
                                                                               LAMBDA (i_1: nat):
                                                                                 IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                  bsproduct_eval(bspoly(i_1), bsdegmono, nvars)(X))=0 AND 0=
                                                                          sigma(1 + cfn, terms - 1,
                                                                                LAMBDA (i_1: nat):
                                                                                  IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                   bsproduct_eval(bspoly(i_1), bsdegmono, nvars)(X))")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 :DIR
                                                                       RL)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sigma")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sigma")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "bspolynew")
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL)))))))))))))))))))
                                                               ("2" (HIDE 2)
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    NIL)
                                                                   ("2"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    NIL)))))))))))))))))))))))))))))))))))
                                 ("2"
                                  (CASE
                                      "FORALL (cfm:CoeffMono,vv:nat): vv<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                                        LAMBDA (i: nat):
                                                                          IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                        nvars, terms, vv)
                                                                       (cfm)(X)
                                                        =
                                                        multibs_eval_rec(bspolynew, bsdegmono,
                                                                         LAMBDA (i: nat):
                                                                           IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                         nvars, 1, vv)
                                                                        (cfm)(X)")
                                  (("1" (INST?) (("1" (ASSERT) NIL)))
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "vv")
                                      (("1" (SKEEP)
                                        (("1" (EXPAND "multibs_eval_rec")
                                          (("1"
                                            (CASE
                                                "multibs_eval_mono(bspoly, bsdegmono,
                                                                                     LAMBDA (i: nat):
                                                                                       IF i <= cfn AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                                                                     nvars, terms)
                                                                                    (cfm)
                                                                    =
                                                                    multibs_eval_mono(bspolynew, bsdegmono,
                                                                                      LAMBDA (i: nat):
                                                                                        IF i = 0 THEN cf(cfn) ELSE 0 ENDIF,
                                                                                      nvars, 1)
                                                                                     (cfm)")
                                            (("1" (ASSERT) NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (EXPAND "multibs_eval_mono")
                                                (("2" (EXPAND "sigma" + 2)
                                                  (("2" (EXPAND "sigma" + 2)
                                                    (("2" (EXPAND "bspolynew")
                                                      (("2"
                                                        (LEMMA "sigma_split")
                                                        (("2" (INST?)
                                                          (("2" (INST - "cfn")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (REPLACE -1)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "sigma_split")
                                                                    (("2"
                                                                      (INST -
                                                                       "(LAMBDA (i_1: nat):
                                                                  IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                   product(0, nvars - 1,
                                                                           LAMBDA (j: nat): bspoly(i_1)(j)(cfm(j))))"
                                                                       "cfn"
                                                                       "0"
                                                                       "cfn-1")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("2"
                                                                            (HIDE
                                                                             -1)
                                                                            (("2"
                                                                              (CASE
                                                                                  "sigma(0, cfn - 1,
                                                                               (LAMBDA (i_1: nat):
                                                                                  IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                   product(0, nvars - 1,
                                                                                           LAMBDA (j: nat): bspoly(i_1)(j)(cfm(j)))))=0 AND 0=
                                                                          sigma(1 + cfn, terms - 1,
                                                                                LAMBDA (i_1: nat):
                                                                                  IF i_1 <= cfn AND i_1 >= cfn THEN cf(i_1) ELSE 0 ENDIF *
                                                                                   product(0, nvars - 1,
                                                                                           LAMBDA (j: nat): bspoly(i_1)(j)(cfm(j))))")
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "sigma")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL)))))))))))))))))
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "sigma_restrict_eq_0")
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REWRITE
                                                                                     "sigma_restrict_eq_0")
                                                                                    NIL)))))))))))))))))))))))))))))))))))))))))))))
                                       ("2" (SKOLEM 1 "vv")
                                        (("2" (FLATTEN)
                                          (("2" (SKEEP)
                                            (("2" (EXPAND "multibs_eval_rec" +)
                                              (("2"
                                                (REWRITE "sigma_restrict_eq")
                                                (("2" (HIDE 2)
                                                  (("2" (DECOMPOSE-EQUALITY)
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (LIFT-IF)
                                                        (("2" (GROUND)
                                                          (("2" (INST?)
                                                            NIL)))))))))))))))))))))))))))))))))))))))))))))))
             ("2" (ASSERT) NIL)))))
         ("3" (SKOLEM 1 "pz")
          (("3" (FLATTEN)
            (("3" (SKEEP)
              (("3" (CASE "lb = 0")
                (("1" (INST?) (("1" (INST - "cfn+lb") (("1" (ASSERT) NIL)))))
                 ("2" (LABEL "lbzero" 1)
                  (("2" (HIDE "lbzero")
                    (("2"
                      (NAME "cflow"
                            "LAMBDA (i:nat): IF i<=cfn+lb-1 AND i>=cfn THEN cf(i) ELSE 0 ENDIF")
                      (("2"
                        (NAME "cfhigh"
                              "LAMBDA (i:nat): IF i=cfn+lb THEN cf(i) ELSE 0 ENDIF")
                        (("2"
                          (CASE "multibs_eval(bspoly, bsdegmono,
                                           LAMBDA (i: nat):
                                             IF i <= cfn + lb AND i >= cfn THEN cf(i) ELSE 0 ENDIF,
                                           nvars, terms)
                                          (X) = multibs_eval(bspoly, bsdegmono,
                                           cflow,
                                           nvars, terms)
                                          (X)+multibs_eval(bspoly, bsdegmono,
                                           cfhigh,
                                           nvars, terms)
                                          (X)")
                          (("1" (REPLACE -1)
                            (("1"
                              (CASE "multibs_eval_rec(bspoly, bsdegmono,
                                                    LAMBDA (i: nat):
                                                      IF i <= cfn + lb AND i >= cfn THEN cf(i)
                                                      ELSE 0
                                                      ENDIF,
                                                    nvars, terms, nvars)
                                                   (LAMBDA (i: nat): 0)(X) = multibs_eval_rec(bspoly, bsdegmono,
                                                    cflow,
                                                    nvars, terms, nvars)
                                                   (LAMBDA (i: nat): 0)(X)+multibs_eval_rec(bspoly, bsdegmono,
                                                    cfhigh,
                                                    nvars, terms, nvars)
                                                   (LAMBDA (i: nat): 0)(X)")
                              (("1" (REPLACE -1)
                                (("1" (HIDE -1)
                                  (("1" (HIDE -1)
                                    (("1" (REVEAL "lbzero")
                                      (("1"
                                        (INST-CP - "X" "bsdegmono" "bspoly"
                                         "cf" "nvars" "terms" "cfn" "ct"
                                         "lb-1")
                                        (("1" (HIDE "lbzero")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -2)
                                              (("1"
                                                (INST - "X" "bsdegmono"
                                                 "bspoly" "cf" "nvars" "terms"
                                                 "cfn+lb" "ct" "0")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE "(LAMBDA (i: nat):
                                                         IF i <= cfn + lb AND i >= cfn + lb THEN cf(i)
                                                         ELSE 0
                                                         ENDIF) = cfhigh")
                                                    (("1" (ASSERT) NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (EXPAND "cfhigh")
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY)
                                                          (("2" (LIFT-IF)
                                                            (("2" (LIFT-IF)
                                                              (("2" (GROUND)
                                                                NIL)))))))))))))))))))))))
                                         ("2" (ASSERT) NIL)))))))))))
                               ("2" (HIDE 2)
                                (("2" (HIDE -1)
                                  (("2" (HIDE -1)
                                    (("2" (HIDE -1)
                                      (("2" (HIDE -1)
                                        (("2"
                                          (CASE
                                              "FORALL (v:nat,iggy:CoeffMono): v<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                        LAMBDA (i: nat):
                                          IF i <= cfn + lb AND i >= cfn THEN cf(i)
                                          ELSE 0
                                          ENDIF,
                                        nvars, terms, v)
                                       (iggy)(X)
                        =
                        multibs_eval_rec(bspoly, bsdegmono, cflow, nvars, terms, v)
                                        (iggy)(X)
                         +
                         multibs_eval_rec(bspoly, bsdegmono, cfhigh, nvars, terms, v)
                                         (iggy)(X)")
                                          (("1" (INST?) (("1" (ASSERT) NIL)))
                                           ("2" (HIDE 2)
                                            (("2" (INDUCT "v")
                                              (("1" (SKEEP)
                                                (("1"
                                                  (EXPAND "multibs_eval_rec")
                                                  (("1"
                                                    (CASE
                                                        "multibs_eval_mono(bspoly, bsdegmono,
                                             LAMBDA (i: nat):
                                               IF i <= cfn + lb AND i >= cfn THEN cf(i)
                                               ELSE 0
                                               ENDIF,
                                             nvars, terms)
                                            (iggy)
                            =
                            multibs_eval_mono(bspoly, bsdegmono, cfhigh, nvars, terms)(iggy)
                             +
                             multibs_eval_mono(bspoly, bsdegmono, cflow, nvars, terms)(iggy)")
                                                    (("1" (ASSERT) NIL)
                                                     ("2" (HIDE 2)
                                                      (("2"
                                                        (EXPAND
                                                         "multibs_eval_mono")
                                                        (("2"
                                                          (REWRITE "sigma_sum")
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (REWRITE
                                                               "sigma_restrict_eq")
                                                              (("2" (HIDE 2)
                                                                (("2"
                                                                  (DECOMPOSE-EQUALITY)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "restrict")
                                                                    (("2"
                                                                      (LIFT-IF)
                                                                      (("2"
                                                                        (GROUND)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "cfhigh")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "cflow")
                                                                            (("1"
                                                                              (LIFT-IF)
                                                                              (("1"
                                                                                (LIFT-IF)
                                                                                (("1"
                                                                                  (LIFT-IF)
                                                                                  (("1"
                                                                                    (GROUND)
                                                                                    NIL)))))))))))
                                                                         ("2"
                                                                          (EXPAND
                                                                           "cfhigh")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "cflow")
                                                                            (("2"
                                                                              (PROPAX)
                                                                              NIL)))))
                                                                         ("3"
                                                                          (EXPAND
                                                                           "cflow")
                                                                          (("3"
                                                                            (EXPAND
                                                                             "cfhigh")
                                                                            (("3"
                                                                              (PROPAX)
                                                                              NIL)))))))))))))))))))))))))))))))
                                               ("2" (SKOLEM 1 "v")
                                                (("2" (FLATTEN)
                                                  (("2" (SKEEP)
                                                    (("2"
                                                      (EXPAND
                                                       "multibs_eval_rec" +)
                                                      (("2"
                                                        (REWRITE "sigma_sum" +)
                                                        (("2"
                                                          (REWRITE
                                                           "sigma_restrict_eq")
                                                          (("2" (HIDE 2)
                                                            (("2"
                                                              (DECOMPOSE-EQUALITY)
                                                              (("2"
                                                                (EXPAND
                                                                 "restrict")
                                                                (("2" (LIFT-IF)
                                                                  (("2"
                                                                    (GROUND)
                                                                    (("2"
                                                                      (INST?)
                                                                      NIL)))))))))))))))))))))))))))))))))))))))))))
                           ("2" (HIDE 2)
                            (("2" (HIDE -1)
                              (("2" (HIDE -1)
                                (("2" (HIDE -1)
                                  (("2" (EXPAND "multibs_eval")
                                    (("2" (REWRITE "sigma_sum")
                                      (("2" (REWRITE "sigma_restrict_eq")
                                        (("2" (DECOMPOSE-EQUALITY)
                                          (("2" (HIDE 2)
                                            (("2" (EXPAND "restrict")
                                              (("2" (LIFT-IF)
                                                (("2" (GROUND)
                                                  (("1" (EXPAND "cfhigh")
                                                    (("1" (EXPAND "cflow")
                                                      (("1" (LIFT-IF)
                                                        (("1" (LIFT-IF)
                                                          (("1" (LIFT-IF)
                                                            (("1" (GROUND)
                                                              NIL)))))))))))
                                                   ("2" (EXPAND "cfhigh")
                                                    (("2" (EXPAND "cflow")
                                                      (("2" (PROPAX) NIL)))))
                                                   ("3" (EXPAND "cfhigh")
                                                    (("3" (EXPAND "cflow")
                                                      (("3" (PROPAX)
                                                        NIL))))))))))))))))))))))))))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|multibs_eval_equiv-1| |nil| 3498990121
   (""
    (CASE "FORALL (X: Vars, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                   cf: Coeff, nvars, terms: posnat,cfn:nat,ct:nat): cfn<=ct IMPLIES LET cfnew = (LAMBDA (i:nat): IF i<=cfn THEN cf(i) ELSE 0 ENDIF) IN
                             multibs_eval(bspoly, bsdegmono, cfnew, nvars, terms)(X) =
                              multibs_eval_rec(bspoly, bsdegmono, cfnew, nvars, terms, nvars)
                                              (LAMBDA (i: nat): 0)(X)")
    (("1" (SKEEP)
      (("1"
        (INST - "X" "bsdegmono" "bspoly" "cf" "nvars" "terms" "terms-1"
         "terms-1")
        (("1" (ASSERT)
          (("1"
            (CASE "multibs_eval(bspoly, bsdegmono,
                                              LAMBDA (i: nat):
                                                IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                              nvars, terms)
                                             (X) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X) AND multibs_eval_rec(bspoly, bsdegmono,
                                                   LAMBDA (i: nat):
                                                     IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                   nvars, terms, nvars)
                                                  (LAMBDA (i: nat): 0)(X) = multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                  (LAMBDA (i: nat): 0)(X)")
            (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (HIDE -1)
                (("2" (SPLIT)
                  (("1" (EXPAND "multibs_eval")
                    (("1" (REWRITE "sigma_restrict_eq")
                      (("1" (HIDE 2)
                        (("1" (DECOMPOSE-EQUALITY)
                          (("1" (EXPAND "restrict") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2"
                    (CASE
                        "FORALL (v:nat,cfmono:CoeffMono): v<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                              LAMBDA (i: nat):
                                                                IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                              nvars, terms, v)
                                                             (cfmono)(X)
                                              =
                                              multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                              (cfmono)(X)")
                    (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (HIDE 2)
                      (("2" (INDUCT "v")
                        (("1" (SKEEP)
                          (("1" (EXPAND "multibs_eval_rec")
                            (("1"
                              (CASE "multibs_eval_mono(bspoly, bsdegmono,
                                                                           LAMBDA (i: nat):
                                                                             IF i <= terms - 1 THEN cf(i) ELSE 0 ENDIF,
                                                                           nvars, terms)
                                                                          (cfmono)
                                                          =
                                                          multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cfmono)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "multibs_eval_mono")
                                  (("2" (REWRITE "sigma_restrict_eq")
                                    (("2" (HIDE 2)
                                      (("2" (DECOMPOSE-EQUALITY)
                                        (("2" (EXPAND "restrict")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM 1 "v")
                          (("2" (FLATTEN)
                            (("2" (SKEEP)
                              (("2" (EXPAND "multibs_eval_rec" +)
                                (("2" (REWRITE "sigma_restrict_eq")
                                  (("2" (HIDE 2)
                                    (("2" (DECOMPOSE-EQUALITY)
                                      (("2" (EXPAND "restrict")
                                        (("2" (LIFT-IF)
                                          (("2" (GROUND)
                                            (("2" (INST?) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "ct")
        (("1" (ASSERT) NIL NIL)
         ("2"
          (CASE "FORALL (X: Vars, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                               cf: Coeff, nvars, terms: posnat):
                                          multibs_eval(bspoly, bsdegmono,
                                                       cf,
                                                       nvars, 1)
                                                      (X)
                                           =
                                           multibs_eval_rec(bspoly, bsdegmono,
                                                            cf,
                                                            nvars, 1, nvars)
                                                           (LAMBDA (i: nat): 0)(X)")
          (("1" (SKEEP)
            (("1" (CASE "cfn = 0")
              (("1" (REPLACE -1)
                (("1" (HIDE -3)
                  (("1" (HIDE -1)
                    (("1"
                      (CASE "multibs_eval(bspoly, bsdegmono,
                                  LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                  nvars, terms)
                                 (X) = multibs_eval(bspoly, bsdegmono,
                                  LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                  nvars, 1)
                                 (X)")
                      (("1"
                        (CASE " multibs_eval_rec(bspoly, bsdegmono,
                                         LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                         nvars, terms, nvars)
                                        (LAMBDA (i: nat): 0)(X) =  multibs_eval_rec(bspoly, bsdegmono,
                                         LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                         nvars, 1, nvars)
                                        (LAMBDA (i: nat): 0)(X)")
                        (("1"
                          (INST - "X" "bsdegmono" "bspoly"
                           "LAMBDA (i:nat): IF i<=0 THEN cf(i) ELSE 0 ENDIF"
                           "nvars" "1")
                          (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (HIDE 2)
                          (("2" (HIDE -1)
                            (("2" (HIDE -1)
                              (("2"
                                (CASE
                                    "FORALL (cfmono:CoeffMono,v:nat):v<=nvars IMPLIES multibs_eval_rec(bspoly, bsdegmono,
                                                             LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                                             nvars, terms, v)
                                                            (cfmono)(X)
                                             =
                                             multibs_eval_rec(bspoly, bsdegmono,
                                                              LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                                              nvars, 1, v)
                                                             (cfmono)(X)")
                                (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (HIDE 2)
                                  (("2" (INDUCT "v")
                                    (("1" (SKEEP)
                                      (("1" (EXPAND "multibs_eval_rec")
                                        (("1"
                                          (CASE
                                              " multibs_eval_mono(bspoly, bsdegmono,
                                               LAMBDA (i: nat): IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                               nvars, terms)
                                              (cfmono)
                              =
                              multibs_eval_mono(bspoly, bsdegmono,
                                                LAMBDA (i: nat):
                                                  IF i <= 0 THEN cf(i) ELSE 0 ENDIF,
                                                nvars, 1)
                                               (cfmono)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (EXPAND "multibs_eval_mono")
                                              (("2" (LEMMA "sigma_split")
                                                (("2" (INST?)
                                                  (("2" (INST - "0")
                                                    (("2" (ASSERT)
                                                      (("2" (REPLACE -1)
                                                        (("2" (HIDE -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REWRITE
                                                               "sigma_restrict_eq_0")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKOLEM 1 "v")
                                      (("2" (FLATTEN)
                                        (("2" (SKEEP)
                                          (("2" (EXPAND "multibs_eval_rec" +)
                                            (("2" (REWRITE "sigma_restrict_eq")
                                              (("2" (HIDE 2)
                                                (("2" (DECOMPOSE-EQUALITY)
                                                  (("2" (EXPAND "restrict")
                                                    (("2" (LIFT-IF)
                                                      (("2" (GROUND)
                                                        (("2" (INST?) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -1)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (LEMMA "sigma_split")
                              (("2" (INST?)
                                (("2" (INST - "0")
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1)
                                      (("2" (HIDE -1)
                                        (("2" (ASSERT)
                                          (("2" (REWRITE "sigma_restrict_eq_0")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (SKEEP)
              (("2" (EXPAND "multibs_eval")
                (("2" (EXPAND "sigma")
                  (("2" (EXPAND "sigma")
                    (("2" (EXPAND "bsproduct_eval")
                      (("2"
                        (CASE
                            "FORALL (cfmono:CoeffMono,v:nat): v<nvars IMPLIES  cf(0) *
       product(0, v,
               LAMBDA (i: nat):
                 sigma(0, bsdegmono(i),
                       LAMBDA (j: nat):
                         IF j > bsdegmono(i) THEN 0
                         ELSE bspoly(0)(i)(j) * Bern(j, bsdegmono(i))(X(i))
                         ENDIF))
       =
       multibs_eval_rec(bspoly, bsdegmono, cf, v+1, 1, v+1)
                       (cfmono)(X)")
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "v")
                            (("1" (SKEEP)
                              (("1" (EXPAND "product")
                                (("1" (EXPAND "product")
                                  (("1" (EXPAND "multibs_eval_rec")
                                    (("1" (REWRITE "sigma_scal" :DIR RL)
                                      (("1" (REWRITE "sigma_restrict_eq")
                                        (("1" (DECOMPOSE-EQUALITY)
                                          (("1" (EXPAND "restrict")
                                            (("1" (LIFT-IF)
                                              (("1" (GROUND)
                                                (("1" (HIDE 3)
                                                  (("1"
                                                    (EXPAND "multibs_eval_rec")
                                                    (("1" (EXPAND "product")
                                                      (("1" (EXPAND "product")
                                                        (("1"
                                                          (EXPAND
                                                           "multibs_eval_mono")
                                                          (("1"
                                                            (EXPAND "sigma")
                                                            (("1"
                                                              (EXPAND
                                                               "product")
                                                              (("1"
                                                                (EXPAND
                                                                 "sigma")
                                                                (("1"
                                                                  (EXPAND
                                                                   "product")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOLEM 1 "v")
                              (("2" (FLATTEN)
                                (("2" (SKEEP)
                                  (("2" (EXPAND "product " +)
                                    (("2" (INST?)
                                      (("1" (ASSERT)
                                        (("1"
                                          (CASE "NOT cf(0) *
       (sigma(0, bsdegmono(1 + v),
              LAMBDA (j: nat):
                IF j > bsdegmono(1 + v) THEN 0
                ELSE bspoly(0)(1 + v)(j) *
                      Bern(j, bsdegmono(1 + v))(X(1 + v))
                ENDIF)
         *
         product(0, v,
                 LAMBDA (i: nat):
                   sigma(0, bsdegmono(i),
                         LAMBDA (j: nat):
                           IF j > bsdegmono(i) THEN 0
                           ELSE bspoly(0)(i)(j) *
                                 Bern(j, bsdegmono(i))(X(i))
                           ENDIF))) = multibs_eval_rec(bspoly, bsdegmono, cf, 1 + v, 1, 1 + v)(cf)(X)*sigma(0, bsdegmono(1 + v),
              LAMBDA (j: nat):
                IF j > bsdegmono(1 + v) THEN 0
                ELSE bspoly(0)(1 + v)(j) *
                      Bern(j, bsdegmono(1 + v))(X(1 + v))
                ENDIF)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (REPLACE -1)
                                            (("2" (HIDE -1)
                                              (("2" (HIDE -1)
                                                (("2"
                                                  (EXPAND "multibs_eval_rec" +
                                                          2)
                                                  (("2"
                                                    (REWRITE "sigma_scal" :DIR
                                                     RL)
                                                    (("2"
                                                      (REWRITE
                                                       "sigma_restrict_eq")
                                                      (("1"
                                                        (DECOMPOSE-EQUALITY)
                                                        (("1"
                                                          (EXPAND "restrict")
                                                          (("1" (LIFT-IF)
                                                            (("1" (GROUND)
                                                              (("1" (HIDE 3)
                                                                (("1"
                                                                  (POSTPONE)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (POSTPONE) NIL
                                                          NIL)
                                                         ("3" (POSTPONE) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (POSTPONE) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (POSTPONE) NIL NIL)
                                           ("4" (POSTPONE) NIL NIL)
                                           ("5" (POSTPONE) NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL))
                            NIL))
                          NIL)
                         ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|multibs_eval_below_mono| 0
  (|multibs_eval_below_mono-2| "" 3790097892
   ("" (SKOSIMP*)
    (("" (EXPAND "multibs_eval")
      (("" (REWRITE "sigma_eq")
        (("" (HIDE 2)
          (("" (SKOSIMP*)
            ((""
              (CASE "bsproduct_eval(bspoly!1(n!1), bsdegmono!1, nvars!1)(X!1)
       =bsproduct_eval(bspoly!1(n!1), bsdegmono!1, nvars!1)(Y!1)")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "bsproduct_eval")
                  (("2" (REWRITE "product_eq")
                    (("1" (HIDE 2)
                      (("1" (SKOSIMP*)
                        (("1" (REWRITE "sigma_eq")
                          (("1" (HIDE 2)
                            (("1" (SKOSIMP*)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_eq| FORMULA-DECL NIL |product| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   SHOSTAK)
  (|multibs_eval_below_mono-1| |nil| 3509119235
   ("" (SKOSIMP*)
    (("" (EXPAND "multibs_eval")
      (("" (REWRITE "sigma_eq")
        (("" (HIDE 2)
          (("" (SKOSIMP*)
            ((""
              (CASE "bsproduct_eval(bspoly!1(n!1), bsdegmono!1, nvars!1)(X!1)
       =bsproduct_eval(bspoly!1(n!1), bsdegmono!1, nvars!1)(Y!1)")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "bsproduct_eval")
                  (("2" (REWRITE "product_eq")
                    (("1" (HIDE 2)
                      (("1" (SKOSIMP*)
                        (("1" (REWRITE "sigma_eq")
                          (("1" (HIDE 2)
                            (("1" (SKOSIMP*)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)
                     ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|product_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|))
   SHOSTAK))
 (|multibs_eval_id| 0
  (|multibs_eval_id-2| "" 3790097893
   ("" (SKEEP)
    (("" (EXPAND "multibs_eval")
      (("" (DECOMPOSE-EQUALITY)
        (("" (REWRITE "sigma_restrict_eq")
          (("" (HIDE 2)
            (("" (DECOMPOSE-EQUALITY)
              (("" (EXPAND "restrict")
                (("" (LIFT-IF)
                  (("" (GROUND)
                    ((""
                      (CASE
                          "bsproduct_eval(bspoly(x!2), bsdegmono, nvars)(x!1) =
       bsproduct_eval(bspolz(x!2), bsdegmono, nvars)(x!1)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 3)
                        (("2" (EXPAND "bsproduct_eval")
                          (("2" (REWRITE "product_restrict_eq")
                            (("1" (HIDE 2)
                              (("1" (DECOMPOSE-EQUALITY)
                                (("1" (EXPAND "restrict")
                                  (("1" (LIFT-IF)
                                    (("1" (GROUND)
                                      (("1" (REWRITE "sigma_restrict_eq")
                                        (("1" (HIDE 3)
                                          (("1" (DECOMPOSE-EQUALITY)
                                            (("1" (EXPAND "restrict")
                                              (("1" (LIFT-IF)
                                                (("1" (GROUND)
                                                  (("1" (INST?)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|x!3| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK)
  (|multibs_eval_id-1| |nil| 3500206292
   ("" (SKEEP)
    (("" (EXPAND "multibs_eval")
      (("" (DECOMPOSE-EQUALITY)
        (("" (REWRITE "sigma_restrict_eq")
          (("" (HIDE 2)
            (("" (DECOMPOSE-EQUALITY)
              (("" (EXPAND "restrict")
                (("" (LIFT-IF)
                  (("" (GROUND)
                    ((""
                      (CASE
                          "bsproduct_eval(bspoly(x!2), bsdegmono, nvars)(x!1) =
       bsproduct_eval(bspolz(x!2), bsdegmono, nvars)(x!1)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 3)
                        (("2" (EXPAND "bsproduct_eval")
                          (("2" (REWRITE "product_restrict_eq")
                            (("1" (HIDE 2)
                              (("1" (DECOMPOSE-EQUALITY)
                                (("1" (EXPAND "restrict")
                                  (("1" (LIFT-IF)
                                    (("1" (GROUND)
                                      (("1" (REWRITE "sigma_restrict_eq")
                                        (("1" (HIDE 3)
                                          (("1" (DECOMPOSE-EQUALITY)
                                            (("1" (EXPAND "restrict")
                                              (("1" (LIFT-IF)
                                                (("1" (GROUND)
                                                  (("1" (INST?)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)
                             ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   SHOSTAK))
 (|multibscoeff_id| 0
  (|multibscoeff_id-1| |nil| 3509113819
   ("" (SKEEP)
    (("" (EXPAND "multibscoeff")
      (("" (REWRITE "sigma_eq")
        (("" (HIDE 2)
          (("" (SKOSIMP*)
            ((""
              (CASE "product(0, nvars - 1,
               LAMBDA (j: nat): bspoly(n!1)(j)(coeffmono1(j)))
       =
        product(0, nvars - 1,
                LAMBDA (j: nat): bspoly(n!1)(j)(coeffmono2(j)))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "product_eq")
                  (("2" (HIDE 2)
                    (("2" (SKOSIMP*)
                      (("2" (EXPAND "eq_below_mono?")
                        (("2" (INST - "n!2") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|product_eq| FORMULA-DECL NIL |product| |reals|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|eq_below_mono?| CONST-DECL "bool" |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   SHOSTAK))
 (|Bern_coeffs_rel_implic| 0
  (|Bern_coeffs_rel_implic-1| |nil| 3499007668
   ("" (INDUCT "v")
    (("1" (SKEEP)
      (("1" (EXPAND "Bern_coeffs_rel_rec")
        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKOLEM 1 "v")
      (("2" (FLATTEN)
        (("2" (SKEEP)
          (("2" (EXPAND "Bern_coeffs_rel_rec" (-3 1))
            (("2" (SKOSIMP*)
              (("2" (INST -3 "d!1")
                (("2"
                  (INST - "a" "a1" "bsdegmono" "bspoly" "cf"
                   "coeffmono WITH [(v):=d!1]" "nvars" "rel" "terms")
                  (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|Bern_coeffs_rel_rec| DEF-DECL "bool" |multi_bernstein| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|Bern_coeffs_rel_def| 0
  (|Bern_coeffs_rel_def-2| "" 3790097894
   (""
    (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                 terms: posnat,v:nat,iggy,coeffmono:CoeffMono):(FORALL (j:below(nvars)): iggy(j) = coeffmono(j)) IMPLIES multibscoeff(bspoly, bsdegmono, cf, nvars, terms)
                                                               (coeffmono)=multibscoeff(bspoly, bsdegmono, cf, nvars, terms)
                                                               (iggy)")
    (("1" (LABEL "cmlem" -1)
      (("1" (HIDE "cmlem")
        (("1"
          (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                              cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                              terms: posnat,v:nat,iggy:CoeffMono):le_below_mono?(nvars)(iggy,bsdegmono) and v<=nvars IMPLIES
                                                        (Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms,v)(iggy,rel, a) IFF
                                                         (FORALL (coeffmono): le_below_mono?(nvars)(coeffmono,bsdegmono) AND (FORALL (k:nat): k>=v AND k<nvars IMPLIES iggy(k)=coeffmono(k)) IMPLIES
                                                            rel(multibscoeff(bspoly, bsdegmono, cf, nvars, terms)
                                                                            (coeffmono),
                                                                a)))")
          (("1" (SKEEP)
            (("1" (GROUND)
              (("1"
                (INST - "a" "bsdegmono" "bspoly" "cf" "nvars" "rel" "terms"
                 "nvars" "LAMBDA (i:nat): 0")
                (("1" (EXPAND "Bern_coeffs_rel")
                  (("1" (ASSERT)
                    (("1" (SKOSIMP*)
                      (("1" (SPLIT -)
                        (("1" (INST - "coeffmono!1")
                          (("1" (ASSERT)
                            (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (INST - "a" "bsdegmono" "bspoly" "cf" "nvars" "rel" "terms"
                 "nvars" "LAMBDA (i:nat): 0")
                (("2" (GROUND)
                  (("1" (EXPAND "Bern_coeffs_rel") (("1" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (INST -3 "coeffmono!1") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "v")
              (("1" (SKEEP)
                (("1" (HIDE -2)
                  (("1" (GROUND)
                    (("1" (SKOSIMP*)
                      (("1" (REVEAL "cmlem")
                        (("1"
                          (INST - "a" "bsdegmono" "bspoly" "cf" "nvars" "rel"
                           "terms" "nvars" "iggy" "coeffmono!1")
                          (("1" (ASSERT)
                            (("1" (EXPAND "Bern_coeffs_rel_rec")
                              (("1" (ASSERT)
                                (("1" (SKOSIMP*)
                                  (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST - "iggy")
                      (("2" (ASSERT)
                        (("2" (EXPAND "Bern_coeffs_rel_rec")
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (GROUND)
                      (("1" (SKOSIMP*)
                        (("1" (EXPAND "Bern_coeffs_rel_rec" -1)
                          (("1" (INST - "coeffmono!1(vv)")
                            (("1" (INST? -4)
                              (("1" (ASSERT)
                                (("1" (SPLIT -)
                                  (("1" (INST - "coeffmono!1")
                                    (("1" (ASSERT)
                                      (("1" (SKOSIMP*)
                                        (("1" (INST - "k!1")
                                          (("1" (ASSERT)
                                            (("1" (GROUND)
                                              (("1" (CASE "k!1 = vv")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "le_below_mono?")
                                    (("2" (SKOSIMP*)
                                      (("2" (CASE "j!1 = vv")
                                        (("1" (INST - "vv")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (INST -4 "j!1")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "le_below_mono?")
                                (("2" (INST - "vv") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "Bern_coeffs_rel_rec" +)
                        (("2" (SKOSIMP*)
                          (("2" (INST? -2)
                            (("2" (ASSERT)
                              (("2" (SPLIT -)
                                (("1" (HIDE 2)
                                  (("1" (SKOSIMP*)
                                    (("1" (INST -3 "coeffmono!1")
                                      (("1" (ASSERT)
                                        (("1" (SKOSIMP*)
                                          (("1" (INST -2 "k!1")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (HIDE -1)
                                    (("2" (EXPAND "le_below_mono?")
                                      (("2" (SKOSIMP*)
                                        (("2" (INST - "j!1")
                                          (("2" (CASE "j!1 = vv")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "multibscoeff")
          (("2" (REWRITE "sigma_restrict_eq")
            (("2" (HIDE 2)
              (("2" (DECOMPOSE-EQUALITY)
                (("2" (EXPAND "restrict")
                  (("2" (LIFT-IF)
                    (("2" (GROUND)
                      (("2"
                        (CASE
                            "product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(coeffmono(j)))
                         =
                          product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(iggy(j)))")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 3)
                          (("2" (REWRITE "product_restrict_eq")
                            (("2" (HIDE 2)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "restrict")
                                  (("2" (LIFT-IF)
                                    (("2" (GROUND)
                                      (("2" (INST - "x!2")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|Bern_coeffs_rel_rec| DEF-DECL "bool" |multi_bernstein| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|le_below_mono?| CONST-DECL "bool" |util| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Bern_coeffs_rel| CONST-DECL "bool" |multi_bernstein| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|coeffmono!1| SKOLEM-CONST-DECL "CoeffMono" |multi_bernstein| NIL)
    (|vv| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL))
   SHOSTAK)
  (|Bern_coeffs_rel_def-1| |nil| 3498927613
   (""
    (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                 terms: posnat,v:nat,iggy,coeffmono:CoeffMono):(FORALL (j:below(nvars)): iggy(j) = coeffmono(j)) IMPLIES multibscoeff(bspoly, bsdegmono, cf, nvars, terms)
                                                               (coeffmono)=multibscoeff(bspoly, bsdegmono, cf, nvars, terms)
                                                               (iggy)")
    (("1" (LABEL "cmlem" -1)
      (("1" (HIDE "cmlem")
        (("1"
          (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                              cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                              terms: posnat,v:nat,iggy:CoeffMono):le_below_mono?(nvars)(iggy,bsdegmono) and v<=nvars IMPLIES
                                                        (Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms,v)(iggy,rel, a) IFF
                                                         (FORALL (coeffmono): le_below_mono?(nvars)(coeffmono,bsdegmono) AND (FORALL (k:nat): k>=v AND k<nvars IMPLIES iggy(k)=coeffmono(k)) IMPLIES
                                                            rel(multibscoeff(bspoly, bsdegmono, cf, nvars, terms)
                                                                            (coeffmono),
                                                                a)))")
          (("1" (SKEEP)
            (("1" (GROUND)
              (("1"
                (INST - "a" "bsdegmono" "bspoly" "cf" "nvars" "rel" "terms"
                 "nvars" "LAMBDA (i:nat): 0")
                (("1" (EXPAND "Bern_coeffs_rel")
                  (("1" (ASSERT)
                    (("1" (SKOSIMP*)
                      (("1" (SPLIT -)
                        (("1" (INST - "coeffmono!1")
                          (("1" (ASSERT)
                            (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (INST - "a" "bsdegmono" "bspoly" "cf" "nvars" "rel" "terms"
                 "nvars" "LAMBDA (i:nat): 0")
                (("2" (GROUND)
                  (("1" (EXPAND "Bern_coeffs_rel") (("1" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (INST -3 "coeffmono!1") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "v")
              (("1" (SKEEP)
                (("1" (HIDE -2)
                  (("1" (GROUND)
                    (("1" (SKOSIMP*)
                      (("1" (REVEAL "cmlem")
                        (("1"
                          (INST - "a" "bsdegmono" "bspoly" "cf" "nvars" "rel"
                           "terms" "nvars" "iggy" "coeffmono!1")
                          (("1" (ASSERT)
                            (("1" (EXPAND "Bern_coeffs_rel_rec")
                              (("1" (ASSERT)
                                (("1" (SKOSIMP*)
                                  (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST - "iggy")
                      (("2" (ASSERT)
                        (("2" (EXPAND "Bern_coeffs_rel_rec")
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (GROUND)
                      (("1" (SKOSIMP*)
                        (("1" (EXPAND "Bern_coeffs_rel_rec" -1)
                          (("1" (INST - "coeffmono!1(vv)")
                            (("1" (INST? -4)
                              (("1" (ASSERT)
                                (("1" (SPLIT -)
                                  (("1" (INST - "coeffmono!1")
                                    (("1" (ASSERT)
                                      (("1" (SKOSIMP*)
                                        (("1" (INST - "k!1")
                                          (("1" (ASSERT)
                                            (("1" (GROUND)
                                              (("1" (CASE "k!1 = vv")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "le_below_mono?")
                                    (("2" (SKOSIMP*)
                                      (("2" (CASE "j!1 = vv")
                                        (("1" (INST - "vv")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (INST -4 "j!1")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "le_below_mono?")
                                (("2" (INST - "vv") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "Bern_coeffs_rel_rec" +)
                          (("2" (SKOSIMP*)
                            (("2" (INST? -2)
                              (("2" (ASSERT)
                                (("2" (SPLIT -)
                                  (("1" (HIDE 2)
                                    (("1" (SKOSIMP*)
                                      (("1" (INST -3 "coeffmono!1")
                                        (("1" (ASSERT)
                                          (("1" (SKOSIMP*)
                                            (("1" (INST -2 "k!1")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (HIDE -1)
                                      (("2" (EXPAND "le_below_mono?")
                                        (("2" (SKOSIMP*)
                                          (("2" (INST - "j!1")
                                            (("2" (CASE "j!1 = vv")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "multibscoeff")
          (("2" (REWRITE "sigma_restrict_eq")
            (("2" (HIDE 2)
              (("2" (DECOMPOSE-EQUALITY)
                (("2" (EXPAND "restrict")
                  (("2" (LIFT-IF)
                    (("2" (GROUND)
                      (("2"
                        (CASE
                            "product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(coeffmono(j)))
                         =
                          product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(iggy(j)))")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 3)
                          (("2" (REWRITE "product_restrict_eq")
                            (("2" (HIDE 2)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "restrict")
                                  (("2" (LIFT-IF)
                                    (("2" (GROUND)
                                      (("2" (INST - "x!2")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|le_below_mono?| CONST-DECL "bool" |util| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL))
   SHOSTAK))
 (|multibs_cornerpoint_coeff| 0
  (|multibs_cornerpoint_coeff-3| "" 3790097896
   ("" (SKOSIMP*)
    (("" (ASSERT)
      ((""
        (NAME "Xv" "LAMBDA (i: nat):
                             IF coeffmono!1(i) = 0 THEN 0 ELSE 1 ENDIF")
        (("" (REPLACE -1)
          (("" (FLATTEN)
            (("" (EXPAND "multibscoeff")
              (("" (EXPAND "multibs_eval")
                (("" (REWRITE "sigma_eq")
                  (("" (HIDE 2)
                    (("" (SKOSIMP*)
                      ((""
                        (CASE
                            "bsproduct_eval(bspoly!1(n!1), bsdegmono!1, nvars!1)(Xv) =
               product(0, nvars!1 - 1,
                       LAMBDA (j: nat): bspoly!1(n!1)(j)(coeffmono!1(j)))")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2" (EXPAND "bsproduct_eval")
                            (("2" (REWRITE "product_eq")
                              (("1" (HIDE 2)
                                (("1" (SKOSIMP*)
                                  (("1" (LEMMA "sigma_split")
                                    (("1" (INST?)
                                      (("1" (INST - "coeffmono!1(n!2)")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -)
                                            (("1" (REPLACE -1)
                                              (("1" (HIDE -1)
                                                (("1" (LEMMA "sigma_split")
                                                  (("1"
                                                    (INST -1 _ _ _
                                                     "coeffmono!1(n!2)-1")
                                                    (("1" (INST?)
                                                      (("1" (ASSERT)
                                                        (("1" (REPLACE -1)
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE
                                                                  "sigma(0, coeffmono!1(n!2) - 1,
                             LAMBDA (j: nat):
                               IF j > bsdegmono!1(n!2) THEN 0
                               ELSE bspoly!1(n!1)(n!2)(j) *
                                     Bern(j, bsdegmono!1(n!2))(Xv(n!2))
                               ENDIF)=0 AND sigma(1 + coeffmono!1(n!2), bsdegmono!1(n!2),
                              LAMBDA (j: nat):
                                IF j > bsdegmono!1(n!2) THEN 0
                                ELSE bspoly!1(n!1)(n!2)(j) *
                                      Bern(j, bsdegmono!1(n!2))(Xv(n!2))
                                ENDIF)=0")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sigma")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sigma")
                                                                              (("1"
                                                                                (LIFT-IF)
                                                                                (("1"
                                                                                  (GROUND)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "corner_point?")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -
                                                                                       "n!2")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (CASE
                                                                                        "Bern(coeffmono!1(n!2), bsdegmono!1(n!2))(Xv(n!2))=1")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "Xv"
                                                                                           +)
                                                                                          (("2"
                                                                                            (LIFT-IF)
                                                                                            (("2"
                                                                                              (GROUND)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "Bern")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "expt_1i")
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "^")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "expt")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "C")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (EXPAND
                                                                                                 "Bern")
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "expt_1i")
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "corner_point?")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (REPLACE
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "^")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "expt")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "C")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE 2)
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    (("1"
                                                                      (HIDE 2)
                                                                      (("1"
                                                                        (SKOSIMP*)
                                                                        (("1"
                                                                          (LIFT-IF)
                                                                          (("1"
                                                                            (GROUND)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "Bern")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "Xv"
                                                                                 +)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "^")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "expt"
                                                                                     +
                                                                                     1)
                                                                                    (("1"
                                                                                      (LIFT-IF)
                                                                                      (("1"
                                                                                        (GROUND)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "corner_point?")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -
                                                                                             "n!2")
                                                                                            (("1"
                                                                                              (GROUND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    (("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Bern")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "Xv"
                                                                             +)
                                                                            (("2"
                                                                              (LIFT-IF)
                                                                              (("2"
                                                                                (GROUND)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "^"
                                                                                   +
                                                                                   1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "expt"
                                                                                     +)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (EXPAND
                                                                                   "^"
                                                                                   +
                                                                                   1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "expt"
                                                                                     +)
                                                                                    (("2"
                                                                                      (LIFT-IF)
                                                                                      (("2"
                                                                                        (GROUND)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "corner_point?")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -
                                                                                             "n!2")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("3" (HIDE 2)
                                                                (("3"
                                                                  (SKOSIMP*)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("4" (SKOSIMP*)
                                                                (("4" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "corner_point?")
                                              (("2" (INST - "n!2")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|product_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|n!2| SKOLEM-CONST-DECL "subrange(0, nvars!1 - 1)" |multi_bernstein| NIL)
    (|nvars!1| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|bsdegmono!1| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|corner_point?| CONST-DECL "bool" |util| NIL)
    (|Xv| SKOLEM-CONST-DECL "[nat -> uint8]" |multi_bernstein| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL))
   SHOSTAK)
  (|multibs_cornerpoint_coeff-2| |nil| 3509117841
   ("" (SKOSIMP*)
    (("" (ASSERT)
      ((""
        (NAME "Xv" "LAMBDA (i: nat):
                             IF coeffmono!1(i) = 0 THEN 0 ELSE 1 ENDIF")
        (("" (REPLACE -1)
          (("" (FLATTEN)
            (("" (EXPAND "multibscoeff")
              (("" (EXPAND "multibs_eval")
                (("" (REWRITE "sigma_eq")
                  (("" (HIDE 2)
                    (("" (SKOSIMP*)
                      ((""
                        (CASE
                            "bsproduct_eval(bspoly!1(n!1), bsdegmono!1, nvars!1)(Xv) =
               product(0, nvars!1 - 1,
                       LAMBDA (j: nat): bspoly!1(n!1)(j)(coeffmono!1(j)))")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2" (EXPAND "bsproduct_eval")
                            (("2" (REWRITE "product_eq")
                              (("1" (HIDE 2)
                                (("1" (SKOSIMP*)
                                  (("1" (LEMMA "sigma_split")
                                    (("1" (INST?)
                                      (("1" (INST - "coeffmono!1(n!2)")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -)
                                            (("1" (REPLACE -1)
                                              (("1" (HIDE -1)
                                                (("1" (LEMMA "sigma_split")
                                                  (("1"
                                                    (INST -1 _ _ _
                                                     "coeffmono!1(n!2)-1")
                                                    (("1" (INST?)
                                                      (("1" (ASSERT)
                                                        (("1" (REPLACE -1)
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE
                                                                  "sigma(0, coeffmono!1(n!2) - 1,
                             LAMBDA (j: nat):
                               IF j > bsdegmono!1(n!2) THEN 0
                               ELSE bspoly!1(n!1)(n!2)(j) *
                                     Bern(j, bsdegmono!1(n!2))(Xv(n!2))
                               ENDIF)=0 AND sigma(1 + coeffmono!1(n!2), bsdegmono!1(n!2),
                              LAMBDA (j: nat):
                                IF j > bsdegmono!1(n!2) THEN 0
                                ELSE bspoly!1(n!1)(n!2)(j) *
                                      Bern(j, bsdegmono!1(n!2))(Xv(n!2))
                                ENDIF)=0")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "sigma")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "sigma")
                                                                              (("1"
                                                                                (LIFT-IF)
                                                                                (("1"
                                                                                  (GROUND)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "corner_point?")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -
                                                                                       "n!2")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (CASE
                                                                                        "Bern(coeffmono!1(n!2), bsdegmono!1(n!2))(Xv(n!2))=1")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         2)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "Xv"
                                                                                           +)
                                                                                          (("2"
                                                                                            (LIFT-IF)
                                                                                            (("2"
                                                                                              (GROUND)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "Bern")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "expt_1i")
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "^")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "expt")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "C")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (EXPAND
                                                                                                 "Bern")
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "expt_1i")
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "corner_point?")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -
                                                                                                       "n!2")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (REPLACE
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "^")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "expt")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "C")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE 2)
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    (("1"
                                                                      (HIDE 2)
                                                                      (("1"
                                                                        (SKOSIMP*)
                                                                        (("1"
                                                                          (LIFT-IF)
                                                                          (("1"
                                                                            (GROUND)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "Bern")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "Xv"
                                                                                 +)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "^")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "expt"
                                                                                     +
                                                                                     1)
                                                                                    (("1"
                                                                                      (LIFT-IF)
                                                                                      (("1"
                                                                                        (GROUND)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "corner_point?")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -
                                                                                             "n!2")
                                                                                            (("1"
                                                                                              (GROUND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REWRITE
                                                                     "sigma_restrict_eq_0")
                                                                    (("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Bern")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "Xv"
                                                                             +)
                                                                            (("2"
                                                                              (LIFT-IF)
                                                                              (("2"
                                                                                (GROUND)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "^"
                                                                                   +
                                                                                   1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "expt"
                                                                                     +)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (EXPAND
                                                                                   "^"
                                                                                   +
                                                                                   1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "expt"
                                                                                     +)
                                                                                    (("2"
                                                                                      (LIFT-IF)
                                                                                      (("2"
                                                                                        (GROUND)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "corner_point?")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -
                                                                                             "n!2")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("3" (HIDE 2)
                                                                (("3"
                                                                  (SKOSIMP*)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("4" (SKOSIMP*)
                                                                (("4" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "corner_point?")
                                              (("2" (INST - "n!2")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_eq| FORMULA-DECL NIL |product| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|corner_point?| CONST-DECL "bool" |util| NIL)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL))
   NIL)
  (|multibs_cornerpoint_coeff-1| |nil| 3509117746
   ("" (SKEEP)
    (("" (ASSERT)
      ((""
        (NAME "Xv" "LAMBDA (i: nat):
                      IF coeffmon(i) = 0 THEN 0 ELSE 1 ENDIF")
        (("" (REPLACE -1) (("" (FLATTEN) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|forall_X_id| 0
  (|forall_X_id-1| |nil| 3499949735
   (""
    (CASE "FORALL (cf: Coeff, bspoly, bspolz, bsdegmono, nvars, terms, rel, a):
               (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
                  bspoly(t)(v)(i) = bspolz(t)(v)(i))
                IMPLIES
                forall_X(bspoly, bsdegmono, cf, nvars, terms, rel, a) IMPLIES
                 forall_X(bspolz, bsdegmono, cf, nvars, terms, rel, a)")
    (("1" (SKEEP)
      (("1" (IFF)
        (("1" (SPLIT)
          (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)
           ("2" (INST?)
            (("2" (GROUND)
              (("2" (SKEEP) (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "forall_X")
          (("2" (SKEEP)
            (("2" (INST? -2)
              (("2" (ASSERT)
                (("2" (LEMMA "multibs_eval_id")
                  (("2"
                    (INST -1 "bspoly" "bspolz" "bsdegmono" "cf" "nvars"
                     "terms")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval_id| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL))
   SHOSTAK))
 (|forall_X_between_id| 0
  (|forall_X_between_id-1| |nil| 3507233890
   (""
    (CASE "FORALL (cf: Coeff, amin, amax: real)
                    (bspoly, bspolz, bsdegmono, nvars, terms):
               (FORALL (t: below(terms), v: below(nvars), i: upto(bsdegmono(v))):
                  bspoly(t)(v)(i) = bspolz(t)(v)(i))
                IMPLIES
                forall_X_between(amin, amax)(bspoly, bsdegmono, cf, nvars, terms)
                 IMPLIES
                 forall_X_between(amin, amax)(bspolz, bsdegmono, cf, nvars, terms)")
    (("1" (SKOSIMP*)
      (("1" (IFF)
        (("1" (SPLIT)
          (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)
           ("2"
            (INST -1 "cf!1" "amin!1" "amax!1" "bspolz!1" "bspoly!1"
             "bsdegmono!1" "nvars!1" "terms!1")
            (("2" (GROUND)
              (("2" (SKEEP 1) (("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKOSIMP*)
        (("2" (EXPAND "forall_X_between")
          (("2" (SKEEP)
            (("2" (INST? -2)
              (("2" (ASSERT)
                (("2" (LEMMA "multibs_eval_id")
                  (("2" (INST?)
                    (("2" (INST -1 "bspolz!1")
                      (("2" (SPLIT -1)
                        (("1" (GROUND) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval_id| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|forall_X_between| CONST-DECL "bool" |multi_bernstein| NIL))
   NIL))
 (|Bern_coeffs_endpoints_rel_rec_TCC1| 0
  (|Bern_coeffs_endpoints_rel_rec_TCC1-1| |nil| 3499440937
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|Bern_coeffs_endpoints_rel_rec| SUBTYPE "list_adt[real].null"
    "{l: list_adt[real].list | booleans.IMPLIES(list_adt[real].cons?(l), booleans.AND(util.unitbox?(multi_bernstein.nvars)(array2list[real].list2array(0)(l)), list_props[real].length(l) = multi_bernstein.nvars))}")))
 (|Bern_coeffs_endpoints_rel_rec_TCC2| 0
  (|Bern_coeffs_endpoints_rel_rec_TCC2-1| |nil| 3499440937
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|Bern_coeffs_endpoints_rel_rec| SUBTYPE
    "util.corner_to_point(multi_bernstein.f, multi_bernstein.nvars)"
    "{l: list_adt[real].list | booleans.IMPLIES(list_adt[real].cons?(l), booleans.AND(util.unitbox?(multi_bernstein.nvars)(array2list[real].list2array(0)(l)), list_props[real].length(l) = multi_bernstein.nvars))}")))
 (|Bern_coeffs_endpoints_rel_rec_TCC3| 0
  (|Bern_coeffs_endpoints_rel_rec_TCC3-1| |nil| 3503309476
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Bern_coeffs_endpoints_rel_rec| TERMINATION
    "multi_bernstein.Bern_coeffs_endpoints_rel_rec(multi_bernstein.bspoly, multi_bernstein.bsdegmono, multi_bernstein.cf, multi_bernstein.nvars, multi_bernstein.terms, (number_fields.-)(multi_bernstein.v, 1))"
    "NIL")))
 (|Bern_coeffs_endpoints_rel_TCC1| 0
  (|Bern_coeffs_endpoints_rel_TCC1-1| |nil| 3503309637
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|Bern_coeffs_endpoints_rel| SUBTYPE "list_adt[real].null"
    "{l: list_adt[real].list | booleans.IMPLIES(list_adt[real].cons?(l), booleans.AND(util.unitbox?(multi_bernstein.nvars)(array2list[real].list2array(0)(l)), list_props[real].length(l) = multi_bernstein.nvars))}")))
 (|Bern_coeffs_endpoints_rel_def| 0
  (|Bern_coeffs_endpoints_rel_def-2| "" 3790097899
   ("" (EXPAND "Bern_coeffs_endpoints_rel")
    ((""
      (NAME "eptest?"
            "(LAMBDA (bsdegmono:DegreeMono,nvars): (LAMBDA (cfm:CoeffMono): (FORALL (i:below(nvars)): cfm(i)=0 OR cfm(i)=bsdegmono(i))))")
      (("" (SKOSIMP*)
        (("" (LIFT-IF)
          (("" (SPLIT)
            (("1" (FLATTEN)
              (("1"
                (CASE
                    "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                 terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))): v<=nvars AND
                                           forall_X(bspoly, bsdegmono, cf, nvars, terms, rel, a) IMPLIES
                                            null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                          bsdegmono,
                                                                          cf,
                                                                          nvars,
                                                                          terms,
                                                                          v)
                                                                         (cfm, rel, a))")
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE 2)
                    (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (INDUCT "v")
                    (("1" (SKEEP)
                      (("1" (EXPAND "Bern_coeffs_endpoints_rel_rec")
                        (("1" (ASSERT)
                          (("1" (LIFT-IF +)
                            (("1" (ASSERT)
                              (("1" (GROUND)
                                (("1" (HIDE 2)
                                  (("1"
                                    (NAME "Xnew"
                                          "LAMBDA (i:nat): IF cfm(i)=0 THEN 0 ELSE 1 ENDIF")
                                    (("1" (EXPAND "forall_X")
                                      (("1" (INST - "Xnew")
                                        (("1" (SPLIT -)
                                          (("1"
                                            (CASE
                                                "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew) = multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cfm)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2" (EXPAND "multibscoeff")
                                                (("2" (EXPAND "multibs_eval")
                                                  (("2"
                                                    (REWRITE
                                                     "sigma_restrict_eq")
                                                    (("2" (HIDE 2)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY)
                                                        (("2"
                                                          (EXPAND "restrict")
                                                          (("2" (LIFT-IF)
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (CASE
                                                                    "bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew) =
                                                                        product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(cfm(j)))")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "bsproduct_eval"
                                                                     +)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "product_restrict_eq")
                                                                      (("1"
                                                                        (HIDE
                                                                         2)
                                                                        (("1"
                                                                          (DECOMPOSE-EQUALITY)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "restrict")
                                                                            (("1"
                                                                              (LIFT-IF)
                                                                              (("1"
                                                                                (GROUND)
                                                                                (("1"
                                                                                  (TYPEPRED
                                                                                   "cfm")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "sigma_split")
                                                                                    (("1"
                                                                                      (INST?)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -
                                                                                         "cfm(x!2)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "cfm(x!2)<=bsdegmono(x!2)")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (CASE
                                                                                                        "sigma(1 + cfm(x!2), bsdegmono(x!2),
                                                                                                                     LAMBDA (j: nat):
                                                                                                                       IF j > bsdegmono(x!2) THEN 0
                                                                                                                       ELSE bspoly(x!1)(x!2)(j) *
                                                                                                                             Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                       ENDIF) = 0")
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (HIDE
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "sigma_split")
                                                                                                            (("1"
                                                                                                              (INST?)
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -
                                                                                                                 "cfm(x!2)-1")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (CASE
                                                                                                                            "sigma(0, cfm(x!2) - 1,
                                                                                                                                    LAMBDA (j: nat):
                                                                                                                                      IF j > bsdegmono(x!2) THEN 0
                                                                                                                                      ELSE bspoly(x!1)(x!2)(j) * Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                      ENDIF) = 0")
                                                                                                                        (("1"
                                                                                                                          (REPLACE
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "sigma"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "sigma"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "Xnew"
                                                                                                                                     +)
                                                                                                                                    (("1"
                                                                                                                                      (LIFT-IF)
                                                                                                                                      (("1"
                                                                                                                                        (GROUND)
                                                                                                                                        (("1"
                                                                                                                                          (REPLACE
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "Bern"
                                                                                                                                             +)
                                                                                                                                            (("1"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "^"
                                                                                                                                                 +)
                                                                                                                                                (("1"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "expt"
                                                                                                                                                   +
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (CASE
                                                                                                                                                        "FORALL (t:nat): expt(1,t) = 1")
                                                                                                                                                    (("1"
                                                                                                                                                      (INST
                                                                                                                                                       -
                                                                                                                                                       "bsdegmono(x!2)")
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (ASSERT)
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "C"
                                                                                                                                                             +)
                                                                                                                                                            (("1"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (HIDE-ALL-BUT
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (INDUCT
                                                                                                                                                         "t")
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (SKEEP)
                                                                                                                                                          (("2"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "expt"
                                                                                                                                                             +)
                                                                                                                                                            (("2"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (TYPEPRED
                                                                                                                                           "cfm")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "eptest?"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (INST
                                                                                                                                               -
                                                                                                                                               "x!2")
                                                                                                                                              (("2"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("2"
                                                                                                                                                  (REPLACE
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "Bern"
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "^"
                                                                                                                                                       +)
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "expt"
                                                                                                                                                         +
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (CASE
                                                                                                                                                              "FORALL (t:nat): expt(1,t) = 1")
                                                                                                                                                          (("1"
                                                                                                                                                            (INST
                                                                                                                                                             -
                                                                                                                                                             "bsdegmono(x!2)")
                                                                                                                                                            (("1"
                                                                                                                                                              (REPLACE
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "C"
                                                                                                                                                                 +)
                                                                                                                                                                (("1"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL)
                                                                                                                                                           ("2"
                                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (INDUCT
                                                                                                                                                               "t")
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "expt")
                                                                                                                                                                (("1"
                                                                                                                                                                  (PROPAX)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL)
                                                                                                                                                               ("2"
                                                                                                                                                                (SKEEP)
                                                                                                                                                                (("2"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "expt"
                                                                                                                                                                   +)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (HIDE
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (REWRITE
                                                                                                                             "sigma_restrict_eq_0")
                                                                                                                            (("2"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (SKOSIMP*)
                                                                                                                                (("2"
                                                                                                                                  (TYPEPRED
                                                                                                                                   "i!1")
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "Xnew"
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "Bern"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (CASE
                                                                                                                                            "FORALL (t:nat): 0^(t+1)=0")
                                                                                                                                        (("1"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "bsdegmono(x!2)-i!1-1")
                                                                                                                                          (("1"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (HIDE-ALL-BUT
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (INDUCT
                                                                                                                                             "t")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "^")
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "expt")
                                                                                                                                                (("1"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (SKEEP)
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "^")
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "expt"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (SKOSIMP*)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (REWRITE
                                                                                                         "sigma_restrict_eq_0")
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (SKOSIMP*)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "Xnew"
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (LIFT-IF)
                                                                                                                (("2"
                                                                                                                  (GROUND)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "Bern"
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "^")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "expt"
                                                                                                                         +
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (EXPAND
                                                                                                                     "Bern"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (TYPEPRED
                                                                                                                       "i!1")
                                                                                                                      (("2"
                                                                                                                        (TYPEPRED
                                                                                                                         "cfm")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "eptest?"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (INST
                                                                                                                             -
                                                                                                                             "x!2")
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("3"
                                                                                                      (SKOSIMP*)
                                                                                                      (("3"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               -1)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "eptest?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (SKOSIMP*)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (SKOSIMP*)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (EXPAND "Xnew")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOLEM 1 "vv")
                      (("2" (FLATTEN)
                        (("2" (SKEEP)
                          (("2" (EXPAND "Bern_coeffs_endpoints_rel_rec" +)
                            (("2" (LIFT-IF)
                              (("2" (GROUND)
                                (("1" (INST?)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (EXPAND "eptest?")
                                      (("2" (SKOSIMP*)
                                        (("2" (LIFT-IF)
                                          (("2" (GROUND)
                                            (("2" (TYPEPRED "cfm")
                                              (("2" (EXPAND "eptest?")
                                                (("2" (INST - "i!1")
                                                  (("2" (GROUND) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (INST - "a" "bsdegmono" "bspoly" "cf" "nvars"
                                   "rel" "terms"
                                   "cfm WITH [(vv):=bsdegmono(vv)]")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (EXPAND "eptest?")
                                      (("2" (SKOSIMP*)
                                        (("2" (LIFT-IF)
                                          (("2" (GROUND)
                                            (("2" (TYPEPRED "cfm")
                                              (("2" (EXPAND "eptest?")
                                                (("2" (INST - "i!1")
                                                  (("2" (GROUND) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|vv| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|cfm| SKOLEM-CONST-DECL "(eptest?(bsdegmono, nvars))" |multi_bernstein|
     NIL)
    (|nvars| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x!2| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Xnew| SKOLEM-CONST-DECL "[nat -> uint8]" |multi_bernstein| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nvars!1| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|bsdegmono!1| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|eptest?| SKOLEM-CONST-DECL
     "[[DegreeMono, posnat] -> [CoeffMono -> boolean]]" |multi_bernstein| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Bern_coeffs_endpoints_rel_rec| DEF-DECL
     "{l: list[real] | cons?(l) IMPLIES unitbox?(nvars)(list2array[real](0)(l)) AND length(l) = nvars}"
     |multi_bernstein| NIL)
    (|Bern_coeffs_endpoints_rel| CONST-DECL
     "{l: list[real] | cons?(l) IMPLIES unitbox?(nvars)(list2array[real](0)(l)) AND length(l) = nvars}"
     |multi_bernstein| NIL))
   SHOSTAK)
  (|Bern_coeffs_endpoints_rel_def-1| |nil| 3499440937
   ("" (EXPAND "Bern_coeffs_endpoints_rel")
    ((""
      (NAME "eptest?"
            "(LAMBDA (bsdegmono:DegreeMono,nvars): (LAMBDA (cfm:CoeffMono): (FORALL (i:below(nvars)): cfm(i)=0 OR cfm(i)=bsdegmono(i))))")
      (("" (SKOSIMP*)
        (("" (LIFT-IF)
          (("" (SPLIT)
            (("1" (FLATTEN)
              (("1"
                (CASE
                    "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                 terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))): v<=nvars AND
                                           forall_X(bspoly, bsdegmono, cf, nvars, terms, rel, a) IMPLIES
                                            null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                          bsdegmono,
                                                                          cf,
                                                                          nvars,
                                                                          terms,
                                                                          v)
                                                                         (cfm, rel, a))")
                (("1" (INST?)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE 2)
                    (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (INDUCT "v")
                    (("1" (SKEEP)
                      (("1" (EXPAND "Bern_coeffs_endpoints_rel_rec")
                        (("1" (ASSERT)
                          (("1" (LIFT-IF +)
                            (("1" (ASSERT)
                              (("1" (GROUND)
                                (("1" (HIDE 2)
                                  (("1"
                                    (NAME "Xnew"
                                          "LAMBDA (i:nat): IF cfm(i)=0 THEN 0 ELSE 1 ENDIF")
                                    (("1" (EXPAND "forall_X")
                                      (("1" (INST - "Xnew")
                                        (("1" (SPLIT -)
                                          (("1"
                                            (CASE
                                                "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew) = multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cfm)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2" (EXPAND "multibscoeff")
                                                (("2" (EXPAND "multibs_eval")
                                                  (("2"
                                                    (REWRITE
                                                     "sigma_restrict_eq")
                                                    (("2" (HIDE 2)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY)
                                                        (("2"
                                                          (EXPAND "restrict")
                                                          (("2" (LIFT-IF)
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (CASE
                                                                    "bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew) =
                                                                        product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(cfm(j)))")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2" (HIDE 3)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "bsproduct_eval"
                                                                     +)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "product_restrict_eq")
                                                                      (("1"
                                                                        (HIDE
                                                                         2)
                                                                        (("1"
                                                                          (DECOMPOSE-EQUALITY)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "restrict")
                                                                            (("1"
                                                                              (LIFT-IF)
                                                                              (("1"
                                                                                (GROUND)
                                                                                (("1"
                                                                                  (TYPEPRED
                                                                                   "cfm")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "sigma_split")
                                                                                    (("1"
                                                                                      (INST?)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -
                                                                                         "cfm(x!2)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "cfm(x!2)<=bsdegmono(x!2)")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (CASE
                                                                                                        "sigma(1 + cfm(x!2), bsdegmono(x!2),
                                                                                                                     LAMBDA (j: nat):
                                                                                                                       IF j > bsdegmono(x!2) THEN 0
                                                                                                                       ELSE bspoly(x!1)(x!2)(j) *
                                                                                                                             Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                       ENDIF) = 0")
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (HIDE
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "sigma_split")
                                                                                                            (("1"
                                                                                                              (INST?)
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -
                                                                                                                 "cfm(x!2)-1")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (CASE
                                                                                                                            "sigma(0, cfm(x!2) - 1,
                                                                                                                                    LAMBDA (j: nat):
                                                                                                                                      IF j > bsdegmono(x!2) THEN 0
                                                                                                                                      ELSE bspoly(x!1)(x!2)(j) * Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                      ENDIF) = 0")
                                                                                                                        (("1"
                                                                                                                          (REPLACE
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "sigma"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "sigma"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "Xnew"
                                                                                                                                     +)
                                                                                                                                    (("1"
                                                                                                                                      (LIFT-IF)
                                                                                                                                      (("1"
                                                                                                                                        (GROUND)
                                                                                                                                        (("1"
                                                                                                                                          (REPLACE
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "Bern"
                                                                                                                                             +)
                                                                                                                                            (("1"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "^"
                                                                                                                                                 +)
                                                                                                                                                (("1"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "expt"
                                                                                                                                                   +
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (CASE
                                                                                                                                                        "FORALL (t:nat): expt(1,t) = 1")
                                                                                                                                                    (("1"
                                                                                                                                                      (INST
                                                                                                                                                       -
                                                                                                                                                       "bsdegmono(x!2)")
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (ASSERT)
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "C"
                                                                                                                                                             +)
                                                                                                                                                            (("1"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (HIDE-ALL-BUT
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (INDUCT
                                                                                                                                                         "t")
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "expt")
                                                                                                                                                          (("1"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (SKEEP)
                                                                                                                                                          (("2"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "expt"
                                                                                                                                                             +)
                                                                                                                                                            (("2"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (TYPEPRED
                                                                                                                                           "cfm")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "eptest?"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (INST
                                                                                                                                               -
                                                                                                                                               "x!2")
                                                                                                                                              (("2"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("2"
                                                                                                                                                  (REPLACE
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "Bern"
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "^"
                                                                                                                                                       +)
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "expt"
                                                                                                                                                         +
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (CASE
                                                                                                                                                              "FORALL (t:nat): expt(1,t) = 1")
                                                                                                                                                          (("1"
                                                                                                                                                            (INST
                                                                                                                                                             -
                                                                                                                                                             "bsdegmono(x!2)")
                                                                                                                                                            (("1"
                                                                                                                                                              (REPLACE
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "C"
                                                                                                                                                                 +)
                                                                                                                                                                (("1"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL)
                                                                                                                                                           ("2"
                                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (INDUCT
                                                                                                                                                               "t")
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "expt")
                                                                                                                                                                (("1"
                                                                                                                                                                  (PROPAX)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL)
                                                                                                                                                               ("2"
                                                                                                                                                                (SKEEP)
                                                                                                                                                                (("2"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "expt"
                                                                                                                                                                   +)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (HIDE
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (REWRITE
                                                                                                                             "sigma_restrict_eq_0")
                                                                                                                            (("2"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (SKOSIMP*)
                                                                                                                                (("2"
                                                                                                                                  (TYPEPRED
                                                                                                                                   "i!1")
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "Xnew"
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "Bern"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (CASE
                                                                                                                                            "FORALL (t:nat): 0^(t+1)=0")
                                                                                                                                        (("1"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "bsdegmono(x!2)-i!1-1")
                                                                                                                                          (("1"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (HIDE-ALL-BUT
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (INDUCT
                                                                                                                                             "t")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "^")
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "expt")
                                                                                                                                                (("1"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (SKEEP)
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "^")
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "expt"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (SKOSIMP*)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (REWRITE
                                                                                                         "sigma_restrict_eq_0")
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (SKOSIMP*)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "Xnew"
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (LIFT-IF)
                                                                                                                (("2"
                                                                                                                  (GROUND)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "Bern"
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "^")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "expt"
                                                                                                                         +
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (EXPAND
                                                                                                                     "Bern"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (TYPEPRED
                                                                                                                       "i!1")
                                                                                                                      (("2"
                                                                                                                        (TYPEPRED
                                                                                                                         "cfm")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "eptest?"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (INST
                                                                                                                             -
                                                                                                                             "x!2")
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("3"
                                                                                                      (SKOSIMP*)
                                                                                                      (("3"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               -1)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "eptest?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (SKOSIMP*)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (SKOSIMP*)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (SKOSIMP*)
                                                                            (("3"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (SKOSIMP*)
                                                                        (("3"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (EXPAND "Xnew")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOLEM 1 "vv")
                      (("2" (FLATTEN)
                        (("2" (SKEEP)
                          (("2" (EXPAND "Bern_coeffs_endpoints_rel_rec" +)
                            (("2" (LIFT-IF)
                              (("2" (GROUND)
                                (("1" (INST?)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (EXPAND "eptest?")
                                      (("2" (SKOSIMP*)
                                        (("2" (LIFT-IF)
                                          (("2" (GROUND)
                                            (("2" (TYPEPRED "cfm")
                                              (("2" (EXPAND "eptest?")
                                                (("2" (INST - "i!1")
                                                  (("2" (GROUND) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2"
                                    (INST - "a" "bsdegmono" "bspoly" "cf"
                                     "nvars" "rel" "terms"
                                     "cfm WITH [(vv):=bsdegmono(vv)]")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "eptest?")
                                        (("2" (SKOSIMP*)
                                          (("2" (LIFT-IF)
                                            (("2" (GROUND)
                                              (("2" (TYPEPRED "cfm")
                                                (("2" (EXPAND "eptest?")
                                                  (("2" (INST - "i!1")
                                                    (("2" (GROUND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL) (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|list2array| DEF-DECL "T" |array2list| |structures|))
   SHOSTAK))
 (|Bern_coeffs_counterexample| 0
  (|Bern_coeffs_counterexample-3| "" 3884309928
   ("" (EXPAND "Bern_coeffs_endpoints_rel")
    ((""
      (NAME "eptest?"
            "(LAMBDA (bsdegmono:DegreeMono,nvars): (LAMBDA (cfm:CoeffMono): (FORALL (i:below(nvars)): cfm(i)=0 OR cfm(i)=bsdegmono(i))))")
      ((""
        (CASE
            "NOT FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                            cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                            terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))):
                                                      (NOT null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                               bsdegmono,
                                                                                               cf,
                                                                                               nvars,
                                                                                               terms,
                                                                                               v)
                                                                                              (cfm,
                                                                                               rel,
                                                                                               a)))
                                                       IMPLIES
                                                       length(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                            bsdegmono,
                                                                                            cf,
                                                                                            nvars,
                                                                                            terms,
                                                                                            v)
                                                                                           (cfm, rel, a))
                                                        = nvars")
        (("1" (HIDE-ALL-BUT (-1 1))
          (("1" (SKEEP)
            (("1"
              (TYPEPRED "Bern_coeffs_endpoints_rel_rec(bspoly,
                                               bsdegmono,
                                               cf,
                                               nvars,
                                               terms,
                                               v)
                                              (cfm, rel, a)")
              (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2"
          (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                                                 terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))):
                                                                           (NOT null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                                                    bsdegmono,
                                                                                                                    cf,
                                                                                                                    nvars,
                                                                                                                    terms,
                                                                                                                    v)
                                                                                                                   (cfm,
                                                                                                                    rel,
                                                                                                                    a)))
                                                                            IMPLIES
                                                                             NOT rel(multibs_eval(bspoly, bsdegmono, cf, nvars, terms)
                                                                                                 (list2array[real](0)
                                                                                                       (Bern_coeffs_endpoints_rel_rec
                                                                                                        (bspoly,
                                                                                                         bsdegmono,
                                                                                                         cf,
                                                                                                         nvars,
                                                                                                         terms,
                                                                                                         v)
                                                                                                        (cfm, rel, a))),a)")
          (("1" (SKEEP)
            (("1"
              (CASE
                  "FORALL (j: below(nvars)): intendpts(j)`1 AND intendpts(j)`2")
              (("1" (REPLACE -1)
                (("1" (INST? -3)
                  (("1" (ASSERT)
                    (("1" (INST? -2)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACE 1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "v")
              (("1" (SKEEP)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (EXPAND "Bern_coeffs_endpoints_rel_rec")
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (HIDE 2 3)
                            (("1"
                              (NAME "Xnew"
                                    "LAMBDA (i:nat): IF i<nvars THEN (IF cfm(i)=0 THEN 0 ELSE 1 ENDIF) ELSE 0 ENDIF")
                              (("1"
                                (CASE
                                    "list2array[real](0)(corner_to_point(cfm, nvars)) = Xnew")
                                (("1" (REPLACE -1)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (CASE
                                          "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew) = multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cfm)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2" (HIDE 2)
                                          (("2" (EXPAND "multibscoeff")
                                            (("2" (EXPAND "multibs_eval" +)
                                              (("2"
                                                (REWRITE "sigma_restrict_eq")
                                                (("2" (HIDE 2)
                                                  (("2" (DECOMPOSE-EQUALITY)
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (LIFT-IF)
                                                        (("2" (GROUND)
                                                          (("2"
                                                            (CASE
                                                                "bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew) =
                                                                                                                                                                   product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(cfm(j)))")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE 3)
                                                              (("2"
                                                                (EXPAND
                                                                 "bsproduct_eval"
                                                                 +)
                                                                (("2"
                                                                  (REWRITE
                                                                   "product_restrict_eq")
                                                                  (("1"
                                                                    (HIDE 2)
                                                                    (("1"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "restrict")
                                                                        (("1"
                                                                          (LIFT-IF)
                                                                          (("1"
                                                                            (GROUND)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "cfm")
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "sigma_split")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -
                                                                                     "cfm(x!2)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "cfm(x!2)<=bsdegmono(x!2)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -2)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -2)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "sigma(1 + cfm(x!2), bsdegmono(x!2),
                                                                                                                                                                                                                                                                  LAMBDA (j: nat):
                                                                                                                                                                                                                                                                    IF j > bsdegmono(x!2) THEN 0
                                                                                                                                                                                                                                                                    ELSE bspoly(x!1)(x!2)(j) *
                                                                                                                                                                                                                                                                          Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                                                                                                                                                    ENDIF) = 0")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "sigma_split")
                                                                                                        (("1"
                                                                                                          (INST?)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -
                                                                                                             "cfm(x!2)-1")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        "sigma(0, cfm(x!2) - 1,
                                                                                                                                                                                                                                                                                                     LAMBDA (j: nat):
                                                                                                                                                                                                                                                                                                       IF j > bsdegmono(x!2) THEN 0
                                                                                                                                                                                                                                                                                                       ELSE bspoly(x!1)(x!2)(j) * Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                                                                                                                                                                                       ENDIF) = 0")
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "sigma"
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "sigma"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "Xnew"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (LIFT-IF)
                                                                                                                                  (("1"
                                                                                                                                    (GROUND)
                                                                                                                                    (("1"
                                                                                                                                      (REPLACE
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "Bern"
                                                                                                                                         +)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "^"
                                                                                                                                             +)
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "expt"
                                                                                                                                               +
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (LEMMA
                                                                                                                                                 "expt_1i")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -
                                                                                                                                                   "bsdegmono(x!2)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "C"
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "^"
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (TYPEPRED
                                                                                                                                       "cfm")
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "eptest?"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (REPLACE
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "Bern"
                                                                                                                                                 +)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "^"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "expt"
                                                                                                                                                     +
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (LEMMA
                                                                                                                                                       "expt_1i")
                                                                                                                                                      (("2"
                                                                                                                                                        (INST
                                                                                                                                                         -
                                                                                                                                                         "bsdegmono(x!2)")
                                                                                                                                                        (("2"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "^"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (REPLACE
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "C"
                                                                                                                                                               +)
                                                                                                                                                              (("2"
                                                                                                                                                                (ASSERT)
                                                                                                                                                                NIL
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (REWRITE
                                                                                                                         "sigma_restrict_eq_0")
                                                                                                                        (("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (SKOSIMP*)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "i!1")
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "Xnew"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "^"
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "expt"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (PROPAX)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (SKOSIMP*)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "sigma_restrict_eq_0")
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (SKOSIMP*)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "Xnew"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (LIFT-IF)
                                                                                                            (("2"
                                                                                                              (GROUND)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "Bern"
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "^")
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "expt"
                                                                                                                     +
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (EXPAND
                                                                                                                 "Bern"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (TYPEPRED
                                                                                                                   "i!1")
                                                                                                                  (("2"
                                                                                                                    (TYPEPRED
                                                                                                                     "cfm")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "eptest?"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("3"
                                                                                                  (SKOSIMP*)
                                                                                                  (("3"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "eptest?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (SKOSIMP*)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACES -1 :DIR RL)
                                  (("2" (DECOMPOSE-EQUALITY 1)
                                    (("2" (EXPAND "corner_to_point")
                                      (("2" (CASE "x!1 < nvars")
                                        (("1" (ASSERT)
                                          (("1"
                                            (REWRITE "array2list_inv[real]")
                                            NIL NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REWRITE "list2array_sound")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (EXPAND "Bern_coeffs_endpoints_rel_rec" (-2 1))
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (INST? -4)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "cfm")
                                (("2" (EXPAND "eptest?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "i!1")
                                      (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST? -2)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "cfm")
                                (("2" (EXPAND "eptest?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "i!1")
                                      (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Bern_coeffs_endpoints_rel| CONST-DECL
     "{l: list[real] | cons?(l) IMPLIES unitbox?(nvars)(list2array[real](0)(l)) AND length(l) = nvars}"
     |multi_bernstein| NIL)
    (|Bern_coeffs_endpoints_rel_rec| DEF-DECL
     "{l: list[real] | cons?(l) IMPLIES unitbox?(nvars)(list2array[real](0)(l)) AND length(l) = nvars}"
     |multi_bernstein| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|vv| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|cfm| SKOLEM-CONST-DECL "(eptest?(bsdegmono, nvars))" |multi_bernstein|
     NIL)
    (|nvars| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|corner_to_point| CONST-DECL
     "{l: listn[real](nvars) | unitbox?(nvars)(list2array[real](0)(l))}" |util|
     NIL)
    (|listn| TYPE-EQ-DECL NIL |listn| |structures|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Xnew| SKOLEM-CONST-DECL "[nat -> uint8]" |multi_bernstein| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|x!2| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|array2list_inv| FORMULA-DECL NIL |array2list| |structures|)
    (|list2array_sound| FORMULA-DECL NIL |array2list| |structures|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|eptest?| SKOLEM-CONST-DECL
     "[[DegreeMono, posnat] -> [CoeffMono -> boolean]]" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|nvars| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|IntervalEndpoints| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)
  (|Bern_coeffs_counterexample-2| "" 3790097902
   ("" (EXPAND "Bern_coeffs_endpoints_rel")
    ((""
      (NAME "eptest?"
            "(LAMBDA (bsdegmono:DegreeMono,nvars): (LAMBDA (cfm:CoeffMono): (FORALL (i:below(nvars)): cfm(i)=0 OR cfm(i)=bsdegmono(i))))")
      ((""
        (CASE
            "NOT FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                            cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                            terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))):
                                                      (NOT null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                               bsdegmono,
                                                                                               cf,
                                                                                               nvars,
                                                                                               terms,
                                                                                               v)
                                                                                              (cfm,
                                                                                               rel,
                                                                                               a)))
                                                       IMPLIES
                                                       length(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                            bsdegmono,
                                                                                            cf,
                                                                                            nvars,
                                                                                            terms,
                                                                                            v)
                                                                                           (cfm, rel, a))
                                                        = nvars")
        (("1" (HIDE-ALL-BUT (-1 1))
          (("1" (SKEEP)
            (("1"
              (TYPEPRED "Bern_coeffs_endpoints_rel_rec(bspoly,
                                               bsdegmono,
                                               cf,
                                               nvars,
                                               terms,
                                               v)
                                              (cfm, rel, a)")
              (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2"
          (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                                                 terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))):
                                                                           (NOT null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                                                    bsdegmono,
                                                                                                                    cf,
                                                                                                                    nvars,
                                                                                                                    terms,
                                                                                                                    v)
                                                                                                                   (cfm,
                                                                                                                    rel,
                                                                                                                    a)))
                                                                            IMPLIES
                                                                             NOT rel(multibs_eval(bspoly, bsdegmono, cf, nvars, terms)
                                                                                                 (list2array(0)
                                                                                                       (Bern_coeffs_endpoints_rel_rec
                                                                                                        (bspoly,
                                                                                                         bsdegmono,
                                                                                                         cf,
                                                                                                         nvars,
                                                                                                         terms,
                                                                                                         v)
                                                                                                        (cfm, rel, a))),a)")
          (("1" (SKEEP)
            (("1"
              (CASE
                  "FORALL (j: below(nvars)): intendpts(j)`1 AND intendpts(j)`2")
              (("1" (REPLACE -1)
                (("1" (INST? -3)
                  (("1" (ASSERT)
                    (("1" (INST? -2)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACE 1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "v")
              (("1" (SKEEP)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (EXPAND "Bern_coeffs_endpoints_rel_rec")
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (HIDE 2 3)
                            (("1"
                              (NAME "Xnew"
                                    "LAMBDA (i:nat): IF i<nvars THEN (IF cfm(i)=0 THEN 0 ELSE 1 ENDIF) ELSE 0 ENDIF")
                              (("1"
                                (CASE
                                    "list2array(0)(corner_to_point(cfm, nvars)) = Xnew")
                                (("1" (REPLACE -1)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (CASE
                                          "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew) = multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cfm)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2" (HIDE 2)
                                          (("2" (EXPAND "multibscoeff")
                                            (("2" (EXPAND "multibs_eval" +)
                                              (("2"
                                                (REWRITE "sigma_restrict_eq")
                                                (("2" (HIDE 2)
                                                  (("2" (DECOMPOSE-EQUALITY)
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (LIFT-IF)
                                                        (("2" (GROUND)
                                                          (("2"
                                                            (CASE
                                                                "bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew) =
                                                                                                                                                                   product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(cfm(j)))")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE 3)
                                                              (("2"
                                                                (EXPAND
                                                                 "bsproduct_eval"
                                                                 +)
                                                                (("2"
                                                                  (REWRITE
                                                                   "product_restrict_eq")
                                                                  (("1"
                                                                    (HIDE 2)
                                                                    (("1"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "restrict")
                                                                        (("1"
                                                                          (LIFT-IF)
                                                                          (("1"
                                                                            (GROUND)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "cfm")
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "sigma_split")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -
                                                                                     "cfm(x!2)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "cfm(x!2)<=bsdegmono(x!2)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -2)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -2)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "sigma(1 + cfm(x!2), bsdegmono(x!2),
                                                                                                                                                                                                                                                                  LAMBDA (j: nat):
                                                                                                                                                                                                                                                                    IF j > bsdegmono(x!2) THEN 0
                                                                                                                                                                                                                                                                    ELSE bspoly(x!1)(x!2)(j) *
                                                                                                                                                                                                                                                                          Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                                                                                                                                                    ENDIF) = 0")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "sigma_split")
                                                                                                        (("1"
                                                                                                          (INST?)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -
                                                                                                             "cfm(x!2)-1")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        "sigma(0, cfm(x!2) - 1,
                                                                                                                                                                                                                                                                                                     LAMBDA (j: nat):
                                                                                                                                                                                                                                                                                                       IF j > bsdegmono(x!2) THEN 0
                                                                                                                                                                                                                                                                                                       ELSE bspoly(x!1)(x!2)(j) * Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                                                                                                                                                                                       ENDIF) = 0")
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "sigma"
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "sigma"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "Xnew"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (LIFT-IF)
                                                                                                                                  (("1"
                                                                                                                                    (GROUND)
                                                                                                                                    (("1"
                                                                                                                                      (REPLACE
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "Bern"
                                                                                                                                         +)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "^"
                                                                                                                                             +)
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "expt"
                                                                                                                                               +
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (LEMMA
                                                                                                                                                 "expt_1i")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -
                                                                                                                                                   "bsdegmono(x!2)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "C"
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "^"
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (TYPEPRED
                                                                                                                                       "cfm")
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "eptest?"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (REPLACE
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "Bern"
                                                                                                                                                 +)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "^"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "expt"
                                                                                                                                                     +
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (LEMMA
                                                                                                                                                       "expt_1i")
                                                                                                                                                      (("2"
                                                                                                                                                        (INST
                                                                                                                                                         -
                                                                                                                                                         "bsdegmono(x!2)")
                                                                                                                                                        (("2"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "^"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (REPLACE
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "C"
                                                                                                                                                               +)
                                                                                                                                                              (("2"
                                                                                                                                                                (ASSERT)
                                                                                                                                                                NIL
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (REWRITE
                                                                                                                         "sigma_restrict_eq_0")
                                                                                                                        (("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (SKOSIMP*)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "i!1")
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "Xnew"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "^"
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "expt"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (PROPAX)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (SKOSIMP*)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "sigma_restrict_eq_0")
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (SKOSIMP*)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "Xnew"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (LIFT-IF)
                                                                                                            (("2"
                                                                                                              (GROUND)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "Bern"
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "^")
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "expt"
                                                                                                                     +
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (EXPAND
                                                                                                                 "Bern"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (TYPEPRED
                                                                                                                   "i!1")
                                                                                                                  (("2"
                                                                                                                    (TYPEPRED
                                                                                                                     "cfm")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "eptest?"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("3"
                                                                                                  (SKOSIMP*)
                                                                                                  (("3"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "eptest?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (SKOSIMP*)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACES -1 :DIR RL)
                                  (("2" (DECOMPOSE-EQUALITY 1)
                                    (("2" (EXPAND "corner_to_point")
                                      (("2" (CASE "x!1 < nvars")
                                        (("1" (ASSERT)
                                          (("1"
                                            (REWRITE "array2list_inv[real]")
                                            NIL NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REWRITE "list2array_sound")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (EXPAND "Bern_coeffs_endpoints_rel_rec" (-2 1))
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (INST? -4)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "cfm")
                                (("2" (EXPAND "eptest?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "i!1")
                                      (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST? -2)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "cfm")
                                (("2" (EXPAND "eptest?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "i!1")
                                      (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Bern_coeffs_endpoints_rel| CONST-DECL
     "{l: list[real] | cons?(l) IMPLIES unitbox?(nvars)(list2array[real](0)(l)) AND length(l) = nvars}"
     |multi_bernstein| NIL)
    (|Bern_coeffs_endpoints_rel_rec| DEF-DECL
     "{l: list[real] | cons?(l) IMPLIES unitbox?(nvars)(list2array[real](0)(l)) AND length(l) = nvars}"
     |multi_bernstein| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) NIL
    NIL NIL NIL (|listn| TYPE-EQ-DECL NIL |listn| |structures|)
    (|corner_to_point| CONST-DECL
     "{l: listn[real](nvars) | unitbox?(nvars)(list2array[real](0)(l))}" |util|
     NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|array2list_inv| FORMULA-DECL NIL |array2list| |structures|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|list2array_sound| FORMULA-DECL NIL |array2list| |structures|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL NIL NIL
    (|IntervalEndpoints| TYPE-EQ-DECL NIL |util| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK)
  (|Bern_coeffs_counterexample-1| |nil| 3499800124
   ("" (EXPAND "Bern_coeffs_endpoints_rel")
    ((""
      (NAME "eptest?"
            "(LAMBDA (bsdegmono:DegreeMono,nvars): (LAMBDA (cfm:CoeffMono): (FORALL (i:below(nvars)): cfm(i)=0 OR cfm(i)=bsdegmono(i))))")
      ((""
        (CASE
            "NOT FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                            cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                            terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))):
                                                      (NOT null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                               bsdegmono,
                                                                                               cf,
                                                                                               nvars,
                                                                                               terms,
                                                                                               v)
                                                                                              (cfm,
                                                                                               rel,
                                                                                               a)))
                                                       IMPLIES
                                                       length(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                            bsdegmono,
                                                                                            cf,
                                                                                            nvars,
                                                                                            terms,
                                                                                            v)
                                                                                           (cfm, rel, a))
                                                        = nvars")
        (("1" (HIDE-ALL-BUT (-1 1))
          (("1" (SKEEP)
            (("1"
              (TYPEPRED "Bern_coeffs_endpoints_rel_rec(bspoly,
                                               bsdegmono,
                                               cf,
                                               nvars,
                                               terms,
                                               v)
                                              (cfm, rel, a)")
              (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2"
          (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                                                 cf: Coeff, nvars: posnat, rel: [[real, real] -> bool],
                                                                                 terms: posnat,v:nat,cfm:(eptest?(bsdegmono,nvars))):
                                                                           (NOT null?(Bern_coeffs_endpoints_rel_rec(bspoly,
                                                                                                                    bsdegmono,
                                                                                                                    cf,
                                                                                                                    nvars,
                                                                                                                    terms,
                                                                                                                    v)
                                                                                                                   (cfm,
                                                                                                                    rel,
                                                                                                                    a)))
                                                                            IMPLIES
                                                                             NOT rel(multibs_eval(bspoly, bsdegmono, cf, nvars, terms)
                                                                                                 (list2array(0)
                                                                                                       (Bern_coeffs_endpoints_rel_rec
                                                                                                        (bspoly,
                                                                                                         bsdegmono,
                                                                                                         cf,
                                                                                                         nvars,
                                                                                                         terms,
                                                                                                         v)
                                                                                                        (cfm, rel, a))),a)")
          (("1" (SKEEP)
            (("1"
              (CASE
                  "FORALL (j: below(nvars)): intendpts(j)`1 AND intendpts(j)`2")
              (("1" (REPLACE -1)
                (("1" (INST? -3)
                  (("1" (ASSERT)
                    (("1" (INST? -2)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND "eptest?") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACE 1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (INDUCT "v")
              (("1" (SKEEP)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (EXPAND "Bern_coeffs_endpoints_rel_rec")
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (HIDE 2 3)
                            (("1"
                              (NAME "Xnew"
                                    "LAMBDA (i:nat): IF i<nvars THEN (IF cfm(i)=0 THEN 0 ELSE 1 ENDIF) ELSE 0 ENDIF")
                              (("1"
                                (CASE
                                    "list2array(0)(corner_to_point(cfm, nvars)) = Xnew")
                                (("1" (REPLACE -1)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (CASE
                                          "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew) = multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cfm)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2" (HIDE 2)
                                          (("2" (EXPAND "multibscoeff")
                                            (("2" (EXPAND "multibs_eval" +)
                                              (("2"
                                                (REWRITE "sigma_restrict_eq")
                                                (("2" (HIDE 2)
                                                  (("2" (DECOMPOSE-EQUALITY)
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (LIFT-IF)
                                                        (("2" (GROUND)
                                                          (("2"
                                                            (CASE
                                                                "bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew) =
                                                                                                                                                                   product(0, nvars - 1, LAMBDA (j: nat): bspoly(x!1)(j)(cfm(j)))")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE 3)
                                                              (("2"
                                                                (EXPAND
                                                                 "bsproduct_eval"
                                                                 +)
                                                                (("2"
                                                                  (REWRITE
                                                                   "product_restrict_eq")
                                                                  (("1"
                                                                    (HIDE 2)
                                                                    (("1"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "restrict")
                                                                        (("1"
                                                                          (LIFT-IF)
                                                                          (("1"
                                                                            (GROUND)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "cfm")
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "sigma_split")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -
                                                                                     "cfm(x!2)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "cfm(x!2)<=bsdegmono(x!2)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -2)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -2)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "sigma(1 + cfm(x!2), bsdegmono(x!2),
                                                                                                                                                                                                                                                                  LAMBDA (j: nat):
                                                                                                                                                                                                                                                                    IF j > bsdegmono(x!2) THEN 0
                                                                                                                                                                                                                                                                    ELSE bspoly(x!1)(x!2)(j) *
                                                                                                                                                                                                                                                                          Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                                                                                                                                                    ENDIF) = 0")
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "sigma_split")
                                                                                                        (("1"
                                                                                                          (INST?)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -
                                                                                                             "cfm(x!2)-1")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        "sigma(0, cfm(x!2) - 1,
                                                                                                                                                                                                                                                                                                     LAMBDA (j: nat):
                                                                                                                                                                                                                                                                                                       IF j > bsdegmono(x!2) THEN 0
                                                                                                                                                                                                                                                                                                       ELSE bspoly(x!1)(x!2)(j) * Bern(j, bsdegmono(x!2))(Xnew(x!2))
                                                                                                                                                                                                                                                                                                       ENDIF) = 0")
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "sigma"
                                                                                                                             +)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "sigma"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "Xnew"
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (LIFT-IF)
                                                                                                                                  (("1"
                                                                                                                                    (GROUND)
                                                                                                                                    (("1"
                                                                                                                                      (REPLACE
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "Bern"
                                                                                                                                         +)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "^"
                                                                                                                                             +)
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "expt"
                                                                                                                                               +
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (LEMMA
                                                                                                                                                 "expt_1i")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -
                                                                                                                                                   "bsdegmono(x!2)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "C"
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "^"
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (TYPEPRED
                                                                                                                                       "cfm")
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "eptest?"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (REPLACE
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "Bern"
                                                                                                                                                 +)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "^"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "expt"
                                                                                                                                                     +
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (LEMMA
                                                                                                                                                       "expt_1i")
                                                                                                                                                      (("2"
                                                                                                                                                        (INST
                                                                                                                                                         -
                                                                                                                                                         "bsdegmono(x!2)")
                                                                                                                                                        (("2"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "^"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (REPLACE
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "C"
                                                                                                                                                               +)
                                                                                                                                                              (("2"
                                                                                                                                                                (ASSERT)
                                                                                                                                                                NIL
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (REWRITE
                                                                                                                         "sigma_restrict_eq_0")
                                                                                                                        (("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (SKOSIMP*)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "i!1")
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "Xnew"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "^"
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "expt"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (PROPAX)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (SKOSIMP*)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "sigma_restrict_eq_0")
                                                                                                    (("2"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (SKOSIMP*)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "Xnew"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (LIFT-IF)
                                                                                                            (("2"
                                                                                                              (GROUND)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "Bern"
                                                                                                                 +)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "^")
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "expt"
                                                                                                                     +
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (EXPAND
                                                                                                                 "Bern"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (TYPEPRED
                                                                                                                   "i!1")
                                                                                                                  (("2"
                                                                                                                    (TYPEPRED
                                                                                                                     "cfm")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "eptest?"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("3"
                                                                                                  (SKOSIMP*)
                                                                                                  (("3"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "eptest?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (SKOSIMP*)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (SKOSIMP*)
                                                                        (("3"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (SKOSIMP*)
                                                                    (("3"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACES -1 :DIR RL)
                                  (("2" (DECOMPOSE-EQUALITY 1)
                                    (("2" (EXPAND "corner_to_point")
                                      (("2" (CASE "x!1 < nvars")
                                        (("1" (ASSERT)
                                          (("1"
                                            (REWRITE "array2list_inv[real]")
                                            NIL NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REWRITE "list2array_sound")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOLEM 1 "vv")
                (("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (EXPAND "Bern_coeffs_endpoints_rel_rec" (-2 1))
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (INST? -4)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "cfm")
                                (("2" (EXPAND "eptest?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "i!1")
                                      (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST? -2)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (TYPEPRED "cfm")
                                (("2" (EXPAND "eptest?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "i!1")
                                      (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|IntervalEndpoints| TYPE-EQ-DECL NIL |util| NIL)
    (|list2array_sound| FORMULA-DECL NIL |array2list| |structures|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|array2list_inv| FORMULA-DECL NIL |array2list| |structures|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (C CONST-DECL "posnat" |binomial| |reals|)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|corner_to_point| CONST-DECL
     "{l: listn[real](nvars) | unitbox?(nvars)(list2array[real](0)(l))}" |util|
     NIL)
    (|listn| TYPE-EQ-DECL NIL |listn| |structures|)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL) (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|list2array| DEF-DECL "T" |array2list| |structures|))
   NIL))
 (|Bern_le| 0
  (|Bern_le-2| "" 3790097904
   ("" (SKEEP)
    (("" (REWRITE "Bern_coeffs_rel_def")
      (("" (EXPAND "forall_X")
        (("" (SKOSIMP*)
          (("" (REWRITE "multibs_eval_equiv")
            (("" (NAME "cfnew" "LAMBDA (i:nat): a/(terms)")
              (("" (NAME "bspolynew" "LAMBDA(i:nat)(j:nat)(k:nat): 1")
                ((""
                  (CASE
                      "multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                                                                         (LAMBDA (i: nat): 0)(X!1) <= multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                         (LAMBDA (i: nat): 0)(X!1) AND multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                         (LAMBDA (i: nat): 0)(X!1) =a")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1"
                        (CASE
                            "FORALL (cmo:CoeffMono,v:nat): v<=nvars AND le_below_mono?(nvars)(cmo,bsdegmono) IMPLIES multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                                                                                (cmo)(X!1)
                                                                                                                                 <=
                                                                                                                                 multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, v)
                                                                                                                                                 (cmo)(X!1)")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "v")
                            (("1" (SKEEP)
                              (("1" (EXPAND "multibs_eval_rec" +)
                                (("1"
                                  (CASE "product(0, nvars - 1,
                                                                                                                                                                                 LAMBDA (k: nat):
                                                                                                                                                                                   IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                                     THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                                   ELSE 1
                                                                                                                                                                                   ENDIF) >= 0")
                                  (("1"
                                    (CASE
                                        "multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cmo)
                                                                                                                                                                                             <=
                                                                                                                                                                                             multibs_eval_mono(bspolynew, bsdegmono, cfnew, nvars, terms)(cmo)")
                                    (("1"
                                      (MULT-BY -1 "product(0, nvars - 1,
                                                                                                                                                                       LAMBDA (k: nat):
                                                                                                                                                                         IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                           THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                         ELSE 1
                                                                                                                                                                         ENDIF)")
                                      (("1" (HIDE 2)
                                        (("1" (SKOSIMP*)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "multibs_eval_mono")
                                          (("2" (EXPAND "bspolynew" +)
                                            (("2" (EXPAND "cfnew" +)
                                              (("2" (EXPAND "multibscoeff")
                                                (("2" (INST - "cmo")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "FORALL (j:nat): j<terms IMPLIES sigma(0, j,
                                                                                                                                           LAMBDA (i: nat):
                                                                                                                                             a / (terms) * product(0, nvars - 1, LAMBDA (j: nat): 1)) = a*((j+1)/(terms))")
                                                      (("1" (INST - "terms-1")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (CASE
                                                              "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                                          (("1" (INDUCT "j")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "sigma"
                                                                        +)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma" +)
                                                                  (("1"
                                                                    (INST -
                                                                     "nvars-1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (SKOLEM 1 "j")
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "sigma" +)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("2"
                                                                        (INST -
                                                                         "nvars-1")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -3)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2" (INDUCT "kr")
                                                              (("1"
                                                                (EXPAND
                                                                 "product")
                                                                (("1"
                                                                  (EXPAND
                                                                   "product")
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (SKOLEM 1 "kr")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "product"
                                                                     +)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2"
                                      (CASE
                                          "FORALL (kr:nat): kr<=nvars-1 IMPLIES product(0, kr,
                                                                                                           LAMBDA (k: nat):
                                                                                                             IF cmo(k) <= bsdegmono(k)
                                                                                                               THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                             ELSE 1
                                                                                                             ENDIF)
                                                                                                    >= 0")
                                      (("1" (INST - "nvars-1")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (INDUCT "kr")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "product")
                                              (("1" (EXPAND "product")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1"
                                                      (LEMMA
                                                       "Bern_nonnegative")
                                                      (("1" (INST - "X!1(0)")
                                                        (("1" (SPLIT -)
                                                          (("1" (INST?) NIL
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "unitbox?")
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (INST -8 "0")
                                                                (("2" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (GROUND)
                                                            (("3"
                                                              (EXPAND
                                                               "unitbox?")
                                                              (("3"
                                                                (INST -8 "0")
                                                                (("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (EXPAND "product" +)
                                              (("2" (LIFT-IF)
                                                (("2" (GROUND)
                                                  (("2"
                                                    (MULT-BY -2
                                                     "Bern(cmo(1 + j), bsdegmono(1 + j))(X!1(1 + j))")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (HIDE 2)
                                                      (("3"
                                                        (LEMMA
                                                         "Bern_nonnegative")
                                                        (("3"
                                                          (INST - "X!1(1+j)")
                                                          (("3"
                                                            (EXPAND "unitbox?")
                                                            (("3"
                                                              (INST -10 "1+j")
                                                              (("3" (SPLIT -)
                                                                (("1" (INST?)
                                                                  NIL NIL)
                                                                 ("2" (GROUND)
                                                                  NIL NIL)
                                                                 ("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKEEP)
                              (("2" (SKEEP)
                                (("2" (EXPAND "multibs_eval_rec" +)
                                  (("2" (REWRITE "sigma_le")
                                    (("2" (HIDE 2)
                                      (("2" (SKOSIMP*)
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2" (HIDE 1)
                                              (("2" (EXPAND "le_below_mono?")
                                                (("2" (SKOSIMP*)
                                                  (("2" (CASE "j!1 = j")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (INST -2 "j!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "multibs_eval_equiv" + :DIR RL)
                        (("2" (EXPAND "multibs_eval")
                          (("2"
                            (CASE "(LAMBDA (i: nat):
                         cfnew(i) *
                          bsproduct_eval(bspolynew(i), bsdegmono, nvars)(X!1)) = (LAMBDA (i:nat): a/terms)")
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1)
                                (("1"
                                  (CASE
                                      "FORALL (j:nat): j<terms IMPLIES sigma(0,j,(LAMBDA (i:nat): a/terms)) = (j+1)*a/terms")
                                  (("1" (INST - "terms-1")
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "j")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (EXPAND "sigma")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOLEM 1 "j")
                                        (("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "sigma" +)
                                              (("2" (REPLACE -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "cfnew")
                                  (("2" (EXPAND "bsproduct_eval")
                                    (("2" (EXPAND "bspolynew")
                                      (("2"
                                        (CASE "(LAMBDA (i: nat):
                              sigma(0, bsdegmono(i),
                                    LAMBDA (j: nat):
                                      IF j > bsdegmono(i) THEN 0
                                      ELSE 1 * Bern(j, bsdegmono(i))(X!1(i))
                                      ENDIF)) = (LAMBDA (i:nat): 1)")
                                        (("1" (REPLACE -1)
                                          (("1" (HIDE -1)
                                            (("1"
                                              (CASE
                                                  "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                              (("1" (INST - "nvars-1")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (INDUCT "kr")
                                                  (("1" (EXPAND "product")
                                                    (("1" (EXPAND "product")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOLEM 1 "jj")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (EXPAND "product" +)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DECOMPOSE-EQUALITY)
                                            (("1"
                                              (LEMMA
                                               "Bernstein_partition_of_unity")
                                              (("1"
                                                (INST - "bsdegmono(x!2)"
                                                 "X!1(x!2)")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKOSIMP*)
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Bern_coeffs_rel_def| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|multibs_eval_rec| DEF-DECL "real" |multi_bernstein| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|sigma_le| FORMULA-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cfnew| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|prod_posnat| APPLICATION-JUDGEMENT "posnat" |product_nat| |reals|)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|bspolynew| SKOLEM-CONST-DECL "[nat -> [nat -> [nat -> odd_pos_uint8]]]"
     |multi_bernstein| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nvars| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|cmo| SKOLEM-CONST-DECL "CoeffMono" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (X!1 SKOLEM-CONST-DECL "Vars" |multi_bernstein| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|multibs_eval_mono| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bern_nonnegative| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|le_below_mono?| CONST-DECL "bool" |util| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bernstein_partition_of_unity| FORMULA-DECL NIL |bernstein_polynomials|
     |reals|)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|odd_pos_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval_equiv| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL))
   SHOSTAK)
  (|Bern_le-1| |nil| 3499875743
   ("" (SKEEP)
    (("" (REWRITE "Bern_coeffs_rel_def")
      (("" (EXPAND "forall_X")
        (("" (SKOSIMP*)
          (("" (REWRITE "multibs_eval_equiv")
            (("" (NAME "cfnew" "LAMBDA (i:nat): a/(terms)")
              (("" (NAME "bspolynew" "LAMBDA(i:nat)(j:nat)(k:nat): 1")
                ((""
                  (CASE
                      "multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                                                                         (LAMBDA (i: nat): 0)(X!1) <= multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                         (LAMBDA (i: nat): 0)(X!1) AND multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                         (LAMBDA (i: nat): 0)(X!1) =a")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1"
                        (CASE
                            "FORALL (cmo:CoeffMono,v:nat): v<=nvars AND le_below_mono?(nvars)(cmo,bsdegmono) IMPLIES multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                                                                                (cmo)(X!1)
                                                                                                                                 <=
                                                                                                                                 multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, v)
                                                                                                                                                 (cmo)(X!1)")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "v")
                            (("1" (SKEEP)
                              (("1" (EXPAND "multibs_eval_rec" +)
                                (("1"
                                  (CASE "product(0, nvars - 1,
                                                                                                                                                                                 LAMBDA (k: nat):
                                                                                                                                                                                   IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                                     THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                                   ELSE 1
                                                                                                                                                                                   ENDIF) >= 0")
                                  (("1"
                                    (CASE
                                        "multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cmo)
                                                                                                                                                                                             <=
                                                                                                                                                                                             multibs_eval_mono(bspolynew, bsdegmono, cfnew, nvars, terms)(cmo)")
                                    (("1"
                                      (MULT-BY -1 "product(0, nvars - 1,
                                                                                                                                                                       LAMBDA (k: nat):
                                                                                                                                                                         IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                           THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                         ELSE 1
                                                                                                                                                                         ENDIF)")
                                      (("1" (HIDE 2)
                                        (("1" (SKOSIMP*)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "multibs_eval_mono")
                                          (("2" (EXPAND "bspolynew" +)
                                            (("2" (EXPAND "cfnew" +)
                                              (("2" (EXPAND "multibscoeff")
                                                (("2" (INST - "cmo")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "FORALL (j:nat): j<terms IMPLIES sigma(0, j,
                                                                                                                                           LAMBDA (i: nat):
                                                                                                                                             a / (terms) * product(0, nvars - 1, LAMBDA (j: nat): 1)) = a*((j+1)/(terms))")
                                                      (("1" (INST - "terms-1")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (CASE
                                                              "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                                          (("1" (INDUCT "j")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "sigma"
                                                                        +)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma" +)
                                                                  (("1"
                                                                    (INST -
                                                                     "nvars-1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (SKOLEM 1 "j")
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "sigma" +)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("2"
                                                                        (INST -
                                                                         "nvars-1")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -3)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2" (INDUCT "kr")
                                                              (("1"
                                                                (EXPAND
                                                                 "product")
                                                                (("1"
                                                                  (EXPAND
                                                                   "product")
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (SKOLEM 1 "kr")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "product"
                                                                     +)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2"
                                      (CASE
                                          "FORALL (kr:nat): kr<=nvars-1 IMPLIES product(0, kr,
                                                                                                           LAMBDA (k: nat):
                                                                                                             IF cmo(k) <= bsdegmono(k)
                                                                                                               THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                             ELSE 1
                                                                                                             ENDIF)
                                                                                                    >= 0")
                                      (("1" (INST - "nvars-1")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (INDUCT "kr")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "product")
                                              (("1" (EXPAND "product")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1"
                                                      (LEMMA
                                                       "Bern_nonnegative")
                                                      (("1" (INST - "X!1(0)")
                                                        (("1" (SPLIT -)
                                                          (("1" (INST?) NIL
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "unitbox?")
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (INST -8 "0")
                                                                (("2" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (GROUND)
                                                            (("3"
                                                              (EXPAND
                                                               "unitbox?")
                                                              (("3"
                                                                (INST -8 "0")
                                                                (("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (EXPAND "product" +)
                                              (("2" (LIFT-IF)
                                                (("2" (GROUND)
                                                  (("2"
                                                    (MULT-BY -2
                                                     "Bern(cmo(1 + j), bsdegmono(1 + j))(X!1(1 + j))")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (HIDE 2)
                                                      (("3"
                                                        (LEMMA
                                                         "Bern_nonnegative")
                                                        (("3"
                                                          (INST - "X!1(1+j)")
                                                          (("3"
                                                            (EXPAND "unitbox?")
                                                            (("3"
                                                              (INST -10 "1+j")
                                                              (("3" (SPLIT -)
                                                                (("1" (INST?)
                                                                  NIL NIL)
                                                                 ("2" (GROUND)
                                                                  NIL NIL)
                                                                 ("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKEEP)
                              (("2" (SKEEP)
                                (("2" (EXPAND "multibs_eval_rec" +)
                                  (("2" (REWRITE "sigma_le")
                                    (("2" (HIDE 2)
                                      (("2" (SKOSIMP*)
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2" (HIDE 1)
                                              (("2" (EXPAND "le_below_mono?")
                                                (("2" (SKOSIMP*)
                                                  (("2" (CASE "j!1 = j")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (INST -2 "j!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "multibs_eval_equiv" + :DIR RL)
                        (("2" (EXPAND "multibs_eval")
                          (("2"
                            (CASE "(LAMBDA (i: nat):
                         cfnew(i) *
                          bsproduct_eval(bspolynew(i), bsdegmono, nvars)(X!1)) = (LAMBDA (i:nat): a/terms)")
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1)
                                (("1"
                                  (CASE
                                      "FORALL (j:nat): j<terms IMPLIES sigma(0,j,(LAMBDA (i:nat): a/terms)) = (j+1)*a/terms")
                                  (("1" (INST - "terms-1")
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "j")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (EXPAND "sigma")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOLEM 1 "j")
                                        (("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "sigma" +)
                                              (("2" (REPLACE -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "cfnew")
                                  (("2" (EXPAND "bsproduct_eval")
                                    (("2" (EXPAND "bspolynew")
                                      (("2"
                                        (CASE "(LAMBDA (i: nat):
                              sigma(0, bsdegmono(i),
                                    LAMBDA (j: nat):
                                      IF j > bsdegmono(i) THEN 0
                                      ELSE 1 * Bern(j, bsdegmono(i))(X!1(i))
                                      ENDIF)) = (LAMBDA (i:nat): 1)")
                                        (("1" (REPLACE -1)
                                          (("1" (HIDE -1)
                                            (("1"
                                              (CASE
                                                  "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                              (("1" (INST - "nvars-1")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (INDUCT "kr")
                                                  (("1" (EXPAND "product")
                                                    (("1" (EXPAND "product")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOLEM 1 "jj")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (EXPAND "product" +)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DECOMPOSE-EQUALITY)
                                            (("1"
                                              (LEMMA
                                               "Bernstein_partition_of_unity")
                                              (("1"
                                                (INST - "bsdegmono(x!2)"
                                                 "X!1(x!2)")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL)
                                             ("3" (SKOSIMP*)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKOSIMP*)
                                          (("3" (ASSERT) NIL NIL)) NIL)
                                         ("4" (SKOSIMP*)
                                          (("4" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_le| FORMULA-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern_nonnegative| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_below_mono?| CONST-DECL "bool" |util| NIL)
    (|Bernstein_partition_of_unity| FORMULA-DECL NIL |bernstein_polynomials|
     |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL))
   NIL))
 (|Bern_lt| 0
  (|Bern_lt-1| |nil| 3499875835
   ("" (EXPAND "Bern_coeffs_rel")
    ((""
      (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                   cf: Coeff, nvars, terms: posnat,v:nat,cmo:CoeffMono):v<=nvars AND
                             Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                (cmo, <, a) IMPLIES (EXISTS (anew:real): anew<a AND Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                (cmo, <=, anew))")
      (("1" (SKEEP)
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (SKEEP -1)
              (("1" (LEMMA "Bern_le")
                (("1" (INST - "anew" "bsdegmono" "bspoly" "cf" "nvars" "terms")
                  (("1" (EXPAND "Bern_coeffs_rel")
                    (("1" (ASSERT)
                      (("1" (EXPAND "forall_X")
                        (("1" (SKOSIMP*)
                          (("1" (INST - "X!1") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "v")
          (("1" (SKEEP)
            (("1" (EXPAND "Bern_coeffs_rel_rec")
              (("1"
                (INST +
                 "(multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cmo) + a)/2")
                (("1" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKOLEM 1 "v")
            (("2" (FLATTEN)
              (("2" (SKEEP)
                (("2" (EXPAND "Bern_coeffs_rel_rec" (-3 1))
                  (("2"
                    (CASE
                        "FORALL (d:nat): d<=bsdegmono(v) IMPLIES (EXISTS (anew: real):FORALL (gg:nat):gg<=d IMPLIES
                                             anew < a AND
                                              Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                 (cmo WITH [(v):=gg], <=, anew))")
                    (("1" (INST - "bsdegmono(v)")
                      (("1" (ASSERT)
                        (("1" (SKEEP -1)
                          (("1" (INST + "anew")
                            (("1" (ASSERT)
                              (("1" (CASE "anew < a")
                                (("1" (ASSERT)
                                  (("1" (SKOSIMP*)
                                    (("1" (INST - "d!1")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST - "0") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (INDUCT "d")
                        (("1" (ASSERT)
                          (("1" (FLATTEN)
                            (("1"
                              (INST - "a" "bsdegmono" "bspoly" "cf" "nvars"
                               "terms" "cmo WITH [(v):=0]")
                              (("1" (ASSERT)
                                (("1" (INST -4 "0")
                                  (("1" (ASSERT)
                                    (("1" (SKOSIMP*)
                                      (("1" (INST + "anew!1")
                                        (("1" (SKOSIMP*)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM 1 "dd")
                          (("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (SKOSIMP*)
                                (("2"
                                  (INST - "a" "bsdegmono" "bspoly" "cf" "nvars"
                                   "terms" "cmo WITH [(v):=dd+1]")
                                  (("2" (ASSERT)
                                    (("2" (INST -5 "dd+1")
                                      (("2" (ASSERT)
                                        (("2" (SKOSIMP*)
                                          (("2" (INST + "max(anew!1,anew!2)")
                                            (("2" (SKOSIMP*)
                                              (("2" (SPLIT +)
                                                (("1" (INST - "0")
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1" (EXPAND "max")
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (CASE "gg!1 = 1+dd")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1)
                                                      (("1"
                                                        (LEMMA
                                                         "Bern_coeffs_rel_implic")
                                                        (("1" (INST?)
                                                          (("1"
                                                            (INST - "anew!2")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST - "gg!1")
                                                    (("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2"
                                                          (LEMMA
                                                           "Bern_coeffs_rel_implic")
                                                          (("2" (INST?)
                                                            (("2"
                                                              (INST - "anew!1")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Bern_coeffs_rel_rec| DEF-DECL "bool" |multi_bernstein| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL)
    (|Bern_le| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Bern_coeffs_rel_implic| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bern_coeffs_rel| CONST-DECL "bool" |multi_bernstein| NIL))
   NIL))
 (|Bern_ge| 0
  (|Bern_ge-2| "" 3790097909
   ("" (SKEEP)
    (("" (REWRITE "Bern_coeffs_rel_def")
      (("" (EXPAND "forall_X")
        (("" (SKOSIMP*)
          (("" (REWRITE "multibs_eval_equiv")
            (("" (NAME "cfnew" "LAMBDA (i:nat): a/(terms)")
              (("" (NAME "bspolynew" "LAMBDA(i:nat)(j:nat)(k:nat): 1")
                ((""
                  (CASE
                      "multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                                                                                              (LAMBDA (i: nat): 0)(X!1) >= multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                                              (LAMBDA (i: nat): 0)(X!1) AND multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                                              (LAMBDA (i: nat): 0)(X!1) =a")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1"
                        (CASE
                            "FORALL (cmo:CoeffMono,v:nat): v<=nvars AND le_below_mono?(nvars)(cmo,bsdegmono) IMPLIES multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                                                                                                                 (cmo)(X!1)
                                                                                                                                                                  >=
                                                                                                                                                                  multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, v)
                                                                                                                                                                                  (cmo)(X!1)")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "v")
                            (("1" (SKEEP)
                              (("1" (EXPAND "multibs_eval_rec" +)
                                (("1"
                                  (CASE "product(0, nvars - 1,
                                                                                                                                                                                                                              LAMBDA (k: nat):
                                                                                                                                                                                                                                IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                                                                                  THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                                                                                ELSE 1
                                                                                                                                                                                                                                ENDIF) >= 0")
                                  (("1"
                                    (CASE
                                        "multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cmo)
                                                                                                                                                                                                                                                >=
                                                                                                                                                                                                                                                multibs_eval_mono(bspolynew, bsdegmono, cfnew, nvars, terms)(cmo)")
                                    (("1"
                                      (MULT-BY -1 "product(0, nvars - 1,
                                                                                                                                                                                                                 LAMBDA (k: nat):
                                                                                                                                                                                                                   IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                                                                     THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                                                                   ELSE 1
                                                                                                                                                                                                                   ENDIF)")
                                      (("1" (HIDE 2)
                                        (("1" (SKOSIMP*)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "multibs_eval_mono")
                                          (("2" (EXPAND "bspolynew" +)
                                            (("2" (EXPAND "cfnew" +)
                                              (("2" (EXPAND "multibscoeff")
                                                (("2" (INST - "cmo")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "FORALL (j:nat): j<terms IMPLIES sigma(0, j,
                                                                                                                                                                                                    LAMBDA (i: nat):
                                                                                                                                                                                                      a / (terms) * product(0, nvars - 1, LAMBDA (j: nat): 1)) = a*((j+1)/(terms))")
                                                      (("1" (INST - "terms-1")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (CASE
                                                              "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                                          (("1" (INDUCT "j")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "sigma"
                                                                        +)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma" +)
                                                                  (("1"
                                                                    (INST -
                                                                     "nvars-1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (SKOLEM 1 "j")
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "sigma" +)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("2"
                                                                        (INST -
                                                                         "nvars-1")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -3)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2" (INDUCT "kr")
                                                              (("1"
                                                                (EXPAND
                                                                 "product")
                                                                (("1"
                                                                  (EXPAND
                                                                   "product")
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (SKOLEM 1 "kr")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "product"
                                                                     +)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2"
                                      (CASE
                                          "FORALL (kr:nat): kr<=nvars-1 IMPLIES product(0, kr,
                                                                                                                                                              LAMBDA (k: nat):
                                                                                                                                                                IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                  THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                ELSE 1
                                                                                                                                                                ENDIF)
                                                                                                                                                       >= 0")
                                      (("1" (INST - "nvars-1")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (INDUCT "kr")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "product")
                                              (("1" (EXPAND "product")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1"
                                                      (LEMMA
                                                       "Bern_nonnegative")
                                                      (("1" (INST - "X!1(0)")
                                                        (("1" (SPLIT -)
                                                          (("1" (INST?) NIL
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "unitbox?")
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (INST -8 "0")
                                                                (("2" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (GROUND)
                                                            (("3"
                                                              (EXPAND
                                                               "unitbox?")
                                                              (("3"
                                                                (INST -8 "0")
                                                                (("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (EXPAND "product" +)
                                              (("2" (LIFT-IF)
                                                (("2" (GROUND)
                                                  (("2"
                                                    (MULT-BY -2
                                                     "Bern(cmo(1 + j), bsdegmono(1 + j))(X!1(1 + j))")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (HIDE 2)
                                                      (("3"
                                                        (LEMMA
                                                         "Bern_nonnegative")
                                                        (("3"
                                                          (INST - "X!1(1+j)")
                                                          (("3"
                                                            (EXPAND "unitbox?")
                                                            (("3"
                                                              (INST -10 "1+j")
                                                              (("3" (SPLIT -)
                                                                (("1" (INST?)
                                                                  NIL NIL)
                                                                 ("2" (GROUND)
                                                                  NIL NIL)
                                                                 ("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKEEP)
                              (("2" (SKEEP)
                                (("2" (EXPAND "multibs_eval_rec" +)
                                  (("2" (REWRITE "sigma_ge")
                                    (("2" (HIDE 2)
                                      (("2" (SKOSIMP*)
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2" (HIDE 1)
                                              (("2" (EXPAND "le_below_mono?")
                                                (("2" (SKOSIMP*)
                                                  (("2" (CASE "j!1 = j")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (INST -2 "j!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "multibs_eval_equiv" + :DIR RL)
                        (("2" (EXPAND "multibs_eval")
                          (("2"
                            (CASE "(LAMBDA (i: nat):
                                                          cfnew(i) *
                                                           bsproduct_eval(bspolynew(i), bsdegmono, nvars)(X!1)) = (LAMBDA (i:nat): a/terms)")
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1)
                                (("1"
                                  (CASE
                                      "FORALL (j:nat): j<terms IMPLIES sigma(0,j,(LAMBDA (i:nat): a/terms)) = (j+1)*a/terms")
                                  (("1" (INST - "terms-1")
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "j")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (EXPAND "sigma")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOLEM 1 "j")
                                        (("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "sigma" +)
                                              (("2" (REPLACE -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "cfnew")
                                  (("2" (EXPAND "bsproduct_eval")
                                    (("2" (EXPAND "bspolynew")
                                      (("2"
                                        (CASE "(LAMBDA (i: nat):
                                                                     sigma(0, bsdegmono(i),
                                                                           LAMBDA (j: nat):
                                                                             IF j > bsdegmono(i) THEN 0
                                                                             ELSE 1 * Bern(j, bsdegmono(i))(X!1(i))
                                                                             ENDIF)) = (LAMBDA (i:nat): 1)")
                                        (("1" (REPLACE -1)
                                          (("1" (HIDE -1)
                                            (("1"
                                              (CASE
                                                  "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                              (("1" (INST - "nvars-1")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (INDUCT "kr")
                                                  (("1" (EXPAND "product")
                                                    (("1" (EXPAND "product")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOLEM 1 "jj")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (EXPAND "product" +)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DECOMPOSE-EQUALITY)
                                            (("1"
                                              (LEMMA
                                               "Bernstein_partition_of_unity")
                                              (("1"
                                                (INST - "bsdegmono(x!2)"
                                                 "X!1(x!2)")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKOSIMP*)
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Bern_coeffs_rel_def| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|multibs_eval_rec| DEF-DECL "real" |multi_bernstein| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|sigma_ge| FORMULA-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|product| DEF-DECL "real" |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cfnew| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|prod_posnat| APPLICATION-JUDGEMENT "posnat" |product_nat| |reals|)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (|bspolynew| SKOLEM-CONST-DECL "[nat -> [nat -> [nat -> odd_pos_uint8]]]"
     |multi_bernstein| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nvars| SKOLEM-CONST-DECL "posnat" |multi_bernstein| NIL)
    (|cmo| SKOLEM-CONST-DECL "CoeffMono" |multi_bernstein| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (X!1 SKOLEM-CONST-DECL "Vars" |multi_bernstein| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|multibs_eval_mono| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bern_nonnegative| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|le_below_mono?| CONST-DECL "bool" |util| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bernstein_partition_of_unity| FORMULA-DECL NIL |bernstein_polynomials|
     |reals|)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|odd_pos_uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|multibs_eval_equiv| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL))
   SHOSTAK)
  (|Bern_ge-1| |nil| 3499875940
   ("" (SKEEP)
    (("" (REWRITE "Bern_coeffs_rel_def")
      (("" (EXPAND "forall_X")
        (("" (SKOSIMP*)
          (("" (REWRITE "multibs_eval_equiv")
            (("" (NAME "cfnew" "LAMBDA (i:nat): a/(terms)")
              (("" (NAME "bspolynew" "LAMBDA(i:nat)(j:nat)(k:nat): 1")
                ((""
                  (CASE
                      "multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, nvars)
                                                                                                                              (LAMBDA (i: nat): 0)(X!1) >= multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                                              (LAMBDA (i: nat): 0)(X!1) AND multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, nvars)
                                                                                                                              (LAMBDA (i: nat): 0)(X!1) =a")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1"
                        (CASE
                            "FORALL (cmo:CoeffMono,v:nat): v<=nvars AND le_below_mono?(nvars)(cmo,bsdegmono) IMPLIES multibs_eval_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                                                                                                                 (cmo)(X!1)
                                                                                                                                                                  >=
                                                                                                                                                                  multibs_eval_rec(bspolynew, bsdegmono, cfnew, nvars, terms, v)
                                                                                                                                                                                  (cmo)(X!1)")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "v")
                            (("1" (SKEEP)
                              (("1" (EXPAND "multibs_eval_rec" +)
                                (("1"
                                  (CASE "product(0, nvars - 1,
                                                                                                                                                                                                                              LAMBDA (k: nat):
                                                                                                                                                                                                                                IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                                                                                  THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                                                                                ELSE 1
                                                                                                                                                                                                                                ENDIF) >= 0")
                                  (("1"
                                    (CASE
                                        "multibs_eval_mono(bspoly, bsdegmono, cf, nvars, terms)(cmo)
                                                                                                                                                                                                                                                >=
                                                                                                                                                                                                                                                multibs_eval_mono(bspolynew, bsdegmono, cfnew, nvars, terms)(cmo)")
                                    (("1"
                                      (MULT-BY -1 "product(0, nvars - 1,
                                                                                                                                                                                                                 LAMBDA (k: nat):
                                                                                                                                                                                                                   IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                                                                     THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                                                                   ELSE 1
                                                                                                                                                                                                                   ENDIF)")
                                      (("1" (HIDE 2)
                                        (("1" (SKOSIMP*)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "multibs_eval_mono")
                                          (("2" (EXPAND "bspolynew" +)
                                            (("2" (EXPAND "cfnew" +)
                                              (("2" (EXPAND "multibscoeff")
                                                (("2" (INST - "cmo")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "FORALL (j:nat): j<terms IMPLIES sigma(0, j,
                                                                                                                                                                                                    LAMBDA (i: nat):
                                                                                                                                                                                                      a / (terms) * product(0, nvars - 1, LAMBDA (j: nat): 1)) = a*((j+1)/(terms))")
                                                      (("1" (INST - "terms-1")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (CASE
                                                              "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                                          (("1" (INDUCT "j")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "sigma"
                                                                        +)
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma" +)
                                                                  (("1"
                                                                    (INST -
                                                                     "nvars-1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (SKOLEM 1 "j")
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "sigma" +)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("2"
                                                                        (INST -
                                                                         "nvars-1")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -3)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2" (INDUCT "kr")
                                                              (("1"
                                                                (EXPAND
                                                                 "product")
                                                                (("1"
                                                                  (EXPAND
                                                                   "product")
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (SKOLEM 1 "kr")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "product"
                                                                     +)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2"
                                      (CASE
                                          "FORALL (kr:nat): kr<=nvars-1 IMPLIES product(0, kr,
                                                                                                                                                              LAMBDA (k: nat):
                                                                                                                                                                IF cmo(k) <= bsdegmono(k)
                                                                                                                                                                  THEN Bern(cmo(k), bsdegmono(k))(X!1(k))
                                                                                                                                                                ELSE 1
                                                                                                                                                                ENDIF)
                                                                                                                                                       >= 0")
                                      (("1" (INST - "nvars-1")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (HIDE 2)
                                        (("2" (INDUCT "kr")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "product")
                                              (("1" (EXPAND "product")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1"
                                                      (LEMMA
                                                       "Bern_nonnegative")
                                                      (("1" (INST - "X!1(0)")
                                                        (("1" (SPLIT -)
                                                          (("1" (INST?) NIL
                                                            NIL)
                                                           ("2"
                                                            (EXPAND "unitbox?")
                                                            (("2" (GROUND)
                                                              (("2"
                                                                (INST -8 "0")
                                                                (("2" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (GROUND)
                                                            (("3"
                                                              (EXPAND
                                                               "unitbox?")
                                                              (("3"
                                                                (INST -8 "0")
                                                                (("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (EXPAND "product" +)
                                              (("2" (LIFT-IF)
                                                (("2" (GROUND)
                                                  (("2"
                                                    (MULT-BY -2
                                                     "Bern(cmo(1 + j), bsdegmono(1 + j))(X!1(1 + j))")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (HIDE 2)
                                                      (("3"
                                                        (LEMMA
                                                         "Bern_nonnegative")
                                                        (("3"
                                                          (INST - "X!1(1+j)")
                                                          (("3"
                                                            (EXPAND "unitbox?")
                                                            (("3"
                                                              (INST -10 "1+j")
                                                              (("3" (SPLIT -)
                                                                (("1" (INST?)
                                                                  NIL NIL)
                                                                 ("2" (GROUND)
                                                                  NIL NIL)
                                                                 ("3" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKEEP)
                              (("2" (SKEEP)
                                (("2" (EXPAND "multibs_eval_rec" +)
                                  (("2" (REWRITE "sigma_ge")
                                    (("2" (HIDE 2)
                                      (("2" (SKOSIMP*)
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2" (HIDE 1)
                                              (("2" (EXPAND "le_below_mono?")
                                                (("2" (SKOSIMP*)
                                                  (("2" (CASE "j!1 = j")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (INST -2 "j!1")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "multibs_eval_equiv" + :DIR RL)
                        (("2" (EXPAND "multibs_eval")
                          (("2"
                            (CASE "(LAMBDA (i: nat):
                                                          cfnew(i) *
                                                           bsproduct_eval(bspolynew(i), bsdegmono, nvars)(X!1)) = (LAMBDA (i:nat): a/terms)")
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1)
                                (("1"
                                  (CASE
                                      "FORALL (j:nat): j<terms IMPLIES sigma(0,j,(LAMBDA (i:nat): a/terms)) = (j+1)*a/terms")
                                  (("1" (INST - "terms-1")
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "j")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (EXPAND "sigma")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOLEM 1 "j")
                                        (("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "sigma" +)
                                              (("2" (REPLACE -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (EXPAND "cfnew")
                                  (("2" (EXPAND "bsproduct_eval")
                                    (("2" (EXPAND "bspolynew")
                                      (("2"
                                        (CASE "(LAMBDA (i: nat):
                                                                     sigma(0, bsdegmono(i),
                                                                           LAMBDA (j: nat):
                                                                             IF j > bsdegmono(i) THEN 0
                                                                             ELSE 1 * Bern(j, bsdegmono(i))(X!1(i))
                                                                             ENDIF)) = (LAMBDA (i:nat): 1)")
                                        (("1" (REPLACE -1)
                                          (("1" (HIDE -1)
                                            (("1"
                                              (CASE
                                                  "FORALL (kr:nat): product(0,kr,LAMBDA (j:nat): 1) = 1")
                                              (("1" (INST - "nvars-1")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (INDUCT "kr")
                                                  (("1" (EXPAND "product")
                                                    (("1" (EXPAND "product")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOLEM 1 "jj")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (EXPAND "product" +)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DECOMPOSE-EQUALITY)
                                            (("1"
                                              (LEMMA
                                               "Bernstein_partition_of_unity")
                                              (("1"
                                                (INST - "bsdegmono(x!2)"
                                                 "X!1(x!2)")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL)
                                             ("3" (SKOSIMP*)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKOSIMP*)
                                          (("3" (ASSERT) NIL NIL)) NIL)
                                         ("4" (SKOSIMP*)
                                          (("4" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_ge| FORMULA-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|product| DEF-DECL "real" |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern_nonnegative| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_below_mono?| CONST-DECL "bool" |util| NIL)
    (|Bernstein_partition_of_unity| FORMULA-DECL NIL |bernstein_polynomials|
     |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL))
   NIL))
 (|Bern_gt| 0
  (|Bern_gt-1| |nil| 3499875974
   ("" (EXPAND "Bern_coeffs_rel")
    ((""
      (CASE "FORALL (a: real, bsdegmono: DegreeMono, bspoly: MultiBernstein,
                                                 cf: Coeff, nvars, terms: posnat,v:nat,cmo:CoeffMono):v<=nvars AND
                                           Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                              (cmo, >, a) IMPLIES (EXISTS (anew:real): anew>a AND Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                              (cmo, >=, anew))")
      (("1" (SKEEP)
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (SKEEP -1)
              (("1" (LEMMA "Bern_ge")
                (("1" (INST - "anew" "bsdegmono" "bspoly" "cf" "nvars" "terms")
                  (("1" (EXPAND "Bern_coeffs_rel")
                    (("1" (ASSERT)
                      (("1" (EXPAND "forall_X")
                        (("1" (SKOSIMP*)
                          (("1" (INST - "X!1") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "v")
          (("1" (SKEEP)
            (("1" (EXPAND "Bern_coeffs_rel_rec")
              (("1"
                (INST +
                 "(multibscoeff(bspoly, bsdegmono, cf, nvars, terms)(cmo) + a)/2")
                (("1" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKOLEM 1 "v")
            (("2" (FLATTEN)
              (("2" (SKEEP)
                (("2" (EXPAND "Bern_coeffs_rel_rec" (-3 1))
                  (("2"
                    (CASE
                        "FORALL (d:nat): d<=bsdegmono(v) IMPLIES (EXISTS (anew: real):FORALL (gg:nat):gg<=d IMPLIES
                                                                   anew > a AND
                                                                    Bern_coeffs_rel_rec(bspoly, bsdegmono, cf, nvars, terms, v)
                                                                                       (cmo WITH [(v):=gg], >=, anew))")
                    (("1" (INST - "bsdegmono(v)")
                      (("1" (ASSERT)
                        (("1" (SKEEP -1)
                          (("1" (INST + "anew")
                            (("1" (ASSERT)
                              (("1" (CASE "anew > a")
                                (("1" (ASSERT)
                                  (("1" (SKOSIMP*)
                                    (("1" (INST - "d!1")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST - "0") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (INDUCT "d")
                        (("1" (ASSERT)
                          (("1" (FLATTEN)
                            (("1"
                              (INST - "a" "bsdegmono" "bspoly" "cf" "nvars"
                               "terms" "cmo WITH [(v):=0]")
                              (("1" (ASSERT)
                                (("1" (INST -4 "0")
                                  (("1" (ASSERT)
                                    (("1" (SKOSIMP*)
                                      (("1" (INST + "anew!1")
                                        (("1" (SKOSIMP*)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM 1 "dd")
                          (("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (SKOSIMP*)
                                (("2"
                                  (INST - "a" "bsdegmono" "bspoly" "cf" "nvars"
                                   "terms" "cmo WITH [(v):=dd+1]")
                                  (("2" (ASSERT)
                                    (("2" (INST -5 "dd+1")
                                      (("2" (ASSERT)
                                        (("2" (SKOSIMP*)
                                          (("2" (INST + "min(anew!1,anew!2)")
                                            (("2" (SKOSIMP*)
                                              (("2" (SPLIT +)
                                                (("1" (INST - "0")
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1" (EXPAND "min")
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (CASE "gg!1 = 1+dd")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1)
                                                      (("1"
                                                        (LEMMA
                                                         "Bern_coeffs_rel_implic")
                                                        (("1" (INST?)
                                                          (("1"
                                                            (INST - "anew!2")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST - "gg!1")
                                                    (("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2"
                                                          (LEMMA
                                                           "Bern_coeffs_rel_implic")
                                                          (("2" (INST?)
                                                            (("2"
                                                              (INST - "anew!1")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Bern_coeffs_rel_rec| DEF-DECL "bool" |multi_bernstein| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL)
    (|Bern_ge| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|multibscoeff| CONST-DECL "real" |multi_bernstein| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Bern_coeffs_rel_implic| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bern_coeffs_rel| CONST-DECL "bool" |multi_bernstein| NIL))
   NIL))
 (|Bern_rel| 0
  (|Bern_rel-1| |nil| 3499876182
   ("" (SKEEP)
    (("" (TYPEPRED "relreal")
      (("" (EXPAND "realorder?")
        (("" (SPLIT)
          (("1" (REPLACES -1) (("1" (REWRITE "Bern_le") NIL NIL)) NIL)
           ("2" (REPLACES -1) (("2" (REWRITE "Bern_lt") NIL NIL)) NIL)
           ("3" (REPLACES -1) (("3" (REWRITE "Bern_ge") NIL NIL)) NIL)
           ("4" (REPLACES -1) (("4" (REWRITE "Bern_gt") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Bern_le| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Bern_lt| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|Bern_ge| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|Bern_gt| FORMULA-DECL NIL |multi_bernstein| NIL))
   SHOSTAK))
 (|forall_X_between_minmax| 0
  (|forall_X_between_minmax-1| |nil| 3509140503
   ("" (SKEEP)
    (("" (EXPAND "forall_X_between")
      (("" (SKEEP)
        (("" (LEMMA "Bern_rel")
          ((""
            (INST-CP - "amin" "bsdegmono" "bspoly" "cf" "nvars" ">=" "terms")
            (("" (INST - "amax" "bsdegmono" "bspoly" "cf" "nvars" "<=" "terms")
              ((""
                (CASE
                    "Bern_coeffs_rel(bspoly, bsdegmono, cf, nvars, terms)(<=, amax) AND Bern_coeffs_rel(bspoly, bsdegmono, cf, nvars, terms)(>=, amin)")
                (("1" (FLATTEN)
                  (("1" (ASSERT)
                    (("1" (HIDE (-1 -2))
                      (("1" (EXPAND "forall_X")
                        (("1" (INST - "X")
                          (("1" (INST - "X") (("1" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE (-1 -2 2))
                  (("2" (LEMMA "Bern_coeffs_rel_def")
                    (("2"
                      (INST-CP - "amin" "bsdegmono" "bspoly" "cf" "nvars" ">="
                       "terms")
                      (("2"
                        (INST - "amax" "bsdegmono" "bspoly" "cf" "nvars" "<="
                         "terms")
                        (("2" (REPLACES -1)
                          (("2" (REPLACES -1)
                            (("2" (SPLIT +)
                              (("1" (SKOSIMP*)
                                (("1" (INST -2 "coeffmono!1")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST -2 "coeffmono!1")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|forall_X_between| CONST-DECL "bool" |multi_bernstein| NIL)
    (|Bern_rel| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<= CONST-DECL "bool" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)
    (|CoeffMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Bern_coeffs_rel_def| FORMULA-DECL NIL |multi_bernstein| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Bern_coeffs_rel| CONST-DECL "bool" |multi_bernstein| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|Bern_split_left_mono_TCC1| 0
  (|Bern_split_left_mono_TCC1-1| |nil| 3498411572 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|Bern_split_left_mono| SUBTYPE "multi_bernstein.k"
    "{i: naturalnumbers.nat | reals.<=(i, multi_bernstein.j)}")))
 (|Bern_split_right_mono_TCC1| 0
  (|Bern_split_right_mono_TCC1-1| |nil| 3498411572 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|Bern_split_right_mono| SUBTYPE
    "(number_fields.-)(multi_bernstein.bsdegmono(multi_bernstein.i), multi_bernstein.j)"
    "nat")))
 (|Bern_split_right_mono_TCC2| 0
  (|Bern_split_right_mono_TCC2-1| |nil| 3498411572 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|Bern_split_right_mono| SUBTYPE "multi_bernstein.k"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, (number_fields.-)(multi_bernstein.bsdegmono(multi_bernstein.i), multi_bernstein.j))}")))
 (|Bern_split_right_mono_TCC3| 0
  (|Bern_split_right_mono_TCC3-1| |nil| 3498411572 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|Bern_split_right_mono| SUBTYPE
    "(number_fields.-)(multi_bernstein.bsdegmono(multi_bernstein.i), multi_bernstein.k)"
    "nat")))
 (|Bern_split_bspoly| 0
  (|Bern_split_bspoly-2| "" 3790097914
   ("" (SKEEP)
    (("" (GROUND)
      (("1" (EXPAND "forall_X")
        (("1" (SKOSIMP*)
          (("1" (CASE "1/2<=X!1(i) AND X!1(i)<=1")
            (("1" (FLATTEN)
              (("1" (HIDE -3)
                (("1"
                  (NAME "Xnew"
                        "LAMBDA (j:nat): IF j=i THEN (X!1(i)-1/2)*2 ELSE X!1(j) ENDIF")
                  (("1" (INST - "Xnew")
                    (("1" (SPLIT -)
                      (("1"
                        (CASE "multibs_eval(LAMBDA (k: nat):
                                                                                                       Bern_split_right_mono(bspoly(k), bsdegmono)(i),
                                                                                                     bsdegmono, cf, nvars, terms)
                                                                                                    (Xnew) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X!1)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE -1)
                          (("2" (HIDE 2)
                            (("2" (EXPAND "multibs_eval")
                              (("2" (REWRITE "sigma_restrict_eq")
                                (("2" (HIDE 2)
                                  (("2" (DECOMPOSE-EQUALITY)
                                    (("2" (EXPAND "restrict")
                                      (("2" (LIFT-IF)
                                        (("2" (GROUND)
                                          (("2"
                                            (CASE
                                                "bsproduct_eval(Bern_split_right_mono(bspoly(x!1), bsdegmono)(i),
                                                                                                 bsdegmono, nvars)
                                                                                                (Xnew)
                                                                                  = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X!1)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 3)
                                              (("2" (EXPAND "bsproduct_eval")
                                                (("2"
                                                  (REWRITE
                                                   "product_restrict_eq")
                                                  (("1" (HIDE 2)
                                                    (("1" (DECOMPOSE-EQUALITY)
                                                      (("1" (EXPAND "restrict")
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND)
                                                            (("1"
                                                              (CASE "x!2/=i")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (EXPAND
                                                                   "Bern_split_right_mono")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "Xnew")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_right_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xnew"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X!1(i) - 2 * (1 / 2)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "NOT (1 / 2) + 2 * (X!1(i) * (1 / 2)) -
                                                                                                                       2 * ((1 / 2) * (1 / 2)) = X!1(i)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -2
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "Bern_subdiv_right")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "Bern_split_right_mono")
                                                                                              (("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOSIMP*)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -1)
                          (("2" (EXPAND "unitbox?")
                            (("2" (EXPAND "Xnew")
                              (("2" (SKOSIMP*)
                                (("2" (LIFT-IF)
                                  (("2" (ASSERT)
                                    (("2" (GROUND)
                                      (("1" (INST - "j!1")
                                        (("1" (GROUND) NIL NIL)) NIL)
                                       ("2" (INST - "j!1")
                                        (("2" (GROUND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "0<=X!1(i) AND X!1(i)<=1/2")
              (("1"
                (NAME "Xnew"
                      "LAMBDA (j:nat): IF j=i THEN 2*X!1(i) ELSE X!1(j) ENDIF")
                (("1" (INST - "Xnew")
                  (("1" (SPLIT -)
                    (("1"
                      (CASE "multibs_eval(LAMBDA (k: nat):
                                                                      Bern_split_left_mono(bspoly(k), bsdegmono)(i),
                                                                    bsdegmono, cf, nvars, terms)
                                                                   (Xnew) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X!1)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE -1)
                        (("2" (HIDE 2)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (REWRITE "sigma_restrict_eq")
                              (("2" (HIDE 2)
                                (("2" (DECOMPOSE-EQUALITY)
                                  (("2" (EXPAND "restrict")
                                    (("2" (LIFT-IF)
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE
                                              "bsproduct_eval(Bern_split_left_mono(bspoly(x!1), bsdegmono)(i),
                                                                         bsdegmono, nvars)
                                                                        (Xnew)
                                                          = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X!1)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 3)
                                            (("2" (HIDE 3)
                                              (("2" (EXPAND "bsproduct_eval")
                                                (("2"
                                                  (REWRITE
                                                   "product_restrict_eq")
                                                  (("1" (HIDE 2)
                                                    (("1" (DECOMPOSE-EQUALITY)
                                                      (("1" (EXPAND "restrict")
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND)
                                                            (("1"
                                                              (CASE "x!2/=i")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (EXPAND
                                                                   "Bern_split_left_mono")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "Xnew")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_left_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xnew"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X!1(i)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "NOT 2 * (X!1(i) * (1 / 2)) = X!1(i)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           :DIR
                                                                                           RL)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "Bern_subdiv_left")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "Bern_split_left_mono")
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOSIMP*)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1)
                      (("2" (HIDE -2)
                        (("2" (HIDE 2)
                          (("2" (HIDE 2)
                            (("2" (EXPAND "unitbox?")
                              (("2" (SKOSIMP*)
                                (("2" (INST - "j!1")
                                  (("2" (EXPAND "Xnew")
                                    (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1)
                (("2" (HIDE -1)
                  (("2" (EXPAND "unitbox?")
                    (("2" (INST - "i") (("2" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "forall_X")
        (("2" (SKOSIMP*)
          (("2"
            (NAME "Xnew"
                  "LAMBDA (j:nat): IF j=i THEN (1/2)*X!1(i) ELSE X!1(j) ENDIF")
            (("2" (INST - "Xnew")
              (("2" (SPLIT -)
                (("1"
                  (CASE "multibs_eval(LAMBDA (k: nat):
                                                              Bern_split_left_mono(bspoly(k), bsdegmono)(i),
                                                            bsdegmono, cf, nvars, terms)
                                                           (X!1) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE -1)
                    (("2" (HIDE 2)
                      (("2" (EXPAND "multibs_eval")
                        (("2" (REWRITE "sigma_restrict_eq")
                          (("2" (HIDE 2)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("2" (EXPAND "restrict")
                                (("2" (LIFT-IF)
                                  (("2" (GROUND)
                                    (("2"
                                      (CASE
                                          "bsproduct_eval(Bern_split_left_mono(bspoly(x!1), bsdegmono)(i),
                                                                 bsdegmono, nvars)
                                                                (X!1)
                                                  = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 3)
                                        (("2" (EXPAND "bsproduct_eval")
                                          (("2" (REWRITE "product_restrict_eq")
                                            (("1" (HIDE 2)
                                              (("1" (DECOMPOSE-EQUALITY)
                                                (("1" (EXPAND "restrict")
                                                  (("1" (LIFT-IF)
                                                    (("1" (GROUND)
                                                      (("1" (CASE "x!2/=i")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND
                                                             "Bern_split_left_mono")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "Xnew")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (REPLACE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "Bern_subdiv_left_id")
                                                              (("2"
                                                                (EXPAND "Xnew"
                                                                        +)
                                                                (("2"
                                                                  (INST -
                                                                   "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("2"
                                                                      (INST -
                                                                       "X!1(i)")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "o")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Bern_poly")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -1
                                                                               :DIR
                                                                               RL)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "Bern_subdiv_left")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "Bern_split_left_mono")
                                                                                    (("2"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -1)
                  (("2" (HIDE 2)
                    (("2" (EXPAND "unitbox?")
                      (("2" (SKOSIMP*)
                        (("2" (INST - "j!1")
                          (("2" (EXPAND "Xnew")
                            (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "forall_X")
        (("3" (SKOSIMP*)
          (("3"
            (NAME "Xnew"
                  "LAMBDA (j:nat): IF j=i THEN (X!1(i)+1)/2 ELSE X!1(j) ENDIF")
            (("3"
              (CASE "multibs_eval(LAMBDA (k: nat):
                                                            Bern_split_right_mono(bspoly(k), bsdegmono)(i),
                                                          bsdegmono, cf, nvars, terms)
                                                         (X!1) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew)")
              (("1" (INST - "Xnew")
                (("1" (SPLIT -)
                  (("1"
                    (CASE "multibs_eval(LAMBDA (k: nat):
                                                                Bern_split_right_mono(bspoly(k), bsdegmono)(i),
                                                              bsdegmono, cf, nvars, terms)
                                                             (X!1) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew)")
                    (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                   ("2" (HIDE -1)
                    (("2" (HIDE 2)
                      (("2" (HIDE -1)
                        (("2" (EXPAND "unitbox?")
                          (("2" (SKOSIMP*)
                            (("2" (INST - "j!1")
                              (("2" (EXPAND "Xnew")
                                (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1)
                (("2" (HIDE 2)
                  (("2" (HIDE -2)
                    (("2" (EXPAND "multibs_eval")
                      (("2" (REWRITE "sigma_restrict_eq")
                        (("2" (HIDE 2)
                          (("2" (DECOMPOSE-EQUALITY)
                            (("2" (EXPAND "restrict")
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2"
                                    (CASE
                                        "bsproduct_eval(Bern_split_right_mono(bspoly(x!1), bsdegmono)(i),
                                                               bsdegmono, nvars)
                                                              (X!1)
                                                = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 3)
                                      (("2" (EXPAND "bsproduct_eval")
                                        (("2" (REWRITE "product_restrict_eq")
                                          (("1" (HIDE 2)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (EXPAND "restrict")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1" (CASE "x!2/=i")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND
                                                           "Bern_split_right_mono")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "Xnew")
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (REPLACE -1)
                                                          (("2"
                                                            (LEMMA
                                                             "Bern_subdiv_right_id")
                                                            (("2"
                                                              (EXPAND "Xnew" +)
                                                              (("2"
                                                                (INST -
                                                                 "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                (("2"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -1)
                                                                  (("2"
                                                                    (INST -
                                                                     "X!1(i)")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "o")
                                                                      (("2"
                                                                        (CASE
                                                                            "((1 / 2) + X!1(i) * (1 / 2))=((1 + X!1(i)) / 2)")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("1"
                                                                            (HIDE
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "Bern_poly")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1
                                                                                 :DIR
                                                                                 RL)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "Bern_subdiv_right")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Bern_split_right_mono")
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Bern_split_left_mono| CONST-DECL "real" |multi_bernstein| NIL)
    (|Xnew| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (|Bern_subdiv_left| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|Bern_subdiv_left_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|Xnew| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|Bern_subdiv_right| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bern_subdiv_right_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bern_split_right_mono| CONST-DECL "real" |multi_bernstein| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|forall_X| CONST-DECL "bool" |multi_bernstein| NIL)
    (|Xnew| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (|Xnew| SKOLEM-CONST-DECL "[nat -> real]" |multi_bernstein| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|Bern_split_bspoly-1| |nil| 3500078177
   ("" (SKEEP)
    (("" (GROUND)
      (("1" (EXPAND "forall_X")
        (("1" (SKOSIMP*)
          (("1" (CASE "1/2<=X!1(i) AND X!1(i)<=1")
            (("1" (FLATTEN)
              (("1" (HIDE -3)
                (("1"
                  (NAME "Xnew"
                        "LAMBDA (j:nat): IF j=i THEN (X!1(i)-1/2)*2 ELSE X!1(j) ENDIF")
                  (("1" (INST - "Xnew")
                    (("1" (SPLIT -)
                      (("1"
                        (CASE "multibs_eval(LAMBDA (k: nat):
                                                                                                       Bern_split_right_mono(bspoly(k), bsdegmono)(i),
                                                                                                     bsdegmono, cf, nvars, terms)
                                                                                                    (Xnew) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X!1)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE -1)
                          (("2" (HIDE 2)
                            (("2" (EXPAND "multibs_eval")
                              (("2" (REWRITE "sigma_restrict_eq")
                                (("2" (HIDE 2)
                                  (("2" (DECOMPOSE-EQUALITY)
                                    (("2" (EXPAND "restrict")
                                      (("2" (LIFT-IF)
                                        (("2" (GROUND)
                                          (("2"
                                            (CASE
                                                "bsproduct_eval(Bern_split_right_mono(bspoly(x!1), bsdegmono)(i),
                                                                                                 bsdegmono, nvars)
                                                                                                (Xnew)
                                                                                  = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X!1)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 3)
                                              (("2" (EXPAND "bsproduct_eval")
                                                (("2"
                                                  (REWRITE
                                                   "product_restrict_eq")
                                                  (("1" (HIDE 2)
                                                    (("1" (DECOMPOSE-EQUALITY)
                                                      (("1" (EXPAND "restrict")
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND)
                                                            (("1"
                                                              (CASE "x!2/=i")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (EXPAND
                                                                   "Bern_split_right_mono")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "Xnew")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_right_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xnew"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X!1(i) - 2 * (1 / 2)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "NOT (1 / 2) + 2 * (X!1(i) * (1 / 2)) -
                                                                                                                       2 * ((1 / 2) * (1 / 2)) = X!1(i)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -2
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "Bern_subdiv_right")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "Bern_split_right_mono")
                                                                                              (("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("3" (SKOSIMP*)
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOSIMP*)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("3" (SKOSIMP*)
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -1)
                          (("2" (EXPAND "unitbox?")
                            (("2" (EXPAND "Xnew")
                              (("2" (SKOSIMP*)
                                (("2" (LIFT-IF)
                                  (("2" (ASSERT)
                                    (("2" (GROUND)
                                      (("1" (INST - "j!1")
                                        (("1" (GROUND) NIL NIL)) NIL)
                                       ("2" (INST - "j!1")
                                        (("2" (GROUND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "0<=X!1(i) AND X!1(i)<=1/2")
              (("1"
                (NAME "Xnew"
                      "LAMBDA (j:nat): IF j=i THEN 2*X!1(i) ELSE X!1(j) ENDIF")
                (("1" (INST - "Xnew")
                  (("1" (SPLIT -)
                    (("1"
                      (CASE "multibs_eval(LAMBDA (k: nat):
                                                                      Bern_split_left_mono(bspoly(k), bsdegmono)(i),
                                                                    bsdegmono, cf, nvars, terms)
                                                                   (Xnew) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X!1)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE -1)
                        (("2" (HIDE 2)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (REWRITE "sigma_restrict_eq")
                              (("2" (HIDE 2)
                                (("2" (DECOMPOSE-EQUALITY)
                                  (("2" (EXPAND "restrict")
                                    (("2" (LIFT-IF)
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE
                                              "bsproduct_eval(Bern_split_left_mono(bspoly(x!1), bsdegmono)(i),
                                                                         bsdegmono, nvars)
                                                                        (Xnew)
                                                          = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X!1)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 3)
                                            (("2" (HIDE 3)
                                              (("2" (EXPAND "bsproduct_eval")
                                                (("2"
                                                  (REWRITE
                                                   "product_restrict_eq")
                                                  (("1" (HIDE 2)
                                                    (("1" (DECOMPOSE-EQUALITY)
                                                      (("1" (EXPAND "restrict")
                                                        (("1" (LIFT-IF)
                                                          (("1" (GROUND)
                                                            (("1"
                                                              (CASE "x!2/=i")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (EXPAND
                                                                   "Bern_split_left_mono")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "Xnew")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_left_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xnew"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X!1(i)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "NOT 2 * (X!1(i) * (1 / 2)) = X!1(i)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           :DIR
                                                                                           RL)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "Bern_subdiv_left")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "Bern_split_left_mono")
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SKOSIMP*)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("3" (SKOSIMP*)
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKOSIMP*)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("3" (SKOSIMP*)
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1)
                      (("2" (HIDE -2)
                        (("2" (HIDE 2)
                          (("2" (HIDE 2)
                            (("2" (EXPAND "unitbox?")
                              (("2" (SKOSIMP*)
                                (("2" (INST - "j!1")
                                  (("2" (EXPAND "Xnew")
                                    (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1)
                (("2" (HIDE -1)
                  (("2" (EXPAND "unitbox?")
                    (("2" (INST - "i") (("2" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "forall_X")
        (("2" (SKOSIMP*)
          (("2"
            (NAME "Xnew"
                  "LAMBDA (j:nat): IF j=i THEN (1/2)*X!1(i) ELSE X!1(j) ENDIF")
            (("2" (INST - "Xnew")
              (("2" (SPLIT -)
                (("1"
                  (CASE "multibs_eval(LAMBDA (k: nat):
                                                              Bern_split_left_mono(bspoly(k), bsdegmono)(i),
                                                            bsdegmono, cf, nvars, terms)
                                                           (X!1) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE -1)
                    (("2" (HIDE 2)
                      (("2" (EXPAND "multibs_eval")
                        (("2" (REWRITE "sigma_restrict_eq")
                          (("2" (HIDE 2)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("2" (EXPAND "restrict")
                                (("2" (LIFT-IF)
                                  (("2" (GROUND)
                                    (("2"
                                      (CASE
                                          "bsproduct_eval(Bern_split_left_mono(bspoly(x!1), bsdegmono)(i),
                                                                 bsdegmono, nvars)
                                                                (X!1)
                                                  = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 3)
                                        (("2" (EXPAND "bsproduct_eval")
                                          (("2" (REWRITE "product_restrict_eq")
                                            (("1" (HIDE 2)
                                              (("1" (DECOMPOSE-EQUALITY)
                                                (("1" (EXPAND "restrict")
                                                  (("1" (LIFT-IF)
                                                    (("1" (GROUND)
                                                      (("1" (CASE "x!2/=i")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND
                                                             "Bern_split_left_mono")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "Xnew")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (REPLACE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "Bern_subdiv_left_id")
                                                              (("2"
                                                                (EXPAND "Xnew"
                                                                        +)
                                                                (("2"
                                                                  (INST -
                                                                   "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("2"
                                                                      (INST -
                                                                       "X!1(i)")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "o")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Bern_poly")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -1
                                                                               :DIR
                                                                               RL)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "Bern_subdiv_left")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "Bern_split_left_mono")
                                                                                    (("2"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3" (SKOSIMP*)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL)
                                             ("3" (SKOSIMP*)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -1)
                  (("2" (HIDE 2)
                    (("2" (EXPAND "unitbox?")
                      (("2" (SKOSIMP*)
                        (("2" (INST - "j!1")
                          (("2" (EXPAND "Xnew")
                            (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "forall_X")
        (("3" (SKOSIMP*)
          (("3"
            (NAME "Xnew"
                  "LAMBDA (j:nat): IF j=i THEN (X!1(i)+1)/2 ELSE X!1(j) ENDIF")
            (("3"
              (CASE "multibs_eval(LAMBDA (k: nat):
                                                            Bern_split_right_mono(bspoly(k), bsdegmono)(i),
                                                          bsdegmono, cf, nvars, terms)
                                                         (X!1) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew)")
              (("1" (INST - "Xnew")
                (("1" (SPLIT -)
                  (("1"
                    (CASE "multibs_eval(LAMBDA (k: nat):
                                                                Bern_split_right_mono(bspoly(k), bsdegmono)(i),
                                                              bsdegmono, cf, nvars, terms)
                                                             (X!1) = multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(Xnew)")
                    (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                   ("2" (HIDE -1)
                    (("2" (HIDE 2)
                      (("2" (HIDE -1)
                        (("2" (EXPAND "unitbox?")
                          (("2" (SKOSIMP*)
                            (("2" (INST - "j!1")
                              (("2" (EXPAND "Xnew")
                                (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1)
                (("2" (HIDE 2)
                  (("2" (HIDE -2)
                    (("2" (EXPAND "multibs_eval")
                      (("2" (REWRITE "sigma_restrict_eq")
                        (("2" (HIDE 2)
                          (("2" (DECOMPOSE-EQUALITY)
                            (("2" (EXPAND "restrict")
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2"
                                    (CASE
                                        "bsproduct_eval(Bern_split_right_mono(bspoly(x!1), bsdegmono)(i),
                                                               bsdegmono, nvars)
                                                              (X!1)
                                                = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(Xnew)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 3)
                                      (("2" (EXPAND "bsproduct_eval")
                                        (("2" (REWRITE "product_restrict_eq")
                                          (("1" (HIDE 2)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (EXPAND "restrict")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1" (CASE "x!2/=i")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND
                                                           "Bern_split_right_mono")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "Xnew")
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (REPLACE -1)
                                                          (("2"
                                                            (LEMMA
                                                             "Bern_subdiv_right_id")
                                                            (("2"
                                                              (EXPAND "Xnew" +)
                                                              (("2"
                                                                (INST -
                                                                 "(# index:=bsdegmono(i),bern_seq := (LAMBDA (pj:upto(bsdegmono(i))): bspoly(x!1)(i)(pj)) #)")
                                                                (("2"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -1)
                                                                  (("2"
                                                                    (INST -
                                                                     "X!1(i)")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "o")
                                                                      (("2"
                                                                        (CASE
                                                                            "((1 / 2) + X!1(i) * (1 / 2))=((1 + X!1(i)) / 2)")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("1"
                                                                            (HIDE
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "Bern_poly")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1
                                                                                 :DIR
                                                                                 RL)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "Bern_subdiv_right")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Bern_split_right_mono")
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (ASSERT) NIL NIL)) NIL)
                                               ("3" (SKOSIMP*)
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern_subdiv_left| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|Bern_subdiv_left_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|Bern_subdiv_right| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|Bern_subdiv_right_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|unitbox?| CONST-DECL "bool" |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL))
   NIL))
 (|Bern_eval_left| 0
  (|Bern_eval_left-2| "" 3790097915
   ("" (SKEEP)
    (("" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v)]"))
      (("" (BETA)
        (("" (REPLACE -1)
          (("" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
            (("1" (HIDE -2)
              (("1"
                (CASE "multibs_eval(LAMBDA (k: nat):
                                              Bern_split_left_mono(bspoly(k), bsdegmono)(v),
                                            bsdegmono, cf, nvars, terms)
                                           (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (ASSERT)
                  (("2" (HIDE 2)
                    (("2" (HIDE -2)
                      (("2" (EXPAND "multibs_eval")
                        (("2" (REWRITE "sigma_restrict_eq")
                          (("2" (HIDE 2)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("2" (EXPAND "restrict")
                                (("2" (LIFT-IF)
                                  (("2" (GROUND)
                                    (("2"
                                      (CASE
                                          "bsproduct_eval(Bern_split_left_mono(bspoly(x!1), bsdegmono)(v),
                                                 bsdegmono, nvars)
                                                (Xmid)
                                  = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 3)
                                        (("2" (EXPAND "bsproduct_eval")
                                          (("2" (REWRITE "product_restrict_eq")
                                            (("1" (HIDE 2)
                                              (("1" (DECOMPOSE-EQUALITY)
                                                (("1" (EXPAND "restrict")
                                                  (("1" (LIFT-IF)
                                                    (("1" (GROUND)
                                                      (("1" (CASE "x!2/=v")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND
                                                             "Bern_split_left_mono")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "Xmid"
                                                                        +)
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (REPLACE -1)
                                                            (("2" (HIDE -1)
                                                              (("2"
                                                                (LEMMA
                                                                 "Bern_subdiv_left_id")
                                                                (("2"
                                                                  (EXPAND
                                                                   "Xmid" +)
                                                                  (("2"
                                                                    (INST -
                                                                     "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY
                                                                       -1)
                                                                      (("2"
                                                                        (INST -
                                                                         "2 * X(v)")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "o")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "Bern_poly")
                                                                            (("2"
                                                                              (CASE
                                                                                  "2*(X(v)*(1/2)) = X(v)")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "Bern_subdiv_left")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         :DIR
                                                                                         RL)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "Bern_split_left_mono")
                                                                                          (("1"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|Bern_subdiv_left| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bern_subdiv_left_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|Xmid| SKOLEM-CONST-DECL "Vars" |multi_bernstein| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bern_split_left_mono| CONST-DECL "real" |multi_bernstein| NIL))
   SHOSTAK)
  (|Bern_eval_left-1| |nil| 3500227685
   ("" (SKEEP)
    (("" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v)]"))
      (("" (BETA)
        (("" (REPLACE -1)
          (("" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
            (("1" (HIDE -2)
              (("1"
                (CASE "multibs_eval(LAMBDA (k: nat):
                                              Bern_split_left_mono(bspoly(k), bsdegmono)(v),
                                            bsdegmono, cf, nvars, terms)
                                           (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (ASSERT)
                  (("2" (HIDE 2)
                    (("2" (HIDE -2)
                      (("2" (EXPAND "multibs_eval")
                        (("2" (REWRITE "sigma_restrict_eq")
                          (("2" (HIDE 2)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("2" (EXPAND "restrict")
                                (("2" (LIFT-IF)
                                  (("2" (GROUND)
                                    (("2"
                                      (CASE
                                          "bsproduct_eval(Bern_split_left_mono(bspoly(x!1), bsdegmono)(v),
                                                 bsdegmono, nvars)
                                                (Xmid)
                                  = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 3)
                                        (("2" (EXPAND "bsproduct_eval")
                                          (("2" (REWRITE "product_restrict_eq")
                                            (("1" (HIDE 2)
                                              (("1" (DECOMPOSE-EQUALITY)
                                                (("1" (EXPAND "restrict")
                                                  (("1" (LIFT-IF)
                                                    (("1" (GROUND)
                                                      (("1" (CASE "x!2/=v")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND
                                                             "Bern_split_left_mono")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "Xmid"
                                                                        +)
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (REPLACE -1)
                                                            (("2" (HIDE -1)
                                                              (("2"
                                                                (LEMMA
                                                                 "Bern_subdiv_left_id")
                                                                (("2"
                                                                  (EXPAND
                                                                   "Xmid" +)
                                                                  (("2"
                                                                    (INST -
                                                                     "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY
                                                                       -1)
                                                                      (("2"
                                                                        (INST -
                                                                         "2 * X(v)")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "o")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "Bern_poly")
                                                                            (("2"
                                                                              (CASE
                                                                                  "2*(X(v)*(1/2)) = X(v)")
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "Bern_subdiv_left")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         :DIR
                                                                                         RL)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "Bern_split_left_mono")
                                                                                          (("1"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3" (SKOSIMP*)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL)
                                             ("3" (SKOSIMP*)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|Bern_subdiv_left| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|Bern_subdiv_left_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL))
   NIL))
 (|Bern_eval_left_def| 0
  (|Bern_eval_left_def-1| |nil| 3506179415
   ("" (LEMMA "Bern_eval_left")
    (("" (SKEEP)
      (("" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v)]"))
        (("" (BETA)
          (("" (REPLACE -1)
            ((""
              (INST-CP - "X"
               "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)"
               "bsdegmono" "bspoly" "cf" "nvars" "<=" "terms" "v")
              ((""
                (INST - "X"
                 "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)"
                 "bsdegmono" "bspoly" "cf" "nvars" ">=" "terms" "v")
                (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Bern_eval_left| FORMULA-DECL NIL |multi_bernstein| NIL))
   SHOSTAK))
 (|Bern_eval_right| 0
  (|Bern_eval_right-2| "" 3790097917
   ("" (SKEEP)
    (("" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v) - 1]"))
      (("" (BETA)
        (("" (REPLACE -1)
          (("" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
            (("1" (HIDE -2)
              (("1"
                (CASE "multibs_eval(LAMBDA (k: nat):
                                                     Bern_split_right_mono(bspoly(k), bsdegmono)(v),
                                                   bsdegmono, cf, nvars, terms)
                                                  (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (HIDE -2)
                    (("2" (EXPAND "multibs_eval")
                      (("2" (REWRITE "sigma_restrict_eq")
                        (("2" (HIDE 2)
                          (("2" (DECOMPOSE-EQUALITY)
                            (("2" (EXPAND "restrict")
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2"
                                    (CASE
                                        "bsproduct_eval(Bern_split_right_mono(bspoly(x!1), bsdegmono)(v),
                                                          bsdegmono, nvars)
                                                         (Xmid)
                                           = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 3)
                                      (("2" (EXPAND "bsproduct_eval")
                                        (("2" (REWRITE "product_restrict_eq")
                                          (("1" (HIDE 2)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (EXPAND "restrict")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1" (CASE "x!2/=v")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND
                                                           "Bern_split_right_mono")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "Xmid" +)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (REPLACE -1)
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "Bern_subdiv_right_id")
                                                              (("2"
                                                                (EXPAND "Xmid"
                                                                        +)
                                                                (("2"
                                                                  (INST -
                                                                   "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("2"
                                                                      (INST -
                                                                       "2 * X(v)-1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "o")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Bern_poly")
                                                                          (("2"
                                                                            (CASE
                                                                                "2*(X(v)*(1/2)) = X(v)")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "Bern_subdiv_right")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "Bern_split_right_mono")
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|Xmid| SKOLEM-CONST-DECL "Vars" |multi_bernstein| NIL)
    (|Bern_subdiv_right_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|Bern_subdiv_right| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (O CONST-DECL "T3" |function_props| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|Bern_split_right_mono| CONST-DECL "real" |multi_bernstein| NIL))
   SHOSTAK)
  (|Bern_eval_right-1| |nil| 3500228236
   ("" (SKEEP)
    (("" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v) - 1]"))
      (("" (BETA)
        (("" (REPLACE -1)
          (("" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
            (("1" (HIDE -2)
              (("1"
                (CASE "multibs_eval(LAMBDA (k: nat):
                                                     Bern_split_right_mono(bspoly(k), bsdegmono)(v),
                                                   bsdegmono, cf, nvars, terms)
                                                  (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (HIDE -2)
                    (("2" (EXPAND "multibs_eval")
                      (("2" (REWRITE "sigma_restrict_eq")
                        (("2" (HIDE 2)
                          (("2" (DECOMPOSE-EQUALITY)
                            (("2" (EXPAND "restrict")
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2"
                                    (CASE
                                        "bsproduct_eval(Bern_split_right_mono(bspoly(x!1), bsdegmono)(v),
                                                          bsdegmono, nvars)
                                                         (Xmid)
                                           = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 3)
                                      (("2" (EXPAND "bsproduct_eval")
                                        (("2" (REWRITE "product_restrict_eq")
                                          (("1" (HIDE 2)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (EXPAND "restrict")
                                                (("1" (LIFT-IF)
                                                  (("1" (GROUND)
                                                    (("1" (CASE "x!2/=v")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND
                                                           "Bern_split_right_mono")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "Xmid" +)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (REPLACE -1)
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "Bern_subdiv_right_id")
                                                              (("2"
                                                                (EXPAND "Xmid"
                                                                        +)
                                                                (("2"
                                                                  (INST -
                                                                   "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("2"
                                                                      (INST -
                                                                       "2 * X(v)-1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "o")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Bern_poly")
                                                                          (("2"
                                                                            (CASE
                                                                                "2*(X(v)*(1/2)) = X(v)")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "Bern_subdiv_right")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "Bern_split_right_mono")
                                                                                        (("1"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (ASSERT) NIL NIL)) NIL)
                                               ("3" (SKOSIMP*)
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP*)
                                            (("2" (ASSERT) NIL NIL)) NIL)
                                           ("3" (SKOSIMP*)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|Bern_subdiv_right_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|Bern_subdiv_right| CONST-DECL "Bernstein_Polynomial"
     |bernstein_polynomials| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL))
   NIL))
 (|Bern_eval_right_def| 0
  (|Bern_eval_right_def-1| |nil| 3506179629
   ("" (LEMMA "Bern_eval_right")
    (("" (SKEEP)
      ((""
        (INST-CP - "X" "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)"
         "bsdegmono" "bspoly" "cf" "nvars" "<=" "terms" "v")
        ((""
          (INST - "X" "multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)"
           "bsdegmono" "bspoly" "cf" "nvars" ">=" "terms" "v")
          (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Bern_eval_right| FORMULA-DECL NIL |multi_bernstein| NIL))
   SHOSTAK))
 (|Bernstein_sweep_TCC1| 0
  (|Bernstein_sweep_TCC1-1| |nil| 3504635300 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   NIL
   (|Bernstein_sweep| SUBTYPE "(number_fields.-)(multi_bernstein.j, 1)"
    "nat")))
 (|Bernstein_sweep_TCC2| 0
  (|Bernstein_sweep_TCC2-1| |nil| 3504635300 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Bernstein_sweep| TERMINATION
    "multi_bernstein.Bernstein_sweep(multi_bernstein.pprod, multi_bernstein.v)((number_fields.-)(multi_bernstein.p, 1))"
    "NIL")))
 (|Bern_sweep_right_TCC1| 0
  (|Bern_sweep_right_TCC1-1| |nil| 3504635300 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|Bern_sweep_right| SUBTYPE
    "(number_fields.-)(multi_bernstein.bsdegmono(multi_bernstein.i), multi_bernstein.j)"
    "nat")))
 (|Bern_sweep_eval_left| 0
  (|Bern_sweep_eval_left-2| "" 3790097919
   ("" (CASE "FORALL (aaa,bbb,ccc:real): aaa=ccc IMPLIES aaa*bbb=ccc*bbb")
    (("1" (LABEL "multlem" -1)
      (("1" (HIDE "multlem")
        (("1" (SKEEP)
          (("1" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v)]"))
            (("1" (BETA)
              (("1" (REPLACE -1)
                (("1" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
                  (("1" (HIDE -2)
                    (("1"
                      (CASE "multibs_eval(LAMBDA (k: nat):
                                                                                         Bern_sweep_left(bspoly(k), bsdegmono)(v),
                                                                                       bsdegmono, cf, nvars, terms)
                                                                                      (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -2)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (REWRITE "sigma_restrict_eq")
                              (("2" (HIDE 2)
                                (("2" (DECOMPOSE-EQUALITY)
                                  (("2" (EXPAND "restrict")
                                    (("2" (LIFT-IF)
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE
                                              "bsproduct_eval(Bern_sweep_left(bspoly(x!1), bsdegmono)(v),
                                                                                                      bsdegmono, nvars)
                                                                                                     (Xmid)
                                                                                       = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 3)
                                            (("2" (EXPAND "bsproduct_eval")
                                              (("2"
                                                (REWRITE "product_restrict_eq")
                                                (("1" (HIDE 2)
                                                  (("1" (DECOMPOSE-EQUALITY)
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (LIFT-IF)
                                                        (("1" (GROUND)
                                                          (("1" (CASE "x!2/=v")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "Bern_sweep_left")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "Xmid" +)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2"
                                                                (REPLACE -1)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_l_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xmid"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X(v)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "2*(X(v)*(1/2)) = X(v)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Bern_subdiv_l")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "Bern_sweep((# index := bsdegmono(v),
                                                                                                                                 bern_seq
                                                                                                                                   := (LAMBDA (pj: upto(bsdegmono(v))):
                                                                                                                                         bspoly(x!1)(v)(pj)) #))
                                                                                                                             (bsdegmono(v))`index = bsdegmono(v)")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -1)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "sigma(0, bsdegmono(v),
                                                                                                                             LAMBDA (i: nat):
                                                                                                                               IF i > bsdegmono(v) THEN 0
                                                                                                                               ELSE Bern_sweep((# index := bsdegmono(v),
                                                                                                                                                  bern_seq
                                                                                                                                                    := (LAMBDA
                                                                                                                                                        (pj: upto(bsdegmono(v))):
                                                                                                                                                        bspoly(x!1)(v)(pj)) #))
                                                                                                                                              (bsdegmono(v))`bern_seq
                                                                                                                                        (i)
                                                                                                                                     * Bern(i, bsdegmono(v))(2 * X(v))
                                                                                                                               ENDIF)=sigma(0, bsdegmono(v),
                                                                                                                             LAMBDA (j: nat):
                                                                                                                               IF j > bsdegmono(v) THEN 0
                                                                                                                               ELSE Bern_sweep_left(bspoly(x!1), bsdegmono)(v)(v)(j) *
                                                                                                                                     Bern(j, bsdegmono(v))(2 * X(v))
                                                                                                                               ENDIF)")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (HIDE
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (REWRITE
                                                                                                         "sigma_eq")
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (SKEEP)
                                                                                                            (("2"
                                                                                                              (REVEAL
                                                                                                               "multlem")
                                                                                                              (("2"
                                                                                                                (REWRITE
                                                                                                                 "multlem")
                                                                                                                (("2"
                                                                                                                  (HIDE
                                                                                                                   "multlem")
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "Bern_sweep_left")
                                                                                                                      (("2"
                                                                                                                        (CASE
                                                                                                                            "FORALL (mm:nat,nn:nat): mm<=bsdegmono(v) AND nn<=bsdegmono(v) IMPLIES Bern_sweep((# index := bsdegmono(v),
                                                                                                                        bern_seq
                                                                                                                          := (LAMBDA (pj: upto(bsdegmono(v))):
                                                                                                                                bspoly(x!1)(v)(pj)) #))
                                                                                                                    (mm)`bern_seq
                                                                                                              (nn)
                                                                                                           = Bernstein_sweep(bspoly(x!1),v)(mm)(nn)")
                                                                                                                        (("1"
                                                                                                                          (INST?)
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (INDUCT
                                                                                                                             "mm")
                                                                                                                            (("1"
                                                                                                                              (SKEEP)
                                                                                                                              (("1"
                                                                                                                                (ASSERT)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bernstein_sweep")
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "Bern_sweep")
                                                                                                                                    (("1"
                                                                                                                                      (PROPAX)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (SKOLEM
                                                                                                                               1
                                                                                                                               "mm")
                                                                                                                              (("2"
                                                                                                                                (FLATTEN)
                                                                                                                                (("2"
                                                                                                                                  (SKEEP)
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "Bernstein_sweep"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "Bern_sweep"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("2"
                                                                                                                                            (LIFT-IF)
                                                                                                                                            (("2"
                                                                                                                                              (SPLIT
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -
                                                                                                                                                   "nn")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("2"
                                                                                                                                                  (INST-CP
                                                                                                                                                   -
                                                                                                                                                   "nn")
                                                                                                                                                  (("2"
                                                                                                                                                    (INST
                                                                                                                                                     -
                                                                                                                                                     "nn-1")
                                                                                                                                                    (("1"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("3"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("3"
                                                                                                                                (SKEEP)
                                                                                                                                (("3"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern_sweep")
                                                                                                                                  (("3"
                                                                                                                                    (PROPAX)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("3"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("3"
                                                                                                                            (SKEEP)
                                                                                                                            (("3"
                                                                                                                              (EXPAND
                                                                                                                               "Bern_sweep")
                                                                                                                              (("3"
                                                                                                                                (PROPAX)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (SKOSIMP*)
                                                                                                (("3"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("4"
                                                                                                (SKOSIMP*)
                                                                                                (("4"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "Bern_sweep")
                                                                                          (("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       3)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (SKOSIMP*)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|Bern_sweep_left| CONST-DECL "Polynomial" |multi_bernstein| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|Bern_subdiv_l| CONST-DECL "Bernstein_Polynomial" |bernstein_polynomials|
     |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nn| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|v| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|bspoly| SKOLEM-CONST-DECL "MultiBernstein" |multi_bernstein| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|Bernstein_sweep| DEF-DECL "real" |multi_bernstein| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|Bern_sweep| DEF-DECL "{bp: Bernstein_Polynomial | bp`index = b`index}"
     |bernstein_polynomials| |reals|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bern_subdiv_l_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|Xmid| SKOLEM-CONST-DECL "Vars" |multi_bernstein| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|Bern_sweep_eval_left-1| |nil| 3504879622
   ("" (CASE "FORALL (aaa,bbb,ccc:real): aaa=ccc IMPLIES aaa*bbb=ccc*bbb")
    (("1" (LABEL "multlem" -1)
      (("1" (HIDE "multlem")
        (("1" (SKEEP)
          (("1" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v)]"))
            (("1" (BETA)
              (("1" (REPLACE -1)
                (("1" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
                  (("1" (HIDE -2)
                    (("1"
                      (CASE "multibs_eval(LAMBDA (k: nat):
                                                                                         Bern_sweep_left(bspoly(k), bsdegmono)(v),
                                                                                       bsdegmono, cf, nvars, terms)
                                                                                      (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -2)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (REWRITE "sigma_restrict_eq")
                              (("2" (HIDE 2)
                                (("2" (DECOMPOSE-EQUALITY)
                                  (("2" (EXPAND "restrict")
                                    (("2" (LIFT-IF)
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE
                                              "bsproduct_eval(Bern_sweep_left(bspoly(x!1), bsdegmono)(v),
                                                                                                      bsdegmono, nvars)
                                                                                                     (Xmid)
                                                                                       = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 3)
                                            (("2" (EXPAND "bsproduct_eval")
                                              (("2"
                                                (REWRITE "product_restrict_eq")
                                                (("1" (HIDE 2)
                                                  (("1" (DECOMPOSE-EQUALITY)
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (LIFT-IF)
                                                        (("1" (GROUND)
                                                          (("1" (CASE "x!2/=v")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "Bern_sweep_left")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "Xmid" +)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2"
                                                                (REPLACE -1)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_l_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xmid"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X(v)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "2*(X(v)*(1/2)) = X(v)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Bern_subdiv_l")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "Bern_sweep((# index := bsdegmono(v),
                                                                                                                                 bern_seq
                                                                                                                                   := (LAMBDA (pj: upto(bsdegmono(v))):
                                                                                                                                         bspoly(x!1)(v)(pj)) #))
                                                                                                                             (bsdegmono(v))`index = bsdegmono(v)")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -1)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "sigma(0, bsdegmono(v),
                                                                                                                             LAMBDA (i: nat):
                                                                                                                               IF i > bsdegmono(v) THEN 0
                                                                                                                               ELSE Bern_sweep((# index := bsdegmono(v),
                                                                                                                                                  bern_seq
                                                                                                                                                    := (LAMBDA
                                                                                                                                                        (pj: upto(bsdegmono(v))):
                                                                                                                                                        bspoly(x!1)(v)(pj)) #))
                                                                                                                                              (bsdegmono(v))`bern_seq
                                                                                                                                        (i)
                                                                                                                                     * Bern(i, bsdegmono(v))(2 * X(v))
                                                                                                                               ENDIF)=sigma(0, bsdegmono(v),
                                                                                                                             LAMBDA (j: nat):
                                                                                                                               IF j > bsdegmono(v) THEN 0
                                                                                                                               ELSE Bern_sweep_left(bspoly(x!1), bsdegmono)(v)(v)(j) *
                                                                                                                                     Bern(j, bsdegmono(v))(2 * X(v))
                                                                                                                               ENDIF)")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (HIDE
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (REWRITE
                                                                                                         "sigma_eq")
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (SKEEP)
                                                                                                            (("2"
                                                                                                              (REVEAL
                                                                                                               "multlem")
                                                                                                              (("2"
                                                                                                                (REWRITE
                                                                                                                 "multlem")
                                                                                                                (("2"
                                                                                                                  (HIDE
                                                                                                                   "multlem")
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "Bern_sweep_left")
                                                                                                                      (("2"
                                                                                                                        (CASE
                                                                                                                            "FORALL (mm:nat,nn:nat): mm<=bsdegmono(v) AND nn<=bsdegmono(v) IMPLIES Bern_sweep((# index := bsdegmono(v),
                                                                                                                        bern_seq
                                                                                                                          := (LAMBDA (pj: upto(bsdegmono(v))):
                                                                                                                                bspoly(x!1)(v)(pj)) #))
                                                                                                                    (mm)`bern_seq
                                                                                                              (nn)
                                                                                                           = Bernstein_sweep(bspoly(x!1),v)(mm)(nn)")
                                                                                                                        (("1"
                                                                                                                          (INST?)
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (INDUCT
                                                                                                                             "mm")
                                                                                                                            (("1"
                                                                                                                              (SKEEP)
                                                                                                                              (("1"
                                                                                                                                (ASSERT)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bernstein_sweep")
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "Bern_sweep")
                                                                                                                                    (("1"
                                                                                                                                      (PROPAX)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (SKOLEM
                                                                                                                               1
                                                                                                                               "mm")
                                                                                                                              (("2"
                                                                                                                                (FLATTEN)
                                                                                                                                (("2"
                                                                                                                                  (SKEEP)
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "Bernstein_sweep"
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "Bern_sweep"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("2"
                                                                                                                                            (LIFT-IF)
                                                                                                                                            (("2"
                                                                                                                                              (SPLIT
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -
                                                                                                                                                   "nn")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("2"
                                                                                                                                                  (INST-CP
                                                                                                                                                   -
                                                                                                                                                   "nn")
                                                                                                                                                  (("2"
                                                                                                                                                    (INST
                                                                                                                                                     -
                                                                                                                                                     "nn-1")
                                                                                                                                                    (("1"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("3"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("3"
                                                                                                                                (SKEEP)
                                                                                                                                (("3"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern_sweep")
                                                                                                                                  (("3"
                                                                                                                                    (PROPAX)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("3"
                                                                                                                          (HIDE
                                                                                                                           2)
                                                                                                                          (("3"
                                                                                                                            (SKEEP)
                                                                                                                            (("3"
                                                                                                                              (EXPAND
                                                                                                                               "Bern_sweep")
                                                                                                                              (("3"
                                                                                                                                (PROPAX)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (SKOSIMP*)
                                                                                                (("3"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("4"
                                                                                                (SKOSIMP*)
                                                                                                (("4"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "Bern_sweep")
                                                                                          (("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       3)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (SKOSIMP*)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("3" (SKOSIMP*)
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3" (SKOSIMP*)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|Bern_subdiv_l| CONST-DECL "Bernstein_Polynomial" |bernstein_polynomials|
     |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|Bern_sweep| DEF-DECL "{bp: Bernstein_Polynomial | bp`index = b`index}"
     |bernstein_polynomials| |reals|)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|Bern_subdiv_l_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL))
   NIL))
 (|Bern_sweep_eval_right| 0
  (|Bern_sweep_eval_right-2| "" 3790097921
   ("" (CASE "FORALL (aaa,bbb,ccc:real): aaa=ccc IMPLIES aaa*bbb=ccc*bbb")
    (("1" (LABEL "multlem" -1)
      (("1" (HIDE "multlem")
        (("1" (SKEEP)
          (("1" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v) - 1]"))
            (("1" (BETA)
              (("1" (REPLACE -1)
                (("1" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
                  (("1" (HIDE -2)
                    (("1"
                      (CASE "multibs_eval(LAMBDA (k: nat):
                                                                                                           Bern_sweep_right(bspoly(k), bsdegmono)(v),
                                                                                                         bsdegmono, cf, nvars, terms)
                                                                                                        (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -2)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (REWRITE "sigma_restrict_eq")
                              (("2" (HIDE 2)
                                (("2" (DECOMPOSE-EQUALITY)
                                  (("2" (EXPAND "restrict")
                                    (("2" (LIFT-IF)
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE
                                              "bsproduct_eval(Bern_sweep_right(bspoly(x!1), bsdegmono)(v),
                                                                                                                            bsdegmono, nvars)
                                                                                                                           (Xmid)
                                                                                                             = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 3)
                                            (("2" (EXPAND "bsproduct_eval")
                                              (("2"
                                                (REWRITE "product_restrict_eq")
                                                (("1" (HIDE 2)
                                                  (("1" (DECOMPOSE-EQUALITY)
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (LIFT-IF)
                                                        (("1" (GROUND)
                                                          (("1" (CASE "x!2/=v")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "Bern_sweep_right")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "Xmid" +)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2"
                                                                (REPLACE -1)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_r_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xmid"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X(v)-1")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "2*(X(v)*(1/2)) = X(v)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Bern_subdiv_r")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "sigma(0, bsdegmono(v),
                                                      LAMBDA (i: nat):
                                                        IF i > bsdegmono(v) THEN 0
                                                        ELSE Bern_sweep((# index := bsdegmono(v),
                                                                           bern_seq
                                                                             := (LAMBDA
                                                                                 (pj: upto(bsdegmono(v))):
                                                                                 bspoly(x!1)(v)(pj)) #))
                                                                       (bsdegmono(v) - i)`bern_seq
                                                                 (bsdegmono(v))
                                                              * Bern(i, bsdegmono(v))(2 * X(v) - 1)
                                                        ENDIF) = sigma(0, bsdegmono(v),
                                                      LAMBDA (j: nat):
                                                        IF j > bsdegmono(v) THEN 0
                                                        ELSE Bern_sweep_right(bspoly(x!1), bsdegmono)(v)(v)(j) *
                                                              Bern(j, bsdegmono(v))(2 * X(v) - 1)
                                                        ENDIF)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           3)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -2)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "sigma_eq")
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (SKEEP)
                                                                                                      (("1"
                                                                                                        (REVEAL
                                                                                                         "multlem")
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "multlem")
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             "multlem")
                                                                                                            (("1"
                                                                                                              (HIDE
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "Bern_sweep_right")
                                                                                                                (("1"
                                                                                                                  (CASE
                                                                                                                      "FORALL (mm:nat,nn:nat): mm<=bsdegmono(v) AND nn<=bsdegmono(v) IMPLIES Bern_sweep((# index := bsdegmono(v),
                                                                                                                                                                          bern_seq
                                                                                                                                                                            := (LAMBDA (pj: upto(bsdegmono(v))):
                                                                                                                                                                                  bspoly(x!1)(v)(pj)) #))
                                                                                                                                                                      (mm)`bern_seq
                                                                                                                                                                (nn)
                                                                                                                                                             = Bernstein_sweep(bspoly(x!1),v)(mm)(nn)")
                                                                                                                  (("1"
                                                                                                                    (INST?)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (INDUCT
                                                                                                                       "mm")
                                                                                                                      (("1"
                                                                                                                        (SKEEP)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "Bernstein_sweep")
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "Bern_sweep")
                                                                                                                              (("1"
                                                                                                                                (PROPAX)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (SKOLEM
                                                                                                                         1
                                                                                                                         "mm")
                                                                                                                        (("2"
                                                                                                                          (FLATTEN)
                                                                                                                          (("2"
                                                                                                                            (SKEEP)
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "Bernstein_sweep"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern_sweep"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (LIFT-IF)
                                                                                                                                    (("2"
                                                                                                                                      (SPLIT
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("1"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "nn")
                                                                                                                                          (("1"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("2"
                                                                                                                                          (INST-CP
                                                                                                                                           -
                                                                                                                                           "nn")
                                                                                                                                          (("2"
                                                                                                                                            (INST
                                                                                                                                             -
                                                                                                                                             "nn-1")
                                                                                                                                            (("1"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("1"
                                                                                                                                                (REPLACE
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (REPLACE
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (PROPAX)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("3"
                                                                                                                        (HIDE
                                                                                                                         2)
                                                                                                                        (("3"
                                                                                                                          (SKEEP)
                                                                                                                          (("3"
                                                                                                                            (EXPAND
                                                                                                                             "Bern_sweep")
                                                                                                                            (("3"
                                                                                                                              (PROPAX)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("3"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("3"
                                                                                                                      (SKEEP)
                                                                                                                      (("3"
                                                                                                                        (EXPAND
                                                                                                                         "Bern_sweep")
                                                                                                                        (("3"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (SKOSIMP*)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (SKOSIMP*)
                                                                                          (("3"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("4"
                                                                                          (SKOSIMP*)
                                                                                          (("4"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("5"
                                                                                          (EXPAND
                                                                                           "Bern_sweep")
                                                                                          (("5"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       3)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (SKOSIMP*)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|Bern_sweep_right| CONST-DECL "real" |multi_bernstein| NIL)
    (|multibs_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|bsproduct_eval| CONST-DECL "real" |multi_bernstein| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|Bern_subdiv_r| CONST-DECL "Bernstein_Polynomial" |bernstein_polynomials|
     |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|Bernstein_sweep| DEF-DECL "real" |multi_bernstein| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|bspoly| SKOLEM-CONST-DECL "MultiBernstein" |multi_bernstein| NIL)
    (|v| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nn| SKOLEM-CONST-DECL "nat" |multi_bernstein| NIL)
    (|Bern_sweep| DEF-DECL "{bp: Bernstein_Polynomial | bp`index = b`index}"
     |bernstein_polynomials| |reals|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Bern_subdiv_r_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|Xmid| SKOLEM-CONST-DECL "Vars" |multi_bernstein| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|bsdegmono| SKOLEM-CONST-DECL "DegreeMono" |multi_bernstein| NIL)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|Bern_sweep_eval_right-1| |nil| 3504882524
   ("" (CASE "FORALL (aaa,bbb,ccc:real): aaa=ccc IMPLIES aaa*bbb=ccc*bbb")
    (("1" (LABEL "multlem" -1)
      (("1" (HIDE "multlem")
        (("1" (SKEEP)
          (("1" (WITH-TCCS (NAME "Xmid" "X WITH [(v) := 2 * X(v) - 1]"))
            (("1" (BETA)
              (("1" (REPLACE -1)
                (("1" (INVOKE (CASE "%1 = %2") (! -1 2) (! -1 1))
                  (("1" (HIDE -2)
                    (("1"
                      (CASE "multibs_eval(LAMBDA (k: nat):
                                                                                                           Bern_sweep_right(bspoly(k), bsdegmono)(v),
                                                                                                         bsdegmono, cf, nvars, terms)
                                                                                                        (Xmid)=multibs_eval(bspoly, bsdegmono, cf, nvars, terms)(X)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -2)
                          (("2" (EXPAND "multibs_eval")
                            (("2" (REWRITE "sigma_restrict_eq")
                              (("2" (HIDE 2)
                                (("2" (DECOMPOSE-EQUALITY)
                                  (("2" (EXPAND "restrict")
                                    (("2" (LIFT-IF)
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE
                                              "bsproduct_eval(Bern_sweep_right(bspoly(x!1), bsdegmono)(v),
                                                                                                                            bsdegmono, nvars)
                                                                                                                           (Xmid)
                                                                                                             = bsproduct_eval(bspoly(x!1), bsdegmono, nvars)(X)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 3)
                                            (("2" (EXPAND "bsproduct_eval")
                                              (("2"
                                                (REWRITE "product_restrict_eq")
                                                (("1" (HIDE 2)
                                                  (("1" (DECOMPOSE-EQUALITY)
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (LIFT-IF)
                                                        (("1" (GROUND)
                                                          (("1" (CASE "x!2/=v")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "Bern_sweep_right")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "Xmid" +)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2"
                                                                (REPLACE -1)
                                                                (("2" (HIDE -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "Bern_subdiv_r_id")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "Xmid"
                                                                       +)
                                                                      (("2"
                                                                        (INST -
                                                                         "(# index:=bsdegmono(v),bern_seq := (LAMBDA (pj:upto(bsdegmono(v))): bspoly(x!1)(v)(pj)) #)")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2 * X(v)-1")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "o")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "Bern_poly")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "2*(X(v)*(1/2)) = X(v)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "Bern_subdiv_r")
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "sigma(0, bsdegmono(v),
                                                      LAMBDA (i: nat):
                                                        IF i > bsdegmono(v) THEN 0
                                                        ELSE Bern_sweep((# index := bsdegmono(v),
                                                                           bern_seq
                                                                             := (LAMBDA
                                                                                 (pj: upto(bsdegmono(v))):
                                                                                 bspoly(x!1)(v)(pj)) #))
                                                                       (bsdegmono(v) - i)`bern_seq
                                                                 (bsdegmono(v))
                                                              * Bern(i, bsdegmono(v))(2 * X(v) - 1)
                                                        ENDIF) = sigma(0, bsdegmono(v),
                                                      LAMBDA (j: nat):
                                                        IF j > bsdegmono(v) THEN 0
                                                        ELSE Bern_sweep_right(bspoly(x!1), bsdegmono)(v)(v)(j) *
                                                              Bern(j, bsdegmono(v))(2 * X(v) - 1)
                                                        ENDIF)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           3)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -2)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "sigma_eq")
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (SKEEP)
                                                                                                      (("1"
                                                                                                        (REVEAL
                                                                                                         "multlem")
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "multlem")
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             "multlem")
                                                                                                            (("1"
                                                                                                              (HIDE
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "Bern_sweep_right")
                                                                                                                (("1"
                                                                                                                  (CASE
                                                                                                                      "FORALL (mm:nat,nn:nat): mm<=bsdegmono(v) AND nn<=bsdegmono(v) IMPLIES Bern_sweep((# index := bsdegmono(v),
                                                                                                                                                                          bern_seq
                                                                                                                                                                            := (LAMBDA (pj: upto(bsdegmono(v))):
                                                                                                                                                                                  bspoly(x!1)(v)(pj)) #))
                                                                                                                                                                      (mm)`bern_seq
                                                                                                                                                                (nn)
                                                                                                                                                             = Bernstein_sweep(bspoly(x!1),v)(mm)(nn)")
                                                                                                                  (("1"
                                                                                                                    (INST?)
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (INDUCT
                                                                                                                       "mm")
                                                                                                                      (("1"
                                                                                                                        (SKEEP)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "Bernstein_sweep")
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "Bern_sweep")
                                                                                                                              (("1"
                                                                                                                                (PROPAX)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (SKOLEM
                                                                                                                         1
                                                                                                                         "mm")
                                                                                                                        (("2"
                                                                                                                          (FLATTEN)
                                                                                                                          (("2"
                                                                                                                            (SKEEP)
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "Bernstein_sweep"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "Bern_sweep"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (LIFT-IF)
                                                                                                                                    (("2"
                                                                                                                                      (SPLIT
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("1"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "nn")
                                                                                                                                          (("1"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("2"
                                                                                                                                          (INST-CP
                                                                                                                                           -
                                                                                                                                           "nn")
                                                                                                                                          (("2"
                                                                                                                                            (INST
                                                                                                                                             -
                                                                                                                                             "nn-1")
                                                                                                                                            (("1"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("1"
                                                                                                                                                (REPLACE
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (REPLACE
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (PROPAX)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("3"
                                                                                                                        (HIDE
                                                                                                                         2)
                                                                                                                        (("3"
                                                                                                                          (SKEEP)
                                                                                                                          (("3"
                                                                                                                            (EXPAND
                                                                                                                             "Bern_sweep")
                                                                                                                            (("3"
                                                                                                                              (PROPAX)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("3"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("3"
                                                                                                                      (SKEEP)
                                                                                                                      (("3"
                                                                                                                        (EXPAND
                                                                                                                         "Bern_sweep")
                                                                                                                        (("3"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (SKOSIMP*)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (SKOSIMP*)
                                                                                          (("3"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("4"
                                                                                          (SKOSIMP*)
                                                                                          (("4"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("5"
                                                                                          (EXPAND
                                                                                           "Bern_sweep")
                                                                                          (("5"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       3)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (SKOSIMP*)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("3" (SKOSIMP*)
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3" (SKOSIMP*)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|Coeff| TYPE-EQ-DECL NIL |util| NIL)
    (|DegreeMono| TYPE-EQ-DECL NIL |util| NIL)
    (|MultiBernstein| TYPE-EQ-DECL NIL |util| NIL)
    (|Polyproduct| TYPE-EQ-DECL NIL |util| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |util| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_restrict_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |sigma| |reals|)
    (|Bern_subdiv_r| CONST-DECL "Bernstein_Polynomial" |bernstein_polynomials|
     |reals|)
    (|Bern_poly| CONST-DECL "[real -> real]" |bernstein_polynomials| |reals|)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Bern_sweep| DEF-DECL "{bp: Bernstein_Polynomial | bp`index = b`index}"
     |bernstein_polynomials| |reals|)
    (|Bernstein_Polynomial| TYPE-EQ-DECL NIL |bernstein_polynomials| |reals|)
    (|Bern_subdiv_r_id| FORMULA-DECL NIL |bernstein_polynomials| |reals|)
    (|restrict| CONST-DECL "[T -> real]" |product| |reals|)
    (|product_restrict_eq| FORMULA-DECL NIL |product| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|Bern| CONST-DECL "real" |bernstein_polynomials| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |product| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |product| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|Vars| TYPE-EQ-DECL NIL |util| NIL))
   NIL)))

