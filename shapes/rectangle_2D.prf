(rectangle_2D (mk_rectangle_TCC1 0 (mk_rectangle_TCC1-1 nil 3814550592 ("" (skeep :preds? t) (("" (lemma "perpR_nz") (("" (inst?) (("1" (assert) nil nil) ("2" (flatten) (("2" (rewrite "sub_eq_zero") nil nil)) nil)) nil)) nil)) nil) ((perpR_nz judgement-tcc nil perpendicular_2D vectors) (sub_eq_zero formula-decl nil vectors_2D vectors) (Nz_vect2 type-eq-decl nil vectors_2D vectors) (real nonempty-type-from-decl nil reals nil) (Vector type-eq-decl nil vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (- const-decl "Vector" vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (A skolem-const-decl "Vect2" rectangle_2D nil) (B skolem-const-decl "{B: Vect2 | B /= A}" rectangle_2D nil) (zero const-decl "Vector" vectors_2D vectors)) nil (mk_rectangle subtype "perpendicular_2D.perpR((vectors_2D.-)(rectangle_2D.B, rectangle_2D.A))" "Nz_vector"))) (mk_rectangle_TCC2 0 (mk_rectangle_TCC2-1 nil 3814550592 ("" (skeep* :preds? t) (("" (expand "non_collinear?") (("" (flatten) (("" (replaces -2) (("" (assert) (("" (replaces -1) (("" (rewrite "det_scal_right") (("" (cancel-by -1 "h") (("" (hide 1) (("" (expand "^") (("" (rewrite "det_scal_right") (("" (field -1) (("" (hide (2 3)) (("" (rewrite "det_sub_neg_left") (("" (rewrite "det_perpR_nsqv") (("" (lemma "sqv_eq_0") (("" (inst?) (("" (assert) (("" (rewrite "sub_eq_zero") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((non_collinear? const-decl "bool" angle_2D nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (det const-decl "real" det_2D vectors) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (both_sides_times1_imp formula-decl nil extra_real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (zero_div formula-decl nil extra_tegies nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (zero_times1 formula-decl nil real_props nil) (det_sub_neg_left formula-decl nil det_2D vectors) (minus_real_is_real application-judgement "real" reals nil) (sqv_eq_0 formula-decl nil vectors_2D vectors) (sub_eq_zero formula-decl nil vectors_2D vectors) (det_perpR_nsqv formula-decl nil det_2D vectors) (real_times_real_is_real application-judgement "real" reals nil) (perpR const-decl "Vect2" perpendicular_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (Normalized type-eq-decl nil vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Nz_vector type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (Vect2 type-eq-decl nil vectors_2D_def vectors) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (det_scal_right formula-decl nil det_2D vectors) (add_cancel formula-decl nil vectors_2D vectors) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (mk_rectangle subtype "(rectangle_2D.B, rectangle_2D.A, rectangle_2D.D)" "NonCollinearPoints"))) (mk_rectangle_TCC3 0 (mk_rectangle_TCC3-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((Nz_vector type-eq-decl nil vectors_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (Vector type-eq-decl nil vectors_2D vectors) (nzreal nonempty-type-eq-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (- const-decl "Vector" vectors_2D vectors) (perpR const-decl "Vect2" perpendicular_2D vectors) (* const-decl "real" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (* const-decl "Vector" vectors_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (rectangle? const-decl "bool" rectangle_2D nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) nil (mk_rectangle subtype "parallelogram_2D.mk_parallelogram(rectangle_2D.B, rectangle_2D.A, rectangle_2D.D)" "Rectangle_2D"))) (point_in_rectangle_eq 0 (point_in_rectangle_eq-1 nil 3823370650 ("" (skeep) (("" (decompose-equality) (("" (typepred "R") (("" (expand "rectangle?") (("" (typepred "points(R)") (("" (expand "non_collinear?") (("" (flatten) (("" (expand "point_in?") (("" (expand "point_in_rectangle?") (("" (name-replace "A" "points(R)`1") (("" (name-replace "C" "points(R)`2") (("" (name-replace "B" "points(R)`3") (("" (iff) (("" (split) (("1" (flatten) (("1" (grind) (("1" (metit *) nil nil) ("2" (metit *) nil nil) ("3" (metit *) nil nil) ("4" (metit *) nil nil) ("5" (metit *) nil nil) ("6" (metit *) nil nil) ("7" (metit *) nil nil) ("8" (metit *) nil nil)) nil)) nil) ("2" (flatten) (("2" (grind) (("1" (metit *) nil nil) ("2" (metit *) nil nil) ("3" (metit *) nil nil) ("4" (metit *) nil nil) ("5" (metit *) nil nil) ("6" (metit *) nil nil) ("7" (metit *) nil nil) ("8" (metit *) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (boolean nonempty-type-decl nil booleans nil) (point_in_rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (rectangle? const-decl "bool" rectangle_2D nil) (point_in? const-decl "bool" parallelogram_2D nil) (bool nonempty-type-eq-decl nil booleans nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (minus_real_is_real application-judgement "real" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "real" vectors_2D vectors) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (sqv const-decl "nnreal" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (non_collinear? const-decl "bool" angle_2D nil) (NonCollinearPoints type-eq-decl nil angle_2D nil) (points adt-accessor-decl "[Parallelogram_2D -> NonCollinearPoints]" parallelogram_2D nil) (NOT const-decl "[bool -> bool]" booleans nil)) shostak)) (point_strictly_in_rectangle_eq 0 (point_strictly_in_rectangle_eq-1 nil 3823374728 ("" (skeep) (("" (decompose-equality) (("" (typepred "R") (("" (expand "rectangle?") (("" (typepred "points(R)") (("" (expand "non_collinear?") (("" (expand "point_strictly_in?") (("" (expand "point_strictly_in_rectangle?") (("" (name-replace "A" "points(R)`1") (("" (name-replace "C" "points(R)`2") (("" (name-replace "B" "points(R)`3") (("" (flatten) (("" (iff) (("" (split) (("1" (flatten) (("1" (grind) (("1" (metit *) nil nil) ("2" (metit *) nil nil) ("3" (metit *) nil nil) ("4" (metit *) nil nil) ("5" (metit *) nil nil) ("6" (metit *) nil nil) ("7" (metit *) nil nil) ("8" (metit *) nil nil)) nil)) nil) ("2" (flatten) (("2" (grind) (("1" (metit *) nil nil) ("2" (metit *) nil nil) ("3" (metit *) nil nil) ("4" (metit *) nil nil) ("5" (metit *) nil nil) ("6" (metit *) nil nil) ("7" (metit *) nil nil) ("8" (metit *) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real nonempty-type-from-decl nil reals nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (boolean nonempty-type-decl nil booleans nil) (point_strictly_in_rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (rectangle? const-decl "bool" rectangle_2D nil) (point_strictly_in? const-decl "bool" parallelogram_2D nil) (bool nonempty-type-eq-decl nil booleans nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (* const-decl "real" vectors_2D vectors) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sqv const-decl "nnreal" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (minus_real_is_real application-judgement "real" reals nil) (non_collinear? const-decl "bool" angle_2D nil) (NonCollinearPoints type-eq-decl nil angle_2D nil) (points adt-accessor-decl "[Parallelogram_2D -> NonCollinearPoints]" parallelogram_2D nil) (NOT const-decl "[bool -> bool]" booleans nil)) shostak)) (perimeter_of_rectangle 0 (perimeter_of_rectangle-1 nil 3814551087 ("" (skeep :preds? t) (("" (skoletin 3) (("" (expand "mk_rectangle") (("" (replaces -1) (("" (expand "perimeter") (("" (assert) (("" (cancel-by 1 "2") (("" (hide 1) (("" (rewrite "norm_scal") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (= const-decl "[T, T -> boolean]" equalities nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (mk_rectangle const-decl "Rectangle_2D" rectangle_2D nil) (- const-decl "Vector" vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (Vector type-eq-decl nil vectors_2D vectors) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (perimeter const-decl "posreal" parallelogram_2D nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (add_cancel formula-decl nil vectors_2D vectors) (norm_scal formula-decl nil vectors_2D vectors) (norm_normalize formula-decl nil vectors_2D vectors) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (both_sides_times1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "Vector" vectors_2D vectors) (Nz_vector type-eq-decl nil vectors_2D vectors) (Normalized type-eq-decl nil vectors_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (even? const-decl "bool" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (perpR const-decl "Vect2" perpendicular_2D vectors) (zero const-decl "Vector" vectors_2D vectors) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak)) (area_of_rectangle 0 (area_of_rectangle-1 nil 3814551088 ("" (skeep :preds? t) (("" (skoletin 3) (("" (expand "mk_rectangle") (("" (expand "area") (("" (replaces -1) (("" (assert) (("" (expand "^") (("" (rewrite "det_scal_right") (("" (rewrite "det_scal_right") (("" (rewrite "det_perpR_nsqv") (("" (rewrite "abs_mult") (("" (cancel-by 1 "abs(h)") (("" (rewrite "abs_neg") (("" (rewrite "norm_perpR") (("" (rewrite "abs_mult") (("" (rewrite "abs_div") (("" (hide (1 4)) (("" (rewrite "abs_nnreal") (("" (rewrite "abs_nnreal") (("" (field) (("" (rewrite "sq" :dir rl) (("" (rewrite "sq_norm") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (= const-decl "[T, T -> boolean]" equalities nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (mk_rectangle const-decl "Rectangle_2D" rectangle_2D nil) (- const-decl "Vector" vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (nnreal type-eq-decl nil real_types nil) (Vector type-eq-decl nil vectors_2D vectors) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (area const-decl "posreal" parallelogram_2D nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) (add_cancel formula-decl nil vectors_2D vectors) (perpR const-decl "Vect2" perpendicular_2D vectors) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (* const-decl "Vector" vectors_2D vectors) (det_scal_right formula-decl nil det_2D vectors) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (det_perpR_nsqv formula-decl nil det_2D vectors) (minus_real_is_real application-judgement "real" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_times1 formula-decl nil real_props nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (mult_neg formula-decl nil extra_tegies nil) (norm_perpR formula-decl nil perpendicular_2D vectors) (abs_div formula-decl nil real_props nil) (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (abs_nat formula-decl nil abs_lems reals) (abs_nnreal formula-decl nil abs_lems reals) (real_div_nzreal_is_real application-judgement "real" reals nil) (div_cancel2 formula-decl nil real_props nil) (sq_norm formula-decl nil vectors_2D vectors) (sq const-decl "nonneg_real" sq reals) (abs_neg formula-decl nil abs_lems reals) (abs_mult formula-decl nil real_props nil) (sqv const-decl "nnreal" vectors_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak)) (vertices_of_rectangle_TCC1 0 (vertices_of_rectangle_TCC1-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors)) nil (vertices_of_rectangle subtype "0" "below[length[Vect2](l)]"))) (vertices_of_rectangle_TCC2 0 (vertices_of_rectangle_TCC2-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors)) nil (vertices_of_rectangle subtype "1" "below[length[Vect2](l)]"))) (vertices_of_rectangle_TCC3 0 (vertices_of_rectangle_TCC3-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors)) nil (vertices_of_rectangle subtype "2" "below[length[Vect2](l)]"))) (vertices_of_rectangle_TCC4 0 (vertices_of_rectangle_TCC4-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors)) nil (vertices_of_rectangle subtype "3" "below[length[Vect2](l)]"))) (vertices_of_rectangle 0 (vertices_of_rectangle-1 nil 3814551091 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (- const-decl "Vector" vectors_2D vectors) (+ const-decl "Vector" vectors_2D vectors) (third_point const-decl "Vect2" parallelogram_2D nil) (det const-decl "real" det_2D vectors) (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil) (nth def-decl "T" list_props nil) (* const-decl "real" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) shostak)) (test_rectangle_cw_TCC1 0 (test_rectangle_cw_TCC1-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (negint_times_negint_is_posint application-judgement "posint" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (non_collinear? const-decl "bool" angle_2D nil) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) nil (test_rectangle_cw subtype "(rectangle_2D.B, rectangle_2D.A, rectangle_2D.D)" "NonCollinearPoints"))) (test_rectangle_cw_TCC2 0 (test_rectangle_cw_TCC2-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (negint_times_negint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (rectangle? const-decl "bool" rectangle_2D nil) (* const-decl "real" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) nil (test_rectangle_cw subtype "parallelogram_2D.mk_parallelogram(rectangle_2D.B, rectangle_2D.A, rectangle_2D.D)" "Rectangle_2D"))) (test_mk_rectangle_cw_TCC1 0 (test_mk_rectangle_cw_TCC1-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (/= const-decl "boolean" notequal nil) (sqrt_pos application-judgement "posreal" sqrt reals)) nil (test_mk_rectangle_cw subtype "rectangle_2D.B" "{B: vectors_2D_def.Vect2 | B /= rectangle_2D.A}"))) (test_mk_rectangle_cw 0 (test_mk_rectangle_cw-1 nil 3814551094 ("" (skoletin*) (("" (eval-expr (! 1 r)) (("" (replaces -1) (("" (replaces (-2 -3)) (("" (expand "mk_rectangle") (("" (expand "vertices") (("" (expand "third_point") (("" (expand "+") (("" (expand "perpR") (("" (expand "-") (("" (expand "^") (("" (expand "*") (("" (expand "det") (("" (grind-reals) (("1" (case-replace "norm((# x := 2, y := 2 #)) = 2*sqrt(2)") (("1" (hide-all-but 1) (("1" (case-replace "6 * sqrt(2) / (2 * sqrt(2)) = 3") (("1" (hide -1) (("1" (grind) nil nil)) nil) ("2" (hide 2) (("2" (field) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) (("2" (both-sides-f 1 "sq") (("1" (sq-simp) (("1" (grind) nil nil)) nil) ("2" (rewrite "sq_eq") nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (lemma "norm_xy_eq_0") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (+ const-decl "Vector" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (* const-decl "Vector" vectors_2D vectors) (pos_times_lt formula-decl nil real_props nil) (neg_times_lt formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (times_div1 formula-decl nil real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (pos_div_lt formula-decl nil real_props nil) (sq const-decl "nonneg_real" sq reals) (NOT const-decl "[bool -> bool]" booleans nil) (sq_nz_pos application-judgement "posreal" sq reals) (sq_sqrt formula-decl nil sqrt reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sq_times formula-decl nil sq reals) (sq_eq formula-decl nil sq reals) (* const-decl "real" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (div_cancel3 formula-decl nil real_props nil) (odd_minus_even_is_odd application-judgement "odd_int" integers nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (Vector type-eq-decl nil vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (norm_xy_eq_0 formula-decl nil vectors_2D vectors) (det const-decl "real" det_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (perpR const-decl "Vect2" perpendicular_2D vectors) (third_point const-decl "Vect2" parallelogram_2D nil) (list type-decl nil list_adt nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (length def-decl "nat" list_props nil) (listn type-eq-decl nil listn structures) (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil) (nzreal nonempty-type-eq-decl nil reals nil) (rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (mk_rectangle const-decl "Rectangle_2D" rectangle_2D nil) (test_rectangle_cw const-decl "Rectangle_2D" rectangle_2D nil) (nil application-judgement "above(n)" exp2 nil) (sqrt_pos application-judgement "posreal" sqrt reals) (even? const-decl "bool" integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int8 type-eq-decl nil integertypes nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil) (/= const-decl "boolean" notequal nil) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (nnreal type-eq-decl nil real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil)) shostak)) (test_area_rectangle_cw 0 (test_area_rectangle_cw-1 nil 3814551096 ("" (grind) nil nil) ((test_rectangle_cw const-decl "Rectangle_2D" rectangle_2D nil) (- const-decl "Vector" vectors_2D vectors) (det const-decl "real" det_2D vectors) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (area const-decl "posreal" parallelogram_2D nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak)) (test_vertices_rectangle_cw 0 (test_vertices_rectangle_cw-1 nil 3814551097 ("" (grind) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil) (det const-decl "real" det_2D vectors) (third_point const-decl "Vect2" parallelogram_2D nil) (+ const-decl "Vector" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (test_rectangle_cw const-decl "Rectangle_2D" rectangle_2D nil)) shostak)) (test_Q_in_R_cw 0 (test_Q_in_R_cw-1 nil 3814551097 ("" (grind) nil nil) ((- const-decl "Vector" vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (point_in_rectangle? const-decl "bool" rectangle_2D nil) (point_strictly_in_rectangle? const-decl "bool" rectangle_2D nil) (test_rectangle_cw const-decl "Rectangle_2D" rectangle_2D nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak)) (test_rectangle_ccw_TCC1 0 (test_rectangle_ccw_TCC1-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (negint_times_negint_is_posint application-judgement "posint" integers nil) (non_collinear? const-decl "bool" angle_2D nil) (det const-decl "real" det_2D vectors) (- const-decl "Vector" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) nil (test_rectangle_ccw subtype "(rectangle_2D.B, rectangle_2D.A, rectangle_2D.D)" "NonCollinearPoints"))) (test_rectangle_ccw_TCC2 0 (test_rectangle_ccw_TCC2-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (negint_times_negint_is_posint application-judgement "posint" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (rectangle? const-decl "bool" rectangle_2D nil) (* const-decl "real" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) nil (test_rectangle_ccw subtype "parallelogram_2D.mk_parallelogram(rectangle_2D.B, rectangle_2D.A, rectangle_2D.D)" "Rectangle_2D"))) (test_mk_rectangle_ccw_TCC1 0 (test_mk_rectangle_ccw_TCC1-1 nil 3814550592 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil) (/= const-decl "boolean" notequal nil) (sqrt_pos application-judgement "posreal" sqrt reals)) nil (test_mk_rectangle_ccw subtype "rectangle_2D.B" "{B: vectors_2D_def.Vect2 | B /= rectangle_2D.A}"))) (test_mk_rectangle_ccw 0 (test_mk_rectangle_ccw-2 "" 3884585937 ("" (skoletin*) (("" (eval-expr (! 1 r)) (("" (replaces -1) (("" (replaces (-2 -3)) (("" (expand "mk_rectangle") (("" (expand "vertices") (("" (expand "third_point") (("" (expand "+") (("" (expand "perpR") (("" (expand "-") (("" (expand "^") (("" (expand "*") (("" (expand "det") (("" (grind-reals) (("" (case-replace "norm((# x := 3, y := -3 #)) = 3*sqrt(2)") (("1" (hide-all-but 2) (("1" (assert) (("1" (case-replace "(6 * sqrt(2)) / (3 * sqrt(2)) = 2") (("1" (case-replace "(-6 * sqrt(2)) / (3 * sqrt(2)) = -2") (("1" (hide -1 -2) (("1" (grind) nil nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (field) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) (("2" (both-sides-f 1 "sq") (("1" (sq-simp) (("1" (grind) nil nil)) nil) ("2" (rewrite "sq_eq") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (test_mk_rectangle_ccw-1 nil 3814551098 ("" (skoletin*) (("" (eval-expr (! 1 r)) (("" (replaces -1) (("" (replaces (-2 -3)) (("" (expand "mk_rectangle") (("" (expand "vertices") (("" (expand "third_point") (("" (expand "+") (("" (expand "perpR") (("" (expand "-") (("" (expand "^") (("" (expand "*") (("" (expand "det") (("" (grind-reals) (("" (case-replace "norm((# x := 3, y := -3 #)) = 3*sqrt(2)") (("1" (hide-all-but 2) (("1" (case-replace "-6 * sqrt(2) / (3 * sqrt(2)) = -2") (("1" (hide -1) (("1" (grind) nil nil)) nil) ("2" (hide 2) (("2" (field) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) (("2" (both-sides-f 1 "sq") (("1" (sq-simp) (("1" (grind) nil nil)) nil) ("2" (rewrite "sq_eq") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (+ const-decl "Vector" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (* const-decl "Vector" vectors_2D vectors) (pos_times_lt formula-decl nil real_props nil) (neg_times_lt formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (neg_div_lt formula-decl nil real_props nil) (times_div1 formula-decl nil real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (sq_nz_pos application-judgement "posreal" sq reals) (NOT const-decl "[bool -> bool]" booleans nil) (sq const-decl "nonneg_real" sq reals) (sq_sqrt formula-decl nil sqrt reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sq_times formula-decl nil sq reals) (sq_eq formula-decl nil sq reals) (sqv const-decl "nnreal" vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_cancel3 formula-decl nil real_props nil) (odd_minus_even_is_odd application-judgement "odd_int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types nil) (Vector type-eq-decl nil vectors_2D vectors) (norm const-decl "nnreal" vectors_2D vectors) (det const-decl "real" det_2D vectors) (^ const-decl "Normalized" vectors_2D vectors) (perpR const-decl "Vect2" perpendicular_2D vectors) (third_point const-decl "Vect2" parallelogram_2D nil) (list type-decl nil list_adt nil) (Parallelogram_2D type-decl nil parallelogram_2D nil) (length def-decl "nat" list_props nil) (listn type-eq-decl nil listn structures) (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil) (rectangle? const-decl "bool" rectangle_2D nil) (Rectangle_2D type-eq-decl nil rectangle_2D nil) (mk_rectangle const-decl "Rectangle_2D" rectangle_2D nil) (FALSE const-decl "bool" booleans nil) (test_rectangle_ccw const-decl "Rectangle_2D" rectangle_2D nil) (nil application-judgement "above(n)" exp2 nil) (sqrt_pos application-judgement "posreal" sqrt reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even? const-decl "bool" integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int8 type-eq-decl nil integertypes nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (TRUE const-decl "bool" booleans nil) (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Vect2 type-eq-decl nil vectors_2D_def vectors) (real nonempty-type-from-decl nil reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (odd? const-decl "bool" integers nil)) shostak)) (test_area_rectangle_ccw 0 (test_area_rectangle_ccw-1 nil 3814551100 ("" (grind) nil nil) ((test_rectangle_ccw const-decl "Rectangle_2D" rectangle_2D nil) (- const-decl "Vector" vectors_2D vectors) (det const-decl "real" det_2D vectors) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (area const-decl "posreal" parallelogram_2D nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) shostak)) (test_vertices_rectangle_ccw 0 (test_vertices_rectangle_ccw-1 nil 3814551101 ("" (grind) nil nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil) (det const-decl "real" det_2D vectors) (third_point const-decl "Vect2" parallelogram_2D nil) (+ const-decl "Vector" vectors_2D vectors) (- const-decl "Vector" vectors_2D vectors) (test_rectangle_ccw const-decl "Rectangle_2D" rectangle_2D nil)) shostak)) (test_Q_in_R_ccw 0 (test_Q_in_R_ccw-1 nil 3814551101 ("" (grind) nil nil) ((- const-decl "Vector" vectors_2D vectors) (* const-decl "real" vectors_2D vectors) (sqv const-decl "nnreal" vectors_2D vectors) (point_in_rectangle? const-decl "bool" rectangle_2D nil) (point_strictly_in_rectangle? const-decl "bool" rectangle_2D nil) (test_rectangle_ccw const-decl "Rectangle_2D" rectangle_2D nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak)))
