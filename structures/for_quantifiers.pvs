for_quantifiers : THEORY
BEGIN
  
  IMPORTING for_iterate

  %% The following lemmas transform FORALL and EXISTS of subranges to
  %% computable boolean functions. These lemmas are proved using
  %% iterate_left_induction, which requires invariants on the i-th iteration
  %% of the lopp.

  %% Invariant is LAMBDA(j:upto(n),a:bool):(FORALL(k:upto(j)):P(k)) = a
  forall_and_upto : LEMMA
    FORALL(n:nat,P:[upto(n)->bool]):
      ((FORALL (j:upto(n)) : P(j)) =
        iterate_left[bool](0,n,P,AND))

  forall_and_below : LEMMA
    FORALL(n:posnat,P:[below(n)->bool]):
      ((FORALL (j:below(n)) : P(j)) =
        iterate_left[bool](0,n-1,P,AND))
	
  %% Invariant is LAMBDA(j:upto(n-m),a:bool):(FORALL(k:subrange(m,m+j)):P(k)) = a
  forall_and_subrange : LEMMA
    FORALL(m:int,n:upfrom(m),P:[subrange(m,n)->bool]):
      ((FORALL (j:subrange(m,n)) : P(j)) =
        iterate_left[bool](m,n,P,AND))

  %% Invariant is LAMBDA(j:upto(n),a:bool):(EXISTS(k:upto(j)):P(k)) = a
  exists_or_upto : LEMMA
    FORALL(n:nat,P:[upto(n)->bool]):
      ((EXISTS (j:upto(n)) : P(j)) =
        iterate_left[bool](0,n,P,OR))

  exists_or_below : LEMMA
    FORALL(n:posnat,P:[below(n)->bool]):
      ((EXISTS (j:below(n)) : P(j)) =
        iterate_left[bool](0,n-1,P,OR))
	
  %% Invariant is LAMBDA(j:upto(n-m),a:bool):(EXISTS(k:subrange(m,m+j)):P(k)) = a
  exists_or_subrange : LEMMA
    FORALL(m:int,n:upfrom(m),P:[subrange(m,n)->bool]):
      ((EXISTS (j:subrange(m,n)) : P(j)) =
    iterate_left[bool](m,n,P,OR))

END for_quantifiers
