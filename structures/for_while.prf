(|for_while|
 (|iter_TCC1| 0
  (|iter_TCC1-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iter| SUBTYPE
    "(number_fields.-)((number_fields.+)(for_while.m, for_while.k), 1)"
    "subrange(for_while.m, for_while.n)")))
 (|iter_TCC2| 0
  (|iter_TCC2-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|iter| SUBTYPE "(number_fields.-)(for_while.k, 1)" "nat")))
 (|iter_TCC3| 0
  (|iter_TCC3-1| NIL 3931433958 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|iter| TERMINATION
    "for_while.iter(for_while.m, for_while.n)((number_fields.-)(for_while.k, 1))"
    "NIL")))
 (|iter_TCC4| 0
  (|iter_TCC4-1| NIL 3931622485 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|iter| SUBTYPE "for_while.n" "subrange(for_while.m, for_while.n)")))
 (|iter_TCC5| 0
  (|iter_TCC4-1| NIL 3931617628 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|iter| SUBTYPE "(number_fields.-)(for_while.n, for_while.m)" "nat")))
 (|iter_TCC6| 0
  (|iter_TCC5-1| NIL 3931617628 ("" (TERMINATION-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iter| TERMINATION
    "for_while.iter(for_while.m, for_while.n)((number_fields.-)(for_while.n, for_while.m))"
    "NIL")))
 (|iter_ge_TCC1| 0
  (|iter_ge_TCC1-1| NIL 3931617628 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL
   (|iter_ge| SUBTYPE
    "(number_fields.+)((number_fields.-)(for_while.n, for_while.m), for_while.k)"
    "nat")))
 (|iter_ge_TCC2| 0
  (|iter_ge_TCC2-1| NIL 3931622730 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iter_ge| SUBTYPE "for_while.n" "subrange(for_while.m, for_while.n)")))
 (|iter_ge_TCC3| 0
  (|iter_ge_TCC2-1| NIL 3931617628 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iter_ge| SUBTYPE "(number_fields.-)(for_while.n, for_while.m)" "nat")))
 (|iter_ge| 0
  (|iter_ge-1| NIL 3931617631
   ("" (SKEEP* :PREDS? T)
    (("" (EXPAND "iter" 1 1)
      (("" (CASE "k-1 <= 0")
        (("1" (CASE-REPLACE "k=1")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|iterate_eq_iter_TCC1| 0
  (|iterate_eq_iter_TCC1-1| NIL 3931961541 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iterate_eq_iter| SUBTYPE
    "LAMBDA (i: naturalnumbers.upto(for_while.m), a: for_while.T): for_while.f(a)"
    "ForBody[for_while.T](0, for_while.m)")))
 (|iterate_eq_iter| 0
  (|iterate_eq_iter-1| NIL 3931961551 ("" (INDUCT-AND-SIMPLIFY "k") NIL NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|for_while_it_TCC1| 0
  (|for_while_it_TCC2-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.k"
    "subrange(for_while.upfrom, for_while.upto)")))
 (|for_while_it_TCC2| 0
  (|for_while_it_TCC2-1| NIL 3931615291 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.-)(for_while.k, for_while.upfrom)"
    "nat")))
 (|for_while_it_TCC3| 0
  (|for_while_it_TCC3-1| NIL 3931615291 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.-)(for_while.i, for_while.upfrom)"
    "nat")))
 (|for_while_it_TCC4| 0
  (|for_while_it_TCC3-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "for_while.k"
    "subrange(for_while.upfrom, (number_fields.+)(1, for_while.upto))")))
 (|for_while_it_TCC5| 0
  (|for_while_it_TCC4-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.+)(for_while.k, 1)"
    "subrange(for_while.upfrom, (number_fields.+)(1, for_while.upto))")))
 (|for_while_it_TCC6| 0
  (|for_while_it_TCC6-1| NIL 3931615291 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.-)(for_while.j, for_while.upfrom)"
    "nat")))
 (|for_while_it_TCC7| 0
  (|for_while_it_TCC6-1| NIL 3931449946 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "for_while.k"
    "subrange(for_while.upfrom, for_while.upto)")))
 (|for_while_it_TCC8| 0
  (|for_while_it_TCC8-1| NIL 3931615291 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.-)(for_while.k, for_while.upfrom)"
    "nat")))
 (|for_while_it_TCC9| 0
  (|for_while_it_TCC9-1| NIL 3931449946 ("" (SUBTYPE-TCC) NIL NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.j"
    "subrange(for_while.upfrom, for_while.upto)")))
 (|for_while_it_TCC10| 0
  (|for_while_it_TCC5-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "for_while.upfrom"
    "subrange(for_while.upfrom, (number_fields.+)(1, for_while.upto))")))
 (|for_while_it_TCC11| 0
  (|for_while_it_TCC11-1| NIL 3931797095 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "for_while.k"
    "subrange(for_while.upfrom, (number_fields.+)(1, for_while.upto))")))
 (|for_while_it_TCC12| 0
  (|for_while_it_TCC12-1| NIL 3931797095 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.-)(for_while.k, for_while.upfrom)"
    "nat")))
 (|for_while_it_TCC13| 0
  (|for_while_it_TCC6-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE
    "real_defs.max((number_fields.+)((number_fields.-)(for_while.upto, for_while.i), 1), 0)"
    "naturalnumber")))
 (|for_while_it_TCC14| 0
  (|for_while_it_TCC12-1| NIL 3931449946 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.i"
    "subrange(for_while.upfrom, for_while.upto)")))
 (|for_while_it_TCC15| 0
  (|for_while_it_TCC13-1| NIL 3931796082
   ("" (SKEEP* :PREDS? T)
    (("" (CASE "i > upto")
      (("1" (INST 1 "upto+1")
        (("1" (ASSERT)
          (("1" (HIDE -8)
            (("1" (SPLIT 1)
              (("1" (EXPAND "iter" 1)
                (("1" (LEMMA "iter_ge")
                  (("1" (INST -1 "upfrom" "upto" "i-upto" "init" "f")
                    (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (SKEEP :PREDS? T)
                (("2" (INSTEEP) (("2" (REWRITE "le_min") NIL NIL)) NIL)) NIL)
               ("3" (FLATTEN)
                (("3" (INDUCT "k")
                  (("1" (ASSERT)
                    (("1" (EXPAND "iter" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                   ("2" (SKOLEM 1 "K" SKOLEM-TYPEPREDS? T)
                    (("2" (FLATTEN)
                      (("2" (INST? -12)
                        (("1" (ASSERT)
                          (("1" (EXPAND "iter" 1)
                            (("1" (ASSERT)
                              (("1" (INST? -10)
                                (("1" (REWRITE "le_min") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL)
       ("2" (ASSERT)
        (("2" (INST 3 "i")
          (("2" (ASSERT)
            (("2" (SPLIT)
              (("1" (SKEEP)
                (("1" (INSTEEP) (("1" (REWRITE "le_min") NIL NIL)) NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (INDUCT "k")
                  (("1" (ASSERT)
                    (("1" (EXPAND "iter" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                   ("2" (SKOLEM 1 "K" SKOLEM-TYPEPREDS? T)
                    (("2" (FLATTEN)
                      (("2" (INST? -11)
                        (("2" (ASSERT)
                          (("2" (EXPAND "iter" 1)
                            (("2" (ASSERT)
                              (("2" (INST? -9)
                                (("2" (REWRITE "le_min") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|iter_ge| FORMULA-DECL NIL |for_while| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|k| SKOLEM-CONST-DECL "subrange(upfrom, upto)" |for_while| NIL)
    (|i| SKOLEM-CONST-DECL "upfrom(upfrom)" |for_while| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|le_min| FORMULA-DECL NIL |real_defs| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|subrange_induction| FORMULA-DECL NIL |subrange_inductions| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (K SKOLEM-CONST-DECL "subrange(upfrom, 1 + upto)" |for_while| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto| SKOLEM-CONST-DECL "int" |for_while| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upfrom| SKOLEM-CONST-DECL "int" |for_while| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|k| SKOLEM-CONST-DECL "subrange(upfrom, i - 1)" |for_while| NIL)
    (K SKOLEM-CONST-DECL "subrange(upfrom, i)" |for_while| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.a"
    "{t: for_while.T | (booleans.IMPLIES(reals.<=(for_while.upfrom, for_while.upto), EXISTS (j: integers.subrange(for_while.upfrom, (number_fields.+)(for_while.upto, 1))): booleans.AND((t = for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(j, for_while.upfrom))(for_while.init, for_while.f)), booleans.AND(FORALL (k: integers.subrange(for_while.upfrom, (number_fields.-)(j, 1))): for_while.while(k, for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(k, for_while.upfrom))(for_while.init, for_while.f)), booleans.AND((booleans.IMPLIES(reals.<=(j, for_while.upto), (booleans.NOT)(for_while.while(j, t)))), (booleans.IMPLIES(for_while.inv(for_while.upfrom, for_while.init), FORALL (k: integers.subrange(for_while.upfrom, j)): for_while.inv(k, for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(k, for_while.upfrom))(for_while.init, for_while.f)))))))))}"))
  (|for_while_it_TCC7-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "for_while.a"
    "{t: for_while.T | (booleans.IMPLIES(reals.<=(for_while.upfrom, for_while.upto), EXISTS (j: integers.subrange(for_while.upfrom, (number_fields.+)(for_while.upto, 1))): booleans.AND((t = for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(j, for_while.upfrom))(for_while.init, for_while.f)), booleans.AND(FORALL (k: integers.subrange(for_while.upfrom, (number_fields.-)(j, 1))): for_while.while(k, for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(k, for_while.upfrom))(for_while.init, for_while.f)), booleans.AND((booleans.IMPLIES(reals.<=(j, for_while.upto), (booleans.NOT)(for_while.while(j, t)))), (booleans.IMPLIES(for_while.inv(for_while.upfrom, for_while.init), FORALL (k: integers.subrange(for_while.upfrom, j)): for_while.inv(k, for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(k, for_while.upfrom))(for_while.init, for_while.f)))))))))}")))
 (|for_while_it_TCC16| 0
  (|for_while_it_TCC9-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_while_it| SUBTYPE "(number_fields.+)(for_while.i, 1)"
    "upfrom(for_while.upfrom)")))
 (|for_while_it_TCC17| 0
  (|for_while_it_TCC8-1| NIL 3931433958
   ("" (SKEEP* :PREDS? T)
    (("" (REWRITE "le_min")
      (("" (FLATTEN)
        (("" (INST -7 "k")
          (("" (REWRITE "le_min") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_min| FORMULA-DECL NIL |real_defs| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|upfrom| SKOLEM-CONST-DECL "int" |for_while| NIL)
    (|i| SKOLEM-CONST-DECL "upfrom(upfrom)" |for_while| NIL)
    (|upto| SKOLEM-CONST-DECL "int" |for_while| NIL)
    (|k| SKOLEM-CONST-DECL "subrange(upfrom, min(i, upto))" |for_while| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.while"
    "{while: defined_types[[subrange(for_while.upfrom, for_while.upto), for_while.T]].PRED | FORALL (k: integers.subrange(for_while.upfrom, real_defs.min(for_while.i, for_while.upto))): while(k, for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)(k, for_while.upfrom))(for_while.init, for_while.f))}")))
 (|for_while_it_TCC18| 0
  (|for_while_it_TCC10-1| NIL 3931433958
   ("" (SKEEP :PREDS? T) (("" (EXPAND "iter" 2) (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.f(for_while.i, for_while.a)"
    "{a: for_while.T | a = for_while.iter(for_while.upfrom, for_while.upto)((number_fields.-)((number_fields.+)(1, for_while.i), for_while.upfrom))(for_while.init, for_while.f)}")))
 (|for_while_it_TCC19| 0
  (|for_while_it_TCC17-1| NIL 3931795474 ("" (SUBTYPE-TCC) NIL NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_while_it| SUBTYPE "for_while.inv"
    "{inv: defined_types[[subrange(for_while.upfrom, (number_fields.+)(1, for_while.upto)), for_while.T]].PRED | FORALL (k: integers.subrange(for_while.upfrom, for_while.upto), ak: for_while.T): booleans.IMPLIES(booleans.AND(inv(k, ak), for_while.while(k, ak)), inv((number_fields.+)(1, k), for_while.f(k, ak)))}")))
 (|for_while_it_TCC20| 0
  (|for_while_it_TCC11-1| NIL 3931433958 ("" (TERMINATION-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_while_it| TERMINATION
    "for_while.for_while_it(for_while.upfrom, for_while.upto, (number_fields.+)(for_while.i, 1), for_while.init, for_while.f, for_while.while, for_while.f(for_while.i, for_while.a), for_while.inv)"
    "NIL")))
 (|for_TCC1| 0
  (|for_TCC4-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for| SUBTYPE "(number_fields.+)(for_while.k, 1)"
    "subrange(for_while.m, (number_fields.+)(1, for_while.n))")))
 (|for_TCC2| 0
  (|for_TCC1-1| NIL 3931459611 ("" (SUBTYPE-TCC) NIL NIL)
   ((<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|for| SUBTYPE "for_while.i" "subrange(for_while.m, for_while.n)")))
 (|for_TCC3| 0
  (|for_TCC1-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for| SUBTYPE "for_while.m"
    "subrange(for_while.m, (number_fields.+)(1, for_while.n))")))
 (|for_TCC4| 0
  (|for_TCC9-1| NIL 3931462299 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for| SUBTYPE "for_while.m" "upfrom(for_while.m)")))
 (|for_TCC5| 0
  (|for_TCC3-1| NIL 3931433958 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for| SUBTYPE "for_while.while"
    "{while: defined_types[[subrange(for_while.m, for_while.n), for_while.T]].PRED | FORALL (k: integers.subrange(for_while.m, real_defs.min((number_fields.-)(for_while.m, 1), for_while.n))): while(k, for_while.iter(for_while.m, for_while.n)((number_fields.-)(k, for_while.m))(for_while.init, for_while.f))}")))
 (|for_TCC6| 0
  (|for_TCC2-1| NIL 3931433958
   ("" (SKEEP*) (("" (EXPAND "iter") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|iter| DEF-DECL "T" |for_while| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|for| SUBTYPE "for_while.init"
    "{a: for_while.T | a = for_while.iter(for_while.m, for_while.n)(0)(for_while.init, for_while.f)}")))
 (|for_TCC7| 0
  (|for_TCC7-1| NIL 3931799644 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL))
   NIL
   (|for| SUBTYPE "for_while.inv"
    "{inv: defined_types[[subrange(for_while.m, (number_fields.+)(1, for_while.n)), for_while.T]].PRED | FORALL (k: integers.subrange(for_while.m, for_while.n), ak: for_while.T): booleans.IMPLIES(booleans.AND(inv(k, ak), for_while.while(k, ak)), inv((number_fields.+)(1, k), for_while.f(k, ak)))}")))
 (|for_TCC8| 0
  (|for_TCC8-1| NIL 3931799644
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1"
          (WITH-TCCS
           (TYPEPRED "for_while_it(m, n, m, init, f, while, init, inv)"))
          (("1" (ASSERT)
            (("1" (SKEEP)
              (("1" (INST 1 "j")
                (("1" (ASSERT)
                  (("1" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                     ("3" (FLATTEN)
                      (("3" (ASSERT)
                        (("3" (INST -5 "j") (("3" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (EXPAND "for_while_it") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|for_while_it| DEF-DECL "{t: T |
   (upfrom <= upto IMPLIES
     (EXISTS (j: subrange(upfrom, upto + 1)):
        (t = iter(upfrom, upto)(j - upfrom)(init, f)) AND
         (FORALL (k: subrange(upfrom, j - 1)):
            while(k, iter(upfrom, upto)(k - upfrom)(init, f)))
          AND
          (j <= upto IMPLIES NOT while(j, t)) AND
           (inv(upfrom, init) IMPLIES
             FORALL (k: subrange(upfrom, j)):
               inv(k, iter(upfrom, upto)(k - upfrom)(init, f)))))}"
     |for_while| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|for| SUBTYPE
    "for_while.for_while_it(for_while.m, for_while.n, for_while.m, for_while.init, for_while.f, for_while.while, for_while.init, for_while.inv)"
    "{t: for_while.T | IF reals.<=(for_while.m, for_while.n) THEN EXISTS (i: integers.subrange(for_while.m, (number_fields.+)(for_while.n, 1))): booleans.AND((t = for_while.iter(for_while.m, for_while.n)((number_fields.-)(i, for_while.m))(for_while.init, for_while.f)), booleans.AND(FORALL (k: integers.subrange(for_while.m, (number_fields.-)(i, 1))): for_while.while(k, for_while.iter(for_while.m, for_while.n)((number_fields.-)(k, for_while.m))(for_while.init, for_while.f)), booleans.AND((booleans.IMPLIES(reals.<=(i, for_while.n), (booleans.NOT)(for_while.while(i, t)))), (booleans.IMPLIES(for_while.inv(for_while.m, for_while.init), for_while.inv(i, t)))))) ELSE t = for_while.init ENDIF}")))
 (|for_TCC9| 0
  (|for_TCC12-1| NIL 3931800580 ("" (SUBTYPE-TCC) NIL NIL)
   ((<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for| SUBTYPE "for_while.inv_true"
    "{inv: defined_types[[subrange(for_while.m, (number_fields.+)(1, for_while.n)), for_while.T]].PRED | FORALL (k: integers.subrange(for_while.m, for_while.n), ak: for_while.T): booleans.IMPLIES(booleans.AND(inv(k, ak), for_while.while(k, ak)), inv((number_fields.+)(1, k), for_while.f(k, ak)))}")))
 (|for_TCC10| 0
  (|for_TCC10-1| NIL 3932040689
   ("" (SKEEP)
    (("" (WITH-TCCS (TYPEPRED "for(m, n, init, while, f, inv_true)"))
      (("" (SPLIT 1)
        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|for| CONST-DECL "{t: T |
   IF m <= n
     THEN EXISTS (i: subrange(m, n + 1)):
            (t = iter(m, n)(i - m)(init, f)) AND
             (FORALL (k: subrange(m, i - 1)):
                while(k, iter(m, n)(k - m)(init, f)))
              AND
              (i <= n IMPLIES NOT while(i, t)) AND
               (inv(m, init) IMPLIES inv(i, t))
   ELSE t = init
   ENDIF}"
     |for_while| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for| SUBTYPE
    "for_while.for(for_while.m, for_while.n, for_while.init, for_while.while, for_while.f, for_while.inv_true)"
    "{t: for_while.T | IF reals.<=(for_while.m, for_while.n) THEN EXISTS (i: integers.subrange(for_while.m, (number_fields.+)(for_while.n, 1))): booleans.AND((t = for_while.iter(for_while.m, for_while.n)((number_fields.-)(i, for_while.m))(for_while.init, for_while.f)), booleans.AND(FORALL (k: integers.subrange(for_while.m, (number_fields.-)(i, 1))): for_while.while(k, for_while.iter(for_while.m, for_while.n)((number_fields.-)(k, for_while.m))(for_while.init, for_while.f)), (booleans.IMPLIES(reals.<=(i, for_while.n), (booleans.NOT)(for_while.while(i, t)))))) ELSE t = for_while.init ENDIF}")))
 (|for_TCC11| 0
  (|for_TCC9-1| NIL 3931800580 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for| SUBTYPE "(number_fields.+)(for_while.k, 1)"
    "subrange(for_while.m, (number_fields.+)(1, for_while.n))")))
 (|for_TCC12| 0
  (|for_TCC11-1| NIL 3931880645 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for| SUBTYPE "for_while.m"
    "subrange(for_while.m, (number_fields.+)(1, for_while.n))")))
 (|for_TCC13| 0
  (|for_TCC15-1| NIL 3931880645 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for| SUBTYPE "for_while.inv"
    "{inv: defined_types[[subrange(for_while.m, (number_fields.+)(1, for_while.n)), for_while.T]].PRED | FORALL (k: integers.subrange(for_while.m, for_while.n), ak: for_while.T): booleans.IMPLIES(booleans.AND(inv(k, ak), for_while.while_true(k, ak)), inv((number_fields.+)(1, k), for_while.f(k, ak)))}")))
 (|for_TCC14| 0
  (|for_TCC12-1| NIL 3931880645
   ("" (SKEEP)
    (("" (WITH-TCCS (TYPEPRED "for(m, n, init, while_true, f, inv)"))
      (("" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (HIDE -3)
              (("1" (SKEEP) (("1" (INSTEEP) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|for| CONST-DECL "{t: T |
   IF m <= n
     THEN EXISTS (i: subrange(m, n + 1)):
            (t = iter(m, n)(i - m)(init, f)) AND
             (FORALL (k: subrange(m, i - 1)):
                while(k, iter(m, n)(k - m)(init, f)))
              AND
              (i <= n IMPLIES NOT while(i, t)) AND
               (inv(m, init) IMPLIES inv(i, t))
   ELSE t = init
   ENDIF}"
     |for_while| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for| SUBTYPE
    "for_while.for(for_while.m, for_while.n, for_while.init, for_while.while_true, for_while.f, for_while.inv)"
    "{t: for_while.T | IF reals.<=(for_while.m, for_while.n) THEN EXISTS (i: integers.subrange(for_while.m, (number_fields.+)(for_while.n, 1))): booleans.AND((t = for_while.iter(for_while.m, for_while.n)((number_fields.-)(i, for_while.m))(for_while.init, for_while.f)), booleans.AND((i = (number_fields.+)(1, for_while.n)), (booleans.IMPLIES(for_while.inv(for_while.m, for_while.init), for_while.inv(i, t))))) ELSE t = for_while.init ENDIF}")))
 (|while_TCC1| 0
  (|while_TCC1-1| NIL 3931964240 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|while| SUBTYPE "for_while.k" "upto(for_while.N)")))
 (|while_TCC2| 0
  (|while_TCC2-1| NIL 3931964240 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|while| SUBTYPE "(number_fields.+)(for_while.k, 1)" "upto(for_while.N)")))
 (|while_TCC3| 0
  (|while_TCC3-1| NIL 3931964240 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|while| SUBTYPE "0" "upto(for_while.N)")))
 (|while_TCC4| 0
  (|while_TCC4-1| NIL 3931964240 ("" (SUBTYPE-TCC) NIL NIL)
   ((N!1 SKOLEM-CONST-DECL "nat" |for_while| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|x!1| SKOLEM-CONST-DECL "int" |for_while| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|while| SUBTYPE "for_while.while_guard" "PRED[[subrange(0, N - 1), T]]")))
 (|while_TCC5| 0
  (|while_TCC5-1| NIL 3931964240
   ("" (SKEEP* :PREDS? T)
    (("" (SPLIT 1)
      (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (SKEEP)
        (("2" (INSTEEP) (("2" (REPLACES -6) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|while| SUBTYPE "for_while.inv"
    "{inv: defined_types[[subrange(0, for_while.N), for_while.T]].PRED | FORALL (k: integers.subrange(0, (number_fields.-)(for_while.N, 1)), ak: for_while.T): booleans.IMPLIES(booleans.AND(inv(k, ak), for_while.while_guard(k, ak)), inv((number_fields.+)(1, k), for_while.while_body(k, ak)))}")))
 (|while_TCC6| 0
  (|while_TCC6-1| NIL 3931964240
   ("" (SKEEP)
    (("" (REPLACES -)
      ((""
        (WITH-TCCS
         (TYPEPRED "for(0, N - 1, init, LAMBDA (i: below(N), a: T): while(a),
               LAMBDA (i: below(N), a: T): f(a), inv)"))
        (("" (CASE "N > 0")
          (("1" (ASSERT)
            (("1" (HIDE -3)
              (("1" (SKOLEM -2 "i")
                (("1" (INST 1 "i")
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (SPLIT 1)
                        (("1" (REPLACES -2)
                          (("1" (LEMMA "iterate_eq_iter")
                            (("1" (INST? -1)
                              (("1" (INST -1 "N-1") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (INSTEEP)
                            (("2" (LEMMA "iterate_eq_iter")
                              (("2" (INST? -1)
                                (("2" (INST -1 "N-1") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)
                         ("4" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|iterate_eq_iter| FORMULA-DECL NIL |for_while| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (|for| CONST-DECL "{t: T |
   IF m <= n
     THEN EXISTS (i: subrange(m, n + 1)):
            (t = iter(m, n)(i - m)(init, f)) AND
             (FORALL (k: subrange(m, i - 1)):
                while(k, iter(m, n)(k - m)(init, f)))
              AND
              (i <= n IMPLIES NOT while(i, t)) AND
               (inv(m, init) IMPLIES inv(i, t))
   ELSE t = init
   ENDIF}"
     |for_while| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|iter| DEF-DECL "T" |for_while| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|while| SUBTYPE
    "for_while.for(0, (number_fields.-)(for_while.N, 1), for_while.init, for_while.while_guard, for_while.while_body, for_while.inv)"
    "{t: for_while.T | IF reals.>(for_while.N, 0) THEN EXISTS (i: naturalnumbers.upto(for_while.N)): booleans.AND((t = function_iterate[for_while.T].iterate(for_while.f, i)(for_while.init)), booleans.AND(FORALL (k: naturalnumbers.below(i)): for_while.while(function_iterate[for_while.T].iterate(for_while.f, k)(for_while.init)), booleans.AND((booleans.IMPLIES(reals.<(i, for_while.N), (booleans.NOT)(for_while.while(t)))), (booleans.IMPLIES(for_while.inv(0, for_while.init), for_while.inv(i, t)))))) ELSE t = for_while.init ENDIF}")))
 (|while_TCC7| 0
  (|while_TCC7-1| NIL 3932041520 ("" (SUBTYPE-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|while| SUBTYPE "for_while.inv_true"
    "{inv: defined_types[[upto(for_while.N), for_while.T]].PRED | FORALL (k: naturalnumbers.below(for_while.N), ak: for_while.T): booleans.IMPLIES(inv(k, ak), inv((number_fields.+)(1, k), for_while.f(ak)))}")))
 (|while_TCC8| 0
  (|while_TCC8-1| NIL 3932041520
   ("" (SKEEP)
    (("" (TYPEPRED "while(N, init, while!1, f, inv_true)")
      (("1" (SPLIT 1)
        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL))
        NIL)
       ("2" (HIDE 2) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|while| CONST-DECL "{t: T |
   IF N > 0
     THEN EXISTS (i: upto(N)):
            (t = iterate(f, i)(init)) AND
             (FORALL (k: below(i)): while(iterate(f, k)(init))) AND
              (i < N IMPLIES NOT while(t)) AND
               (inv(0, init) IMPLIES inv(i, t))
   ELSE t = init
   ENDIF}"
     |for_while| NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|while| SUBTYPE
    "for_while.while(for_while.N, for_while.init, for_while.while, for_while.f, for_while.inv_true)"
    "{t: for_while.T | IF reals.>(for_while.N, 0) THEN EXISTS (i: naturalnumbers.upto(for_while.N)): booleans.AND((t = function_iterate[for_while.T].iterate(for_while.f, i)(for_while.init)), booleans.AND(FORALL (k: naturalnumbers.below(i)): for_while.while(function_iterate[for_while.T].iterate(for_while.f, k)(for_while.init)), (booleans.IMPLIES(reals.<(i, for_while.N), (booleans.NOT)(for_while.while(t)))))) ELSE t = for_while.init ENDIF}")))
 (|while_TCC9| 0
  (|while_TCC8-1| NIL 3932023912 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|while| SUBTYPE "0" "upto(for_while.N)")))
 (|while_TCC10| 0
  (|while_TCC9-1| NIL 3932023912 ("" (SUBTYPE-TCC) NIL NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|while| SUBTYPE "for_while.inv"
    "{inv: defined_types[[upto(for_while.N), for_while.T]].PRED | FORALL (k: naturalnumbers.below(for_while.N), ak: for_while.T): booleans.IMPLIES(inv(k, ak), inv((number_fields.+)(1, k), for_while.f(ak)))}")))
 (|while_TCC11| 0
  (|while_TCC10-1| NIL 3932023912
   ("" (SKEEP)
    (("" (WITH-TCCS (TYPEPRED "while(N, init, while_true, f, inv)"))
      (("" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (SKEEP) (("1" (INSTEEP) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|while| CONST-DECL "{t: T |
   IF N > 0
     THEN EXISTS (i: upto(N)):
            (t = iterate(f, i)(init)) AND
             (FORALL (k: below(i)): while(iterate(f, k)(init))) AND
              (i < N IMPLIES NOT while(t)) AND
               (inv(0, init) IMPLIES inv(i, t))
   ELSE t = init
   ENDIF}"
     |for_while| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|while| SUBTYPE
    "for_while.while(for_while.N, for_while.init, for_while.while_true, for_while.f, for_while.inv)"
    "{t: for_while.T | IF reals.>(for_while.N, 0) THEN EXISTS (i: naturalnumbers.upto(for_while.N)): booleans.AND((t = function_iterate[for_while.T].iterate(for_while.f, i)(for_while.init)), booleans.AND((i = for_while.N), (booleans.IMPLIES(for_while.inv(0, for_while.init), for_while.inv(i, t))))) ELSE t = for_while.init ENDIF}")))
 (|while_TCC12| 0
  (|while_TCC7-1| NIL 3931964240
   ("" (SKEEP)
    (("" (WITH-TCCS (TYPEPRED "while(N, init, while_true, f, inv_true)"))
      (("" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (SKEEP) (("1" (INSTEEP) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_while| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (|while| CONST-DECL "{t: T |
   IF N > 0
     THEN EXISTS (i: upto(N)):
            (t = iterate(f, i)(init)) AND
             (FORALL (k: below(i)): while(iterate(f, k)(init))) AND
              (i < N IMPLIES NOT while(t)) AND
               (inv(0, init) IMPLIES inv(i, t))
   ELSE t = init
   ENDIF}"
     |for_while| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|while| SUBTYPE
    "for_while.while(for_while.N, for_while.init, for_while.while_true, for_while.f, for_while.inv_true)"
    "{t: for_while.T | IF reals.>(for_while.N, 0) THEN EXISTS (i: naturalnumbers.upto(for_while.N)): booleans.AND((t = function_iterate[for_while.T].iterate(for_while.f, i)(for_while.init)), (i = for_while.N)) ELSE t = for_while.init ENDIF}"))))

