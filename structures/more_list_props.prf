(|more_list_props| (|prefix?_TCC1| 0 (|prefix?_TCC1-1| |nil| 3286895430 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK (|prefix?| TERMINATION "more_list_props.prefix?(more_list_props.x1, more_list_props.y1)" "NIL"))) (|suffix?_TCC1| 0 (|suffix?_TCC1-1| |nil| 3286897128 ("" (SKEEP*) (("" (USE "length_reverse[T]") (("" (REPLACES -1) (("" (USE "length_reverse[T]") (("" (REPLACES -2) (("" (REPLACES -1 :|dir| RL) (("" (EXPAND "length" 2) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|suffix?| TERMINATION "more_list_props.suffix?(list_props[more_list_props.T].reverse(more_list_props.x1), list_props[more_list_props.T].reverse(more_list_props.y1))" "NIL"))) (|caret_TCC1| 0 (|caret_TCC1-1| |nil| 3287764724 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK (|caret| SUBTYPE "(number_fields.-)(more_list_props.n, 1)" "nat"))) (|caret_TCC2| 0 (|caret_TCC2-1| |nil| 3287764724 ("" (TERMINATION-TCC) NIL NIL) NIL SHOSTAK (|caret| TERMINATION "(more_list_props.^(more_list_props.l1, (number_fields.-)(more_list_props.n, 1)))" "NIL"))) (|caret_TCC3| 0 (|caret_TCC3-1| |nil| 3287771390 ("" (SUBTYPE-TCC) NIL NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|caret| SUBTYPE "(number_fields.-)(more_list_props.pair`2, more_list_props.pair`1)" "naturalnumber"))) (|caret_TCC4| 0 (|caret_TCC4-1| |nil| 3287771390 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|caret| SUBTYPE "more_list_props.m" "below[length[T](l1)]"))) (|caret_TCC5| 0 (|caret_TCC5-2| "" 3790088127 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|caret| SUBTYPE "more_list_props.m" "below[length[T](l1)]")) (|caret_TCC5-1| |nil| 3287771390 ("" (TERMINATION-TCC) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK (|caret| SUBTYPE "more_list_props.m" "below[length[T](l1)]"))) (|caret_TCC6| 0 (|caret_TCC6-1| |nil| 3287774349 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|caret| TERMINATION "(more_list_props.^(more_list_props.l1, ((number_fields.+)(more_list_props.m, 1), more_list_props.n)))" "NIL"))) (|caret_length| 0 (|caret_length-3| |nil| 3792848292 ("" (CASE "FORALL ( l1: list[T], pair: [nat, nat], N:nat ):
                             N=pair`2-pair`1 AND pair`2 >= pair`1 AND pair`2 < length(l1) IMPLIES length((l1 ^ pair)) = pair`2 - pair`1 + 1") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "pair`2 - pair`1") (("1" (GROUND) NIL) ("2" (GROUND) NIL))))))) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (GROUND) NIL) ("2" (FLATTEN) (("2" (SPLIT 4) (("1" (GROUND) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (PROPAX) NIL))))))) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (SPLIT 4) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (INST -1 "l1" "(1+pair`1, pair`2)") (("2" (ASSERT) (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL)))))))))))))))))))))))))))) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pair| SKOLEM-CONST-DECL "[nat, nat]" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL) (|caret_length-2| |nil| 3792848259 ("" (CASE "FORALL ( l1: list[T], pair: [nat, nat], N:nat ):
                             N=pair`2-pair`1 AND pair`2 >= pair`1 AND pair`2 < length(l1) IMPLIES length((l1 ^ pair)) = pair`2 - pair`1 + 1") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "pair`2 - pair`1") (("1" (GROUND) NIL) ("2" (GROUND) NIL))))))) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (GROUND) NIL) ("2" (FLATTEN) (("2" (SPLIT 4) (("1" (GROUND) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (PROPAX) NIL))))))) ("2" (FLATTEN) (("2" (GROUND) NIL))))))))))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (SPLIT 4) (("1" (FLATTEN) (("1" (GROUND) NIL))) ("2" (FLATTEN) (("2" (INST -1 "l1" "(1+pair`1, pair`2)") (("2" (ASSERT) (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL)))))))))))))))))))))))))))) NIL) NIL NIL) (|caret_length-1| |nil| 3655812777 ("" (CASE "FORALL (l1: list[T], pair: [nat, nat], N:nat ):
                      N=pair`2-pair`1 AND pair`2 >= pair`1 AND pair`2 < length(l1) IMPLIES length((l1 ^ pair)) = pair`2 - pair`1 + 1") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "pair`2 - pair`1") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 4) (("1" (GROUND) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "l1" "(1+pair`1, pair`2)") (("2" (ASSERT) (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|caret_cdr_TCC1| 0 (|caret_cdr_TCC1-1| |nil| 3656150636 ("" (SKEEP) (("" (LEMMA "caret_length") (("" (INST?) (("" (GROUND) (("" (EXPAND "length" -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|caret_length| FORMULA-DECL NIL |more_list_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|caret_cdr| SUBTYPE "(more_list_props.^(more_list_props.l1, more_list_props.pair))" "(list_adt[more_list_props.T].cons?)"))) (|caret_cdr_TCC2| 0 (|caret_cdr_TCC2-1| |nil| 3656150636 ("" (SKEEP) (("" (EXPAND "length") (("" (LIFT-IF -2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|caret_cdr| SUBTYPE "more_list_props.l1" "(list_adt[more_list_props.T].cons?)"))) (|caret_cdr_TCC3| 0 (|caret_cdr_TCC3-1| |nil| 3656150636 ("" (SUBTYPE-TCC) NIL NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|caret_cdr| SUBTYPE "(number_fields.-)(more_list_props.pair`2, 1)" "nat"))) (|caret_cdr| 0 (|caret_cdr-1| |nil| 3656150786 ("" (CASE " FORALL (l1: list[T], N:nat, pair: [nat, nat]):
                      N = pair`2-pair`1 AND pair`2 >= pair`1 AND pair`2 < length(l1) AND pair`1 > 0 IMPLIES
                       cdr((l1 ^ pair)) = (cdr(l1) ^ (pair`1, pair`2 - 1))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "pair`2 - pair `1") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (EXPAND "^") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND " length" -5) (("1" (LIFT-IF -5) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 -3) (("2" (SIMPLIFY -3) (("2" (REPLACE -3) (("2" (EXPAND "length" -5) (("2" (GROUND) (("2" (LIFT-IF -5) (("2" (GROUND) (("2" (REPLACE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "l1" "(pair`1+1, pair`2)") (("3" (GROUND) (("3" (REPLACE -1 :|dir| RL) (("3" (EXPAND "^" 2 1) (("3" (CASE " FORALL (L: list[T], nn:nat, Pair: [nat, nat]):
                      nn = Pair`2-Pair`1 AND Pair`2 >= Pair`1 AND Pair`2 < length(L) IMPLIES nth(L, Pair`1) = car(L^(Pair))") (("1" (INST -1 "l1" "pair`2-pair`1-1 " "(pair`1+1, pair`2)") (("1" (GROUND) (("1" (EXPAND "nth" -1) (("1" (REPLACE -1) (("1" (GROUND) (("1" (CASE "FORALL (LL: list[T]): null?(LL) OR LL = cons(car(LL), cdr(LL))") (("1" (INST -1 "l1 ^ (1 + pair`1, pair`2)") (("1" (GROUND) (("1" (LEMMA "caret_length") (("1" (INST?) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL)) NIL) ("3" (DECOMPOSE-EQUALITY 3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "^") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (LEMMA "caret_length") (("3" (INST?) (("3" (GROUND) (("3" (EXPAND "length" -1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (GROUND) NIL NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) (("4" (SKEEP) (("4" (EXPAND "length") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (LEMMA "caret_length") (("5" (INST?) (("5" (GROUND) (("5" (EXPAND "length" -1) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (GROUND) NIL NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) (("4" (SKEEP) (("4" (EXPAND "length") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (LEMMA "caret_length") (("5" (INST?) (("5" (GROUND) (("5" (EXPAND "length" -1) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|caret_length| FORMULA-DECL NIL |more_list_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pair| SKOLEM-CONST-DECL "[nat, nat]" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|caret_nth_TCC1| 0 (|caret_nth_TCC1-1| |nil| 3656945177 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|caret_nth| SUBTYPE "more_list_props.n" "below[length[T](l1)]"))) (|caret_nth_TCC2| 0 (|caret_nth_TCC2-1| |nil| 3656945700 ("" (SKEEP) (("" (ASSERT) (("" (LEMMA "caret_length") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|caret_length| FORMULA-DECL NIL |more_list_props| NIL)) NIL (|caret_nth| SUBTYPE "(number_fields.-)(more_list_props.n, more_list_props.pair`1)" "below[length[T](l1 ^ pair)]"))) (|caret_nth| 0 (|caret_nth-1| |nil| 3656945701 ("" (CASE "FORALL (l1: list[T], m,n: nat, pair: [nat, nat]):
        m = n-pair`1 AND pair`2 >= pair`1 AND
         pair`2 < length(l1) AND n >= pair`1 AND n <= pair`2
         IMPLIES nth(l1, n) = nth(l1 ^ pair, n - pair`1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "n - pair`1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " m") (("1" (SKEEP) (("1" (REPLACE -1 :|dir| RL) (("1" (EXPAND "^") (("1" (ASSERT) (("1" (EXPAND "nth" 1 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :|dir| RL) (("2" (EXPAND "^" 1) (("2" (ASSERT) (("2" (EXPAND "nth" 1 2) (("2" (INST -1 "l1" "n" "(1+pair`1, pair`2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (LEMMA "caret_length") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (LEMMA "caret_length") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ((|caret_length| FORMULA-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pair| SKOLEM-CONST-DECL "[nat, nat]" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|prefix_length| 0 (|prefix_length-1| |nil| 3287327236 ("" (SKOSIMP*) (("" (EXPAND "prefix?") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|suffix_length| 0 (|suffix_length-1| |nil| 3287327263 ("" (SKOSIMP*) (("" (EXPAND "suffix?") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|every_forall| 0 (|every_forall-1| |nil| 3286897625 ("" (SKEEP) (("" (REWRITE "every_nth") NIL NIL)) NIL) ((|every_nth| FORMULA-DECL NIL |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|every_as_member| 0 (|every_as_member-1| |nil| 3791362884 ("" (SKEEP 1 :|but| "l") (("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "xs")) (("2" (FLATTEN) (("2" (EXPAND "every" -2) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (EXPAND "member" -4) (("2" (SPLIT -4) (("1" (GRIND) NIL NIL) ("2" (INST -2 "x_1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK)) (|some_exists| 0 (|some_exists-1| |nil| 3287148696 ("" (INDUCT "L") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (REWRITE "some" +) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (PROP) (("1" (REWRITE "nth") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (REWRITE "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "n!1+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "n!1-1") (("1" (GRIND) (("1" (EXPAND "nth") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n!1") (("2" (REWRITE "length" -) (("2" (ASSERT) (("2" (HIDE -1) (("2" (REWRITE "nth" -) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n!1| SKOLEM-CONST-DECL "below(length(cons(cons1_var!1, cons2_var!1)))" |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n!1| SKOLEM-CONST-DECL "below(length(cons2_var!1))" |more_list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons1_var!1| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|cons2_var!1| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|some| ADT-DEF-DECL "boolean" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|list_extensionality_TCC1| 0 (|list_extensionality_TCC1-1| |nil| 3546992291 ("" (SUBTYPE-TCC) NIL NIL) ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|list_extensionality| SUBTYPE "more_list_props.n" "below[length[T](l2)]"))) (|list_extensionality| 0 (|list_extensionality-1| |nil| 3546992303 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "null?(l2)") (("1" (GRIND) NIL NIL) ("2" (LEMMA "list_cons_eta[T]") (("2" (INST -1 "l2") (("1" (REPLACES -1 :|dir| RL) (("1" (SPLIT) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (SKEEP) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "list_cons_extensionality[T]") (("1" (INST -2 "0") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (INST -3 "cdr(l2)") (("2" (ASSERT) (("2" (SKEEP 4) (("2" (INST -2 "n+1") (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons1_var| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|cons2_var| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "below(length(cons2_var))" |more_list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK)) (|list_pigeonhole| 0 (|list_pigeonhole-2| "" 3790088131 ("" (MEASURE-INDUCT "card(A)" "A" 1) (("" (SKOSIMP*) (("" (REWRITE "length" -) (("" (LIFT-IF) (("" (GROUND) (("" (INST - "remove(car(B!1), x!1)") (("" (REWRITE "card_remove") (("" (REWRITE "every") (("" (FLATTEN) (("" (ASSERT) (("" (INST - "cdr(B!1)") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST + "n!1+1" "m!1+1") (("1" (EXPAND "nth" +) (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "m!1") (("2" (ASSERT) (("2" (REWRITE "length" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "n!1") (("3" (REWRITE "length" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + 0 _) (("1" (REWRITE "nth" +) (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (REWRITE "every_forall") (("1" (REWRITE "every_forall") (("1" (SKOSIMP*) (("1" (INST 3 "n!1+1") (("1" (INST -3 "n!1") (("1" (ASSERT) (("1" (REWRITE "nth" 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n!1") (("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|n!1| SKOLEM-CONST-DECL "below[length(cdr(B!1))]" |more_list_props| NIL) (B!1 SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|m!1| SKOLEM-CONST-DECL "below[length(cdr(B!1))]" |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|n!1| SKOLEM-CONST-DECL "below(length(cdr(B!1)))" |more_list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|every_forall| FORMULA-DECL NIL |more_list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|list_pigeonhole-1| |nil| 3287156645 ("" (MEASURE-INDUCT "card(A)" "A" 1) (("" (SKOSIMP*) (("" (REWRITE "length" -) (("" (LIFT-IF) (("" (GROUND) (("" (INST - "remove(car(B!1), x!1)") (("" (REWRITE "card_remove") (("" (REWRITE "every") (("" (FLATTEN) (("" (ASSERT) (("" (INST - "cdr(B!1)") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST + "n!1+1" "m!1+1") (("1" (EXPAND "nth" +) (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "m!1") (("2" (ASSERT) (("2" (REWRITE "length" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "n!1") (("3" (REWRITE "length" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + 0 _) (("1" (REWRITE "nth" +) (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (REWRITE "every_forall") (("1" (REWRITE "every_forall") (("1" (SKOSIMP*) (("1" (INST 3 "n!1+1") (("1" (INST -3 "n!1") (("1" (ASSERT) (("1" (REWRITE "nth" 3) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "n!1") (("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n!1") (("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|nth_append_TCC1| 0 (|nth_append_TCC1-1| |nil| 3577469759 ("" (SKEEP) (("" (REWRITE "length_append") NIL NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|nth_append| SUBTYPE "more_list_props.i" "below[length[T](append[T](l1, l2))]"))) (|nth_append_TCC2| 0 (|nth_append_TCC2-1| |nil| 3577469759 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|nth_append| SUBTYPE "(number_fields.-)(more_list_props.i, list_props[more_list_props.T].length(more_list_props.l1))" "below[length[T](l2)]"))) (|nth_append| 0 (|nth_append-1| |nil| 3577469817 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("a" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (CASE-REPLACE "length(cons(a,l))=length(l)+1") (("1" (HIDE -1) (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (CASE-REPLACE "i < 1 + length(l)") (("1" (EXPAND "nth" 1) (("1" (CASE-REPLACE "i=0") (("1" (ASSERT) (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" 2 1) (("2" (INST? -) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|append_eq_length_left| 0 (|append_eq_length_left-1| |nil| 3797002527 ("" (SKEEP) (("" (REWRITE "list_extensionality") (("" (FLATTEN) (("" (REWRITE "length_append") (("" (REWRITE "length_append") (("" (CASE "l1=l3") (("1" (ASSERT) (("1" (REPLACE -1 :|hide?| T :|dir| RL) (("1" (REWRITE "list_extensionality") (("1" (SKEEP :|preds?| T) (("1" (INST - "length(l1)+n") (("1" (REWRITE "nth_append") (("1" (REWRITE "nth_append") NIL NIL)) NIL) ("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "list_extensionality") (("2" (ASSERT) (("2" (SKEEP :|preds?| T) (("2" (INST -3 "n") (("1" (REWRITE "nth_append") (("1" (REWRITE "nth_append") NIL NIL)) NIL) ("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_extensionality| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|l1| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|n| SKOLEM-CONST-DECL "below(length(l2))" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "below(length(l1))" |more_list_props| NIL)) SHOSTAK)) (|length_null| 0 (|length_null-1| |nil| 3580049561 ("" (GRIND) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK)) (|length_singleton| 0 (|length_singleton-1| |nil| 3580049452 ("" (GRIND) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK)) (|length_null_list| 0 (|length_null_list-1| |nil| 3601030512 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK)) (|reverse_def_TCC1| 0 (|reverse_def_TCC1-1| |nil| 3601030498 ("" (SKEEP) (("" (REWRITE "length_reverse") NIL NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|reverse_def| SUBTYPE "more_list_props.j" "below[length[T](reverse[T](L))]"))) (|reverse_def_TCC2| 0 (|reverse_def_TCC2-1| |nil| 3601030498 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|reverse_def| SUBTYPE "(number_fields.-)((number_fields.-)(list_props[more_list_props.T].length(more_list_props.L), 1), more_list_props.j)" "below[length[T](L)]"))) (|reverse_def| 0 (|reverse_def-1| |nil| 3601030538 ("" (CASE "NOT forall (lpr:list[T],j:nat,k:nat): k+1=length(lpr) AND j<length(lpr) IMPLIES nth(lpr,j) = nth(reverse(lpr),length(lpr)-1-j)") (("1" (HIDE 2) (("1" (INDUCT "k") (("1" (SKEEP) (("1" (ASSERT) (("1" (CASE "NOT j = 0") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (COPY -1) (("2" (HIDE -3) (("2" (REPLACE -1 :|dir| RL) (("2" (ASSERT) (("2" (EXPAND "nth" +) (("2" (COPY -1) (("2" (EXPAND "length" -1) (("2" (EXPAND "length" -1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (EXPAND "reverse" +) (("2" (EXPAND "reverse" +) (("2" (EXPAND "append") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "reverse" +) (("2" (LEMMA "length_null_list") (("2" (INST - "lpr!1") (("2" (ASSERT) (("2" (REWRITE "nth_append") (("1" (LIFT-IF) (("1" (GROUND) (("1" (NAME "kk" "j!1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST - "cdr(lpr!1)" "j!2-1") (("1" (ASSERT) (("1" (SPLIT -) (("1" (CASE "length(cdr(lpr!1)) = length(lpr!1)-1") (("1" (REPLACES -1) (("1" (REPLACES -1 :|dir| RL) (("1" (EXPAND "nth" + 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (REWRITE "length_reverse") (("1" (EXPAND "length" - 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "length" -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT j!2 = 0") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (REWRITE "length_reverse") (("2" (EXPAND "length" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_reverse") (("2" (EXPAND "length" 1 1) (("2" (ASSERT) (("2" (CASE "NOT j!2 = 0") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "length" 2 1) (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_reverse") (("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) (("3" (REWRITE "length_reverse") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST - "L" "length(L)-1-j" "length(L)-1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) (("3" (REWRITE "length_reverse") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (L SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (|j!2| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_null_list| FORMULA-DECL NIL |more_list_props| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|cons_append| 0 (|cons_append-1| |nil| 3613292587 ("" (SKEEP) (("" (REWRITE "list_extensionality") (("" (SPLIT) (("1" (EXPAND "length" 1 1) (("1" (REWRITE "length_append") NIL NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "nth_append") (("1" (EXPAND "nth" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "nth" + 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (EXPAND "length" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_extensionality| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL)) SHOSTAK)) (|expand_list_TCC1| 0 (|expand_list_TCC1-1| |nil| 3613298395 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|expand_list| SUBTYPE "more_list_props.L" "(list_adt[more_list_props.T].cons?)"))) (|expand_list| 0 (|expand_list-1| |nil| 3613298397 ("" (SKEEP) (("" (LEMMA "list_extensionality") (("" (INST?) (("" (ASSERT) (("" (HIDE 3) (("" (SPLIT) (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_extensionality| FORMULA-DECL NIL |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|expand_list_app| 0 (|expand_list_app-1| |nil| 3656151908 ("" (SKEEP 1 :|but| ("l")) (("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKEEP 1 :|but| (("cons1_var" "x") ("cons2_var" "xs"))) (("2" (EXPAND "member" -2) (("2" (SPLIT -2) (("1" (HIDE -2) (("1" (REPLACE -1 :|hide?| T) (("1" (INST 1 "null" "xs") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP -2) (("2" (INST 1 "cons(x,l1)" "l2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)) SHOSTAK)) (|append_null_left| 0 (|append_null_left-1| |nil| 3613298991 ("" (GRIND) NIL NIL) ((|append| DEF-DECL "list[T]" |list_props| NIL)) SHOSTAK)) (|append_null_right| 0 (|append_null_right-1| |nil| 3656951505 ("" (MEASURE-INDUCT+ "length(L)" "L") (("" (CASE "null?(x!1)") (("1" (EXPAND "append") (("1" (LIFT-IF 1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "append" 2) (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (INST - "cdr(x!1)") (("2" (ASSERT) (("2" (GROUND) (("1" (REPLACE -1) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|member_append_fi| 0 (|member_append_fi-1| |nil| 3645178866 ("" (SKOSIMP*) (("" (NAME "L_" "length(l1!1)+length(l2!1)") (("" (GENERALIZE-SKOLEM-CONSTANTS) (("" (INDUCT "L_1") (("1" (SKOLEM 1 ("i" "l1" "l2")) (("1" (FLATTEN) (("1" (CASE "l1 = null AND l2 = null") (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKOLEM 1 ("i" "l1" "l2")) (("2" (FLATTEN) (("2" (EXPAND "append" -3) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "member" -1) (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "i" "cdr(l1)" "l2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) NIL)) (|null_append| 0 (|null_append-1| |nil| 3645179039 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("h1" "t1")) (("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|cdr_append_TCC1| 0 (|cdr_append_TCC1-1| |nil| 3655660650 ("" (SKEEP) (("" (USE "null_append") (("" (TYPEPRED "l1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|null_append| FORMULA-DECL NIL |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|cdr_append| SUBTYPE "list_props[more_list_props.T].append(more_list_props.l1, more_list_props.l2)" "(list_adt[more_list_props.T].cons?)"))) (|cdr_append_TCC2| 0 (|cdr_append_TCC2-1| |nil| 3660317172 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cdr_append| SUBTYPE "more_list_props.l1" "(list_adt[more_list_props.T].cons?)"))) (|cdr_append| 0 (|cdr_append-1| |nil| 3656098980 ("" (SKEEP) (("" (EXPAND "append" 1 1) (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|append| DEF-DECL "list[T]" |list_props| NIL)) SHOSTAK)) (|car_append| 0 (|car_append-1| |nil| 3791205264 ("" (GRIND) NIL NIL) ((|append| DEF-DECL "list[T]" |list_props| NIL)) SHOSTAK)) (|car_append_2_TCC1| 0 (|car_append_2_TCC1-1| |nil| 3791205264 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|car_append_2| SUBTYPE "list_props[more_list_props.T].append(more_list_props.l1, more_list_props.l2)" "(list_adt[more_list_props.T].cons?)"))) (|car_append_2_TCC2| 0 (|car_append_2_TCC2-1| |nil| 3791205264 ("" (SKEEP :|preds?| T) (("" (USE "null_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|null_append| FORMULA-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|car_append_2| SUBTYPE "more_list_props.l2" "(list_adt[more_list_props.T].cons?)"))) (|car_append_2| 0 (|car_append_2-1| |nil| 3791205269 ("" (GRIND) NIL NIL) ((|append| DEF-DECL "list[T]" |list_props| NIL)) SHOSTAK)) (|member_nth| 0 (|member_nth-1| |nil| 3644930816 ("" (INDUCT "l") (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOLEM 1 ("x" "xs")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (INST -1 "t") (("2" (EXPAND "member" -2) (("2" (SPLIT -2) (("1" (INST 1 "0") (("1" (GRIND) NIL NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST 1 "i+1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|i| SKOLEM-CONST-DECL "below(length(xs))" |more_list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|xs| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|x| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|nth_member| 0 (|nth_member-2| "" 3882154939 ("" (CASE "FORALL (n:nat, (l: list[T] | length(l) = n), t: T, i: below(length(l))):
        nth(l, i) = t IMPLIES member(t, l)") (("1" (SKEEP) (("1" (INST - "length(l)" "l" "t" "i") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED ("l")) (("2" (CASE " i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (EXPAND "member") (("1" (EXPAND "length") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" -3) (("2" (GROUND) (("2" (EXPAND "member" 2) (("2" (INST -2 "cdr(l)" "t" "i-1") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|nth_member-1| |nil| 3653992860 ("" (CASE "FORALL (n:nat, (l: list[T] | length(l) = n), t: T, i: below(length(l))):
        nth(l, i) = t IMPLIES member(t, l)") (("1" (SKEEP) (("1" (INST - "length(l)" "l" "t" "i") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED (L)) (("2" (CASE " i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (EXPAND "member") (("1" (EXPAND "length") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" -3) (("2" (GROUND) (("2" (EXPAND "member" 2) (("2" (INST -2 "cdr(l)" "t" "i-1") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|j| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "{l: list[T] | length(l) = 1 + j}" |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) SHOSTAK)) (|member_iff_nth| 0 (|member_iff_nth-1| |nil| 3721404684 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (REWRITE "member_nth") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (LEMMA "nth_member") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member_nth| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth_member| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|member_append_r| 0 (|member_append_r-1| |nil| 3645179340 ("" (SKEEP) (("" (NAME "L_" "length(l1) + length(l2)") (("" (GENERALIZE-SKOLEM-CONSTANTS) (("" (INDUCT "L_1") (("1" (SKEEP) (("1" (CASE "l1_1 = null AND l2_1 = null") (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "i_1" "cdr(l1_1)" "l2_1") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL)) NIL)) (|member_append_l| 0 (|member_append_l-1| |nil| 3645179454 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("hl" "tl")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "member" -2) (("2" (SPLIT -2) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "append" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|every_implies| 0 (|every_implies-1| |nil| 3645179531 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL)) (|append_right_inj| 0 (|append_right_inj-1| |nil| 3645265347 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("a" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "append" -2) (("2" (INST -1 "l1" "l2") (("2" (DECOMPOSE-EQUALITY -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|subl_over_len_TCC1| 0 (|subl_over_len_TCC1-1| |nil| 3644927435 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|subl_over_len| SUBTYPE "(number_fields.-)(list_props[more_list_props.T].length(more_list_props.l), 1)" "nat"))) (|subl_over_len| 0 (|subl_over_len-1| |nil| 3644927452 ("" (SKOLEM 1 ("m_" "l_" "i_") :|skolem-typepreds?| T) (("" (NAME "k_" "i_ - m_") (("" (GENERALIZE "k_" "k" "nat") (("1" (GRIND) NIL NIL) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("2" (INDUCT "k") (("1" (SKOLEM 1 ("m" "l" "i") :|skolem-typepreds?| T) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (SKOLEM 1 ("m" "l" "i") :|skolem-typepreds?| T) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "^" 1) (("2" (CASE "m=length(l)-1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -4 "1+m" "l" "i") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|l| SKOLEM-CONST-DECL "{l: list[T] | m < length(l)}" |more_list_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|k_| SKOLEM-CONST-DECL "int" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL)) NIL)) (|subl_shr_TCC1| 0 (|subl_shr_TCC1-1| |nil| 3644927489 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|subl_shr| SUBTYPE "(number_fields.-)(more_list_props.m, 1)" "nat"))) (|subl_shr| 0 (|subl_shr-2| |nil| 3644927609 ("" (SKOLEM 1 ("a_" "l_" "m_" "n_") :|skolem-typepreds?| T) (("" (CASE "m_ > n_") (("1" (GRIND) NIL NIL) ("2" (CASE "m_ = n_") (("1" (REPLACES -1) (("1" (HIDE -1 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "length" 1 1) (("1" (LIFT-IF 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "m_ < n_") (("1" (HIDE (1 2)) (("1" (NAME "k_" "n_ - m_") (("1" (GENERALIZE "k_" "k_" "nat") (("1" (ASSERT) NIL NIL) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("2" (INDUCT "k_") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKOLEM 1 ("a" "l" "m" "n") :|skolem-typepreds?| T) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "^" 1 1) (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (CASE "m+1 = n") (("1" (REPLACES -1 :|dir| RL) (("1" (ASSERT) (("1" (EXPAND "^" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "a" "l" "1+m" "n") (("2" (ASSERT) (("2" (REPLACES -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|k_| SKOLEM-CONST-DECL "int" |more_list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) NIL) (|subl_shr-1| |nil| 3644927506 ("" (SKEEP) (("" (CASE "l=null") (("1" (REPLACES -1) (("1" (GRIND) NIL))) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("1" (INDUCT "l_1") (("1" (SKOLEM 1 ("a_" "l_")) (("1" (FLATTEN) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (HIDE 1) (("1" (GRIND) NIL))))) ("2" (HIDE 1) (("2" (EXPAND "^" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL) ("2" (FLATTEN) (("2" (SPLIT 3) (("1" (GRIND) NIL) ("2" (FLATTEN) (("2" (USE "subl_shr") (("1" (REPLACES -1) (("1" (EXPAND "length" 2) (("1" (GRIND) NIL))))) ("2" (GRIND) NIL))))))))))))))))))))))) ("2" (GRIND) NIL))) ("2" (GRIND) NIL) ("3" (GRIND) NIL)))))) NIL) NIL NIL)) (|subl_idemp_TCC1| 0 (|subl_idemp_TCC1-1| |nil| 3644927635 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|subl_idemp| SUBTYPE "(number_fields.-)(list_props[more_list_props.T].length(more_list_props.l), 1)" "nat"))) (|subl_idemp| 0 (|subl_idemp-1| |nil| 3644927656 ("" (SKEEP) (("" (CASE "l=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("1" (INDUCT "l_1") (("1" (ASSERT) NIL NIL) ("2" (SKOLEM 1 ("a_" "l_")) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (EXPAND "^" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 3) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (USE "subl_shr") (("1" (REPLACES -1) (("1" (EXPAND "length" 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|l_| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|a_| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|subl_shr| FORMULA-DECL NIL |more_list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) NIL)) (|length_subl| 0 (|length_subl-1| |nil| 3644927692 ("" (SKEEP :|preds?| T) (("" (CASE "n>=length(l)") (("1" (USE "subl_over_len") (("1" (REPLACE -1 1 :|hide?| T) (("1" (CASE "min(length(l), n + 1) = length(l)") (("1" (REPLACE -1 1 :|hide?| T) (("1" (HIDE -1 -2 -3) (("1" (GENERALIZE "l" "l_" "(cons?[T])") (("1" (GRIND) NIL NIL) ("2" (GENERALIZE "m" "m_") (("1" (INDUCT "l_") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOLEM 1 ("a_" "l_")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (CASE "l_=null") (("1" (HIDE -2) (("1" (REPLACES -1) (("1" (EXPAND "length" -1) (("1" (EXPAND "length" -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (CASE "m_=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -2) (("2" (CASE "m_ =0 ") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "subl_idemp") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "subl_shr") (("1" (REPLACE -1 3 :|hide?| T) (("1" (INST -1 "m_ - 1") (("1" (ASSERT) (("1" (EXPAND "length" 3 2) (("1" (REPLACE -1 3 :|hide?| T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (NAME "k" "n-m") (("2" (GENERALIZE "k" "k" "nat") (("1" (ASSERT) NIL NIL) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("2" (INDUCT "k") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKOLEM 1 ("m_" "l_" "n_") :|skolem-typepreds?| T) (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "m_ = length(l_)") (("1" (REPLACES -1) NIL NIL) ("2" (INST -4 "1+m_" "l_" "n_") (("1" (ASSERT) (("1" (EXPAND "^" 3) (("1" (EXPAND "length" 3 1) (("1" (REPLACE -4 3 :|hide?| T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|length_null| FORMULA-DECL NIL |more_list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|subl_shr| FORMULA-DECL NIL |more_list_props| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|a_| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|l_| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|m_| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|subl_idemp| FORMULA-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|subl_over_len| FORMULA-DECL NIL |more_list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|m| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "upfrom(m)" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "{l: list[T] | length(l) >= m}" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|k| SKOLEM-CONST-DECL "int" |more_list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|l_| SKOLEM-CONST-DECL "{l: list[T] | length(l) >= m_}" |more_list_props| NIL) (|m_| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|n_| SKOLEM-CONST-DECL "upfrom(m_)" |more_list_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL)) (|cdr_subl_TCC1| 0 (|cdr_subl_TCC1-1| |nil| 3644927727 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|cdr_subl| SUBTYPE "more_list_props.^(more_list_props.l, (more_list_props.m, more_list_props.n))" "(list_adt[more_list_props.T].cons?)"))) (|cdr_subl_TCC2| 0 (|cdr_subl_TCC2-1| |nil| 3644927727 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|cdr_subl| SUBTYPE "more_list_props.l" "(list_adt[more_list_props.T].cons?)"))) (|cdr_subl_TCC3| 0 (|cdr_subl_TCC3-1| |nil| 3644927727 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cdr_subl| SUBTYPE "(number_fields.-)(more_list_props.n, 1)" "nat"))) (|cdr_subl| 0 (|cdr_subl-1| |nil| 3644927744 ("" (SKEEP) (("" (EXPAND "^" 2 1) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (LEMMA "subl_shr") (("2" (INST -1 "car(l)" "cdr(l)" "1+m" "n") (("2" (ASSERT) (("2" (REPLACES -1 :|dir| RL) (("2" (CASE "l = cons(car(l),cdr(l))") (("1" (ASSERT) NIL NIL) ("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subl_shr| FORMULA-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL)) (|member_nth_subl_TCC1| 0 (|member_nth_subl_TCC1-1| |nil| 3644930796 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|member_nth_subl| SUBTYPE "more_list_props.j" "below[length[T](l)]"))) (|member_nth_subl| 0 (|member_nth_subl-1| |nil| 3644927781 ("" (INDUCT "j") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "k") (("2" (FLATTEN) (("2" (SKEEP :|preds?| T) (("2" (EXPAND "member" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 3) (("2" (INST -4 "cdr(l)" "m" "n-1") (("1" (USE "cdr_subl") (("1" (ASSERT) NIL NIL) ("2" (CASE "n=m") (("1" (REPLACES -1) (("1" (CASE "m=k+1") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "m=k+1") (("1" (REPLACES -1) (("1" (EXPAND "^" 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "length" -1) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|l| SKOLEM-CONST-DECL "{l: list[T] | 1 + k < length(l)}" |more_list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|n| SKOLEM-CONST-DECL "upfrom(1 + k)" |more_list_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|cdr_subl| FORMULA-DECL NIL |more_list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|m| SKOLEM-CONST-DECL "upto(1 + k)" |more_list_props| NIL) (|k| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|nth_subl_prefix_TCC1| 0 (|nth_subl_prefix_TCC1-1| |nil| 3644927801 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nth_subl_prefix| SUBTYPE "more_list_props.j" "below[length[T](l ^ (m, n))]"))) (|nth_subl_prefix_TCC2| 0 (|nth_subl_prefix_TCC2-1| |nil| 3644927801 ("" (SKEEP :|preds?| T) (("" (USE "length_subl") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ((|length_subl| FORMULA-DECL NIL |more_list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|j| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "{n: nat | j < length(l ^ (m, n))}" |more_list_props| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|nth_subl_prefix| SUBTYPE "(number_fields.+)(more_list_props.m, more_list_props.j)" "below[length[T](l)]"))) (|nth_subl_prefix| 0 (|nth_subl_prefix-1| |nil| 3644927815 ("" (INDUCT "j") (("1" (SKEEP :|preds?| T) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 "k") (("2" (FLATTEN) (("2" (SKEEP :|preds?| T) (("2" (EXPAND "nth" 1) (("2" (INST -3 "cdr(l)" "m" "n-1") (("1" (USE "cdr_subl") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "^" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (CASE "n=1") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "n=0") (("1" (REPLACES -1) (("1" (CASE "m=0") (("1" (REPLACES -1) (("1" (EXPAND "^" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "NOT null?(l ^ (m, n))") (("1" (USE "cdr_subl") (("1" (ASSERT) (("1" (REPLACES -1 :|dir| RL) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "^" -1) (("2" (LIFT-IF -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP :|preds?| T) (("3" (USE "length_subl") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_subl| FORMULA-DECL NIL |more_list_props| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "{n: nat | j < length(l ^ (m, n))}" |more_list_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|n| SKOLEM-CONST-DECL "{n: nat | 1 + k < length(l ^ (m, n))}" |more_list_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|k| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|cdr_subl| FORMULA-DECL NIL |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|subl_incl| 0 (|subl_incl-1| |nil| 3644930849 ("" (SKEEP :|preds?| T) (("" (SKEEP :|preds?| T) (("" (USE "member_nth") (("" (ASSERT) (("" (SKEEP) (("" (USE "nth_subl_prefix") (("" (LEMMA "member_nth_subl") (("" (INST -1 "m+i" "l" "m_" "n_") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "i") (("2" (USE "length_subl") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "i") (("3" (USE "length_subl") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth_subl_prefix| FORMULA-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|i| SKOLEM-CONST-DECL "below(length(l ^ (m, n)))" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|n_| SKOLEM-CONST-DECL "upfrom(n)" |more_list_props| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length_subl| FORMULA-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member_nth_subl| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|take_TCC1| 0 (|take_TCC1-1| |nil| 3647949757 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|take| SUBTYPE "(number_fields.-)(more_list_props.n, 1)" "nat"))) (|take_TCC2| 0 (|take_TCC2-1| |nil| 3647949757 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|take| TERMINATION "more_list_props.take(more_list_props.l, (number_fields.-)(more_list_props.n, 1))" "NIL"))) (|take_TCC3| 0 (|take_TCC3-1| |nil| 3647949757 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|take| SUBTYPE "more_list_props.l" "(list_adt[more_list_props.T].cons?)"))) (|length_take| 0 (|length_take-1| |nil| 3647949758 ("" (INDUCT "n") (("1" (EXPAND "take" 1) (("1" (SKOLEM 1 ("l_")) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("n_")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("l_")) (("2" (EXPAND "take" 1) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "cdr(l_)") (("2" (EXPAND "length" 2 1) (("2" (REPLACE -1 2) (("2" (EXPAND "length" 2 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}" |real_defs| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|nth_take_TCC1| 0 (|nth_take_TCC1-1| |nil| 3647949757 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|nth_take| SUBTYPE "more_list_props.j" "below[length[T](l)]"))) (|nth_take| 0 (|nth_take-1| |nil| 3647949867 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("h" "t")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "nth" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "take" 1) (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "take" 2) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "i-1" "j-1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|i| SKOLEM-CONST-DECL "below(1 + length(cons(h, t)))" |more_list_props| NIL) (|t| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|h| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "{j: nat | j < i}" |more_list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|nth_take2_TCC1| 0 (|nth_take2_TCC1-1| |nil| 3647949757 ("" (SKEEP) (("" (TYPEPRED "j") (("" (USE "length_take") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|length_take| FORMULA-DECL NIL |more_list_props| NIL)) NIL (|nth_take2| SUBTYPE "more_list_props.j" "below[length[T](take(l, i))]"))) (|nth_take2| 0 (|nth_take2-1| |nil| 3647949887 ("" (INDUCT "i") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "i") (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "take" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -2 "l" "j") (("1" (TYPEPRED "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 1) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 2) (("2" (ASSERT) (("2" (INST -1 "cdr(l)" "j-1") (("2" (TYPEPRED "j") (("2" (EXPAND "length" -2 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (USE "length_take") (("3" (TYPEPRED "j") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length_take| FORMULA-DECL NIL |more_list_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|i| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "{j: nat | j < 1 + i AND j < length(l)}" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|take_null| 0 (|take_null-1| |nil| 3647949914 ("" (INDUCT "i") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "take" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|take_prop_1| 0 (|take_prop_1-1| |nil| 3647949930 ("" (SKEEP) (("" (TYPEPRED "i") (("" (MERGE-FNUMS *) (("" (CASE "FORALL(i: nat): i > length(l) IMPLIES take(l, i) = take(l, length(l))") (("1" (INST?) NIL NIL) ("2" (HIDE 2) (("2" (INDUCT "i") (("1" (TYPEPRED "length(l)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (CASE "j=length(l)") (("1" (REPLACE -1 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK)) (|take_prop_2| 0 (|take_prop_2-1| |nil| 3647949952 ("" (INDUCT " l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|member_take_1| 0 (|member_take_1-1| |nil| 3647949973 ("" (INDUCT "i") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "i_") (("2" (FLATTEN) (("2" (SKEEP*) (("2" (EXPAND "take" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (INST?) (("1" (INST -3 "j" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "member" -1) (("2" (CASE "j>length(l)") (("1" (USE "take_prop_1") (("1" (REPLACE -1 2 :|hide?| T) (("1" (EXPAND "take" 2) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "take" 3) (("2" (ASSERT) (("2" (CASE "j-1 = i_") (("1" (ASSERT) NIL NIL) ("2" (INST -2 "cdr(l)" "j-1" "x") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "above(1 + i_)" |more_list_props| NIL) (|i_| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|take_prop_1| FORMULA-DECL NIL |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|take| DEF-DECL "list[T]" |more_list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|suffix_rev_prefix| 0 (|suffix_rev_prefix-1| |nil| 3648839549 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("" (EXPAND "suffix?" 1) (("" (EXPAND "prefix?" 1) (("" (REWRITE "length_reverse") (("" (REWRITE "length_reverse") (("" (LIFT-IF) (("" (PROP) (("1" (INST -3 "reverse(cdr(reverse(x!1)))" "reverse(cdr(reverse(x!2)))") (("1" (REWRITE "reverse_reverse") (("1" (REWRITE "reverse_reverse") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (2 3 5)) (("1" (REWRITE "length_reverse") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[T]") (("1" (LEMMA "length_reverse[T]") (("1" (INST -1 "x!1") (("1" (REPLACES -1 :|dir| RL) (("1" (REPLACES -1 :|dir| RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "reverse(cdr(reverse(x!1)))" "reverse(cdr(reverse(x!2)))") (("2" (REWRITE "reverse_reverse") (("2" (REWRITE "reverse_reverse") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3 5)) (("2" (REWRITE "length_reverse") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[T]") (("2" (LEMMA "length_reverse[T]") (("2" (INST -1 "x!1") (("2" (REPLACES -1 :|dir| RL) (("2" (REPLACES -1 :|dir| RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|prefix_rev_suffix| 0 (|prefix_rev_suffix-1| |nil| 3648839572 ("" (SKEEP) (("" (LEMMA "suffix_rev_prefix") (("" (INST -1 "reverse(l1)" "reverse(l2)") (("" (REWRITE "reverse_reverse") (("" (REWRITE "reverse_reverse") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_rev_prefix| FORMULA-DECL NIL |more_list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL)) (|prefix_first| 0 (|prefix_first-1| |nil| 3648839592 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (SKEEP) (("" (EXPAND "prefix?" 1) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "prefix?" -3) (("1" (REWRITE "length_append") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("2" (HIDE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "append" -2) (("1" (ASSERT) (("1" (EXPAND "prefix?" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -2) (("2" (ASSERT) (("2" (EXPAND "prefix?" -2) (("2" (PROP) (("2" (INST -3 "cdr(x!1)") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (3 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|suffix_last| 0 (|suffix_last-1| |nil| 3648839614 ("" (SKEEP) (("" (REWRITE "suffix_rev_prefix") (("" (REWRITE "reverse_append") (("" (REWRITE "suffix_rev_prefix") (("" (USE "prefix_first") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_rev_prefix| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|prefix_first| FORMULA-DECL NIL |more_list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|reverse_append| FORMULA-DECL NIL |list_props| NIL)) NIL)) (|suffix_end| 0 (|suffix_end-1| |nil| 3655569010 ("" (SKEEP) (("" (LEMMA "suffix_last") (("" (INST -1 "L" "(:a:)" "l") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_last| FORMULA-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|prefix_app| 0 (|prefix_app-1| |nil| 3648839639 ("" (MEASURE-INDUCT+ "length(l1)" "l1") (("" (SKEEP) (("" (EXPAND "append" 1) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "prefix?" -1) (("1" (PROP) (("1" (INST -2 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (3 4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "prefix?" 1) (("2" (PROP) (("1" (EXPAND "length" -1) (("1" (REWRITE "length_append") (("1" (REWRITE "length_append") (("1" (USE "prefix_length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "cdr(x!1)") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|prefix_length| FORMULA-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|suffix_app| 0 (|suffix_app-1| |nil| 3648839660 ("" (SKEEP) (("" (REWRITE "suffix_rev_prefix") (("" (REWRITE "reverse_append") (("" (REWRITE "reverse_append") (("" (REWRITE "suffix_rev_prefix") (("" (REWRITE "prefix_app") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_rev_prefix| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|prefix_app| FORMULA-DECL NIL |more_list_props| NIL) (|reverse_append| FORMULA-DECL NIL |list_props| NIL)) NIL)) (|prefix_supl| 0 (|prefix_supl-1| |nil| 3648839682 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("" (EXPAND "prefix?" 1) (("" (EXPAND "append" 1) (("" (LIFT-IF) (("" (PROP) (("1" (SKEEP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -1 :|dir| RL) (("2" (EXPAND "length" -2 1) (("2" (REWRITE "length_append") (("2" (HIDE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!2") NIL NIL) ("3" (SKEEP) (("3" (REPLACE -1 :|dir| RL) (("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -3 "cdr(x!1)" "cdr(x!2)") (("4" (ASSERT) (("4" (PROP) (("1" (SKEEP) (("1" (REPLACE -2) (("1" (INST 1 "L") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (1 2)) (("1" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (DECOMPOSE-EQUALITY) NIL NIL)) NIL) ("6" (SKEEP) (("6" (INST -2 "cdr(x!1)" "cdr(x!2)") (("6" (ASSERT) (("6" (PROP) (("1" (INST?) (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|suffix_supl| 0 (|suffix_supl-1| |nil| 3648839703 ("" (SKEEP) (("" (REWRITE "suffix_rev_prefix") (("" (REWRITE "prefix_supl") (("" (PROP) (("1" (SKEEP) (("1" (INST 1 "reverse(L)") (("1" (LEMMA "reverse_append[T]") (("1" (INST -1 "reverse(l1)" "L") (("1" (REWRITE "reverse_reverse") (("1" (REPLACE -2) (("1" (REWRITE "reverse_reverse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST 1 "reverse(L)") (("2" (LEMMA "reverse_append[T]") (("2" (INST -1 "L" "l1") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_rev_prefix| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse_append| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|prefix_supl| FORMULA-DECL NIL |more_list_props| NIL)) NIL)) (|suffix_same_length| 0 (|suffix_same_length-1| |nil| 3658655439 ("" (SKEEP) (("" (USE "suffix_supl") (("" (ASSERT) (("" (SKOLEM -1 "l3") (("" (REPLACE -1 :|hide?| T :|dir| RL) (("" (USE "length_append[T]") (("" (REPLACE -1 :|hide?| T) (("" (GRIND) (("" (CASE "l3 =null") (("1" (REPLACE -1 :|hide?| T) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|suffix_of_null| 0 (|suffix_of_null-1| |nil| 3658654467 ("" (GRIND) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK)) (|prefix_of_null| 0 (|prefix_of_null-1| |nil| 3797007309 ("" (GRIND) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK)) (|suffix_of_cons| 0 (|suffix_of_cons-1| |nil| 3658607393 ("" (SKEEP) (("" (USE "suffix_supl") (("" (ASSERT) (("" (SKOLEM -1 "l3") (("" (CASE "l3 /= null") (("1" (CASE "l1 = cdr(append(l3,l2))") (("1" (USE "cdr_append") (("1" (REPLACE -1 :|hide?| T) (("1" (LEMMA "suffix_supl") (("1" (INST -1 "l2" "l1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -2 :|hide?| T) (("2" (ASSERT) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -1 :|hide?| T :|dir| RL) (("2" (USE "length_append[T]") (("2" (REPLACE -1 :|hide?| T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cdr_append| FORMULA-DECL NIL |more_list_props| NIL) (|l3| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|suffix_nth_TCC1| 0 (|suffix_nth_TCC1-1| |nil| 3658606359 ("" (SKEEP*) (("" (ASSERT) (("" (USE "suffix_length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|suffix_length| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|suffix_nth| SUBTYPE "(number_fields.+)((number_fields.-)(list_props[more_list_props.T].length(more_list_props.l1), list_props[more_list_props.T].length(more_list_props.l2)), more_list_props.i)" "below[length[T](l1)]"))) (|suffix_nth| 0 (|suffix_nth-1| |nil| 3658606633 ("" (INDUCT "l1") (("1" (SKEEP) (("1" (SKEEP) (("1" (CASE "l2=null") (("1" (REPLACE -1 :|hide?| T) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (USE "suffix_of_null") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 1 :|but| (("cons1_var" "x" "cons2_var" "xs"))) (("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "nth" 1 2) (("2" (LIFT-IF 1) (("2" (CASE "length(cons(x,cons2_var)) = length(l2)") (("1" (USE "suffix_same_length") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -1 :|hide?| T) (("1" (REPLACE -1 :|dir| RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :|dir| RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "l2") (("2" (SPLIT -1) (("1" (INST -1 "i") (("1" (EXPAND "length" 2 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (USE "suffix_of_cons") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|suffix_of_cons| FORMULA-DECL NIL |more_list_props| NIL) (|suffix_same_length| FORMULA-DECL NIL |more_list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|suffix_of_null| FORMULA-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|prefix_reflexive| 0 (|prefix_reflexive-1| |nil| 3655569568 ("" (SKEEP) (("" (USE "prefix_supl") (("" (ASSERT) (("" (HIDE 2) (("" (INST 1 "null") (("" (USE "append_null[T]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|suffix_reflexive| 0 (|suffix_reflexive-1| |nil| 3655574124 ("" (SKEEP) (("" (USE "suffix_supl") (("" (ASSERT) (("" (HIDE 2) (("" (INST 1 "null") (("" (USE "append_null_left") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append_null_left| FORMULA-DECL NIL |more_list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|suffix_member| 0 (|suffix_member-1| |nil| 3656147458 ("" (SKEEP) (("" (USE "suffix_supl") (("" (ASSERT) (("" (SKEEP -1) (("" (SKEEP) (("" (REPLACE -1 :|hide?| T :|dir| RL) (("" (USE "member_append_r") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|member_append_r| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|prefix_cdr_TCC1| 0 (|prefix_cdr_TCC1-1| |nil| 3655661298 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|prefix_cdr| SUBTYPE "more_list_props.l2" "(list_adt[more_list_props.T].cons?)"))) (|prefix_cdr| 0 (|prefix_cdr-1| |nil| 3655661305 ("" (SKEEP*) (("" (LEMMA "prefix_app") (("" (INST -1 "cdr(l2)" "(:car(l1):)" "cdr(l1)") (("" (ASSERT) (("" (HIDE 2) (("" (EXPAND "append" 1 1) (("" (EXPAND "append" 1 1) (("" (CASE "l1 = cons(car(l1), cdr(l1))") (("1" (REPLACE -1 :|hide?| T :|dir| RL) (("1" (CASE "car(l1)=car(l2)") (("1" (REPLACE -1 :|hide?| T) (("1" (CASE "l2 = cons(car(l2), cdr(l2))") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "prefix_supl") (("2" (ASSERT) (("2" (SKEEP) (("2" (EXPAND "append") (("2" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefix_app| FORMULA-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|prefix_supl| FORMULA-DECL NIL |more_list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|prefix_eq| 0 (|prefix_eq-1| |nil| 3656147641 ("" (SKEEP) (("" (USE "prefix_supl") (("" (ASSERT) (("" (SKEEP -1) (("" (REPLACE -1 :|hide?| T :|dir| RL) (("" (USE "length_append[T]") (("" (REPLACE -1 :|hide?| T) (("" (ASSERT) (("" (CASE "L=null") (("1" (REPLACE -1 :|hide?| T) (("1" (USE "append_null[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_null| FORMULA-DECL NIL |more_list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|suffix_first_elem_TCC1| 0 (|suffix_first_elem_TCC1-1| |nil| 3656332930 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|suffix_first_elem| SUBTYPE "(number_fields.-)(list_props[more_list_props.T].length(more_list_props.l1), list_props[more_list_props.T].length(more_list_props.l2))" "below[length[T](l1)]"))) (|suffix_first_elem| 0 (|suffix_first_elem-1| |nil| 3656666898 ("" (SKEEP) (("" (USE "suffix_supl") (("" (ASSERT) (("" (SKEEP) (("" (REPLACE -1 1 :|dir| RL) (("" (LEMMA "nth_append") (("" (INST -1 "L" "l2" "length(append(L, l2)) - length(l2)") (("1" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (USE "length_append[T]") (("1" (REPLACE -1 :|hide?| T) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[T]") (("2" (REPLACE -1 :|hide?| T) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[T]") (("2" (REPLACE -1 :|hide?| T) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (L SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "{l2 | NOT null?(l2)}" |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|rdc_TCC1| 0 (|rdc_TCC1-2| |nil| 3651336467 ("" (SKEEP) (("" (LEMMA "length_reverse[T]") (("" (INST?) (("" (TYPEPRED "l") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL (|rdc| SUBTYPE "list_props[more_list_props.T].reverse(more_list_props.l)" "(list_adt[more_list_props.T].cons?)")) (|rdc_TCC1-1| |nil| 3651335593 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|rdc| SUBTYPE "list_props[more_list_props.T].reverse(more_list_props.l)" "(list_adt[more_list_props.T].cons?)"))) (|rac_TCC1| 0 (|rac_TCC1-2| |nil| 3651336488 ("" (SKEEP) (("" (TYPEPRED "l") (("" (GRIND) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|rac| SUBTYPE "(number_fields.-)(list_props[more_list_props.T].length(more_list_props.l), 1)" "below[length[T](l)]")) (|rac_TCC1-1| |nil| 3651335593 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|rac| SUBTYPE "(number_fields.-)(list_props[more_list_props.T].length(more_list_props.l), 1)" "below[length[T](l)]"))) (|length_snoc| 0 (|length_snoc-1| |nil| 3793386649 ("" (SKEEP) (("" (EXPAND "snoc") (("" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ((|snoc| CONST-DECL "list[T]" |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL)) NIL)) (|rac_append_TCC1| 0 (|rac_append_TCC1-2| |nil| 3651336514 ("" (SKEEP) (("" (TYPEPRED "l2") (("" (EXPAND APPEND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL)) NIL (|rac_append| SUBTYPE "list_props[more_list_props.T].append(more_list_props.l1, more_list_props.l2)" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}")) (|rac_append_TCC1-1| |nil| 3651335593 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|rac_append| SUBTYPE "list_props[more_list_props.T].append(more_list_props.l1, more_list_props.l2)" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|rac_append| 0 (|rac_append-1| |nil| 3651335632 ("" (MEASURE-INDUCT+ "length(l1)" ("l1")) (("1" (EXPAND "rac") (("1" (SKEEP) (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "length" 2 1) (("1" (INST? -1) (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-2)) (("1" (TYPEPRED "l2") (("1" (LEMMA "length_append[T]") (("1" (INST? -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 4)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rac") (("2" (TYPEPRED "l2!1") (("2" (LEMMA "length_append[T]") (("2" (INST?) (("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "l2!1") (("3" (USE "length_append[T]") (("3" (HIDE-ALL-BUT (-1 -2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rac| CONST-DECL "T" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|rdc_append| 0 (|rdc_append-2| "" 3882155171 ("" (EXPAND "rdc") (("" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (SKEEP) (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "reverse" 2 2) (("1" (CASE "cons(car(x!1), null) = reverse(cons(car(x!1), null))") (("1" (REPLACES -1) (("1" (REWRITE "reverse_append" :DIR RL) (("1" (CASE "null?(cdr(x!1))") (("1" (EXPAND "append" 2 (2 3)) (("1" (ASSERT) (("1" (EXPAND "append" 2) (("1" (EXPAND "append" 2) (("1" (EXPAND "reverse" 2 2) (("1" (EXPAND "append" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "l2") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (USE "length_reverse[T]") (("1" (EXPAND "length" -1 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr(cons(car(reverse(l2)),
                                                                                   append(cdr(reverse(l2)), cons(car(x!1), null)))) = append(cdr(reverse(l2)), cons(car(x!1), null))") (("1" (REPLACES -1) (("1" (REWRITE "reverse_append") (("1" (EXPAND "reverse" 2 1) (("1" (EXPAND "reverse" 2 1) (("1" (EXPAND "append" 2 2) (("1" (EXPAND "append" 2) (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -1 "cons(car(x!1), null)") (("2" (INST -2 "append(cdr(x!1), l2)") (("1" (EXPAND "length" -2) (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1) (("1" (EXPAND "append" 3 1) (("1" (EXPAND "append" 3 1) (("1" (INST -1 "cdr(x!1)") (("1" (INST -1 "l2") (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l2") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (USE "length_append[T]") (("2" (USE "length_null[T]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l2!1") (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) (("2" (EXPAND "append") (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "l2!1") (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "append") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "reverse") (("1" (EXPAND "append") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse") (("2" (EXPAND "append" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "l2!1") (("4" (HIDE-ALL-BUT (1 2)) (("4" (EXPAND "reverse") (("4" (EXPAND "append") (("4" (LIFT-IF) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "l2!1") (("5" (HIDE-ALL-BUT (1 2)) (("5" (EXPAND "append") (("5" (LIFT-IF) (("5" (PROP) (("1" (EXPAND "reverse") (("1" (EXPAND "append") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse") (("2" (EXPAND "append" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|rdc_append-1| |nil| 3651336263 ("" (EXPAND "rdc") (("" (MEASURE-INDUCT+ "length(l1)" L1) (("1" (SKEEP) (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "reverse" 2 2) (("1" (CASE "cons(car(x!1), null) = reverse(cons(car(x!1), null))") (("1" (REPLACES -1) (("1" (REWRITE "reverse_append" :|dir| RL) (("1" (CASE "null?(cdr(x!1))") (("1" (EXPAND "append" 2 (2 3)) (("1" (ASSERT) (("1" (EXPAND "append" 2) (("1" (EXPAND "append" 2) (("1" (EXPAND "reverse" 2 2) (("1" (EXPAND "append" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (TYPEPRED "l2") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (USE "length_reverse[T]") (("1" (EXPAND "length" -1 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr(cons(car(reverse(l2)),
                                                                                   append(cdr(reverse(l2)), cons(car(x!1), null)))) = append(cdr(reverse(l2)), cons(car(x!1), null))") (("1" (REPLACES -1) (("1" (REWRITE "reverse_append") (("1" (EXPAND "reverse" 2 1) (("1" (EXPAND "reverse" 2 1) (("1" (EXPAND "append" 2 2) (("1" (EXPAND "append" 2) (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP -1 "cons(car(x!1), null)") (("2" (INST -2 "append(cdr(x!1), l2)") (("1" (EXPAND "length" -2) (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1) (("1" (EXPAND "append" 3 1) (("1" (EXPAND "append" 3 1) (("1" (INST -1 "cdr(x!1)") (("1" (INST -1 L2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l2") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (USE "length_append[T]") (("2" (USE "length_null[T]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l2!1") (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) (("2" (EXPAND "append") (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "l2!1") (("3" (HIDE-ALL-BUT (1 2)) (("3" (EXPAND "append") (("3" (LIFT-IF) (("3" (PROP) (("1" (EXPAND "reverse") (("1" (EXPAND "append") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse") (("2" (EXPAND "append" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "l2!1") (("4" (HIDE-ALL-BUT (1 2)) (("4" (EXPAND "reverse") (("4" (EXPAND "append") (("4" (LIFT-IF) (("4" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "l2!1") (("5" (HIDE-ALL-BUT (1 2)) (("5" (EXPAND "append") (("5" (LIFT-IF) (("5" (PROP) (("1" (EXPAND "reverse") (("1" (EXPAND "append") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse") (("2" (EXPAND "append" 2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|reverse_append| FORMULA-DECL NIL |list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_null| FORMULA-DECL NIL |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "{l2: list[T] | NOT null?(l2)}" |more_list_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| NIL)) NIL)) (|rdc_rac| 0 (|rdc_rac-1| |nil| 3651336361 ("" (SKEEP) (("" (EXPAND* "rdc" "rac") (("" (LEMMA "reverse_def[T]") (("" (INST -1 "l1" 0) (("" (ASSERT) (("" (PROP) (("1" (REPLACES -1 :|dir| RL) (("1" (EXPAND "nth" 1) (("1" (CASE "(: car(reverse(l1)) :) = reverse((: car(reverse(l1)) :))") (("1" (REPLACES -1) (("1" (REWRITE "reverse_append" :|dir| RL) (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (USE "expand_list[T]") (("1" (PROP) (("1" (TYPEPRED "l1") (("1" (HIDE 2) (("1" (USE "length_reverse[T]") (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 :|dir| RL) (("2" (REWRITE "reverse_reverse") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "l1") (("2" (HIDE -1 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|expand_list| FORMULA-DECL NIL |more_list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|reverse_append| FORMULA-DECL NIL |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|reverse_def| FORMULA-DECL NIL |more_list_props| NIL)) NIL)) (|snoc_def| 0 (|snoc_def-1| |nil| 3823796078 ("" (SKEEP) (("" (EXPAND "snoc") (("" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL) ((|snoc| CONST-DECL "list[T]" |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|rdc_rac| FORMULA-DECL NIL |more_list_props| NIL)) NIL)) (|cons_snoc_commute| 0 (|cons_snoc_commute-1| |nil| 3823796136 ("" (SKEEP) (("" (EXPAND "snoc") (("" (EXPAND "append" 1 2) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|snoc| CONST-DECL "list[T]" |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL)) NIL)) (|car_rdc_TCC1| 0 (|car_rdc_TCC1-1| |nil| 3823795939 ("" (SKEEP :|preds?| T) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|car_rdc| SUBTYPE "more_list_props.l" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|car_rdc_TCC2| 0 (|car_rdc_TCC2-2| |nil| 3823796244 ("" (SKEEP :|preds?| T) (("" (EXPAND "rdc") (("" (REWRITE "length_reverse" :|dir| RL) (("" (EXPAND "length" -1) (("" (ASSERT) (("" (ASSERT) (("" (LIFT-IF -1) (("" (ASSERT) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (REWRITE "length_reverse" :|dir| RL) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rdc| CONST-DECL "list[T]" |more_list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL)) NIL (|car_rdc| SUBTYPE "more_list_props.rdc(more_list_props.l)" "(list_adt[more_list_props.T].cons?)")) (|car_rdc_TCC2-1| |nil| 3823795939 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|car_rdc| SUBTYPE "more_list_props.rdc(more_list_props.l)" "(list_adt[more_list_props.T].cons?)"))) (|car_rdc_TCC3| 0 (|car_rdc_TCC3-1| |nil| 3823795939 ("" (SKEEP :|preds?| T) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|car_rdc| SUBTYPE "more_list_props.l" "(list_adt[more_list_props.T].cons?)"))) (|car_rdc| 0 (|car_rdc-1| |nil| 3823796351 ("" (SKEEP :|preds?| T) (("" (EXPAND "rdc") (("" (LEMMA "reverse_def") (("" (INST -1 "cdr(reverse(l))" "0") (("" (COPY -2) (("" (REWRITE "length_reverse" -1 :|dir| RL) (("" (EXPAND "length" -1) (("" (ASSERT) (("" (LIFT-IF -1) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (MOVE-TERMS -1 L 1) (("2" (ASSERT) (("2" (CASE "nth(cdr(reverse(l)), length(cdr(reverse(l))) - 1) = nth(reverse(l), length(reverse(l)) - 1)") (("1" (LEMMA "reverse_def") (("1" (INST -1 "l" "length(l) - 1") (("1" (ASSERT) (("1" (EXPAND "nth" -1 2) (("1" (EXPAND "nth" -4 1) (("1" (ASSERT) (("1" (REWRITE "length_reverse" -1 :|dir| RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (ASSERT) (("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rdc| CONST-DECL "list[T]" |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|reverse_def| FORMULA-DECL NIL |more_list_props| NIL)) NIL)) (|nth_rdc_TCC1| 0 (|nth_rdc_TCC1-1| |nil| 3823795939 ("" (SKEEP) (("" (REWRITE "rdc_rac" -1 :|dir| RL) (("" (REWRITE "length_append" -1) (("" (REWRITE "rdc_rac") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rdc_rac| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rac| CONST-DECL "T" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|nth_rdc| SUBTYPE "more_list_props.i" "below[length[T](rdc(l1))]"))) (|nth_rdc_TCC2| 0 (|nth_rdc_TCC2-1| |nil| 3823795939 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|nth_rdc| SUBTYPE "more_list_props.i" "below[length[T](l1)]"))) (|nth_rdc| 0 (|nth_rdc-1| |nil| 3823796443 ("" (SKEEP) (("" (REWRITE "rdc_rac" 1 :|dir| RL) (("" (LEMMA "nth_append[T]") (("" (INST?) (("" (ASSERT) (("" (REWRITE "length_append" -2) (("" (ASSERT) (("" (REPLACE -1) (("" (REWRITE "rdc_rac" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rdc_rac| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL)) NIL)) (|length_rdc_TCC1| 0 (|length_rdc_TCC1-1| |nil| 3823795939 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|length_rdc| SUBTYPE "more_list_props.l1" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|length_rdc| 0 (|length_rdc-1| |nil| 3823796497 ("" (SKEEP) (("" (LEMMA "rdc_rac") (("" (INST?) (("" (BOTH-SIDES-F -1 "length") (("" (REWRITE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rdc_rac| FORMULA-DECL NIL |more_list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL)) (|length_appendn| 0 (|length_appendn-2| |nil| 3652036152 ("" (SKEEP 1 :|but| ("n")) (("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "^" 1) (("2" (USE "length_append[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL)) NIL) (|length_appendn-1| |nil| 3652036141 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|nth_appendn_TCC1| 0 (|nth_appendn_TCC1-1| |nil| 3652037189 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|nth_appendn| SUBTYPE "list_props[more_list_props.T].length(more_list_props.l)" "posnat"))) (|nth_appendn| 0 (|nth_appendn-1| |nil| 3652037195 ("" (SKEEP) (("" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1) (("2" (USE "nth_append") (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (USE "rem_mod2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "i") (("2" (INST -2 "i - length(l)") (("1" (REPLACES -2) (("1" (CASE "rem(length(l)) (i - length(l)) = rem (length(l)) (i)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "rem_diff") (("2" (INST -1 "length(l)" "0" "i" "i" "length(l)") (("2" (ASSERT) (("2" (USE "rem_zero") (("2" (USE "rem_self") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "^" -1) (("2" (USE "length_append[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}" |modulo_arithmetic| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|l| SKOLEM-CONST-DECL "{l: list[T] | NOT null?(l)}" |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (^ DEF-DECL "list[T]" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|rem_mod2| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|rem_zero| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem_self| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|rem_diff| FORMULA-DECL NIL |modulo_arithmetic| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(l ^ (1 + j)))" |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|nth_extensionality| 0 (|nth_extensionality-1| |nil| 3653730677 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("x" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (APPLY-EXTENSIONALITY) (("1" (INST -3 "0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (INST?) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (EXPAND "length" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 1) (("2" (CASE "n=0") (("1" (REPLACES -1 :|hide?| T) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "n+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "below(length(l))" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|x| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) NIL)) (|last_cons_TCC1| 0 (|last_cons_TCC1-1| |nil| 3660317172 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|last_cons| SUBTYPE "list_adt[more_list_props.T].cons(more_list_props.a, more_list_props.l)" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|last_cons| 0 (|last_cons-1| |nil| 3656152258 ("" (GRIND) NIL NIL) ((T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|last| CONST-DECL "T" |more_list_props| NIL)) SHOSTAK)) (|last_append| 0 (|last_append-1| |nil| 3656153040 ("" (SKEEP 1 :|but| ("l1")) (("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKEEP 1 :|but| (("cons1_var" "x") ("cons2_var" "xs"))) (("2" (EXPAND "append" 1) (("2" (USE "last_cons") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED "l2") (("3" (USE "null_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|last| CONST-DECL "T" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "{l2 | NOT null?(l2)}" |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|last_cons| FORMULA-DECL NIL |more_list_props| NIL) (|null_append| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|last_cdr_TCC1| 0 (|last_cdr_TCC1-1| |nil| 3791215457 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|last_cdr| SUBTYPE "list_adt[more_list_props.T].cdr(more_list_props.l1)" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|last_cdr_TCC2| 0 (|last_cdr_TCC2-1| |nil| 3791215457 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|last_cdr| SUBTYPE "more_list_props.l1" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|last_cdr| 0 (|last_cdr-1| |nil| 3791215461 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|last| CONST-DECL "T" |more_list_props| NIL)) SHOSTAK)) (|null_reverse| 0 (|null_reverse-1| |nil| 3656152416 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((|append| DEF-DECL "list[T]" |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|last_reverse_TCC1| 0 (|last_reverse_TCC1-1| |nil| 3655660650 ("" (SKEEP :|preds?| T) (("" (USE "null_reverse") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|null_reverse| FORMULA-DECL NIL |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|last_reverse| SUBTYPE "list_props[more_list_props.T].reverse(more_list_props.l)" "{l: list_adt[more_list_props.T].list | (booleans.NOT)(list_adt[more_list_props.T].null?(l))}"))) (|last_reverse| 0 (|last_reverse-1| |nil| 3656152467 ("" (SKEEP :|preds?| T) (("" (USE "expand_list") (("" (ASSERT) (("" (REPLACE -1 :|hide?| T) (("" (EXPAND "reverse" 2) (("" (CASE "last(append(reverse(cdr(l)), cons(car(l), null))) = last(cons(car(l),null))") (("1" (REPLACE -1 :|hide?| T) (("1" (GRIND) NIL NIL)) NIL) ("2" (USE "last_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expand_list| FORMULA-DECL NIL |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|last| CONST-DECL "T" |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|last_append| FORMULA-DECL NIL |more_list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL)) SHOSTAK)) (|car_reverse| 0 (|car_reverse-1| |nil| 3656153196 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP 1 :|but| (("cons1_var" "x") ("cons2_var" "xs"))) (("3" (CASE "null?(xs)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "reverse" 2) (("2" (EXPAND "append" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (USE "null_reverse") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (USE "last_cons") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (USE "null_reverse") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|null_reverse| FORMULA-DECL NIL |more_list_props| NIL) (|last_cons| FORMULA-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|last| CONST-DECL "T" |more_list_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|member_reverse| 0 (|member_reverse-1| |nil| 3656153365 ("" (SKEEP 1 :|but| ("l")) (("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP 1 :|but| (("cons1_var" "x") ("cons2_var" "xs"))) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (EXPAND "member" -1) (("1" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (HIDE -1) (("1" (EXPAND "reverse") (("1" (USE "member_append_r") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "reverse" 1) (("2" (USE "member_append_l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -2) (("2" (EXPAND "reverse" -1) (("2" (USE "member_append_fi") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|member_append_r| FORMULA-DECL NIL |more_list_props| NIL) (|member_append_l| FORMULA-DECL NIL |more_list_props| NIL) (|member_append_fi| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|cut_ends_equal_TCC1| 0 (|cut_ends_equal_TCC1-1| |nil| 3823709140 ("" (SKEEP :|preds?| T) (("" (REWRITE "length_reverse" -1 :|dir| RL) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|cut_ends_equal| SUBTYPE "list_props[more_list_props.T].reverse(more_list_props.l)" "(list_adt[more_list_props.T].cons?)"))) (|cut_ends_equal_TCC2| 0 (|cut_ends_equal_TCC2-2| |nil| 3823796581 ("" (SKEEP :|preds?| T) (("" (REWRITE "length_reverse" -1 :|dir| RL) (("" (EXPAND "length") (("" (ASSERT) (("" (LIFT-IF -1) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "length_reverse" -1 :|dir| RL) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cut_ends_equal| SUBTYPE "list_props[more_list_props.T].reverse(list_adt[more_list_props.T].cdr(list_props[more_list_props.T].reverse(more_list_props.l)))" "(list_adt[more_list_props.T].cons?)")) (|cut_ends_equal_TCC2-1| |nil| 3823709140 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cut_ends_equal| SUBTYPE "list_props[more_list_props.T].reverse(list_adt[more_list_props.T].cdr(list_props[more_list_props.T].reverse(more_list_props.l)))" "(list_adt[more_list_props.T].cons?)"))) (|cut_ends_equal_TCC3| 0 (|cut_ends_equal_TCC3-1| |nil| 3823796622 ("" (SKEEP :|preds?| T) (("" (EXPAND "length") (("" (LIFT-IF -1) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "length_reverse" -1 :|dir| RL) (("2" (ASSERT) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|cut_ends_equal| SUBTYPE "list_props[more_list_props.T].reverse(list_adt[more_list_props.T].cdr(more_list_props.l))" "(list_adt[more_list_props.T].cons?)")) (|cut_ends_equal_TCC4-1| |nil| 3823709140 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cut_ends_equal| SUBTYPE "list_props[more_list_props.T].reverse(list_adt[more_list_props.T].cdr(more_list_props.l))" "(list_adt[more_list_props.T].cons?)"))) (|cut_ends_equal| 0 (|cut_ends_equal-2| |nil| 3823790816 ("" (INDUCT "l") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (CASE "null?(cons2_var)") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "null?(cdr(cons2_var))") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "reverse" 3 2) (("2" (REWRITE "cdr_append " 3) (("1" (REWRITE "reverse_append") (("1" (EXPAND "reverse" 3 1) (("1" (EXPAND "reverse" 3 1) (("1" (REWRITE "append_null_left") (("1" (EXPAND "append " 3) (("1" (REWRITE "append_null_left") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "length_reverse[T]") (("2" (INST -1 "cons2_var") (("2" (ASSERT) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (EXPAND "length" -1) (("4" (LIFT-IF -1) (("4" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "length_reverse" -1 :|dir| RL) (("2" (ASSERT) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP :|preds?| T) (("5" (EXPAND "length") (("5" (LIFT-IF -1) (("5" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP :|preds?| T) (("6" (REWRITE "length_reverse" -1 :|dir| RL) (("6" (EXPAND "length") (("6" (ASSERT) (("6" (LIFT-IF -1) (("6" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "length_reverse" -1 :|dir| RL) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP :|preds?| T) (("7" (REWRITE "length_reverse" -1 :|dir| RL) (("7" (EXPAND "length") (("7" (LIFT-IF -1) (("7" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cdr_append| FORMULA-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|append_null_left| FORMULA-DECL NIL |more_list_props| NIL) (|reverse_append| FORMULA-DECL NIL |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length_null| FORMULA-DECL NIL |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) NIL) (|cut_ends_equal-1| |nil| 3823790768 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|nnprefixes_same_head_TCC1| 0 (|nnprefixes_same_head_TCC1-1| |nil| 3645179212 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|prefixes| CONST-DECL "bool" |more_list_props| NIL)) NIL (|nnprefixes_same_head| SUBTYPE "more_list_props.l2" "(list_adt[more_list_props.T].cons?)"))) (|nnprefixes_same_head| 0 (|nnprefixes_same_head-1| |nil| 3645179230 ("" (SKEEP) (("" (TYPEPRED "l2") (("" (GRIND) (("" (CASE "l1 = cons(car(l1), cdr(l1))") (("1" (REPLACES -1) (("1" (GRIND) (("1" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL) ("2" (GRIND) (("2" (USE "list_cons_eta[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefixes| CONST-DECL "bool" |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL)) NIL)) (|no_repetitions_append| 0 (|no_repetitions_append-2| |nil| 3656333872 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("v" "vs")) (("2" (FLATTEN) (("2" (SKEEP 1) (("2" (INST -1 "l2") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -5) (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (EXPAND "no_repetitions?" 1) (("1" (SKEEP :|preds?| T) (("1" (SPLIT -7) (("1" (CASE "i=0") (("1" (REPLACE -1 :|hide?| T) (("1" (EXPAND "nth" -7 1) (("1" (EXPAND "nth" -7 1) (("1" (ASSERT) (("1" (USE "nth_append[T]") (("1" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (EXPAND "no_repetitions?" -6) (("1" (INST -6 "0" "j") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "nth_member[T]") (("2" (INST -1 "l2" "v" "j-1-length(vs)") (("1" (ASSERT) (("1" (INST -8 "v") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (EXPAND "length" -1) (("2" (USE "length_append[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j=0") (("1" (REPLACE -1 :|hide?| T) (("1" (HIDE 2) (("1" (EXPAND "nth" -7) (("1" (ASSERT) (("1" (USE "nth_append[T]") (("1" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (EXPAND "no_repetitions?" -6) (("1" (INST -6 "0" "i") (("1" (ASSERT) (("1" (EXPAND "nth" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "nth_member[T]") (("2" (INST -1 "l2" "v" "i-1-length(vs)") (("1" (ASSERT) (("1" (INST -8 "v") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (EXPAND "length" -1) (("2" (USE "length_append[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "no_repetitions?" -1) (("2" (INST -1 "i-1" "j-1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3)) (("2" (EXPAND "no_repetitions?") (("2" (SKEEP) (("2" (INST -2 "i!1+1" "j!1+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-5 1)) (("3" (SKEEP) (("3" (INST -3 "n") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (EXPAND "no_repetitions?") (("1" (SKEEP 1 :|preds?| T) (("1" (INST -4 "i" "j") (("1" (ASSERT) (("1" (USE "nth_append[T]") (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -1 :|hide?| T) (("1" (USE "nth_append[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[T]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "length_append[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP 1) (("2" (INST -5 "n") (("2" (EXPAND "member" -1) (("2" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (ASSERT) (("1" (EXPAND "no_repetitions?" -4) (("1" (USE "member_nth[T]") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST -5 "0" "i+length(cons(v,vs)) ") (("1" (SPLIT -5) (("1" (EXPAND "nth" -1 1) (("1" (EXPAND "append" 1 1) (("1" (USE "nth_append[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "length_append[T]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "length_append[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "no_repetitions?") (("2" (SKEEP) (("2" (INST -2 "i+1" "j+1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|i!1| SKOLEM-CONST-DECL "below(length(vs))" |more_list_props| NIL) (|j!1| SKOLEM-CONST-DECL "below(length(vs))" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth_member| FORMULA-DECL NIL |more_list_props| NIL) (|vs| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|v| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "below(length(cons(v, append(vs, l2))))" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(cons(v, append(vs, l2))))" |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(append(vs, l2)))" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "below(length(append(vs, l2)))" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "below(length(cons(v, vs)))" |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(cons(v, vs)))" |more_list_props| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(l2))" |more_list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL) (|no_repetitions_append-1| |nil| 3656333838 ("" (INDUCT "l1") (("1" (GRIND) NIL) ("2" (SKOLEM 1 ("v" "vs")) (("2" (FLATTEN) (("2" (SKEEP 1) (("2" (INST -1 "l2") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -5) (("1" (ASSERT) (("1" (EXPAND "append" 1) (("1" (EXPAND "no_repetitions?" 1) (("1" (SKEEP :|preds?| T) (("1" (SPLIT -7) (("1" (CASE "i=0") (("1" (REPLACE -1 :|hide?| T) (("1" (EXPAND "nth" -7 1) (("1" (EXPAND "nth" -7 1) (("1" (ASSERT) (("1" (USE "nth_append[nat]") (("1" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (EXPAND "no_repetitions?" -6) (("1" (INST -6 "0" "j") (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL))))))) ("2" (FLATTEN) (("2" (LEMMA "nth_member[nat]") (("2" (INST -1 "l2" "v" "j-1-length(vs)") (("1" (ASSERT) (("1" (INST -8 "v") (("1" (ASSERT) (("1" (GRIND) NIL))))))) ("2" (GRIND) NIL))))))))))))) ("2" (HIDE-ALL-BUT (-3 1)) (("2" (EXPAND "length" -1) (("2" (USE "length_append[nat]") (("2" (ASSERT) NIL))))))))))))))))))) ("2" (CASE "j=0") (("1" (REPLACE -1 :|hide?| T) (("1" (HIDE 2) (("1" (EXPAND "nth" -7) (("1" (ASSERT) (("1" (USE "nth_append[nat]") (("1" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (EXPAND "no_repetitions?" -6) (("1" (INST -6 "0" "i") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "nth" -6) (("1" (ASSERT) NIL))))))) ("2" (GRIND) NIL) ("3" (GRIND) NIL))))))) ("2" (FLATTEN) (("2" (LEMMA "nth_member[nat]") (("2" (INST -1 "l2" "v" "i-1-length(vs)") (("1" (ASSERT) (("1" (INST -8 "v") (("1" (ASSERT) (("1" (GRIND) NIL))))))) ("2" (GRIND) NIL))))))))))))) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (EXPAND "length" -1) (("2" (USE "length_append[nat]") (("2" (ASSERT) NIL))))))))))))))))))) ("2" (EXPAND "no_repetitions?" -1) (("2" (INST -1 "i-1" "j-1") (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (1 -3)) (("2" (EXPAND "no_repetitions?") (("2" (SKEEP) (("2" (INST -2 "i!1+1" "j!1+1") (("1" (GRIND) NIL) ("2" (GRIND) NIL) ("3" (GRIND) NIL))))))))) ("3" (HIDE-ALL-BUT (-5 1)) (("3" (SKEEP) (("3" (INST -3 "n") (("3" (GRIND) NIL))))))))))))))))))))) ("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (EXPAND "no_repetitions?") (("1" (SKEEP 1 :|preds?| T) (("1" (INST -4 "i" "j") (("1" (ASSERT) (("1" (USE "nth_append[nat]") (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACE -1 :|hide?| T) (("1" (USE "nth_append[nat]") (("1" (ASSERT) NIL))))))))))))) ("2" (USE "length_append[nat]") (("2" (ASSERT) NIL))) ("3" (USE "length_append[nat]") (("3" (ASSERT) NIL))))))))))) ("2" (SKEEP 1) (("2" (INST -5 "n") (("2" (EXPAND "member" -1) (("2" (SPLIT -1) (("1" (REPLACE -1 :|hide?| T) (("1" (ASSERT) (("1" (EXPAND "no_repetitions?" -4) (("1" (USE "member_nth[nat]") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST -5 "0" "i+length(cons(v,vs)) ") (("1" (SPLIT -5) (("1" (EXPAND "nth" -1 1) (("1" (EXPAND "append" 1 1) (("1" (USE "nth_append[nat]") (("1" (ASSERT) NIL))))))) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL))))) ("2" (USE "length_append[nat]") (("2" (ASSERT) NIL))) ("3" (USE "length_append[nat]") (("3" (ASSERT) NIL))))))))))))))))) ("2" (ASSERT) NIL))))))))))))))) ("2" (HIDE 2) (("2" (EXPAND "no_repetitions?") (("2" (SKEEP) (("2" (INST -2 "i+1" "j+1") (("1" (ASSERT) (("1" (GRIND) NIL))) ("2" (GRIND) NIL) ("3" (GRIND) NIL)))))))))))))))))))))))))) NIL) NIL NIL)) (|idx_TCC1| 0 (|idx_TCC1-1| |nil| 3656332930 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|idx| SUBTYPE "more_list_props.l" "(list_adt[more_list_props.T].cons?)"))) (|idx_TCC2| 0 (|idx_TCC2-1| |nil| 3656332930 ("" (SKEEP) (("" (EXPAND "nth" 1) (("" (ASSERT) (("" (TYPEPRED "a") (("" (EXPAND "length" 1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|idx| SUBTYPE "0" "{i: naturalnumbers.below(list_props[more_list_props.T].length(more_list_props.l)) | list_props[more_list_props.T].nth(more_list_props.l, i) = more_list_props.a}"))) (|idx_TCC3| 0 (|idx_TCC3-1| |nil| 3656332930 ("" (SKEEP) (("" (TYPEPRED "a") (("" (EXPAND "member" -1) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|idx| SUBTYPE "more_list_props.a" "{a: more_list_props.T | list_props[more_list_props.T].member(a, list_adt[more_list_props.T].cdr(more_list_props.l))}"))) (|idx_TCC4| 0 (|idx_TCC4-1| |nil| 3656332930 ("" (GRIND) (("" (EXPAND "length") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|idx| TERMINATION "more_list_props.idx(list_adt[more_list_props.T].cdr(more_list_props.l), more_list_props.a)" "NIL"))) (|idx_TCC5| 0 (|idx_TCC5-1| |nil| 3656332930 ("" (SKEEP) (("" (TYPEPRED "v(cdr[T](l), a)") (("1" (SPLIT 2) (("1" (TYPEPRED "a") (("1" (EXPAND "member" -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "a") (("2" (EXPAND "member" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "a") (("3" (EXPAND "member" -1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|idx| SUBTYPE "(number_fields.+)(1, more_list_props.idx(list_adt[more_list_props.T].cdr(more_list_props.l), more_list_props.a))" "{i: naturalnumbers.below(list_props[more_list_props.T].length(more_list_props.l)) | list_props[more_list_props.T].nth(more_list_props.l, i) = more_list_props.a}"))) (|idx_nth_no_rep_TCC1| 0 (|idx_nth_no_rep_TCC1-2| |nil| 3656667178 ("" (SKEEP) (("" (USE "nth_member") NIL NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth_member| FORMULA-DECL NIL |more_list_props| NIL)) NIL (|idx_nth_no_rep| SUBTYPE "list_props[more_list_props.T].nth(more_list_props.l, more_list_props.i)" "{a: more_list_props.T | list_props[more_list_props.T].member(a, more_list_props.l)}")) (|idx_nth_no_rep_TCC1-1| |nil| 3656665787 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|idx_nth_no_rep| SUBTYPE "list_props[more_list_props.T].nth(more_list_props.l, more_list_props.i)" "{a: more_list_props.T | list_props[more_list_props.T].member(a, more_list_props.l)}"))) (|idx_nth_no_rep| 0 (|idx_nth_no_rep-1| |nil| 3656665791 ("" (SKEEP) (("" (TYPEPRED "idx(l, nth(l, i))") (("" (TYPEPRED "l") (("" (EXPAND "no_repetitions?") (("" (INST?) (("" (INST -1 "idx(l,nth(l,i))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (|idx| DEF-DECL "{i: below(length(l)) | nth(l, i) = a}" |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|idx_inj| 0 (|idx_inj-1| |nil| 3656665980 ("" (SKEEP :|preds?| T) (("" (EXPAND "no_repetitions?") (("" (INST -1 "idx(l,a)" "idx(l,b)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (|idx| DEF-DECL "{i: below(length(l)) | nth(l, i) = a}" |more_list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|filtered_from_TCC1| 0 (|filtered_from_TCC1-1| |nil| 3660317172 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|filtered_from| SUBTYPE "more_list_props.i" "below[length[T](l2)]"))) (|filtered_from_TCC2| 0 (|filtered_from_TCC2-1| |nil| 3660317172 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) NIL (|filtered_from| SUBTYPE "list_props[nat].nth(more_list_props.idxs, more_list_props.i)" "below[length[T](l1)]"))) (|filter_idxs_TCC1| 0 (|filter_idxs_TCC1-1| |nil| 3656701697 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|filtered_from| CONST-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|filter_idxs| SUBTYPE "list_adt[more_list_props.T].null" "(more_list_props.filtered_from(more_list_props.l, more_list_props.idxs))"))) (|filter_idxs_TCC2| 0 (|filter_idxs_TCC2-2| |nil| 3656701757 ("" (SKEEP*) (("" (TYPEPRED "idxs") (("" (INST -2 "0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|idxs| SKOLEM-CONST-DECL "{idxs: list[nat] |
   FORALL (i: below(length(idxs))): nth(idxs, i) < length(l)}" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|filter_idxs| SUBTYPE "more_list_props.i" "below[length[T](l)]")) (|filter_idxs_TCC2-1| |nil| 3656701697 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|filter_idxs| SUBTYPE "more_list_props.i" "below[length[T](l)]"))) (|filter_idxs_TCC3| 0 (|filter_idxs_TCC3-1| |nil| 3656701697 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|filter_idxs| SUBTYPE "more_list_props.idxs" "(list_adt[nat].cons?)"))) (|filter_idxs_TCC4| 0 (|filter_idxs_TCC4-2| "" 3744486179 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "idxs") (("" (INST -2 "i!1+1") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "i!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(cdr(idxs)))" |more_list_props| NIL) (|idxs| SKOLEM-CONST-DECL "{idxs: list[nat] |
   FORALL (i: below(length(idxs))): nth(idxs, i) < length(l)}" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) SHOSTAK (|filter_idxs| SUBTYPE "list_adt[nat].cdr(more_list_props.idxs)" "{idxs: list_adt[nat].list | FORALL (i: naturalnumbers.below(list_props[nat].length(idxs))): reals.<(list_props[nat].nth(idxs, i), list_props[more_list_props.T].length(more_list_props.l))}")) (|filter_idxs_TCC4-1| |nil| 3656701697 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "idxs") (("" (INST -2 "i_1+1") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "i_1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|filter_idxs| SUBTYPE "list_adt[nat].cdr(more_list_props.idxs)" "{idxs: list_adt[nat].list | FORALL (i: naturalnumbers.below(list_props[nat].length(idxs))): reals.<(list_props[nat].nth(idxs, i), list_props[more_list_props.T].length(more_list_props.l))}"))) (|filter_idxs_TCC5| 0 (|filter_idxs_TCC5-1| |nil| 3656701697 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|filter_idxs| TERMINATION "more_list_props.filter_idxs(more_list_props.l, list_adt[nat].cdr(more_list_props.idxs))" "NIL"))) (|filter_idxs_TCC6| 0 (|filter_idxs_TCC6-2| |nil| 3656701874 ("" (SKEEP*) (("" (EXPAND "filtered_from") (("" (TYPEPRED "v(l, cdr[nat](idxs))") (("1" (EXPAND "filtered_from") (("1" (FLATTEN) (("1" (EXPAND "length" 1 1) (("1" (REPLACE -1 1) (("1" (EXPAND "length" 1 2) (("1" (ASSERT) (("1" (SKEEP) (("1" (CASE "i_1 =0") (("1" (REPLACE -1 :|hide?| T) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "i_1-1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "i_1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED "idxs") (("3" (INST -2 "i!1+1") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "i!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|filtered_from| CONST-DECL "bool" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(cdr[nat](idxs)))" |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i_1| SKOLEM-CONST-DECL "below(length(idxs))" |more_list_props| NIL) (|idxs| SKOLEM-CONST-DECL "{idxs: list[nat] |
   FORALL (i: below(length(idxs))): nth(idxs, i) < length(l)}" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|filter_idxs| SUBTYPE "list_adt[more_list_props.T].cons(list_props[more_list_props.T].nth(more_list_props.l, more_list_props.i), more_list_props.filter_idxs(more_list_props.l, list_adt[nat].cdr(more_list_props.idxs)))" "(more_list_props.filtered_from(more_list_props.l, more_list_props.idxs))")) (|filter_idxs_TCC6-1| |nil| 3656701697 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|filter_idxs| SUBTYPE "list_adt[more_list_props.T].cons(list_props[more_list_props.T].nth(more_list_props.l, more_list_props.i), more_list_props.filter_idxs(more_list_props.l, list_adt[nat].cdr(more_list_props.idxs)))" "(more_list_props.filtered_from(more_list_props.l, more_list_props.idxs))"))) (|no_rep_filter| 0 (|no_rep_filter-1| |nil| 3656667775 ("" (SKEEP*) (("" (EXPAND "no_repetitions?") (("" (SKEEP 1) (("" (TYPEPRED "l2") (("" (EXPAND "filtered_from") (("" (FLATTEN) (("" (INST-CP -2 "i") (("1" (INST -2 "j") (("1" (REPLACE -2 -5 :|hide?| T) (("1" (REPLACE -2 -4 :|hide?| T) (("1" (TYPEPRED "l1") (("1" (EXPAND "no_repetitions?" -1) (("1" (INST -1 "nth(idxs,i)" "nth(idxs,j)") (("1" (ASSERT) (("1" (EXPAND "/=") (("1" (INST -3 "i" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|filtered_from| CONST-DECL "bool" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "below(length(l2))" |more_list_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|l1| SKOLEM-CONST-DECL "(no_repetitions?)" |more_list_props| NIL) (|idxs| SKOLEM-CONST-DECL "{idxs: list[nat] |
   FORALL (i: below(length(idxs))): nth(idxs, i) < length(l1)}" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "(filtered_from(l1, idxs))" |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(l2))" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|update_list_TCC1| 0 (|update_list_TCC1-1| |nil| 3657975670 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|update_list| SUBTYPE "more_list_props.l" "(list_adt[more_list_props.T].cons?)"))) (|update_list_TCC2| 0 (|update_list_TCC2-1| |nil| 3657975670 ("" (SKEEP) (("" (SPLIT 1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 1) (("1" (GRIND) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL)) NIL (|update_list| SUBTYPE "list_adt[more_list_props.T].cons(more_list_props.x, list_adt[more_list_props.T].cdr(more_list_props.l))" "{r: list_adt[more_list_props.T].list | booleans.AND(list_props[more_list_props.T].length(more_list_props.l) = list_props[more_list_props.T].length(r), FORALL (j: naturalnumbers.below(list_props[more_list_props.T].length(more_list_props.l))): list_props[more_list_props.T].nth(r, j) = IF more_list_props.i = j THEN more_list_props.x ELSE list_props[more_list_props.T].nth(more_list_props.l, j) ENDIF)}"))) (|update_list_TCC3| 0 (|update_list_TCC3-1| |nil| 3657975670 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|update_list| SUBTYPE "more_list_props.l" "(list_adt[more_list_props.T].cons?)"))) (|update_list_TCC4| 0 (|update_list_TCC4-1| |nil| 3657975670 ("" (SKEEP :|preds?| T) (("" (ASSERT) (("" (EXPAND "length" -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|update_list| SUBTYPE "(number_fields.-)(more_list_props.i, 1)" "below(list_props[more_list_props.T].length(list_adt[more_list_props.T].cdr(more_list_props.l)))"))) (|update_list_TCC5| 0 (|update_list_TCC5-1| |nil| 3657975670 ("" (SKEEP :|preds?| T) (("" (EXPAND "length" 2 2) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|update_list| TERMINATION "more_list_props.update_list(list_adt[more_list_props.T].cdr(more_list_props.l), (number_fields.-)(more_list_props.i, 1), more_list_props.x)" "NIL"))) (|update_list_TCC6| 0 (|update_list_TCC6-1| |nil| 3657975670 ("" (SKEEP) (("" (SPLIT 2) (("1" (TYPEPRED "v(cdr(l),i-1,x)") (("1" (EXPAND "length" 1 2) (("1" (REPLACE -1 :|dir| RL :|hide?| T) (("1" (EXPAND "length" 1 1) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "v(cdr(l),i-1,x)") (("1" (EXPAND "nth" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (REPLACE -2 :|hide?| T) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length[T](l))" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "below(length(l))" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|update_list| SUBTYPE "list_adt[more_list_props.T].cons(list_adt[more_list_props.T].car(more_list_props.l), more_list_props.update_list(list_adt[more_list_props.T].cdr(more_list_props.l), (number_fields.-)(more_list_props.i, 1), more_list_props.x))" "{r: list_adt[more_list_props.T].list | booleans.AND(list_props[more_list_props.T].length(more_list_props.l) = list_props[more_list_props.T].length(r), FORALL (j: naturalnumbers.below(list_props[more_list_props.T].length(more_list_props.l))): list_props[more_list_props.T].nth(r, j) = IF more_list_props.i = j THEN more_list_props.x ELSE list_props[more_list_props.T].nth(more_list_props.l, j) ENDIF)}"))) (|no_rep_cdr| 0 (|no_rep_cdr-1| |nil| 3658602625 ("" (SKEEP) (("" (EXPAND "no_repetitions?" -1) (("" (SPLIT 1) (("1" (EXPAND "no_repetitions?") (("1" (SKEEP) (("1" (INST -2 "i+1" "j+1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED "i") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "member_nth") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST -3 "i+1" "0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(l))" |more_list_props| NIL) (|j| SKOLEM-CONST-DECL "below(length(l))" |more_list_props| NIL) (|a| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|i| SKOLEM-CONST-DECL "below(length(l))" |more_list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|no_rep_suffix| 0 (|no_rep_suffix-1| |nil| 3658602820 ("" (SKEEP) (("" (EXPAND "no_repetitions?") (("" (SKEEP) (("" (LEMMA "suffix_nth") (("" (INST -1 "l1" "l2") (("" (ASSERT) (("" (INST-CP -1 "i") (("" (REPLACE -2 :|hide?| T) (("" (INST -1 "j") (("" (REPLACE -1 :|hide?| T) (("" (INST -1 "i + length(l1) - length(l2)" "j + length(l1) - length(l2)") (("1" (ASSERT) NIL NIL) ("2" (USE "suffix_length") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "suffix_length") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|no_repetitions?| CONST-DECL "bool" |more_list_props| NIL) (|suffix_nth| FORMULA-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|suffix_length| FORMULA-DECL NIL |more_list_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "below(length(l2))" |more_list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|l1| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(l2))" |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL)) SHOSTAK)) (|clone_times_TCC1| 0 (|clone_times_TCC1-1| |nil| 3662144655 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|clone_times| SUBTYPE "more_list_props.i" "below[length[list[nat]](r)]"))) (|clone_times_TCC2| 0 (|clone_times_TCC2-1| |nil| 3662144655 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|clone_times| SUBTYPE "list_adt[list[nat]].null" "{r: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(r) = more_list_props.n, FORALL (i: naturalnumbers.below(more_list_props.n)): list_props[list[nat]].nth(r, i) = more_list_props.l)}"))) (|clone_times_TCC3| 0 (|clone_times_TCC3-1| |nil| 3662144655 ("" (SKEEP) (("" (TYPEPRED "v(n - 1)(l)") (("1" (HIDE -1) (("1" (SPLIT 2) (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (CASE "i=0") (("1" (EXPAND "nth" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (INST? -2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|clone_times| SUBTYPE "list_adt[list[nat]].cons(more_list_props.l, more_list_props.clone_times((number_fields.-)(more_list_props.n, 1))(more_list_props.l))" "{r: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(r) = more_list_props.n, FORALL (i: naturalnumbers.below(more_list_props.n)): list_props[list[nat]].nth(r, i) = more_list_props.l)}"))) (|length_parm| 0 (|length_parm-2| "" 3790088164 ("" (SKOLEM 1 ("PP" _)) (("" (INDUCT "pl") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK) (|length_parm-1| |nil| 3664739412 ("" (SKOLEM 1 ("PP" _)) (("" (INDUCT "pl") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP* :|preds?| T) (("2" (EXPAND "length" +) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|nth_parm| 0 (|nth_parm-2| "" 3790088164 ("" (SKOLEM 1 ("PP" _ _)) (("" (INDUCT "pl") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP* :|preds?| T) NIL NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK) (|nth_parm-1| |nil| 3664739421 ("" (SKOLEM 1 ("PP" _ _)) (("" (INDUCT "pl") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP* :|preds?| T) (("2" (EXPAND "nth" +) (("2" (LIFT-IF) (("2" (PROP) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) (("3" (HIDE-ALL-BUT (-3 1)) (("3" (USE "length_parm") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|every_parm| 0 (|every_parm-2| "" 3790088165 ("" (SKOSIMP* :|preds?| T) (("" (IFF) (("" (PROP) (("1" (REWRITE "every_nth") (("1" (REWRITE "every_nth") (("1" (REWRITE "every_nth") (("1" (SKOSIMP* :|preds?| T) (("1" (EXPAND "restrict") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "every_nth") (("2" (REWRITE "every_nth") (("2" (REWRITE "every_nth") (("2" (SKOSIMP* :|preds?| T) (("2" (EXPAND "restrict") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|every_nth| FORMULA-DECL NIL |list_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)) SHOSTAK) (|every_parm-1| |nil| 3664739446 ("" (SKOSIMP* :|preds?| T) (("" (IFF) (("" (PROP) (("1" (REWRITE "every_nth") (("1" (REWRITE "every_nth") (("1" (REWRITE "every_nth") (("1" (SKOSIMP* :|preds?| T) (("1" (EXPAND "restrict") (("1" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1 -3) (("1" (LEMMA "nth_parm") (("1" (INST -1 "P!1" "pl!1" "i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_parm") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "every_nth") (("2" (REWRITE "every_nth") (("2" (REWRITE "every_nth") (("2" (SKOSIMP* :|preds?| T) (("2" (EXPAND "restrict") (("2" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1 -3) (("1" (LEMMA "nth_parm") (("1" (INST -1 "P!1" "pl!1" "i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_parm") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|append_parm| 0 (|append_parm-2| "" 3790088165 ("" (SKOLEM 1 ("P" "_" "_")) (("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) NIL NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK) (|append_parm-1| |nil| 3664739476 ("" (SKOLEM 1 ("P" "_" "_")) (("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "append" +) (("2" (INST -1 "l2!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|member_parm| 0 (|member_parm-2| "" 3790088165 ("" (SKOLEM 1 ("P" _ "x")) (("" (INDUCT "pl") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK) (|member_parm-1| |nil| 3665227555 ("" (SKOLEM 1 ("P" _ "x")) (("" (INDUCT "pl") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|append_append_cons| 0 (|append_append_cons-1| |nil| 3664739535 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKEEP :|preds?| T) (("2" (SKEEP :|preds?| T) (("2" (EXPAND "append" 1 1) (("2" (EXPAND "append" 1 3) (("2" (EXPAND "append" 1 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|append_equal_null| 0 (|append_equal_null-1| |nil| 3664739560 ("" (INDUCT "l2") (("1" (INDUCT "l1") (("1" (SKEEP :|preds?| T) (("1" (EXPAND "append" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :|preds?| T) (("2" (INDUCT "l1") (("2" (SKEEP :|preds?| T) (("2" (EXPAND "append" -2) (("2" (DECOMPOSE-EQUALITY -2) (("2" (CASE-REPLACE "append(cons2_var_1, cons(cons1_var, cons2_var)) =
     append(append(cons2_var_1, cons(cons1_var, null)), cons2_var)" :|hide?| T) (("1" (HIDE -3) (("1" (INST -3 "append(cons2_var_1, cons(cons1_var, null))") (("1" (ASSERT) (("1" (EXPAND "append" -3) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "append_append_cons") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append_append_cons| FORMULA-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|nth_append_below_TCC1| 0 (|nth_append_below_TCC1-1| |nil| 3664739389 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "append" +) (("2" (EXPAND "length" +) (("2" (EXPAND "length" -2) (("2" (INST?) (("2" (INST?) (("2" (ASSERT) (("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL (|nth_append_below| SUBTYPE "more_list_props.i" "below[length[T](append[T](l1, l2))]"))) (|nth_append_below| 0 (|nth_append_below-1| |nil| 3664739595 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP :|preds?| T) (("2" (SKOSIMP :|preds?| T) (("2" (EXPAND "append" 1 1) (("2" (EXPAND "nth" +) (("2" (LIFT-IF) (("2" (PROP) (("2" (INST?) (("1" (ASSERT) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP :|preds?| T) (("3" (REWRITE "length_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i!1| SKOLEM-CONST-DECL "nat" |more_list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|nth_append_above_TCC1| 0 (|nth_append_above_TCC1-1| |nil| 3664739389 ("" (SKOSIMP) (("" (REWRITE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|nth_append_above| SUBTYPE "(number_fields.-)(more_list_props.i, list_props[more_list_props.T].length(more_list_props.l1))" "below[length[T](l2)]"))) (|nth_append_above| 0 (|nth_append_above-1| |nil| 3664739616 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP :|preds?| T) (("2" (SKOSIMP :|preds?| T) (("2" (EXPAND "append" +) (("2" (EXPAND "length" +) (("2" (EXPAND "nth" 1 1) (("2" (LIFT-IF) (("2" (EXPAND "length" -3) (("2" (ASSERT) (("2" (INST -2 "i!1 - 1" "l2!1") (("2" (ASSERT) (("2" (EXPAND "append" -3) (("2" (EXPAND "length" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP :|preds?| T) (("3" (ASSERT) (("3" (ASSERT) (("3" (REWRITE "length_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|tail?_TCC1| 0 (|tail?_TCC1-1| |nil| 3664739389 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL (|tail?| TERMINATION "more_list_props.tail?(list_adt[more_list_props.T].cdr(more_list_props.l1), more_list_props.l2)" "NIL"))) (|tail_append| 0 (|tail_append-1| |nil| 3664739643 ("" (INDUCT "l1") (("1" (GRIND) (("1" (EXPAND "tail?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP :|preds?| T) (("2" (EXPAND "append" +) (("2" (EXPAND "tail?" +) (("2" (SKEEP :|preds?| T) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|tail?| DEF-DECL "bool" |more_list_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|ldiff_TCC1| 0 (|ldiff_TCC1-1| |nil| 3664739389 ("" (SKEEP :|preds?| T) (("" (EXPAND "tail?") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|tail?| DEF-DECL "bool" |more_list_props| NIL)) NIL (|ldiff| SUBTYPE "more_list_props.l1" "(list_adt[more_list_props.T].cons?)"))) (|ldiff_TCC2| 0 (|ldiff_TCC2-1| |nil| 3664739389 ("" (SKEEP :|preds?| T) (("" (EXPAND "tail?" -) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|tail?| DEF-DECL "bool" |more_list_props| NIL)) NIL (|ldiff| SUBTYPE "more_list_props.l2" "{l2 | more_list_props.tail?(list_adt[more_list_props.T].cdr(more_list_props.l1), more_list_props.l2)}"))) (|ldiff_TCC3| 0 (|ldiff_TCC3-1| |nil| 3664739389 ("" (SKEEP :|preds?| T) (("" (ASSERT) (("" (EXPAND "<<") (("" (LIFT-IF) (("" (EXPAND "tail?") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|tail?| DEF-DECL "bool" |more_list_props| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL (|ldiff| TERMINATION "more_list_props.ldiff(list_adt[more_list_props.T].cdr(more_list_props.l1), more_list_props.l2)" "NIL"))) (|ldiff_append_TCC1| 0 (|ldiff_append_TCC1-1| |nil| 3664739389 ("" (INDUCT "l1") (("1" (GRIND) (("1" (EXPAND "tail?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP :|preds?| T) (("2" (EXPAND "append" +) (("2" (EXPAND "tail?" +) (("2" (SKEEP :|preds?| T) (("2" (HIDE 1) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|tail?| DEF-DECL "bool" |more_list_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) NIL (|ldiff_append| SUBTYPE "more_list_props.l2" "{l2_1 | more_list_props.tail?(list_props[more_list_props.T].append(more_list_props.l1, more_list_props.l2), l2_1)}"))) (|ldiff_append| 0 (|ldiff_append-1| |nil| 3664739659 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKEEP :|preds?| T) (("2" (SKEEP :|preds?| T) (("2" (EXPAND "append" +) (("2" (EXPAND "ldiff" +) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "append_equal_null") (("1" (INST -1 "cons(cons1_var, cons2_var)" "l2") (("1" (EXPAND "append" -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (APPLY-EXTENSIONALITY :|hide?| T) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :|preds?| T) (("3" (USE "tail_append") NIL NIL)) NIL)) NIL) ((|tail_append| FORMULA-DECL NIL |more_list_props| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|append_equal_null| FORMULA-DECL NIL |more_list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|tail?| DEF-DECL "bool" |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|ldiff| DEF-DECL "list[T]" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|filter_nth| 0 (|filter_nth-1| |nil| 3774946724 ("" (CASE "FORALL (n: nat, L: list[T], P: [T -> bool]):
               LET FL = filter(L, P) IN
                n=length(L) AND cons?(FL) IMPLIES
                  (FORALL (i: below(length(FL))):
                     EXISTS (j: below(length(L))): nth(FL, i) = nth(L, j))") (("1" (SKEEP) (("1" (GROUND) (("1" (INST -1 "length(L)" "L" "P") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SKEEP :|preds?| T) (("1" (INST -2 "L" "P") (("1" (ASSERT) (("1" (INST -2 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (SKEEP :|preds?| T) (("2" (EXPAND "length" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (EXPAND "filter" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE "j_1=0") (("1" (REPLACE -1) (("1" (SKEEP :|preds?| T) (("1" (EXPAND "length" -4) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "filter" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "length" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (ASSERT) (("1" (EXPAND "filter" -2) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (CASE "NOT i=0") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1 3) (("2" (INST 3 "0") (("1" (EXPAND "nth") (("1" (EXPAND "filter" 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :|preds?| T) (("2" (CASE "P(car(L))") (("1" (CASE "i=0") (("1" (INST 2 "0") (("1" (REPLACE -1 2) (("1" (EXPAND "filter" 2) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "length" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "nth" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST -3 "cdr(L)" "P") (("2" (EXPAND "length" -4) (("2" (ASSERT) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "length" -3) (("2" (ASSERT) (("2" (EXPAND "filter" -5) (("2" (ASSERT) (("2" (CASE "NOT 0 < length[T](cdr(filter(L, P)))") (("1" (ASSERT) NIL NIL) ("2" (SPLIT -5) (("1" (EXPAND "filter " 4) (("1" (EXPAND "nth" 4 1) (("1" (INST -1 "i-1") (("1" (SKEEP) (("1" (INST 4 "j+1") (("1" (EXPAND "nth" 4 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "j") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "filter" -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "filter" -1) (("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "cdr(L)" "P") (("2" (ASSERT) (("2" (EXPAND "length" -3) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -3) (("1" (EXPAND "filter" 4) (("1" (INST -1 "i") (("1" (SKEEP) (("1" (INST 4 "j+1") (("1" (EXPAND "nth" 4 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "filter" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "filter" -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "length") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length_singleton| FORMULA-DECL NIL |more_list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (L SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i| SKOLEM-CONST-DECL "below(length(filter(L, P)))" |more_list_props| NIL) (P SKOLEM-CONST-DECL "[T -> bool]" |more_list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|j| SKOLEM-CONST-DECL "below(length(cdr(L)))" |more_list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length_null| FORMULA-DECL NIL |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|filter| DEF-DECL "list[T]" |filters| NIL)) NIL)) (|length_sum_null| 0 (|length_sum_null-1| |nil| 3823861658 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK)) (|takeFromRight_TCC1| 0 (|takeFromRight_TCC1-1| |nil| 3763820594 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|takeFromRight| TERMINATION "more_list_props.takeFromRight(list_adt[more_list_props.T].cdr(more_list_props.l), more_list_props.n)" "NIL"))) (|takeFromRight_decreasing| 0 (|takeFromRight_decreasing-1| |nil| 3759150867 ("" (GRIND) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|takeFromRight| DEF-DECL "list[T]" |more_list_props| NIL)) SHOSTAK)) (|takeFromRight_length| 0 (|takeFromRight_length-1| |nil| 3759150925 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("a" "l")) (("2" (FLATTEN) (("2" (SKEEP :|preds?| T) (("2" (EXPAND "takeFromRight" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "n") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|a| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "upto(length(cons(a, l)))" |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|takeFromRight| DEF-DECL "list[T]" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|takeFromRight_member| 0 (|takeFromRight_member-1| |nil| 3759150955 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("a" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "takeFromRight" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (GROUND) (("2" (INST -2 "a_1" "n") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|takeFromRight| DEF-DECL "list[T]" |more_list_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|takeFromRight_takeFromRight| 0 (|takeFromRight_takeFromRight-1| |nil| 3759150975 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|n!1| SKOLEM-CONST-DECL "below(length(cons(cons1_var!1, cons2_var!1)))" |more_list_props| NIL) (|cons2_var!1| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|cons1_var!1| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|takeFromRight| DEF-DECL "list[T]" |more_list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|nth_takeFromRight_TCC1| 0 (|nth_takeFromRight_TCC1-1| |nil| 3763820594 ("" (SKEEP :|preds?| T) (("" (REWRITE "takeFromRight_length") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|takeFromRight_length| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|nth_takeFromRight| SUBTYPE "(number_fields.+)((number_fields.-)(list_props[more_list_props.T].length(more_list_props.l), more_list_props.n), more_list_props.m)" "below[length[T](l)]"))) (|nth_takeFromRight| 0 (|nth_takeFromRight-1| |nil| 3759151025 ("" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("a" "l")) (("2" (FLATTEN) (("2" (SKEEP :|preds?| T) (("2" (REWRITE "takeFromRight_length") (("2" (EXPAND "takeFromRight" 1) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "length" 1) (("2" (EXPAND "length" -1) (("2" (CASE "n = 1 + length(l)") (("1" (REPLACE -1 :|hide?| T) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -3 "n" "m") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP :|preds?| T) (("3" (REWRITE "takeFromRight_length") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|a| SKOLEM-CONST-DECL "T" |more_list_props| NIL) (|l| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|n| SKOLEM-CONST-DECL "below(length(cons(a, l)))" |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|takeFromRight_length| FORMULA-DECL NIL |more_list_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|takeFromRight| DEF-DECL "list[T]" |more_list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|merge_TCC1| 0 (|merge_TCC1-1| |nil| 3791452996 ("" (TERMINATION-TCC) NIL NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|merge| TERMINATION "more_list_props.merge(more_list_props.xs)" "NIL"))) (|LIST_induction| 0 (|LIST_induction-1| |nil| 3791453026 ("" (SKEEP) (("" (LEMMA "NAT_induction") (("" (INST -1 "LAMBDA(n:nat)->bool: FORALL (l: list[T] | n=length(l)): p(l)") (("" (SPLIT -1) (("1" (SKEEP) (("1" (INST -1 "length(l)") (("1" (INST -1 "l") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (SKEEP 1) (("2" (INST -2 "l") (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKEEP :|preds?| T) (("2" (INST -2 "length(l2)") (("2" (ASSERT) (("2" (INST -2 "l2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|sublist?_TCC1| 0 (|sublist?_TCC1-1| |nil| 3796804190 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sublist?| SUBTYPE "more_list_props.l2" "(list_adt[more_list_props.T].cons?)"))) (|sublist?_TCC2| 0 (|sublist?_TCC2-1| |nil| 3796804190 ("" (TERMINATION-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|sublist?| TERMINATION "more_list_props.sublist?(more_list_props.l1, list_adt[more_list_props.T].cdr(more_list_props.l2))" "NIL"))) (|sublist_alt_def_TCC1| 0 (|sublist_alt_def_TCC1-1| |nil| 3797002971 ("" (SKEEP* :|preds?| T) (("" (IFF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "null?[T](l1)") (("1" (ASSERT) (("1" (HIDE -2) (("1" (INST 1 "l2") (("1" (EXPAND "prefix?") (("1" (GRIND) NIL NIL)) NIL) ("2" (USE "suffix_reflexive") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -1) (("1" (INST 3 "l2") (("1" (REWRITE "suffix_reflexive") NIL NIL)) NIL) ("2" (TYPEPRED "v(l1, cdr[T](l2))") (("2" (REPLACE -1 :|hide?| T) (("2" (SKEEP - :|preds?| T) (("2" (INST 3 "l_") (("2" (REWRITE "suffix_supl") (("2" (REWRITE "suffix_supl") (("2" (SKEEP) (("2" (INST 1 "cons(car(l2),L)") (("2" (EXPAND "append" 1) (("2" (REPLACE -1 :|hide?| T) (("2" (LEMMA "expand_list") (("2" (INST -1 "l2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP - :|preds?| T) (("2" (SPLIT +) (("1" (LEMMA "suffix_of_null") (("1" (INST -1 "l_") (("1" (ASSERT) (("1" (REPLACE -1 :|hide?| T) (("1" (USE "prefix_of_null") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "l_=l2") (("1" (REPLACE -1 :|hide?| T) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "v(l1, cdr[T](l2))") (("2" (REPLACE -1 :|hide?| T) (("2" (CASE "l_=l1") (("1" (REPLACE -1 :|hide?| T :|dir| RL) (("1" (INST 3 "l_") (("1" (LEMMA "suffix_of_cons") (("1" (INST -1 "car(l2)" "cdr(l2)" "l_") (("1" (LEMMA "expand_list") (("1" (INST -1 "l2") (("1" (SPLIT -1) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -1 :|hide?| T :|dir| RL) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "suffix_same_length") (("3" (INST? -1 :|where| -2) (("3" (ASSERT) (("3" (LEMMA "suffix_length") (("3" (INST? -1 :|where| -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 4 "l_") (("2" (LEMMA "expand_list") (("2" (INST -1 "l2") (("2" (SPLIT -1) (("1" (LEMMA "suffix_of_null") (("1" (INST -1 "l_") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "suffix_of_cons") (("2" (INST -1 "car(l2)" "cdr(l2)" "l_") (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (REPLACE -1 :|hide?| T :|dir| RL) (("3" (LEMMA "suffix_same_length") (("3" (INST? -1 :|where| -2) (("3" (ASSERT) (("3" (LEMMA "suffix_length") (("3" (INST? -1 :|where| -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefix_of_null| FORMULA-DECL NIL |more_list_props| NIL) (|suffix_of_null| FORMULA-DECL NIL |more_list_props| NIL) (|suffix_of_cons| FORMULA-DECL NIL |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|suffix_length| FORMULA-DECL NIL |more_list_props| NIL) (|suffix_same_length| FORMULA-DECL NIL |more_list_props| NIL) (|l_| SKOLEM-CONST-DECL "{l_: list[T] | suffix?(l_, l2)}" |more_list_props| NIL) (|l_| SKOLEM-CONST-DECL "{l_: list[T] | suffix?(l_, cdr[T](l2))}" |more_list_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|expand_list| FORMULA-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|suffix_reflexive| FORMULA-DECL NIL |more_list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|sublist_alt_def_| SUBTYPE "booleans.OR(list_adt[more_list_props.T].null?(more_list_props.l1), (booleans.AND((booleans.NOT)(list_adt[more_list_props.T].null?(more_list_props.l2)), (booleans.OR(more_list_props.prefix?(more_list_props.l1, more_list_props.l2), more_list_props.v(more_list_props.l1, list_adt[more_list_props.T].cdr(more_list_props.l2)))))))" "{b: booleans.bool | b = EXISTS (l_: list_adt[more_list_props.T].list | more_list_props.suffix?(l_, more_list_props.l2)): more_list_props.prefix?(more_list_props.l1, l_)}"))) (|prefix_is_sublist| 0 (|prefix_is_sublist-1| |nil| 3796808144 ("" (SKEEP) (("" (EXPAND "sublist?") (("" (FLATTEN) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sublist?| DEF-DECL "bool" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL)) SHOSTAK)) (|respects_order?_TCC1| 0 (|respects_order?_TCC1-1| |nil| 3796808686 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|respects_order?| SUBTYPE "more_list_props.j1" "below[length[T](l1)]"))) (|respects_order?_TCC2| 0 (|respects_order?_TCC2-1| |nil| 3796808686 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|respects_order?| SUBTYPE "more_list_props.j2" "below[length[T](l2)]"))) (|prefix_respects_order| 0 (|prefix_respects_order-2| |nil| 3797007215 ("" (SKEEP :|preds?| T) (("" (REWRITE "prefix_supl") (("" (SKEEP -) (("" (SKEEP :|preds?| T) (("" (INST 1 "i1" "j1") (("1" (REPLACE -4 :|hide?| T :|dir| RL) (("1" (REWRITE "nth_append") (("1" (REWRITE "nth_append") NIL NIL)) NIL)) NIL) ("2" (REPLACE -4 :|hide?| T :|dir| RL) (("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REPLACE -4 :|hide?| T :|dir| RL) (("3" (REWRITE "length_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefix_supl| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|l1| SKOLEM-CONST-DECL "{l1: list[T] | prefix?(l1, l2)}" |more_list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|i1| SKOLEM-CONST-DECL "below(length(l1))" |more_list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|j1| SKOLEM-CONST-DECL "subrange(1 + i1, length(l1) - 1)" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|prefix_respects_order-1| |nil| 3796992895 ("" (SKEEP :|preds?| T) (("" (REWRITE "prefix?_alt_def") (("" (SKEEP -) (("" (SKEEP :|preds?| T) (("" (INST 1 "i1" "j1") (("1" (REPLACE -4 :|hide?| T :|dir| RL) (("1" (REWRITE "nth_append") (("1" (REWRITE "nth_append") NIL NIL)) NIL)) NIL) ("2" (REPLACE -4 :|hide?| T :|dir| RL) (("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REPLACE -4 :|hide?| T :|dir| RL) (("3" (REWRITE "length_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|suffix_respects_order| 0 (|suffix_respects_order-1| |nil| 3797002333 ("" (SKEEP* :|preds?| T) (("" (REWRITE "suffix_supl") (("" (SKEEP) (("" (INST 1 "length(L)+i1" "length(L)+j1") (("1" (REPLACE -4 :|hide?| T :|dir| RL) (("1" (REWRITE "nth_append") (("1" (REWRITE "nth_append") NIL NIL)) NIL)) NIL) ("2" (REPLACE -4 :|hide?| T :|dir| RL) (("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REPLACE -4 :|hide?| T :|dir| RL) (("3" (REWRITE "length_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|j1| SKOLEM-CONST-DECL "subrange(1 + i1, length(l1) - 1)" |more_list_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|i1| SKOLEM-CONST-DECL "below(length(l1))" |more_list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|l1| SKOLEM-CONST-DECL "{l1: list[T] | suffix?(l1, l2)}" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (L SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|sublist_respects_order| 0 (|sublist_respects_order-1| |nil| 3796990909 ("" (SKEEP :|preds?| T) (("" (REWRITE "sublist_alt_def") (("" (SKEEP -1 :|preds?| T) (("" (LEMMA "suffix_respects_order") (("" (INSTEEP -1 :|but| (("l1" "l_") "i1" "j1")) (("" (LEMMA "prefix_respects_order") (("" (INSTEEP -1 :|but| (("l2" "l_") "i1" "j1")) (("" (SKEEP :|preds?| T) (("" (INSTEEP -4) (("" (SKEEP :|preds?| T) (("" (INST -9 "i2" "j2") (("" (SKEEP :|preds?| T) (("" (INST 1 "i2_1" "j2_1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sublist_alt_def| RECURSIVE-JUDGEMENT-AXIOM NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|sublist?| DEF-DECL "bool" |more_list_props| NIL) (|suffix_respects_order| FORMULA-DECL NIL |more_list_props| NIL) (|prefix_respects_order| FORMULA-DECL NIL |more_list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|l2| SKOLEM-CONST-DECL "list[T]" |more_list_props| NIL) (|l1| SKOLEM-CONST-DECL "{l1: list[T] | sublist?(l1, l2)}" |more_list_props| NIL) (|l_| SKOLEM-CONST-DECL "{l_: list[T] | suffix?(l_, l2)}" |more_list_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|snoc_car_sublist_append| 0 (|snoc_car_sublist_append-1| |nil| 3796808084 ("" (SKEEP) (("" (REWRITE "prefix_is_sublist") (("" (HIDE 2) (("" (EXPAND "snoc") (("" (REWRITE "prefix_app") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefix_is_sublist| FORMULA-DECL NIL |more_list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|snoc| CONST-DECL "list[T]" |more_list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|prefix?| DEF-DECL "bool" |more_list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|prefix_app| FORMULA-DECL NIL |more_list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)) SHOSTAK)) (|append_consume_one| 0 (|append_consume_one-1| |nil| 3796807732 ("" (SKEEP) (("" (EXPAND "snoc") (("" (REWRITE "append_assoc") (("" (USE "expand_list") (("" (ASSERT) (("" (EXPAND "append" 1 2) (("" (EXPAND "append" 1 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|snoc| CONST-DECL "list[T]" |more_list_props| NIL) (|expand_list| FORMULA-DECL NIL |more_list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (T FORMAL-TYPE-DECL NIL |more_list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL)) SHOSTAK)))
