for_while[T:TYPE] : THEORY
BEGIN

  IMPORTING for_iterate[T]

  %% Recursive definitionn of a for with a while guard and with an invariant
  for_while_it(upfrom:int,upto:int,i:upfrom(upfrom),
	       init:T,
	       f:ForBody(upfrom,upto),
               (while:PRED[[subrange(upfrom,upto),T]] |
	         FORALL (k:subrange(upfrom,min(i-1,upto))): while(k,iter(upfrom,upto)(k-upfrom)(init,f))),
	       (a : T | a = iter(upfrom,upto)(i-upfrom)(init,f)),
	       (inv:PRED[[subrange(upfrom,upto+1),T]] |
	         FORALL (k:subrange(upfrom,upto),ak:T): inv(k,ak) AND while(k,ak) IMPLIES inv(k+1,f(k,ak)))):
    RECURSIVE { t : T |
                (upfrom <= upto IMPLIES
                   (EXISTS (j:subrange(upfrom,upto+1)):
		     (t = iter(upfrom,upto)(j-upfrom)(init,f)) AND
		     (FORALL (k:subrange(upfrom,j-1)) : while(k,iter(upfrom,upto)(k-upfrom)(init,f))) AND
		     (j <= upto IMPLIES NOT while(j,t)) AND 
		     (inv(upfrom,init) IMPLIES
		       FORALL (k:subrange(upfrom,j)) :
		         inv(k,iter(upfrom,upto)(k-upfrom)(init,f))))) } =
    IF i > upto OR NOT while(i,a) THEN a
    ELSE
      for_while_it(upfrom,upto,i+1,init,f,while,f(i,a),inv)
    ENDIF
  MEASURE max(upto-i+1,0)

  %% For with a while guard and with an invariant on index
  %% local a : T := init;
  %% local i : int;
  %% for (i := m; i <= n && while(i,a); i++) {
  %%   { invariant(i,a) }
  %%   a := f(i,a);
  %% }
  %% { invariant(i+1,a) && (i<=n ==> !while(i,a)) }
  %% return a; 
  for(m,n:int,
      init:T,
      while:PRED[[subrange(m,n),T]],
      f:ForBody(m,n),
      (inv:PRED[[subrange(m,n+1),T]] |
	      FORALL (k:subrange(m,n),ak:T):
	        inv(k,ak) AND while(k,ak) IMPLIES inv(k+1,f(k,ak)))) : { t : T |
         IF m <= n THEN
           EXISTS (i:subrange(m,n+1)):
  	     (t = iter(m,n)(i-m)(init,f)) AND
             (FORALL (k:subrange(m,i-1)) : while(k,iter(m,n)(k-m)(init,f))) AND
             (i <= n IMPLIES NOT while(i,t)) AND
	     (inv(m,init) IMPLIES inv(i,t))
	 ELSE t = init
	 ENDIF } =
    for_while_it(m,n,m,init,f,while,init,inv)

  %% For with a while guard (without invariant)
  %% local a : T := init;
  %% local i : int;
  %% for (i := m; i <= n && while(i,a); i++) {
  %%   a := f(i,a);
  %% }
  %% { i<=n ==> !while(i,a) }
  %% return a; 
  for(m,n:int,
      init:T,
      while:PRED[[subrange(m,n),T]],
      f:ForBody(m,n)) : { t : T |
         IF m <= n THEN
           EXISTS (i:subrange(m,n+1)):
  	     (t = iter(m,n)(i-m)(init,f)) AND
             (FORALL (k:subrange(m,i-1)) : while(k,iter(m,n)(k-m)(init,f))) AND
             (i <= n IMPLIES NOT while(i,t))
	 ELSE t = init
	 ENDIF } =
    LET inv_true = LAMBDA(i:subrange(m,n+1),t:T):TRUE IN
    for(m,n,init,while,f,inv_true)

  %% For with an invariant on index (without a while guard)
  %% local a : T := init;
  %% local i : int;
  %% for (i := m; i <= n; i++) {
  %%   { invariant(i,a) }
  %%   a := f(i,a);
  %% }
  %% { invariant(i+1,a) }
  %% return a; 
  for(m,n:int,
      init:T,
      f:ForBody(m,n),
      (inv:PRED[[subrange(m,n+1),T]] |
	      FORALL (k:subrange(m,n),ak:T):
	        inv(k,ak) IMPLIES inv(k+1,f(k,ak)))) : { t : T |
         IF m <= n THEN
           EXISTS (i:subrange(m,n+1)):
  	     (t = iter(m,n)(i-m)(init,f)) AND
	     (i = n+1) AND
	     (inv(m,init) IMPLIES inv(i,t))
	 ELSE t = init
	 ENDIF } =
    LET while_true = LAMBDA(i:subrange(m,n),a:T):TRUE IN
    for(m,n,init,while_true,f,inv)

  %% Invariant is a ghost predicate, i.e., it doesn't affect computation
  for_inv_ghost : LEMMA   
    FORALL (m,n:int,
            init:T,
            while:PRED[[subrange(m,n),T]],
            f:ForBody(m,n),
            (inv:PRED[[subrange(m,n+1),T]] |
	      FORALL (k:subrange(m,n),ak:T):
	        inv(k,ak) AND while(k,ak) IMPLIES inv(k+1,f(k,ak)))):
      for(m,n,init,while,f,inv) = for(m,n,init,while,f)

  %% For-iterate is equal to for-while
  for_iterate_eq_for_while : LEMMA
    FORALL (m,n:int,
           init:T,
           f:ForBody(m,n)) :
      for(m,n,init,f) = for(m,n,init,LAMBDA(i:subrange(m,n),a:T):TRUE,f)

  %% Bounded while loop with an invariant on iteration (counter is a ghost variable)
  %% local a : T := init;
  %% for (i := 0; i < N && while(a); i++) {
  %%   { invariant(i,a) }
  %%   a := f(a);
  %% }
  %% { invariant(i+1,a) && (i<=n ==> !while(a)) }
  %% return a; 
  while(N:nat,
        init:T,
        while:PRED[T],
        f:[T->T],
        (inv:PRED[[upto(N),T]] |
               FORALL (k:below(N),ak:T):
	          inv(k,ak) IMPLIES inv(k+1,f(ak)))) : { t : T |
          IF N > 0 THEN
	    EXISTS (i:upto(N)):
  	      (t = iterate(f,i)(init)) AND
              (FORALL (k:below(i)) : while(iterate(f,k)(init))) AND
              (i < N IMPLIES NOT while(t)) AND
	      (inv(0,init) IMPLIES inv(i,t))
	  ELSE t = init
	  ENDIF } =
    LET while_guard = LAMBDA(i:below(N),a:T):while(a),
        while_body  = LAMBDA(i:below(N),a:T):f(a) IN
    for(0,N-1,init,while_guard,while_body,inv)

  %% Bounded while loop (without an invariant, counter is a ghost variable)
  %% local a : T := init;
  %% for (i := 0; i < N && while(a); i++) {
  %%   a := f(a);
  %% }
  %% { i<=n ==> !while(a) }
  %% return a; 
  while(N:nat,
        init:T,
        while:PRED[T],
        f:[T->T]) : { t : T |
          IF N > 0 THEN
	    EXISTS (i:upto(N)):
  	      (t = iterate(f,i)(init)) AND
              (FORALL (k:below(i)) : while(iterate(f,k)(init))) AND
              (i < N IMPLIES NOT while(t)) 
	  ELSE t = init
	  ENDIF } =
    LET inv_true = LAMBDA(i:upto(N),a:T):TRUE IN
    while(N,init,while,f,inv_true)

  %% Bounded while loop with an invariant on iteration (without a guard, counter is a ghost variable)
  %% local a : T := init;
  %% for (i := 0; i < N; i++) {
  %%   { invariant(i,a) }
  %%   a := f(a);
  %% }
  %% { invariant(i+1,a) }
  %% return a; 
  while(N:nat,
        init:T,
        f:[T->T],
        (inv:PRED[[upto(N),T]] |
               FORALL (k:below(N),ak:T):
	          inv(k,ak) IMPLIES inv(k+1,f(ak)))) : { t : T |
          IF N > 0 THEN
	    EXISTS (i:upto(N)):
  	      (t = iterate(f,i)(init)) AND
              (i = N) AND
	      (inv(0,init) IMPLIES inv(i,t))
	  ELSE t = init
	  ENDIF } =
    LET while_true = LAMBDA(a:T):TRUE IN
    while(N,init,while_true,f,inv)

  %% Bounded while loop (without guard nor invariant, counter is ghost variable)
  %% local a : T := init;
  %% for (i := 0; i < N && while(a); i++) {
  %%   a := f(a);
  %% }
  %% { i<=n ==> !while(a) }
  %% return a; 
  while(N:nat,
        init:T,
        f:[T->T]) : { t : T |
          IF N > 0 THEN
	    EXISTS (i:upto(N)):
  	      (t = iterate(f,i)(init)) AND
              (i = N)
	  ELSE t = init
	  ENDIF } =
    LET while_true = LAMBDA(a:T):TRUE,
        inv_true   = LAMBDA(i:upto(N),a:T):TRUE IN
    while(N,init,while_true,f,inv_true)

END for_while
