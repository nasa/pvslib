subrange_list: THEORY
BEGIN

  i,j: VAR int

  IMPORTING more_list_props

  subrange_list?(i,j)(l:list[int]): bool =
    (FORALL(k:int): i <= k AND k <= j IFF member(k,l)) AND
    no_repetitions?(l)

  subrange_list(i,j): TYPE = (subrange_list?(i,j))

  make_srl_rec(i,(j:upfrom(i))): RECURSIVE subrange_list(i,j) =
    IF i = j THEN (: i :)
    ELSE cons( i , make_srl_rec(i+1,j)) ENDIF
  MEASURE j-i

  make_srl(i,j): subrange_list(i,j) =
    IF i > j THEN null
    ELSE make_srl_rec(i,j) ENDIF

  n,m: VAR nat

  IMPORTING list_overloading
  
  msrl_nat: JUDGEMENT make_srl(n, m) HAS_TYPE list[nat]

END subrange_list
