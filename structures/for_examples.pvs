for_examples : THEORY
BEGIN
  
  IMPORTING for_iterate,
  	    for_while,
            ints@factorial

  %% Power
  %% //@ assert n >= 0; 
  %% int a = 1;
  %% for (int i=0; i < n; ++i) {
  %%   /*@ loop invariant
  %%       a == x^i;
  %%     @ loop variant n-i;
  %%   */
  %%   a = a*x;
  %% }
  %% //@ assert a == x^n;

  expit(x:real,n:nat): real =
    for[real](0,n-1,1,LAMBDA(i:below(n),a:real):
              a*x)

  expit_test : LEMMA
    expit(2,10) = 1024

  %% Invariant with respect to index of loop
  expit_inv(x:real,n:nat)(i:upto(n),a:real) : MACRO bool =
    a = x^i

  %% Proved using for_invariant
  expit_sound : LEMMA
    FORALL(x:real,n:nat): expit(x,n) = x^n

  %% Factorial
  %% //@ assert n >= 0; 
  %% int a = 1;
  %% for (int i=n; i >= 2; i--) {
  %%   /*@ loop invariant
  %%       a ==  factorial(n)/factorial(i);
  %%     @ loop variant i;
  %%   */
  %%   a = a*i;
  %% }
  %% //@ assert a == factorial(n);

  factit(n:nat) : posnat =
    for_down[posnat](n,2,1,LAMBDA(i:subrange(2,n),a:posnat):
                     a*i)

  factit_test : LEMMA
    factit(10) = 3628800

  %% Invariant with respect to index of loop
  factit_inv(n:nat)(i:subrange(1,n),a:posnat): MACRO bool =
    a = factorial(n)/factorial(i)

  %% Proved using for_down_invariant 
  factit_sound : LEMMA
    FORALL(n:nat): factit(n) = factorial(n)

  %% Find index of min element of an array A of N natural numbers (stop if 0 is found in the array)
  %% //@ assert N > 0;
  %% int k = 0;
  %% for(int i = 1; i < N && A[k] != 0; ++i) {
  %%   /*@ loop invariant
  %%     a[k] == min(A[0],..,A[i-1]);
  %%    @ loop variant N-i;
  %%   */
  %%   if (A[i] < A[k]) {
  %%     k = i;
  %%   }
  %% }
  %% //@ assert a[k] == min(A[0],..,A[N-1]);

  min_idx(N:posnat,A:[below(N)->nat]) : below(N) =
    for(1,N-1,0,
        LAMBDA(i:subrange(1,N-1),k:below(N)) : A(k) /= 0, % While
        LAMBDA(i:subrange(1,N-1),k:below(N)) :            % Body
	  IF A(i) < A(k) THEN i
	  ELSE k
	  ENDIF,
	LAMBDA(i:subrange(1,N),k:below(N)):               % Invariant on index
	  FORALL (j:below(i)): A(k) <= A(j))

  min_idx_sound : LEMMA
    FORALL (N:posnat,A:[below(N)->nat]) :
      LET k = min_idx(N,A) IN
      FORALL (j:below(N)): A(k) <= A(j)

  %% Find index of max element of an array A of N natural numbers 
  %% //@ assert N > 0;
  %% int k = 0;
  %% for(int i = 1; i < N; ++i) {
  %%   /*@ loop invariant
  %%     a[k] == max(A[0],..,A[i-1]);
  %%    @ loop variant N-i;
  %%   */
  %%   if (A[i] > A[k]) {
  %%     k = i;
  %%   }
  %% }
  %% //@ assert a[k] == max(A[0],..,A[N-1]);

  max_idx(N:posnat,A:[below(N)->nat]) : below(N) =
    for(1,N-1,0,
        LAMBDA(i:subrange(1,N-1),k:below(N)) :         % Body
	  IF A(i) > A(k) THEN i
	  ELSE k
	  ENDIF,
	LAMBDA(i:subrange(1,N),k:below(N)):            % Invariant on index
	  FORALL (j:below(i)): A(k) >= A(j))

  max_idx_sound : LEMMA
    FORALL (N:posnat,A:[below(N)->nat]) :
      LET k = max_idx(N,A) IN
      FORALL (j:below(N)): A(k) >= A(j)

  %% Find index element equal to x in an array A of N elements
  %% //@ assert N > 0;
  %% int k = 0;
  %% for(int i = 0; i < N && A[i] != x; ++i) {
  %%   k = i+1;
  %%   /*@ loop variant N-i */
  %% }
  %% //@ assert k < N =>  A[k] == x;

  find_first[T:TYPE](N:posnat,A:[below(N)->T],x:T) : nat =
    for(0,N-1,0,
        LAMBDA(i:below(N),k:nat) : A(i) /= x, % While
        LAMBDA(i:below(N),k:nat) : i+1)       % Body

  find_first_sound[T:TYPE] : LEMMA
    FORALL (N:posnat,A:[below(N)->T],x:T) : 
      LET k = find_first(N,A,x) IN
        k <= N AND
	(FORALL (i:below(k)): A(i) /= x) AND
        (k < N IMPLIES A(k) = x)

  %% Find index of min element of matrix mat of MxN natural numbers (stop if zero is found) 
  %% //@ assert M,N > 0;
  %% int m = 0;  // Row index of min element
  %% int n = 0;  // Column index of min element
  %% int i = N==1 ? 1 : 0; // Row counter
  %% int j = N==1 ? 0 : 1; // Col counter 
  %% for(int i = 1; i < M*N && mat[m][n] /= 0; ++i) {
  %%   /*@ loop invariant
  %%     a[m][n] == min(A,(i,j)-1);
  %%    @ loop variant M*N-i;
  %%   */
  %%   if ( A[i][j] < A[m][n] ) {
  %%     m = i;
  %%     n = j;
  %%   }
  %%   if (j+1 < N) {
  %%     i=i+1;
  %%     j=0;
  %%   } else {
  %%     j = j+1;
  %%   }
  %% //@ assert a[k] == min(A,(M,N)-1)

  State(M,N:posnat) : TYPE = [#
    mxn : [below(M),below(N)],  % Row,colum index of returned element
    ixj : [upto(M),below(N)]    % Counter rows,colums
  #]

  M_x_N_eq_1 : LEMMA
    FORALL (M,N:posnat):
      M*N=1 IMPLIES M=1 AND N=1

  M_x_N_eq_i_j : LEMMA
    FORALL (M,N:posnat,i:upto(M),j:below(N)):
      M*N = i*N+j IMPLIES
      i = M AND j = 0

  min_mat_idx(M,N:posnat,mat:[below(M)->[below(N)->nat]]) : [below(M),below(N)] =
    LET state = while(M*N-1,(#                        % Init
		    mxn := (0,0),
                    ixj := IF N=1 THEN (1,0) ELSE (0,1) ENDIF
		  #),
	          LAMBDA (s:State(M,N)):              % While
		    LET (m,n) = s`mxn IN
		      mat(m)(n) /= 0, 
		  LAMBDA (s:State(M,N)):              % Body
		    LET (m,n) = s`mxn,
		        (i,j) = s`ixj IN
		    IF i = M THEN s    
		    ELSE
		      s WITH [
			mxn := IF mat(i)(j) < mat(m)(n) THEN (i,j)
			       ELSE s`mxn
			       ENDIF,
		        ixj := IF j+1 < N THEN (i,j+1) ELSE (i+1,0) ENDIF
	              ]
		    ENDIF,
		  LAMBDA (ij:upto(M*N-1),s:State(M,N)) : % Invariant
		    LET (m,n) = s`mxn,
		        (i,j) = s`ixj IN
		    ij+1 = i*N+j AND
		    (FORALL (ki:below(i),kj:below(N))  : mat(m)(n) <= mat(ki)(kj)) AND
		    (i < M IMPLIES FORALL(kj:below(j)) : mat(m)(n) <= mat(i)(kj)))
    IN state`mxn

  min_mat_idx_sound : LEMMA
    FORALL (M,N:posnat,mat:[below(M)->[below(N)->nat]]) :
      LET (m,n) = min_mat_idx(M,N,mat) IN
      FORALL (i:below(M),j:below(N)): mat(m)(n) <= mat(i)(j)

  %% Find index of max element of matrix mat of MxN natural numbers (stop if zero is found) 
  %% //@ assert M,N > 0;
  %% int m = 0;  // Row index of max element
  %% int n = 0;  // Column index of max element
  %% int i = N==1 ? 1 : 0; // Row counter
  %% int j = N==1 ? 0 : 1; // Col counter 
  %% for(int i = 1; i < M*N && mat[m][n] /= 0; ++i) {
  %%   /*@ loop invariant
  %%     a[m][n] == max(A,(i,j)-1);
  %%    @ loop variant M*N-i;
  %%   */
  %%   if ( A[i][j] < A[m][n] ) {
  %%     m = i;
  %%     n = j;
  %%   }
  %%   if (j+1 < N) {
  %%     i=i+1;
  %%     j=0;
  %%   } else {
  %%     j = j+1;
  %%   }
  %% //@ assert a[k] == max(A,(M,N)-1)

  max_mat_idx(M,N:posnat,mat:[below(M)->[below(N)->nat]]) : [below(M),below(N)] =
    LET state = while(M*N-1,(#                        % Init
		    mxn := (0,0),
                    ixj := IF N=1 THEN (1,0) ELSE (0,1) ENDIF
		  #),
		  LAMBDA (s:State(M,N)):              % Body
		    LET (m,n) = s`mxn,
		        (i,j) = s`ixj IN
		    IF i = M THEN s    
		    ELSE
		      s WITH [
			mxn := IF mat(i)(j) > mat(m)(n) THEN (i,j)
			       ELSE s`mxn
			       ENDIF,
		        ixj := IF j+1 < N THEN (i,j+1) ELSE (i+1,0) ENDIF
	              ]
		    ENDIF,
		  LAMBDA (ij:upto(M*N-1),s:State(M,N)) : % Invariant
		    LET (m,n) = s`mxn,
		        (i,j) = s`ixj IN
		    ij+1 = i*N+j AND
		    (FORALL (ki:below(i),kj:below(N))  : mat(m)(n) >= mat(ki)(kj)) AND
		    (i < M IMPLIES FORALL(kj:below(j)) : mat(m)(n) >= mat(i)(kj)))
    IN state`mxn

  max_mat_idx_sound : LEMMA
    FORALL (M,N:posnat,mat:[below(M)->[below(N)->nat]]) :
      LET (m,n) = max_mat_idx(M,N,mat) IN
      FORALL (i:below(M),j:below(N)): mat(m)(n) >= mat(i)(j)

  %% Sum elements of array that are Some
  %% //@ assert n >= 0; 
  %% real a = 0;
  %% for (int i=0; i < n; ++i) {
  %%   /*@ loop invariant
  %%       a == sum_array_logic(n,A)(i);
  %%     @ loop variant n-i;
  %%   */
  %%   a = some?(A(i)) ? a+val(A(i)) : 0;
  %% }
  %% //@ assert a == sum_array_logic(n,A)(n);

  IMPORTING Maybe

  sum_array_logic(n:nat,A:ARRAY[below(n)->Maybe[real]])(i:upto(n)) : RECURSIVE real =
    IF i=0 THEN 0
    ELSE (IF some?(A(i-1)) THEN val(A(i-1)) ELSE 0 ENDIF) +
          sum_array_logic(n,A)(i-1)
    ENDIF
  MEASURE i

  sum_array(n:nat,A:ARRAY[below(n)->Maybe[real]]) : real =
    for[real](0,n-1,0,LAMBDA(i:below(n),a:real):
              IF some?(A(i)) THEN a+val(A(i))
              ELSE a
              ENDIF)

  sum_array_inv(n:nat,A:ARRAY[below(n)->Maybe[real]])(i:upto(n),a:real) : MACRO bool =
    a = sum_array_logic(n,A)(i)

  %% Proved using for_invariant
  sum_array_sound : LEMMA
    FORALL(n:nat,A:ARRAY[below(n)->Maybe[real]]): sum_array(n,A) = sum_array_logic(n,A)(n)

  %% //@ assert length(l) > 0; 
  %% int a = l[0];
  %% for (int i=1; i < length(l); ++i) {
  %%   /*@ loop invariant
  %%       FORALL(k:below(i)) : a >= l[k] ;
  %%     @ loop variant length(l)-i;
  %%   */
  %%   a = max(a,l[i]);
  %% }
  %% //@ assert FORALL(k:below(length(l))): a >= l[k];

  maxit(l:(cons?[real])) : real =
    iterate_left(0,length(l)-1,LAMBDA(i:below(length(l))):nth(l,i),max)
 
  maxit_test : LEMMA
    maxit((:2,3,4,1,2:)) = 4

  maxit_inv(l:(cons?[real]))(i:below(length(l)),a:real): MACRO bool =
    FORALL(k:upto(i)) : a >= nth(l,k)

  %% Proved using iterate_left_invariant 
  maxit_sound : LEMMA
    FORALL (l:(cons?[real]))(k:below(length(l))) : maxit(l) >= nth(l,k)

  %% //@ assert length(l) > 0; 
  %% int a = l[0];
  %% for (int i=1; i < length(l); ++i) {
  %%   /*@ loop invariant
  %%       FORALL(k:below(i)) : a <= l[k] ;
  %%     @ loop variant length(l)-i;
  %%   */
  %%   a = min(a,l[i]);
  %% }
  %% //@ assert FORALL(k:below(length(l))): a <= l[k];

  minit(l:(cons?[real])) : real =
    iterate_right(0,length(l)-1,LAMBDA(i:below(length(l))):nth(l,i),min)
 
  minit_test : LEMMA
    minit((:2,3,4,1,2:)) = 1

  minit_inv(l:(cons?[real]))(i:below(length(l)),a:real): MACRO bool =
    FORALL(k:subrange(i,length(l)-1)) : a <= nth(l,k)

  %% Proved using iterate_right_invariant
  minit_sound : LEMMA
    FORALL (l:(cons?[real]))(k:below(length(l))) : minit(l) <= nth(l,k)

  %% The following lemmas transform FORALL and EXISTS of subranges to
  %% computable boolean functions. These lemmas are proved using
  %% iterate_left_induction, which requires invariants on the i-th iteration
  %% of the lopp.

  %% Invariant is LAMBDA(j:upto(n),a:bool):(FORALL(k:upto(j)):P(k)) = a
  forall_and_upto : LEMMA
    FORALL(n:nat,P:[upto(n)->bool]):
      ((FORALL (j:upto(n)) : P(j)) =
        iterate_left[bool](0,n,P,AND))

  forall_and_below : LEMMA
    FORALL(n:posnat,P:[below(n)->bool]):
      ((FORALL (j:below(n)) : P(j)) =
        iterate_left[bool](0,n-1,P,AND))
	
  %% Invariant is LAMBDA(j:upto(n-m),a:bool):(FORALL(k:subrange(m,m+j)):P(k)) = a
  forall_and_subrange : LEMMA
    FORALL(m:int,n:upfrom(m),P:[subrange(m,n)->bool]):
      ((FORALL (j:subrange(m,n)) : P(j)) =
        iterate_left[bool](m,n,P,AND))

  %% Invariant is LAMBDA(j:upto(n),a:bool):(EXISTS(k:upto(j)):P(k)) = a
  exists_or_upto : LEMMA
    FORALL(n:nat,P:[upto(n)->bool]):
      ((EXISTS (j:upto(n)) : P(j)) =
        iterate_left[bool](0,n,P,OR))

  exists_or_below : LEMMA
    FORALL(n:posnat,P:[below(n)->bool]):
      ((EXISTS (j:below(n)) : P(j)) =
        iterate_left[bool](0,n-1,P,OR))
	
  %% Invariant is LAMBDA(j:upto(n-m),a:bool):(EXISTS(k:subrange(m,m+j)):P(k)) = a
  exists_or_subrange : LEMMA
    FORALL(m:int,n:upfrom(m),P:[subrange(m,n)->bool]):
      ((EXISTS (j:subrange(m,n)) : P(j)) =
    iterate_left[bool](m,n,P,OR))

END for_examples
