(|fseq2set| (|seq2set_TCC1| 0 (|seq2set_TCC1-2| "" 3790088258 ("" (SKOSIMP*) (("" (ASSERT) (("" (LEMMA "is_finite_surj") (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (INST + "length(fs!1)" "(LAMBDA (ii: below(length(fs!1))):
                                        seq(fs!1)(ii))") (("1" (EXPAND "surjective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|fs!1| SKOLEM-CONST-DECL "fseq[T]" |fseq2set| NIL) (|is_finite_surj| FORMULA-DECL NIL |finite_sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL)) SHOSTAK (|seq2set| SUBTYPE "{s: fseq2set.T | EXISTS (kk: naturalnumbers.below(length(fseq2set.fs))): fseq2set.fs`seq(kk) = s}" "finite_set[T]")) (|seq2set_TCC1-1| |nil| 3282912778 ("" (SKOSIMP*) (("" (ASSERT) (("" (LEMMA "is_finite_surj") (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (INST + "length(fs!1)" "(LAMBDA (ii: below(length(fs!1))):
                                        seq(fs!1)(ii))") (("1" (EXPAND "surjective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK (|seq2set| SUBTYPE "{s: fseq2set.T | EXISTS (kk: naturalnumbers.below(length(fseq2set.fs))): fseq2set.fs`seq(kk) = s}" "finite_set[T]"))) (|seq2set_lem| 0 (|seq2set_lem-2| "" 3790088258 ("" (SKOSIMP*) (("" (ASSERT) (("" (EXPAND "seq2set") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|seq2set| CONST-DECL "finite_set[T]" |fseq2set| NIL)) SHOSTAK) (|seq2set_lem-1| |nil| 3282915134 ("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (ASSERT) (("" (EXPAND "seq2set") (("" (EXPAND "finseq_appl") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|card_seq2set| 0 (|card_seq2set-3| "" 3790088258 ("" (SKOSIMP*) (("" (TYPEPRED "seq2set(fs!1)") (("" (TYPEPRED "length(fs!1)") (("" (EXPAND "seq2set") (("" (LEMMA "seq2set_lem") (("" (INST?) (("" (ASSERT) (("" (EXPAND "seq2set") (("" (LEMMA "Card_injection") (("" (EXPAND "injective?") (("" (INST -1 "{s: T | EXISTS (kk: below(length(fs!1))): fs!1`seq(kk) = s}" "length(fs!1)") (("" (ASSERT) (("" (INST + "LAMBDA (f: {s: T | EXISTS (kk: below(length(fs!1))): fs!1`seq(kk) = s}): min( {kk: below(length(fs!1)) |  fs!1`seq(kk) = f})") (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nonempty?") (("2" (TYPEPRED "f!1") (("2" (SKOSIMP*) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST -2 "kk!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|seq2set| CONST-DECL "finite_set[T]" |fseq2set| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" |min_nat| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|fs!1| SKOLEM-CONST-DECL "fseq[T]" |fseq2set| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Card_injection| FORMULA-DECL NIL |finite_sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|seq2set_lem| FORMULA-DECL NIL |fseq2set| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|card_seq2set-2| "" 3283086594 ("" (SKOSIMP*) (("" (TYPEPRED "seq2set(fs!1)") (("" (TYPEPRED "length(fs!1)") (("" (EXPAND "seq2set") (("" (EXPAND "finseq_appl") (("" (LEMMA "seq2set_lem") (("" (INST?) (("" (ASSERT) (("" (EXPAND "seq2set") (("" (EXPAND "finseq_appl") (("" (LEMMA "Card_injection") (("" (EXPAND "injective?") (("" (INST -1 "{s: T | EXISTS (kk: below(length(fs!1))): fs!1`seq(kk) = s}" "length(fs!1)") (("" (ASSERT) (("" (INST + "LAMBDA (f: {s: T | EXISTS (kk: below(length(fs!1))): fs!1`seq(kk) = s}): min( {kk: below(length(fs!1)) |  fs!1`seq(kk) = f})") (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nonempty?") (("2" (TYPEPRED "f!1") (("2" (SKOSIMP*) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST -2 "kk!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|card_seq2set-1| |nil| 3282918983 ("" (SKOSIMP*) (("" (EXPAND "seq2set") (("" (EXPAND "finseq_appl") (("" (LEMMA "seq2set_lem") (("" (INST?) (("" (ASSERT) (("" (EXPAND "seq2set") (("" (EXPAND "finseq_appl") (("" (LEMMA "Card_injection") (("" (EXPAND "injective?") (("" (INST -1 "{s: T | EXISTS (kk: below(length(fs!1))): fs!1`seq(kk) = s}" "length(fs!1)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (INST + "LAMBDA (s: {s: T | EXISTS (kk: below(length(fs!1))): fs!1`seq(kk) = s}): min( {kk: below(length(fs!1)) |  fs!1`seq(kk) = s})") (("1" (SKOSIMP*) (("1" (INST-CP -2 "min({kk: below(length(fs!1)) | fs!1`seq(kk) = x1!1})") (("1" (INST -2 "min({kk: below(length(fs!1)) | fs!1`seq(kk) = x2!1})") (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REDUCE) (("2" (GRIND) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|minmax_seq2set_TCC1| 0 (|minmax_seq2set_TCC1-2| "" 3790088258 ("" (SKOSIMP*) (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (EXPAND "seq2set") (("" (INST - "ne_fs!1`seq(0)") (("" (INST + "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |sets| NIL) (|seq2set| CONST-DECL "finite_set[T]" |fseq2set| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ne_fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (|member| CONST-DECL "bool" |sets| NIL)) SHOSTAK (|minmax_seq2set| SUBTYPE "fseq2set.seq2set(fseq2set.ne_fs)" "non_empty_finite_set[T]")) (|minmax_seq2set_TCC1-1| |nil| 3282912778 ("" (SKOSIMP*) (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (EXPAND "seq2set") (("" (INST - "ne_fs!1`seq(0)") (("" (INST + "0") (("" (ASSERT) (("" (EXPAND "finseq_appl") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK (|minmax_seq2set| SUBTYPE "fseq2set.seq2set(fseq2set.ne_fs)" "non_empty_finite_set[T]"))) (|minmax_seq2set| 0 (|minmax_seq2set-4| "" 3882154791 ("" (SKOSIMP*) (("" (TYPEPRED "seq2set(ne_fs!1)") (("" (TYPEPRED "ne_fs!1") (("" (SPLIT) (("1" (TYPEPRED "min(ne_fs!1)") (("1" (EXPAND "seq2set") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST?) (("1" (LEMMA "seq2set_lem") (("1" (INST?) (("1" (EXPAND "seq2set") (("1" (LEMMA "min_seq_lem") (("1" (NAME "mm" "min[T, <=]({s: T | EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= min(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "min(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "min(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (EXPAND "partial_order?") (("2" (FLATTEN) (("2" (EXPAND "antisymmetric?") (("2" (INST -8 "ne_fs!1" "kk!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST?) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "max(ne_fs!1)") (("2" (EXPAND "seq2set") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST?) (("2" (LEMMA "seq2set_lem") (("2" (INST?) (("2" (EXPAND "seq2set") (("2" (LEMMA "max_seq_lem") (("2" (NAME "mm" " max[T, <=]
          ({s: T |
              EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= max(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "max(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "max(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (EXPAND "partial_order?") (("2" (FLATTEN) (("2" (EXPAND "antisymmetric?") (("2" (EXPAND "preorder?") (("2" (EXPAND "reflexive?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (LEMMA "max_lem") (("2" (INST? -1) (("1" (REPLACE -9) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (INST -4 "ne_fs!1" "kk!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (INST 1 "jj!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|minmax_seq2set-3| "" 3790088259 ("" (SKOSIMP*) (("" (TYPEPRED "seq2set(ne_fs!1)") (("" (TYPEPRED "ne_fs!1") (("" (SPLIT) (("1" (TYPEPRED "min(ne_fs!1)") (("1" (EXPAND "seq2set") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST?) (("1" (LEMMA "seq2set_lem") (("1" (INST?) (("1" (EXPAND "seq2set") (("1" (LEMMA "min_seq_lem") (("1" (NAME MM "min[T, <=]({s: T | EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= min(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "min(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "min(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (EXPAND "partial_order?") (("2" (FLATTEN) (("2" (EXPAND "antisymmetric?") (("2" (INST -8 "ne_fs!1" "kk!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST?) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "max(ne_fs!1)") (("2" (EXPAND "seq2set") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST?) (("2" (LEMMA "seq2set_lem") (("2" (INST?) (("2" (EXPAND "seq2set") (("2" (LEMMA "max_seq_lem") (("2" (NAME MM " max[T, <=]
          ({s: T |
              EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= max(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "max(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "max(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (EXPAND "partial_order?") (("2" (FLATTEN) (("2" (EXPAND "antisymmetric?") (("2" (EXPAND "preorder?") (("2" (EXPAND "reflexive?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (LEMMA "max_lem") (("2" (INST? -1) (("1" (REPLACE -9) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (INST -4 "ne_fs!1" "kk!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (INST 1 "jj!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ne_fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|seq2set| CONST-DECL "finite_set[T]" |fseq2set| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|seq2set_lem| FORMULA-DECL NIL |fseq2set| NIL) (|min| CONST-DECL "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}" |finite_sets_minmax| |finite_sets|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|dichotomous?| CONST-DECL "bool" |orders| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|min_seq_lem| FORMULA-DECL NIL |min_fseq| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" |min_fseq| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|dom| TYPE-EQ-DECL NIL |min_fseq| NIL) (<= FORMAL-CONST-DECL "(total_order?[T])" |fseq2set| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|max| CONST-DECL "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}" |finite_sets_minmax| |finite_sets|) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|max_lem| FORMULA-DECL NIL |finite_sets_minmax| |finite_sets|) (|ne_fs!1| SKOLEM-CONST-DECL "ne_fseq[T]" |fseq2set| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|max_seq_lem| FORMULA-DECL NIL |max_fseq| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|max| CONST-DECL "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" |max_fseq| NIL) (|dom| TYPE-EQ-DECL NIL |max_fseq| NIL)) SHOSTAK) (|minmax_seq2set-2| "" 3283271310 ("" (SKOSIMP*) (("" (TYPEPRED "seq2set(ne_fs!1)") (("" (TYPEPRED "ne_fs!1") (("" (SPLIT) (("1" (TYPEPRED "min(ne_fs!1)") (("1" (EXPAND "seq2set") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (LEMMA "seq2set_lem") (("1" (INST?) (("1" (EXPAND "seq2set") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (LEMMA "min_seq_lem") (("1" (NAME MM "min[T, <=]({s: T | EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= min(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "min(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "min(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (EXPAND "partial_order?") (("2" (FLATTEN) (("2" (EXPAND "antisymmetric?") (("2" (INST -8 "ne_fs!1" "kk!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST?) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "max(ne_fs!1)") (("2" (EXPAND "seq2set") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (LEMMA "seq2set_lem") (("2" (INST?) (("2" (EXPAND "seq2set") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (LEMMA "max_seq_lem") (("2" (NAME MM " max[T, <=]
          ({s: T |
              EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= max(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "max(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "max(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "dichotomous?") (("2" (EXPAND "partial_order?") (("2" (FLATTEN) (("2" (EXPAND "antisymmetric?") (("2" (EXPAND "preorder?") (("2" (EXPAND "reflexive?") (("2" (EXPAND "transitive?") (("2" (FLATTEN) (("2" (LEMMA "max_lem") (("2" (INST? -1) (("1" (REPLACE -9) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (INST -4 "ne_fs!1" "kk!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "empty?") (("2" (INST?) (("2" (EXPAND "member") (("2" (INST 1 "jj!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|minmax_seq2set-1| |nil| 3283098598 ("" (SKOSIMP*) (("" (TYPEPRED "seq2set(ne_fs!1)") (("" (TYPEPRED "ne_fs!1") (("" (SPLIT) (("1" (TYPEPRED "min(ne_fs!1)") (("1" (EXPAND "seq2set") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (LEMMA "seq2set_lem") (("1" (INST?) (("1" (EXPAND "seq2set") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (LEMMA "min_seq_lem") (("1" (SKOSIMP*) (("1" (NAME MM "min[T, <=]({s: T | EXISTS (kk: below(length(ne_fs!1))): ne_fs!1`seq(kk) = s})") (("1" (REPLACE -1) (("1" (TYPEPRED "mm") (("1" (SKOSIMP*) (("1" (CASE "mm <= min(ne_fs!1)") (("1" (ASSERT) (("1" (CASE "min(ne_fs!1) <= mm") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (FLATTEN) (("1" (EXPAND "dichotomous?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "antisymmetric?") (("1" (FLATTEN) (("1" (INST -2 "mm" "min(ne_fs!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -5) (("2" (INST?) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|seq2set_TCC2| 0 (|seq2set_TCC2-2| "" 3790088259 ("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (LEMMA "minmax_seq2set_TCC1") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL) ((|nonempty?| CONST-DECL "bool" |sets| NIL) (|ne_fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minmax_seq2set_TCC1| SUBTYPE-TCC NIL |fseq2set| NIL)) SHOSTAK (|seq2set_| SUBTYPE "fseq2set.seq2set(fseq2set.ss)" "(sets[fseq2set.T].nonempty?)")) (|seq2set_TCC2-1| |nil| 3282912778 ("" (SKOSIMP*) (("" (EXPAND "nonempty?") (("" (LEMMA "minmax_seq2set_TCC1") (("" (INST?) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK (|seq2set_| SUBTYPE "fseq2set.seq2set(fseq2set.ss)" "(sets[fseq2set.T].nonempty?)"))) (|set2seq_TCC1| 0 (|set2seq_TCC1-2| |nil| 3440770694 ("" (INST + "(LAMBDA (S: finite_set[T]):
         		 choose({fs: fseq |
                                     length(fs) = card[T](S) AND
                                      (FORALL (ii: below(length(fs))):
                                         S(fs`seq(ii))) AND
                                          (FORALL (x: T):
                                             S(x)
                                             IMPLIES
                                             (EXISTS
                                              (ii: below(length(fs))):
                                              fs`seq(ii) = x))
                                           AND
                                           (FORALL (ii, jj: below(length(fs))):
                                              ii /= jj
                                              IMPLIES
                                              fs`seq(ii) /= fs`seq(jj))}))") (("" (SKOSIMP*) (("" (NAME "F" "ibij(S!1)") (("1" (TYPEPRED "ibij(S!1)") (("1" (REPLACE -2 * LR) (("1" (HIDE -2) (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (EXPAND "member") (("1" (INST -2 "(# length := card(S!1),
                               seq := (LAMBDA (i: nat): IF i < card(S!1) THEN F(i)
                                                        ELSE default
                                                        ENDIF)
                            #)") (("1" (PROP) (("1" (GROUND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST + "bij(S!1)(x!1)") (("2" (LIFT-IF) (("2" (GROUND) (("2" (EXPAND "F") (("2" (REWRITE "ibij_bij") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LIFT-IF) (("3" (GROUND) (("3" (EXPAND "bijective?") (("3" (FLATTEN) (("3" (EXPAND "injective?") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (LEMMA "empty_card") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1 * LR) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST - "(# length := 0, seq := (LAMBDA (i: nat): default) #)") (("2" (PROP) (("1" (SKOSIMP*) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (REVEAL -2) (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_card| FORMULA-DECL NIL |finite_sets| NIL) (|default| CONST-DECL "T" |fseqs| NIL) (F SKOLEM-CONST-DECL "{f: [below(card(S!1)) -> (S!1)] | bijective?(f)}" |fseq2set| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (S!1 SKOLEM-CONST-DECL "finite_set[T]" |fseq2set| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|ibij_bij| FORMULA-DECL NIL |finite_sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bij| CONST-DECL "{f: [(S) -> below(card(S))] | bijective?(f)}" |finite_sets| NIL) (|x!1| SKOLEM-CONST-DECL "T" |fseq2set| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|ibij| CONST-DECL "{f: [below(card(S)) -> (S)] | bijective?(f)}" |finite_sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL)) NIL (|set2seq| EXISTENCE "" "[S: finite_set[T] -> {fs: fseqs[fseq2set.T].fseq | booleans.AND(length(fs) = finite_sets[fseq2set.T].card(S), booleans.AND(FORALL (ii: naturalnumbers.below(length(fs))): S(fs`seq(ii)), booleans.AND(FORALL (x: fseq2set.T): booleans.IMPLIES(S(x), EXISTS (ii: naturalnumbers.below(length(fs))): fs`seq(ii) = x), FORALL (ii, jj: naturalnumbers.below(length(fs))): booleans.IMPLIES(ii /= jj, fs`seq(ii) /= fs`seq(jj)))))}]")) (|set2seq_TCC1-1| |nil| 3280842302 ("" (INST + "(LAMBDA (S: finite_set[T]):
		 choose({fs: fseq[T] |
                            length(fs) = card[T](S) AND
                             (FORALL (ii: below(length(fs))):
                                S(fs`seq(ii)) AND
                                 (FORALL (x: T):
                                    S(x)
                                    IMPLIES
                                    (EXISTS
                                     (ii: below(length(fs))):
                                     fs`seq(ii) = x))
                                  AND
                                  (FORALL (ii, jj: below(length(fs))):
                                     ii /= jj
                                     IMPLIES
                                     fs`seq(ii) /= fs`seq(jj)))}))") (("" (SKOSIMP*) (("" (NAME "F" "bij(S!1)") (("" (TYPEPRED "bij(S!1)") (("" (REPLACE -2 * LR) (("" (HIDE -2) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|set2seq| EXISTENCE "" "[S: finite_set[T] -> {fs: fseqs[fseq2set.T].fseq | booleans.AND(length(fs) = finite_sets[fseq2set.T].card(S), booleans.AND(FORALL (ii: naturalnumbers.below(length(fs))): S(fs`seq(ii)), booleans.AND(FORALL (x: fseq2set.T): booleans.IMPLIES(S(x), EXISTS (ii: naturalnumbers.below(length(fs))): fs`seq(ii) = x), FORALL (ii, jj: naturalnumbers.below(length(fs))): booleans.IMPLIES(ii /= jj, fs`seq(ii) /= fs`seq(jj)))))}]"))) (|set2seq_length| 0 (|set2seq_length-2| "" 3790088259 ("" (INDUCT "S" 1 "finite_set_induction_rest[T]") (("1" (GROUND) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ((|finite_rest| APPLICATION-JUDGEMENT "finite_set[T]" |fseq2set| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |fseq2set| NIL) (|finite_set_induction_rest| FORMULA-DECL NIL |finite_sets_inductions| |finite_sets|) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (|set2seq| CONST-DECL "{fs: fseq |
   length(fs) = card(S) AND
    (FORALL (ii: below(length(fs))): S(fs`seq(ii))) AND
     (FORALL (x: T):
        S(x) IMPLIES EXISTS (ii: below(length(fs))): fs`seq(ii) = x)
      AND
      (FORALL (ii, jj: below(length(fs))):
         ii /= jj IMPLIES fs`seq(ii) /= fs`seq(jj))}" |fseq2set| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|set2seq_length-1| |nil| 3281098906 ("" (INDUCT "S" 1 "finite_set_induction_rest[T]") (("1" (EXPAND "set2seq") (("1" (EXPAND "fseq1") (("1" (EXPAND "o ") (("1" (GROUND) (("1" (CASE "empty?[T](emptyset[T])") (("1" (ASSERT) (("1" (REWRITE "card_emptyset[T]") (("1" (ASSERT) (("1" (EXPAND "empty_seq") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "set2seq" 1) (("2" (EXPAND "o ") (("2" (EXPAND "fseq1") (("2" (ASSERT) (("2" (REWRITE "card_rest") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|set2seq_lem| 0 (|set2seq_lem-2| "" 3790088259 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK) (|set2seq_lem-1| |nil| 3280846807 ("" (SKOSIMP*) (("" (ASSERT) (("" (SKOSIMP*) (("" (TYPEPRED "set2seq(S!1)") (("" (INST?) (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|set2seq_exists| 0 (|set2seq_exists-2| |nil| 3410632995 ("" (SKOSIMP*) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "set2seq(S!1)") (("" (INST -3 "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|set2seq| CONST-DECL "{fs: fseq |
   length(fs) = card(S) AND
    (FORALL (ii: below(length(fs))): S(fs`seq(ii))) AND
     (FORALL (x: T):
        S(x) IMPLIES EXISTS (ii: below(length(fs))): fs`seq(ii) = x)
      AND
      (FORALL (ii, jj: below(length(fs))):
         ii /= jj IMPLIES fs`seq(ii) /= fs`seq(jj))}" |fseq2set| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL) (|set2seq_exists-1| |nil| 3281099741 ("" (AUTO-REWRITE!! "finseq_appl") (("" (EXPAND "finseq_appl") (("" (INDUCT "S" 1 "finite_set_induction_rest[T]") (("1" (SKOSIMP*) (("1" (HIDE 1) (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "set2seq" 1) (("2" (EXPAND "o " 1) (("2" (EXPAND "#") (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "choose_rest_or[T]") (("2" (INST?) (("2" (INST?) (("2" (EXPAND "member") (("2" (SPLIT -1) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "ii!1") (("1" (INST + "ii!1+1") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "set2seq") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL) SHOSTAK)) (|minmax_set2seq_TCC1| 0 (|minmax_set2seq_TCC1-1| |nil| 3281118238 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|set2seq_length| FORMULA-DECL NIL |fseq2set| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|minmax_set2seq| SUBTYPE "fseq2set.set2seq(fseq2set.S)" "ne_fseq[T]"))) (|minmax_set2seq_TCC2| 0 (|minmax_set2seq_TCC2-1| |nil| 3281118238 ("" (SKOSIMP*) (("" (LEMMA "card_empty?[T]") (("" (INST?) (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|minmax_set2seq| SUBTYPE "fseq2set.S" "non_empty_finite_set[T]"))) (|minmax_set2seq| 0 (|minmax_set2seq-1| |nil| 3281118135 ("" (ASSERT) (("" (SKOSIMP*) (("" (PROP) (("1" (TYPEPRED "min(set2seq(S!1))") (("1" (SKOSIMP*) (("1" (REPLACE -2 * RL) (("1" (TYPEPRED "min[T, <=](S!1)") (("1" (LEMMA "set2seq_lem") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "jj!1") (("1" (INST - "set2seq(S!1)`seq(jj!1)") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "set2seq_exists") (("1" (INST - "S!1" "min[T, <=](S!1)") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST - "ii!1") (("1" (ASSERT) (("1" (TYPEPRED "<=") (("1" (EXPAND "total_order?") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (EXPAND "reflexive?") (("1" (EXPAND "antisymmetric?") (("1" (INST -3 "min[T, <=](S!1)" "set2seq(S!1)`seq(jj!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "max(set2seq(S!1))") (("2" (SKOSIMP*) (("2" (TYPEPRED " max[T, <=](S!1)") (("2" (LEMMA "set2seq_lem") (("2" (INST?) (("2" (ASSERT) (("2" (INST?) (("2" (INST -3 "set2seq(S!1)`seq(jj!1)") (("2" (ASSERT) (("2" (LEMMA "set2seq_exists") (("2" (INST - "S!1" "max[T, <=](S!1)") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -5 "ii!1") (("2" (ASSERT) (("2" (TYPEPRED "<=") (("2" (EXPAND "total_order?") (("2" (EXPAND "partial_order?") (("2" (EXPAND "antisymmetric?") (("2" (EXPAND "preorder?") (("2" (FLATTEN) (("2" (INST -3 "max[T, <=](S!1)" "set2seq(S!1)`seq(jj!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|max| CONST-DECL "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" |max_fseq| NIL) (|dom| TYPE-EQ-DECL NIL |max_fseq| NIL) (|max| CONST-DECL "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES x <= a)}" |finite_sets_minmax| |finite_sets|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|min| CONST-DECL "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" |min_fseq| NIL) (> CONST-DECL "bool" |reals| NIL) (|ne_fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|dom| TYPE-EQ-DECL NIL |min_fseq| NIL) (<= FORMAL-CONST-DECL "(total_order?[T])" |fseq2set| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|set2seq| CONST-DECL "{fs: fseq |
   length(fs) = card(S) AND
    (FORALL (ii: below(length(fs))): S(fs`seq(ii))) AND
     (FORALL (x: T):
        S(x) IMPLIES EXISTS (ii: below(length(fs))): fs`seq(ii) = x)
      AND
      (FORALL (ii, jj: below(length(fs))):
         ii /= jj IMPLIES fs`seq(ii) /= fs`seq(jj))}" |fseq2set| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|set2seq_lem| FORMULA-DECL NIL |fseq2set| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|antisymmetric?| CONST-DECL "bool" |relations| NIL) (|reflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|set2seq_exists| FORMULA-DECL NIL |fseq2set| NIL) (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|min| CONST-DECL "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}" |finite_sets_minmax| |finite_sets|)) NIL)) (|set2seq_neq| 0 (|set2seq_neq-2| |nil| 3410633296 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) NIL NIL) (|set2seq_neq-1| |nil| 3281100425 ("" (INDUCT "S" 1 "finite_set_induction_rest[T]") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (AUTO-REWRITE!! "finseq_appl") (("2" (TYPEPRED "ii!1") (("2" (TYPEPRED "jj!1") (("2" (ASSERT) (("2" (REWRITE "card_emptyset") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (EXPAND "finseq_appl") (("3" (TYPEPRED "ii!1") (("3" (TYPEPRED "jj!1") (("3" (ASSERT) (("3" (EXPAND "set2seq" -4) (("3" (EXPAND "#") (("3" (EXPAND "o") (("3" (CASE "ii!1 < 1") (("1" (ASSERT) (("1" (LEMMA "set2seq_lem") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "jj!1-1") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (LEMMA "choose_not_member[T]") (("1" (EXPAND "member") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "jj!1 < 1") (("1" (ASSERT) (("1" (LEMMA "set2seq_lem") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "ii!1-1") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "choose_not_member[T]") (("1" (EXPAND "member") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -3 "ii!1-1" "jj!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL) SHOSTAK)) (|set2seq_all| 0 (|set2seq_all-2| |nil| 3507634005 ("" (SKEEP) (("" (ASSERT) (("" (SKOSIMP*) (("" (NAME "FS" "set2seq(S)") (("" (REPLACE -1) (("" (TYPEPRED "sort(FS)") (("" (CASE "EXISTS (k: below(length(FS))): sort(FS)`seq(k) = x") (("1" (SKOSIMP*) (("1" (COPY -3) (("1" (REPLACE -2 * RL) (("1" (HIDE -2) (("1" (LEMMA "sort_fseq_lt") (("1" (INST-CP -1 "FS" "ii!1" "k!1") (("1" (ASSERT) (("1" (INST - "FS" "k!1" "ii!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "ii!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "permutation?") (("2" (SKOSIMP*) (("2" (LEMMA "set2seq_exists") (("2" (INST?) (("2" (ASSERT) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (INST - "ii!2") (("2" (ASSERT) (("2" (REPLACE -5) (("2" (INST + "f!1(ii!2)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "ii!2") (("2" (ASSERT) (("2" (REPLACE -6 * RL) (("2" (ASSERT) (("2" (EXPAND "bijective?") (("2" (FLATTEN) (("2" (TYPEPRED "f!1(ii!2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-NONEMPTY-TYPE-DECL NIL |fseq2set| NIL) (|barray| TYPE-EQ-DECL NIL |fseqs| NIL) (|fseq| TYPE-EQ-DECL NIL |fseqs| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|set2seq| CONST-DECL "{fs: fseq |
   length(fs) = card(S) AND
    (FORALL (ii: below(length(fs))): S(fs`seq(ii))) AND
     (FORALL (x: T):
        S(x) IMPLIES EXISTS (ii: below(length(fs))): fs`seq(ii) = x)
      AND
      (FORALL (ii, jj: below(length(fs))):
         ii /= jj IMPLIES fs`seq(ii) /= fs`seq(jj))}" |fseq2set| NIL) (|sort| CONST-DECL "{ss: fseq | permutation?[T, <=](s, ss) AND increasing?(ss)}" |sort_fseq| NIL) (|increasing?| CONST-DECL "bool" |sort_fseq| NIL) (|permutation?| CONST-DECL "bool" |permutations_fseq| NIL) (<= FORMAL-CONST-DECL "(total_order?[T])" |fseq2set| NIL) (|total_order?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|fsq| TYPE-EQ-DECL NIL |fsq| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set2seq_exists| FORMULA-DECL NIL |fseq2set| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|f!1| SKOLEM-CONST-DECL "[below(length(FS)) -> below(length(sort(FS)))]" |fseq2set| NIL) (|ii!2| SKOLEM-CONST-DECL "below(length(set2seq(S)))" |fseq2set| NIL) (|sort_fseq_lt| FORMULA-DECL NIL |sort_fseq| NIL) (|set2seq_length| FORMULA-DECL NIL |fseq2set| NIL) (|sort_length| FORMULA-DECL NIL |sort_fseq| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (S SKOLEM-CONST-DECL "finite_set[T]" |fseq2set| NIL) (|ii!1| SKOLEM-CONST-DECL "below(length(sort(set2seq(S))) - 1)" |fseq2set| NIL) (FS SKOLEM-CONST-DECL "{fs: fseq |
   length(fs) = card(S) AND
    (FORALL (ii: below(length(fs))): S(fs`seq(ii))) AND
     (FORALL (x: T):
        S(x) IMPLIES EXISTS (ii: below(length(fs))): fs`seq(ii) = x)
      AND
      (FORALL (ii, jj: below(length(fs))):
         ii /= jj IMPLIES fs`seq(ii) /= fs`seq(jj))}" |fseq2set| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL) (|set2seq_all-1| |nil| 3440782275 ("" (SKEEP) (("" (ASSERT) (("" (SKOSIMP*) (("" (NAME "FS" "set2seq(S)") (("" (REPLACE -1) (("" (TYPEPRED "sort(FS)") (("" (CASE "EXISTS (k: below(length(FS))): sort(FS)(k) = x") (("1" (SKOSIMP*) (("1" (COPY -3) (("1" (REPLACE -2 * RL) (("1" (HIDE -2) (("1" (LEMMA "sort_fseq_lt") (("1" (INST-CP -1 "FS" "ii!1" "k!1") (("1" (ASSERT) (("1" (INST - "FS" "k!1" "ii!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "ii!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "permutation?") (("2" (SKOSIMP*) (("2" (LEMMA "set2seq_exists") (("2" (INST?) (("2" (ASSERT) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (REPLACE -1 * RL) (("2" (INST - "ii!2") (("2" (ASSERT) (("2" (REPLACE -5) (("2" (INST + "f!1(ii!2)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "ii!2") (("2" (ASSERT) (("2" (REPLACE -6 * RL) (("2" (ASSERT) (("2" (EXPAND "bijective?") (("2" (FLATTEN) (("2" (TYPEPRED "f!1(ii!2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL) NIL)))
