(|for_iterate|
 (|for_def_TCC1| 0
  (|for_def_TCC1-1| |nil| 3508245294 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_def| SUBTYPE
    "real_defs.max((number_fields.+)((number_fields.-)(for_iterate.j, for_iterate.i), 1), 0)"
    "naturalnumber")))
 (|for_def_TCC2| 0
  (|for_def_TCC2-1| |nil| 3508245294 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_def| TERMINATION
    "for_iterate.for_def(for_iterate.i, (number_fields.-)(for_iterate.j, 1), for_iterate.a, for_iterate.f)"
    "NIL")))
 (|for_def_inv| 0
  (|for_def_inv-1| |nil| 3508245867
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "for_def" 1 2)
          (("2" (EXPAND "for_def" 1 1)
            (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|for_shift| 0
  (|for_shift-1| |nil| 3508269371
   ("" (SKOSIMP*)
    (("" (CASE "i!1 > j!1")
      (("1" (GRIND) NIL NIL)
       ("2"
        (CASE "FORALL(i:int,n:nat,shift:int,a:T,f:[[int,T]->T]):
      for_def(i,n+i,a,f) = for_def(i+shift,n+i+shift,a,LAMBDA (k:int,t:T): f(k-shift,t))")
        (("1" (INST -1 "i!1" "j!1-i!1" "shift!1" "a!1" "f!1")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
         ("2" (HIDE 2 3)
          (("2" (INDUCT "n")
            (("1" (GRIND) NIL NIL)
             ("2" (SKOLEM 1 "n")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (EXPAND "for_def" 1 2)
                    (("2" (INST? -1)
                      (("2" (REPLACES -1 :DIR RL)
                        (("2" (EXPAND "for_def" 1 1) (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|for_def_ext| 0
  (|for_def_ext-1| |nil| 3508368586
   ("" (SKOSIMP*)
    (("" (CASE "i!1 > j!1")
      (("1" (GRIND) NIL NIL)
       ("2"
        (CASE "FORALL(i:int,n:nat,a:T,f,g:[[int,T]->T]) :
               (FORALL (x:subrange(i,i+n),t:T) : f(x,t) = g(x,t))
               IMPLIES
               for_def(i,i+n,a,f) = for_def(i,i+n,a,g)")
        (("1" (INST -1 "i!1" "j!1-i!1" "a!1" "f!1" "g!1")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (INDUCT "n")
            (("1" (GRIND) NIL NIL)
             ("2" (SKOLEM 1 "n")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (EXPAND "for_def" 1)
                    (("2" (INST -1 "i" "a" "f" "g")
                      (("2" (SPLIT -1)
                        (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (HIDE 2)
                          (("2" (SKEEP) (("2" (INST? -1) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|for_def_induction_TCC1| 0
  (|for_def_induction_TCC1-1| |nil| 3508423656 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|for_def_induction| SUBTYPE "for_iterate.k" "nat")))
 (|for_def_induction_TCC2| 0
  (|for_def_induction_TCC2-1| |nil| 3508423656 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|for_def_induction| SUBTYPE "(number_fields.+)(for_iterate.k, 1)" "nat")))
 (|for_def_induction_TCC3| 0
  (|for_def_induction_TCC3-1| |nil| 3509187055 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_def_induction| SUBTYPE
    "real_defs.max(0, (number_fields.+)((number_fields.-)(for_iterate.j, for_iterate.i), 1))"
    "nat")))
 (|for_def_induction| 0
  (|for_def_induction-1| |nil| 3508423656
   ("" (SKOSIMP*)
    (("" (CASE "i!1 > j!1")
      (("1" (GRIND) NIL NIL)
       ("2"
        (CASE
            "FORALL (i: int, n: nat, a: T, f: [[int, T] -> T], inv: PRED[[nat,T]]):
                                                                          (inv(0,a) AND
                                                                            (FORALL (k:upto(n),ak:T):
                                                                               inv(k, ak) IMPLIES inv(k + 1,f(i+k,ak))))
                                                                           IMPLIES inv(n+1, for_def(i,i+n,a,f))")
        (("1" (INST -1 "i!1" "j!1-i!1" "a!1" "f!1" "inv!1")
          (("1" (ASSERT)
            (("1" (EXPAND "max")
              (("1" (ASSERT)
                (("1" (SKEEP) (("1" (INST? -) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (INDUCT "n")
            (("1" (GRIND) NIL NIL)
             ("2" (SKOLEM 1 "n")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (COPY -3)
                    (("2" (INST -1 "n+1" _)
                      (("2" (EXPAND "for_def" 1)
                        (("2" (INST? -1)
                          (("2" (ASSERT)
                            (("2" (HIDE 2)
                              (("2" (INST? -1)
                                (("2" (ASSERT)
                                  (("2" (SKEEP 2)
                                    (("2" (INST? -3) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL))
 (|ext2int_TCC1| 0
  (|ext2int_TCC1-1| |nil| 3508335744 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|ext2int| SUBTYPE "for_iterate.i"
    "subrange(for_iterate.upfrom, for_iterate.upto)")))
 (|for_it_TCC1| 0
  (|for_it_TCC1-1| |nil| 3509456106 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_it| SUBTYPE
    "real_defs.max((number_fields.+)((number_fields.-)(for_iterate.upto, for_iterate.i), 1), 0)"
    "naturalnumber")))
 (|for_it_TCC2| 0
  (|for_it_TCC2-2| |nil| 3509456480
   ("" (SKEEP) (("" (EXPAND "for_def") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|for_it| SUBTYPE "for_iterate.a"
    "{t: for_iterate.T | t = for_iterate.for_def(for_iterate.i, for_iterate.upto, for_iterate.a, for_iterate.ext2int(for_iterate.upfrom, for_iterate.upto, for_iterate.f))}"))
  (|for_it_TCC2-1| |nil| 3509456106 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_it| SUBTYPE "for_iterate.a"
    "{t: for_iterate.T | t = for_iterate.for_def(for_iterate.i, for_iterate.upto, for_iterate.a, for_iterate.ext2int(for_iterate.upfrom, for_iterate.upto, for_iterate.f))}")))
 (|for_it_TCC3| 0
  (|for_it_TCC3-1| |nil| 3509456106 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_it| SUBTYPE "(number_fields.+)(for_iterate.i, 1)"
    "upfrom(for_iterate.upfrom)")))
 (|for_it_TCC4| 0
  (|for_it_TCC4-1| |nil| 3509456106 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_it| SUBTYPE "for_iterate.i"
    "subrange(for_iterate.upfrom, for_iterate.upto)")))
 (|for_it_TCC5| 0
  (|for_it_TCC5-1| |nil| 3509456106 ("" (TERMINATION-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_it| TERMINATION
    "for_iterate.for_it(for_iterate.upfrom, (number_fields.+)(for_iterate.i, 1), for_iterate.upto, for_iterate.f(for_iterate.i, for_iterate.a), for_iterate.f)"
    "NIL")))
 (|for_it_TCC6| 0
  (|for_it_TCC6-2| |nil| 3509456550
   ("" (SKEEP)
    (("" (TYPEPRED "v(upfrom, i + 1, upto, f(i, a), f)")
      (("" (LEMMA "for_def_inv")
        (("" (INST -1 "i" "upto-i" "a" "ext2int(upfrom,upto,f)")
          (("1" (ASSERT)
            (("1" (EXPAND "ext2int" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|ext2int| CONST-DECL "T" |for_iterate| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|i| SKOLEM-CONST-DECL "upfrom(upfrom)" |for_iterate| NIL)
    (|upfrom| SKOLEM-CONST-DECL "int" |for_iterate| NIL)
    (|upto| SKOLEM-CONST-DECL "int" |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|for_def_inv| FORMULA-DECL NIL |for_iterate| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|for_it| SUBTYPE
    "for_iterate.for_it(for_iterate.upfrom, (number_fields.+)(for_iterate.i, 1), for_iterate.upto, for_iterate.f(for_iterate.i, for_iterate.a), for_iterate.f)"
    "{t: for_iterate.T | t = for_iterate.for_def(for_iterate.i, for_iterate.upto, for_iterate.a, for_iterate.ext2int(for_iterate.upfrom, for_iterate.upto, for_iterate.f))}"))
  (|for_it_TCC6-1| |nil| 3509456106 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_it| SUBTYPE
    "for_iterate.for_it(for_iterate.upfrom, (number_fields.+)(for_iterate.i, 1), for_iterate.upto, for_iterate.f(for_iterate.i, for_iterate.a), for_iterate.f)"
    "{t: for_iterate.T | t = for_iterate.for_def(for_iterate.i, for_iterate.upto, for_iterate.a, for_iterate.ext2int(for_iterate.upfrom, for_iterate.upto, for_iterate.f))}")))
 (|for_TCC1| 0
  (|for_TCC1-1| |nil| 3505588136 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for| SUBTYPE "for_iterate.m" "upfrom(for_iterate.m)")))
 (|for_eq| 0
  (|for_eq-1| |nil| 3508252057
   ("" (SKEEP)
    (("" (EXPAND "for")
      (("" (TYPEPRED "for_it(i,i,j,a,f)") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|for| CONST-DECL "T" |for_iterate| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     NIL))
   SHOSTAK))
 (|for_induction_TCC1| 0
  (|for_induction_TCC1-1| |nil| 3508423933 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_induction| SUBTYPE "0"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_induction_TCC2| 0
  (|for_induction_TCC2-1| |nil| 3508423933 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_induction| SUBTYPE "for_iterate.k"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_induction_TCC3| 0
  (|for_induction_TCC3-1| |nil| 3509180332 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_induction| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_induction_TCC4| 0
  (|for_induction_TCC4-2| "" 3790088202 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|for_induction| SUBTYPE "(number_fields.+)(for_iterate.m, for_iterate.k)"
    "subrange(for_iterate.m, for_iterate.n)"))
  (|for_induction_TCC4-1| |nil| 3509180332
   ("" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) NIL NIL
   (|for_induction| SUBTYPE "(number_fields.+)(for_iterate.m, for_iterate.k)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|for_induction_TCC5| 0
  (|for_induction_TCC5-1| |nil| 3522757770 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_induction| SUBTYPE
    "(number_fields.+)((number_fields.-)(for_iterate.n, for_iterate.m), 1)"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_induction| 0
  (|for_induction-1| |nil| 3508424040
   ("" (SKEEP)
    (("" (CASE "n >= m")
      (("1" (REWRITE "for_eq")
        (("1" (LEMMA "for_def_induction")
          (("1"
            (INST -1 "m" "n" "init" "ext2int(m,n,f)"
             "LAMBDA(k:nat,ak:T):  k > n-m+1 OR inv(k,ak)")
            (("1" (ASSERT)
              (("1" (EXPAND "max")
                (("1" (EXPAND "ext2int") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "for")
        (("2" (EXPAND "for_it") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|for_def_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|for_eq| FORMULA-DECL NIL |for_iterate| NIL)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     NIL)
    (|for| CONST-DECL "T" |for_iterate| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|for_invariant_TCC1| 0
  (|for_invariant_TCC1-1| |nil| 3759620211 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_invariant| SUBTYPE "for_iterate.m"
    "subrange(for_iterate.m, (number_fields.+)(1, for_iterate.n))")))
 (|for_invariant_TCC2| 0
  (|for_invariant_TCC2-1| |nil| 3759620211 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_invariant| SUBTYPE "for_iterate.k"
    "subrange(for_iterate.m, (number_fields.+)(1, for_iterate.n))")))
 (|for_invariant_TCC3| 0
  (|for_invariant_TCC3-1| |nil| 3759620211 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_invariant| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "subrange(for_iterate.m, (number_fields.+)(1, for_iterate.n))")))
 (|for_invariant_TCC4| 0
  (|for_invariant_TCC4-1| |nil| 3759620211 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|for_invariant| SUBTYPE "(number_fields.+)(for_iterate.n, 1)"
    "subrange(for_iterate.m, (number_fields.+)(1, for_iterate.n))")))
 (|for_invariant| 0
  (|for_invariant-1| |nil| 3759620211
   ("" (SKEEP)
    (("" (LEMMA "for_induction")
      (("" (INST?)
        (("" (INST -1 "LAMBDA(i:upto(1 - m + n),a:T):inv(m+i,a)")
          (("" (ASSERT)
            (("" (SKEEP)
              (("" (INST -3 "k+m" "ak") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|for_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL))
 (|iter_TCC1| 0
  (|iter_TCC1-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iter| SUBTYPE
    "(number_fields.-)((number_fields.+)(for_iterate.m, for_iterate.k), 1)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iter_TCC2| 0
  (|iter_TCC2-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|iter| SUBTYPE "(number_fields.-)(for_iterate.k, 1)" "nat")))
 (|iter_TCC3| 0
  (|iter_TCC3-1| NIL 3932120495 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|iter| TERMINATION
    "for_iterate.iter(for_iterate.m, for_iterate.n)((number_fields.-)(for_iterate.k, 1))"
    "NIL")))
 (|iter_TCC4| 0
  (|iter_TCC4-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iter| SUBTYPE "for_iterate.n" "subrange(for_iterate.m, for_iterate.n)")))
 (|iter_TCC5| 0
  (|iter_TCC5-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iter| SUBTYPE "(number_fields.-)(for_iterate.n, for_iterate.m)" "nat")))
 (|iter_TCC6| 0
  (|iter_TCC6-1| NIL 3932120495 ("" (TERMINATION-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iter| TERMINATION
    "for_iterate.iter(for_iterate.m, for_iterate.n)((number_fields.-)(for_iterate.n, for_iterate.m))"
    "NIL")))
 (|iter_ge_TCC1| 0
  (|iter_ge_TCC1-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL
   (|iter_ge| SUBTYPE
    "(number_fields.+)((number_fields.-)(for_iterate.n, for_iterate.m), for_iterate.k)"
    "nat")))
 (|iter_ge_TCC2| 0
  (|iter_ge_TCC2-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iter_ge| SUBTYPE "for_iterate.n"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iter_ge_TCC3| 0
  (|iter_ge_TCC3-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iter_ge| SUBTYPE "(number_fields.-)(for_iterate.n, for_iterate.m)"
    "nat")))
 (|iter_ge| 0
  (|iter_ge-1| NIL 3932120538
   ("" (SKEEP* :PREDS? T)
    (("" (EXPAND "iter" 1 1)
      (("" (CASE "k-1 <= 0")
        (("1" (CASE-REPLACE "k=1")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iter| DEF-DECL "T" |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|iterate_eq_iter_TCC1| 0
  (|iterate_eq_iter_TCC1-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iterate_eq_iter| SUBTYPE
    "LAMBDA (i: naturalnumbers.upto(for_iterate.m), a: for_iterate.T): for_iterate.f(a)"
    "ForBody(0, for_iterate.m)")))
 (|iterate_eq_iter| 0
  (|iterate_eq_iter-1| NIL 3932120568 ("" (INDUCT-AND-SIMPLIFY "k") NIL NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|iter| DEF-DECL "T" |for_iterate| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|for_iterate_TCC1| 0
  (|for_iterate_TCC1-1| NIL 3932120495 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_iterate| SUBTYPE
    "real_defs.max((number_fields.-)((number_fields.+)(for_iterate.j, 1), for_iterate.i), 0)"
    "nat")))
 (|for_iterate| 0
  (|for_iterate-1| NIL 3932121054
   ("" (SKEEP)
    (("" (CASE "i<=j")
      (("1" (CASE-REPLACE "max(j+1-i,0) = j+1-i")
        (("1" (HIDE -1)
          (("1" (LEMMA "for_induction")
            (("1" (INST? -1)
              (("1"
                (INST -1
                 "LAMBDA(k:[upto(1 - i + j)],ak:T): ak = iter(i, j)(k)(a, f)")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|for| CONST-DECL "T" |for_iterate| NIL)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|for_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|iter| DEF-DECL "T" |for_iterate| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|j| SKOLEM-CONST-DECL "int" |for_iterate| NIL)
    (|i| SKOLEM-CONST-DECL "int" |for_iterate| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|for_down_def_TCC1| 0
  (|for_down_def_TCC1-1| |nil| 3508264810 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_down_def| SUBTYPE
    "real_defs.max((number_fields.+)((number_fields.-)(for_iterate.i, for_iterate.j), 1), 0)"
    "naturalnumber")))
 (|for_down_def_TCC2| 0
  (|for_down_def_TCC2-1| |nil| 3508264810 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_down_def| TERMINATION
    "for_iterate.for_down_def(for_iterate.i, (number_fields.+)(for_iterate.j, 1), for_iterate.a, for_iterate.f)"
    "NIL")))
 (|for_down_def_ext| 0
  (|for_down_def_ext-1| |nil| 3508369533
   ("" (SKOSIMP*)
    (("" (CASE "i!1 < j!1")
      (("1" (GRIND) NIL NIL)
       ("2"
        (CASE "FORALL(i:int,n:nat,a:T,f,g:[[int,T]->T]) :
                                 (FORALL (x:subrange(i-n,i),t:T) : f(x,t) = g(x,t))
                                 IMPLIES
                                 for_down_def(i,i-n,a,f) = for_down_def(i,i-n,a,g)")
        (("1" (INST -1 "i!1" "i!1-j!1" "a!1" "f!1" "g!1")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (INDUCT "n")
            (("1" (GRIND) NIL NIL)
             ("2" (SKOLEM 1 "n")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (EXPAND "for_down_def" 1)
                    (("2" (INST -1 "i" "a" "f" "g")
                      (("2" (SPLIT -1)
                        (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (HIDE 2)
                          (("2" (SKEEP) (("2" (INST? -1) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|for_down_def| DEF-DECL "T" |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   NIL))
 (|for_down_up| 0
  (|for_down_up-1| |nil| 3508359211
   ("" (SKOSIMP*)
    (("" (CASE "i!1 < j!1")
      (("1" (GRIND) NIL NIL)
       ("2"
        (CASE "FORALL (i:int, n:nat, a: T, f: [[int, T] -> T]):
                 for_down_def(i, i-n, a, f) =
                  for_def(i-n, i, a, LAMBDA (k: int, t: T): f(2*i - k - n, t))")
        (("1" (INST -1 "i!1" "i!1-j!1" "a!1" "f!1")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
         ("2" (HIDE 2 3)
          (("2" (INDUCT "n")
            (("1" (GRIND) NIL NIL)
             ("2" (SKOLEM 1 "n")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (EXPAND "for_down_def" 1)
                    (("2" (INST? -1)
                      (("2" (REPLACES -1)
                        (("2" (EXPAND "for_def" 1 2)
                          (("2" (LEMMA "for_shift")
                            (("2" (INST? -1)
                              (("2" (INST -1 "-1") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|for_down_def| DEF-DECL "T" |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|for_shift| FORMULA-DECL NIL |for_iterate| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|for_down_def_induction_TCC1| 0
  (|for_down_def_induction_TCC1-1| |nil| 3508440158 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL (|for_down_def_induction| SUBTYPE "for_iterate.k" "nat")))
 (|for_down_def_induction_TCC2| 0
  (|for_down_def_induction_TCC2-1| |nil| 3508440158 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|for_down_def_induction| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "nat")))
 (|for_down_def_induction_TCC3| 0
  (|for_down_def_induction_TCC3-1| |nil| 3509187311 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|for_down_def_induction| SUBTYPE
    "real_defs.max(0, (number_fields.+)((number_fields.-)(for_iterate.i, for_iterate.j), 1))"
    "nat")))
 (|for_down_def_induction| 0
  (|for_down_def_induction-1| |nil| 3508440185
   ("" (SKEEP)
    (("" (REWRITE "for_down_up")
      (("" (LEMMA "for_def_induction")
        (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|for_down_up| FORMULA-DECL NIL |for_iterate| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|for_def_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|for_down_TCC1| 0
  (|for_down_TCC1-1| |nil| 3508265468 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL
   (|for_down| SUBTYPE
    "(number_fields.-)((number_fields.+)(for_iterate.n, for_iterate.m), for_iterate.k)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|for_down_induction_TCC1| 0
  (|for_down_induction_TCC1-1| |nil| 3508440597 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_down_induction| SUBTYPE "0"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_down_induction_TCC2| 0
  (|for_down_induction_TCC2-1| |nil| 3508440597 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_down_induction| SUBTYPE "for_iterate.k"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_down_induction_TCC3| 0
  (|for_down_induction_TCC3-1| |nil| 3509181991 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_down_induction| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_down_induction_TCC4| 0
  (|for_down_induction_TCC4-2| "" 3790088204 ("" (SUBTYPE-TCC) NIL NIL) NIL
   SHOSTAK
   (|for_down_induction| SUBTYPE
    "(number_fields.-)(for_iterate.n, for_iterate.k)"
    "subrange(for_iterate.m, for_iterate.n)"))
  (|for_down_induction_TCC4-1| |nil| 3509181991
   ("" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) NIL NIL
   (|for_down_induction| SUBTYPE
    "(number_fields.-)(for_iterate.n, for_iterate.k)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|for_down_induction_TCC5| 0
  (|for_down_induction_TCC5-1| |nil| 3522761922 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|for_down_induction| SUBTYPE
    "(number_fields.+)((number_fields.-)(for_iterate.n, for_iterate.m), 1)"
    "upto((number_fields.-)((number_fields.+)(1, for_iterate.n), for_iterate.m))")))
 (|for_down_induction| 0
  (|for_down_induction-2| |nil| 3508440626
   ("" (SKEEP)
    (("" (EXPAND "for_down")
      (("" (LEMMA "for_induction") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|for_down| CONST-DECL "T" |for_iterate| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|for_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL)
  (|for_down_induction-1| |nil| 3508440598 ("" (POSTPONE) NIL NIL) NIL
   SHOSTAK))
 (|for_down_invariant_TCC1| 0
  (|for_down_invariant_TCC1-1| |nil| 3759620970 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|for_down_invariant| SUBTYPE "for_iterate.n"
    "subrange((number_fields.-)(for_iterate.m, 1), for_iterate.n)")))
 (|for_down_invariant_TCC2| 0
  (|for_down_invariant_TCC2-1| |nil| 3759620970 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|for_down_invariant| SUBTYPE "for_iterate.k"
    "subrange((number_fields.-)(for_iterate.m, 1), for_iterate.n)")))
 (|for_down_invariant_TCC3| 0
  (|for_down_invariant_TCC3-1| |nil| 3759620970 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|for_down_invariant| SUBTYPE "(number_fields.-)(for_iterate.k, 1)"
    "subrange((number_fields.-)(for_iterate.m, 1), for_iterate.n)")))
 (|for_down_invariant_TCC4| 0
  (|for_down_invariant_TCC4-1| |nil| 3759620970 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|for_down_invariant| SUBTYPE "(number_fields.-)(for_iterate.m, 1)"
    "subrange((number_fields.-)(for_iterate.m, 1), for_iterate.n)")))
 (|for_down_invariant| 0
  (|for_down_invariant-1| |nil| 3759620998
   ("" (SKEEP)
    (("" (LEMMA "for_down_induction")
      (("" (INST?)
        (("" (INST -1 "LAMBDA(i:upto(1 - m + n),a:T):inv(n-i,a)")
          (("" (ASSERT)
            (("" (SKEEP)
              (("" (INST -3 "n-k" "ak") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|for_down_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|for_down_eq| 0
  (|for_down_eq-1| |nil| 3508265817
   ("" (SKEEP)
    (("" (EXPAND "for_down")
      (("" (REWRITE "for_eq")
        (("" (LEMMA "for_down_up")
          (("" (INST?)
            ((""
              (CASE
                  "(LAMBDA (k: int, t: T): ext2int(j, i, f)(i - k + j, t)) = ext2int(j, i,
                        LAMBDA (k: subrange(j, i), t: T): f(i - k + j, t))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (DECOMPOSE-EQUALITY 1) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|for_down| CONST-DECL "T" |for_iterate| NIL)
    (|for_down_up| FORMULA-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|for_eq| FORMULA-DECL NIL |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|iterate_left_def_TCC1| 0
  (|iterate_left_def_TCC1-1| |nil| 3508252462 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|iterate_left_def| SUBTYPE
    "(number_fields.-)(for_iterate.j, for_iterate.i)" "naturalnumber")))
 (|iterate_left_def_TCC2| 0
  (|iterate_left_def_TCC2-1| |nil| 3508252462 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iterate_left_def| SUBTYPE "(number_fields.-)(for_iterate.j, 1)"
    "upfrom(for_iterate.i)")))
 (|iterate_left_def_TCC3| 0
  (|iterate_left_def_TCC3-1| |nil| 3508252462 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL
   (|iterate_left_def| TERMINATION
    "for_iterate.iterate_left_def(for_iterate.i, (number_fields.-)(for_iterate.j, 1), for_iterate.f, for_iterate.o)"
    "NIL")))
 (|iterate_left_def_ext| 0
  (|iterate_left_def_ext-1| |nil| 3508370001
   ("" (SKOSIMP*)
    ((""
      (CASE "FORALL(i:int,n:nat,f,g:[int->T],o:[[T,T]->T]) :
                                               (FORALL (x:subrange(i,i+n)) : f(x) = g(x))
                                               IMPLIES
                                               iterate_left_def(i,i+n,f,o) = iterate_left_def(i,i+n,g,o)")
      (("1" (INST -1 "i!1" "j!1-i!1" "f!1" "g!1" "oh!1")
        (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE-ALL-BUT 1)
        (("2" (INDUCT "n")
          (("1" (GRIND) NIL NIL)
           ("2" (SKOLEM 1 "n")
            (("2" (FLATTEN)
              (("2" (SKEEP)
                (("2" (EXPAND "iterate_left_def" 1)
                  (("2" (INST -1 "i" "f" "g" "o")
                    (("2" (SPLIT -1)
                      (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (HIDE 2)
                        (("2" (SKEEP) (("2" (INST? -1) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_left_def| DEF-DECL "T" |for_iterate| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL))
 (|ext2int_TCC2| 0
  (|ext2int_TCC2-1| |nil| 3558204382 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|ext2int| SUBTYPE "for_iterate.i"
    "subrange(for_iterate.upfrom, for_iterate.upto)")))
 (|iterate_left_TCC1| 0
  (|iterate_left_TCC1-1| |nil| 3508332707 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iterate_left| SUBTYPE "for_iterate.m"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_left_TCC2| 0
  (|iterate_left_TCC2-1| |nil| 3508362054 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iterate_left| SUBTYPE "for_iterate.k_1"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_left_eq| 0
  (|iterate_left_eq-1| |nil| 3508252515
   (""
    (CASE "FORALL (i:int, n: nat, f:IterateBody(i,i+n), o: [[T, T] -> T]):
                                                                iterate_left(i,i+n,f,o) =
                                                                 iterate_left_def(i,i+n,ext2int(i,i+n,f(i),f),o)")
    (("1" (SKOSIMP)
      (("1" (INST -1 "i!1" "j!1-i!1" "f!1" "oh!1") (("1" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (GRIND) NIL NIL)
         ("2" (SKOLEM 1 "n")
          (("2" (FLATTEN)
            (("2" (SKEEP)
              (("2" (EXPAND "iterate_left_def" 1)
                (("2" (INST -1 "i" "LAMBDA(k:subrange(i,i+n)):f(k)" "o")
                  (("2" (EXPAND "ext2int" 1 2)
                    (("2" (LEMMA "iterate_left_def_ext")
                      (("2" (INST? -1)
                        (("2" (INST -1 "ext2int(i, 1 + i + n, f(i), f)")
                          (("2" (SPLIT -1)
                            (("1" (REPLACES -1)
                              (("1" (REPLACES -1 :DIR RL)
                                (("1" (EXPAND "iterate_left")
                                  (("1" (REWRITE "for_eq")
                                    (("1" (EXPAND "for_def")
                                      (("1" (EXPAND "ext2int" 1 1)
                                        (("1" (REWRITE "for_eq")
                                          (("1" (LEMMA "for_def_ext")
                                            (("1" (INST?)
                                              (("1"
                                                (INST -1 "ext2int(1 + i, i + n,
                               LAMBDA (k_1: subrange(1 + i, i + n), t: T):
                                 t o f(k_1))")
                                                (("1" (SPLIT -1)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (SKEEP)
                                                      (("2" (EXPAND "ext2int")
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (SKEEP)
                                (("2" (EXPAND "ext2int")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_left_def_ext| FORMULA-DECL NIL |for_iterate| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|for_def| DEF-DECL "T" |for_iterate| NIL)
    (|for_def_ext| FORMULA-DECL NIL |for_iterate| NIL)
    (|for_eq| FORMULA-DECL NIL |for_iterate| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     NIL)
    (|for| CONST-DECL "T" |for_iterate| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|IterateBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|iterate_left| CONST-DECL "T" |for_iterate| NIL)
    (|iterate_left_def| DEF-DECL "T" |for_iterate| NIL))
   NIL))
 (|iterate_left_induction_TCC1| 0
  (|iterate_left_induction_TCC1-1| |nil| 3508459075 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_left_induction| SUBTYPE "0"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_left_induction_TCC2| 0
  (|iterate_left_induction_TCC2-1| |nil| 3509182065 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_left_induction| SUBTYPE "for_iterate.k"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_left_induction_TCC3| 0
  (|iterate_left_induction_TCC3-1| |nil| 3509182065 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_left_induction| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_left_induction_TCC4| 0
  (|iterate_left_induction_TCC4-1| |nil| 3509182065 ("" (SUBTYPE-TCC) NIL NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|iterate_left_induction| SUBTYPE
    "(number_fields.+)((number_fields.+)(for_iterate.m, for_iterate.k), 1)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_left_induction_TCC5| 0
  (|iterate_left_induction_TCC5-1| |nil| 3509182065 ("" (SUBTYPE-TCC) NIL NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|iterate_left_induction| SUBTYPE
    "(number_fields.-)(for_iterate.n, for_iterate.m)"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_left_induction| 0
  (|iterate_left_induction-1| |nil| 3508459230
   ("" (SKEEP)
    (("" (EXPAND "iterate_left")
      (("" (LEMMA "for_induction")
        (("" (INST?)
          (("" (INST?)
            (("" (ASSERT)
              (("" (CASE-REPLACE "max(0,n-m) = n-m")
                (("1" (HIDE -1)
                  (("1" (HIDE-ALL-BUT (-2 1))
                    (("1" (SKEEP)
                      (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_left| CONST-DECL "T" |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|IterateBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|for_induction| FORMULA-DECL NIL |for_iterate| NIL))
   SHOSTAK))
 (|iterate_left_invariant_TCC1| 0
  (|iterate_left_invariant_TCC1-1| |nil| 3759623077 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_left_invariant| SUBTYPE "for_iterate.k"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_left_invariant_TCC2| 0
  (|iterate_left_invariant_TCC2-1| |nil| 3759623077 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_left_invariant| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_left_invariant_TCC3| 0
  (|iterate_left_invariant_TCC3-1| |nil| 3759623077 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_left_invariant| SUBTYPE "for_iterate.n"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_left_invariant| 0
  (|iterate_left_invariant-1| |nil| 3759623379
   ("" (SKEEP)
    (("" (LEMMA "iterate_left_induction")
      (("" (INST?)
        (("" (INST -1 "LAMBDA(i:upto(n-m),a:T):inv(m+i,a)")
          (("" (ASSERT)
            (("" (SKEEP)
              (("" (INST -3 "k+m" "ak") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_left_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|IterateBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|iterate_right_def_TCC1| 0
  (|iterate_right_def_TCC1-1| |nil| 3508253149 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|iterate_right_def| SUBTYPE "for_iterate.j"
    "upfrom((number_fields.+)(1, for_iterate.i))")))
 (|iterate_right_def_TCC2| 0
  (|iterate_right_def_TCC2-1| |nil| 3508253149 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|iterate_right_def| TERMINATION
    "for_iterate.iterate_right_def((number_fields.+)(for_iterate.i, 1), for_iterate.j, for_iterate.f, for_iterate.o)"
    "NIL")))
 (|iterate_right_def_ext| 0
  (|iterate_right_def_ext-1| |nil| 3508370279
   ("" (SKOSIMP*)
    ((""
      (CASE "FORALL(n:nat,j:int,f,g:[int->T],o:[[T,T]->T]) :
                                                      (FORALL (x:subrange(j-n,j)) : f(x) = g(x))
                                                      IMPLIES
                                                      iterate_right_def(j-n,j,f,o) = iterate_right_def(j-n,j,g,o)")
      (("1" (INST -1 "j!1-i!1" "j!1" "f!1" "g!1" "oh!1")
        (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE-ALL-BUT 1)
        (("2" (INDUCT "n")
          (("1" (GRIND) NIL NIL)
           ("2" (SKOLEM 1 "n")
            (("2" (FLATTEN)
              (("2" (SKEEP)
                (("2" (EXPAND "iterate_right_def" 1)
                  (("2" (INST -1 "j" "f" "g" "o")
                    (("2" (SPLIT -1)
                      (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (HIDE 2)
                        (("2" (SKEEP) (("2" (INST? -1) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_right_def| DEF-DECL "T" |for_iterate| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL))
 (|iterate_right_TCC1| 0
  (|iterate_right_TCC1-1| |nil| 3508284385 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iterate_right| SUBTYPE "for_iterate.n"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_right_TCC2| 0
  (|iterate_right_TCC2-1| |nil| 3508362429 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|iterate_right| SUBTYPE "for_iterate.k_1"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_right_eq| 0
  (|iterate_right_eq-2| |nil| 3508282821
   ("" (SKOSIMP*)
    ((""
      (CASE "FORALL (n:nat, j:int, f: [subrange(j-n,j) -> T], o: [[T, T] -> T]):
                                                                       iterate_right(j-n,j,f,o) =
                                                                        iterate_right_def(j-n,j,ext2int(j-n,j,f(j),f),o)")
      (("1" (INST -1 "j!1-i!1" "j!1" "f!1" "oh!1") (("1" (ASSERT) NIL NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (GRIND) NIL NIL)
           ("2" (SKOLEM 1 "n")
            (("2" (FLATTEN)
              (("2" (SKEEP)
                (("2" (EXPAND "iterate_right_def" 1)
                  (("2" (EXPAND "ext2int" 1 1)
                    (("2" (INST -1 "j" "LAMBDA(k:subrange(j-n,j)):f(k)" "o")
                      (("2" (LEMMA "iterate_right_def_ext")
                        (("2" (INST?)
                          (("2" (INST -1 "ext2int(-1 - n + j, j, f(j), f)")
                            (("2" (SPLIT -1)
                              (("1" (REPLACES -1)
                                (("1" (REPLACES -1 :DIR RL)
                                  (("1" (EXPAND "iterate_right")
                                    (("1" (REWRITE "for_down_eq")
                                      (("1" (REWRITE "for_down_eq")
                                        (("1" (EXPAND "for_down_def" 1 1)
                                          (("1" (EXPAND "ext2int" 1 1)
                                            (("1" (LEMMA "for_down_def_ext")
                                              (("1" (INST?)
                                                (("1"
                                                  (INST -1
                                                   "ext2int(j - n, j - 1,
                             LAMBDA (k_1: subrange(j - n, j - 1), t: T):
                               f(k_1) o t)")
                                                  (("1" (SPLIT -1)
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (EXPAND "ext2int")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT 1)
                                (("2" (SKEEP)
                                  (("2" (EXPAND "ext2int")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_right_def| DEF-DECL "T" |for_iterate| NIL)
    (|iterate_right| CONST-DECL "T" |for_iterate| NIL)
    (|IterateBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|for_down| CONST-DECL "T" |for_iterate| NIL)
    (|for| CONST-DECL "T" |for_iterate| NIL)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|for_down_eq| FORMULA-DECL NIL |for_iterate| NIL)
    (|for_down_def| DEF-DECL "T" |for_iterate| NIL)
    (|for_down_def_ext| FORMULA-DECL NIL |for_iterate| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|iterate_right_def_ext| FORMULA-DECL NIL |for_iterate| NIL))
   NIL)
  (|iterate_right_eq-1| |nil| 3508282699 ("" (POSTPONE) NIL NIL) NIL SHOSTAK))
 (|iterate_right_induction_TCC1| 0
  (|iterate_right_induction_TCC1-1| |nil| 3508460777 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_right_induction| SUBTYPE "for_iterate.k"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_right_induction_TCC2| 0
  (|iterate_right_induction_TCC2-1| |nil| 3509182194 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_right_induction| SUBTYPE "(number_fields.+)(for_iterate.k, 1)"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_right_induction_TCC3| 0
  (|iterate_right_induction_TCC3-1| |nil| 3509182194 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL
   (|iterate_right_induction| SUBTYPE
    "(number_fields.-)((number_fields.-)(for_iterate.n, for_iterate.k), 1)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_right_induction_TCC4| 0
  (|iterate_right_induction_TCC4-1| |nil| 3509182194 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL
   (|iterate_right_induction| SUBTYPE
    "(number_fields.-)(for_iterate.n, for_iterate.m)"
    "upto((number_fields.-)(for_iterate.n, for_iterate.m))")))
 (|iterate_right_induction| 0
  (|iterate_right_induction-1| |nil| 3508460787
   ("" (SKEEP)
    (("" (EXPAND "iterate_right")
      (("" (LEMMA "for_down_induction")
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE (-1 2))
              (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_right| CONST-DECL "T" |for_iterate| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|IterateBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|ForBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|for_down_induction| FORMULA-DECL NIL |for_iterate| NIL))
   SHOSTAK))
 (|iterate_right_invariant_TCC1| 0
  (|iterate_right_invariant_TCC1-1| |nil| 3759623887 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|iterate_right_invariant| SUBTYPE "(number_fields.-)(for_iterate.k, 1)"
    "subrange(for_iterate.m, for_iterate.n)")))
 (|iterate_right_invariant| 0
  (|iterate_right_invariant-1| |nil| 3759623915
   ("" (SKEEP)
    (("" (LEMMA "iterate_right_induction")
      (("" (INST?)
        (("" (INST -1 "LAMBDA(i:upto(n-m),a:T):inv(n-i,a)")
          (("" (ASSERT)
            (("" (SKEEP)
              (("" (INST -3 "n-k" "ak") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|iterate_right_induction| FORMULA-DECL NIL |for_iterate| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|IterateBody| TYPE-EQ-DECL NIL |for_iterate| NIL)
    (T FORMAL-TYPE-DECL NIL |for_iterate| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)))

