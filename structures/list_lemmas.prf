(|list_lemmas|
 (|every_reverse| 0
  (|every_reverse-1| |nil| 3810908539
   ("" (LEMMA "every_nth[T]")
    (("" (LEMMA "nth_reverse[T]")
      (("" (INDUCT "l")
        (("1" (SKEEP) (("1" (EXPAND "reverse" 1) (("1" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "reverse" 1)
              (("2" (INST -1 "P")
                (("2" (EXPAND "every" -2)
                  (("2" (FLATTEN -2)
                    (("2" (ASSERT)
                      (("2" (INST -5 "P" "cons(cons1_var, null)")
                        (("2" (HIDE -4)
                          (("2" (GRIND)
                            (("2" (LEMMA "every_append[T]")
                              (("2"
                                (INST -1 "P" "reverse(cons2_var)"
                                 "cons(cons1_var, null)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|lenght_cons| 0
  (|lenght_cons-1| NIL 3964464388 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|length_cdr| 0
  (|length_cdr-1| NIL 3964289121 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|find_TCC1| 0
  (|find_TCC1-1| NIL 3964466795 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|find| SUBTYPE "list_lemmas.k" "below[length[T](l)]" (52 43 52 44))))
 (|find_TCC2| 0
  (|find_TCC2-1| NIL 3964466795 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|find| SUBTYPE "list_lemmas.k" "below[length[T](l)]" (55 14 55 15))))
 (|find_TCC3| 0
  (|find_TCC3-1| NIL 3964466795 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|find| SUBTYPE "(number_fields.-)(list_lemmas.k, list_lemmas.i)"
    "below[length[T](ll)]" (55 26 55 29))))
 (|find_TCC4| 0
  (|find_TCC4-1| NIL 3964466795 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|find| SUBTYPE "list_lemmas.l"
    "{ll: list_adt[list_lemmas.T].list | EXISTS (i: naturalnumbers.upto(list_props[list_lemmas.T].length(list_lemmas.l))): booleans.AND(list_props[list_lemmas.T].length(ll) = (number_fields.-)(list_props[list_lemmas.T].length(list_lemmas.l), i), booleans.AND(FORALL (k: naturalnumbers.below(i)): (booleans.NOT)(list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, k))), booleans.AND((booleans.IMPLIES(list_adt[list_lemmas.T].cons?(ll), list_lemmas.test(list_adt[list_lemmas.T].car(ll)))), FORALL (k: integers.subrange(i, (number_fields.-)(list_props[list_lemmas.T].length(list_lemmas.l), 1))): list_props[list_lemmas.T].nth(list_lemmas.l, k) = list_props[list_lemmas.T].nth(ll, (number_fields.-)(k, i)))))}"
    (56 19 56 20))))
 (|find_TCC5| 0
  (|find_TCC5-1| NIL 3964466795 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|find| SUBTYPE "list_lemmas.l" "(list_adt[list_lemmas.T].cons?)"
    (57 17 57 18))))
 (|find_TCC6| 0
  (|find_TCC6-1| NIL 3964466795 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|find| SUBTYPE "list_lemmas.l"
    "{ll: list_adt[list_lemmas.T].list | EXISTS (i: naturalnumbers.upto(list_props[list_lemmas.T].length(list_lemmas.l))): booleans.AND(list_props[list_lemmas.T].length(ll) = (number_fields.-)(list_props[list_lemmas.T].length(list_lemmas.l), i), booleans.AND(FORALL (k: naturalnumbers.below(i)): (booleans.NOT)(list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, k))), booleans.AND((booleans.IMPLIES(list_adt[list_lemmas.T].cons?(ll), list_lemmas.test(list_adt[list_lemmas.T].car(ll)))), FORALL (k: integers.subrange(i, (number_fields.-)(list_props[list_lemmas.T].length(list_lemmas.l), 1))): list_props[list_lemmas.T].nth(list_lemmas.l, k) = list_props[list_lemmas.T].nth(ll, (number_fields.-)(k, i)))))}"
    (57 26 57 27))))
 (|find_TCC7| 0
  (|find_TCC7-1| NIL 3964466795 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|find| TERMINATION
    "list_lemmas.find(list_lemmas.test, list_adt[list_lemmas.T].cdr(list_lemmas.l))"
    "NIL" (58 7 58 24))))
 (|find_TCC8| 0
  (|find_TCC8-1| NIL 3964466795
   ("" (SKEEP*)
    (("" (TYPEPRED "v(test, cdr[T](l))")
      (("1" (SKEEP -1)
        (("1" (NAME-REPLACE "VV" "v(test, cdr[T](l))")
          (("1" (TYPEPRED "i")
            (("1" (INST 3 "i+1")
              (("1" (REWRITE "length_cdr")
                (("1" (ASSERT)
                  (("1" (REPLACE -4)
                    (("1" (SPLIT 3)
                      (("1" (SKEEP :PREDS? T)
                        (("1" (INST -5 "k-1")
                          (("1" (EXPAND "nth" -2) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (CASE "k=0")
                            (("1" (REPLACES -1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "nth" -2)
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP :PREDS? T)
                        (("2" (INST -7 "k-1")
                          (("1" (EXPAND "nth" 1 1) (("1" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (REWRITE "length_cdr") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "length_cdr") (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE (3 4)) (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|find| SUBTYPE
    "list_lemmas.find(list_lemmas.test, list_adt[list_lemmas.T].cdr(list_lemmas.l))"
    "{ll: list_adt[list_lemmas.T].list | EXISTS (i: naturalnumbers.upto(list_props[list_lemmas.T].length(list_lemmas.l))): booleans.AND(list_props[list_lemmas.T].length(ll) = (number_fields.-)(list_props[list_lemmas.T].length(list_lemmas.l), i), booleans.AND(FORALL (k: naturalnumbers.below(i)): (booleans.NOT)(list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, k))), booleans.AND((booleans.IMPLIES(list_adt[list_lemmas.T].cons?(ll), list_lemmas.test(list_adt[list_lemmas.T].car(ll)))), FORALL (k: integers.subrange(i, (number_fields.-)(list_props[list_lemmas.T].length(list_lemmas.l), 1))): list_props[list_lemmas.T].nth(list_lemmas.l, k) = list_props[list_lemmas.T].nth(ll, (number_fields.-)(k, i)))))}"
    (58 7 58 24))))
 (|position_TCC1| 0
  (|position_TCC1-1| NIL 3964517013 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|position| SUBTYPE "list_lemmas.k" "below[length[T](l)]" (65 43 65 44))))
 (|position_TCC2| 0
  (|position_TCC2-1| NIL 3964517013 ("" (GRIND) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   NIL
   (|position| SUBTYPE "0"
    "{n: naturalnumbers.upto(list_props[list_lemmas.T].length(list_lemmas.l)) | booleans.AND(FORALL (k: naturalnumbers.below(n)): (booleans.NOT)(list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, k))), (booleans.IMPLIES(reals.<(n, list_props[list_lemmas.T].length(list_lemmas.l)), list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, n)))))}"
    (67 35 67 36))))
 (|position_TCC3| 0
  (|position_TCC4-1| NIL 3964517013
   ("" (SKEEP*)
    (("" (TYPEPRED "v(test, cdr[T](l))")
      (("1" (REWRITE "length_cdr")
        (("1" (ASSERT)
          (("1" (EXPAND "nth" 3 2)
            (("1" (SPLIT 3)
              (("1" (SKEEP :PREDS? T)
                (("1" (NAME-REPLACE "VV" "v(test, cdr[T](l))")
                  (("1" (INST -4 "k-1")
                    (("1" (EXPAND "nth" -2) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (CASE-REPLACE "k=0")
                      (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (T FORMAL-TYPE-DECL NIL |list_lemmas| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|strict_well_founded?| CONST-DECL "bool" |orders| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|l| SKOLEM-CONST-DECL "list[T]" |list_lemmas| NIL)
    (|v| SKOLEM-CONST-DECL "[d1: {z: [PRED[T], list[T]] | z`2 << l} ->
   {n: upto(length(d1`2)) |
      (FORALL (k: below(n)): NOT d1`1(nth(d1`2, k))) AND
       (n < length(d1`2) IMPLIES d1`1(nth(d1`2, n)))}]"
     |list_lemmas| NIL)
    (|test| SKOLEM-CONST-DECL "PRED[T]" |list_lemmas| NIL)
    (|k| SKOLEM-CONST-DECL "below(1 + v(test, cdr(l)))" |list_lemmas| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_cdr| FORMULA-DECL NIL |list_lemmas| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|position| SUBTYPE
    "(number_fields.+)(list_lemmas.position(list_lemmas.test, list_adt[list_lemmas.T].cdr(list_lemmas.l)), 1)"
    "{n: naturalnumbers.upto(list_props[list_lemmas.T].length(list_lemmas.l)) | booleans.AND(FORALL (k: naturalnumbers.below(n)): (booleans.NOT)(list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, k))), (booleans.IMPLIES(reals.<(n, list_props[list_lemmas.T].length(list_lemmas.l)), list_lemmas.test(list_props[list_lemmas.T].nth(list_lemmas.l, n)))))}"
    (68 7 68 30))))
 (|max_length_TCC1| 0
  (|max_length_TCC1-1| |nil| 3810907533
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|max_length| SUBTYPE "list_lemmas.L"
    "(list_adt[list_adt[list_lemmas.T].list].cons?)" (82 20 82 21))))
 (|max_length_TCC2| 0
  (|max_length_TCC2-1| |nil| 3810907533
   ("" (SKEEP) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|max_length| TERMINATION
    "list_lemmas.max_length(list_adt[list_adt[list_lemmas.T].list].cdr(list_lemmas.L))"
    "NIL" (82 25 82 43))))
 (|zip_TCC1| 0
  (|zip_TCC1-1| |nil| 3810907533 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL
   NIL
   (|zip| SUBTYPE "list_lemmas.l1" "(list_adt[list_lemmas.T].cons?)"
    (94 15 94 17))))
 (|zip_TCC2| 0
  (|zip_TCC2-1| |nil| 3810907533
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "l2")
        (("" (EXPAND "length" -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|zip| SUBTYPE "list_lemmas.l2" "(list_adt[list_lemmas.T].cons?)"
    (94 23 94 25))))
 (|zip_TCC3| 0
  (|zip_TCC3-1| |nil| 3810907533
   ("" (SKEEP)
    (("" (TYPEPRED "l2")
      (("" (EXPAND "length" -1)
        (("" (ASSERT)
          (("" (LIFT-IF -1)
            (("" (SPLIT -1)
              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|zip| SUBTYPE "list_adt[list_lemmas.T].cdr(list_lemmas.l2)"
    "{ll: list_adt[list_lemmas.T].list | list_props[list_lemmas.T].length(ll) = list_props[list_lemmas.T].length(list_adt[list_lemmas.T].cdr(list_lemmas.l1))}"
    (94 42 94 49))))
 (|zip_TCC4| 0
  (|zip_TCC4-1| |nil| 3810907533
   ("" (SKEEP) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|zip| TERMINATION
    "list_lemmas.zip(list_adt[list_lemmas.T].cdr(list_lemmas.l1), list_adt[list_lemmas.T].cdr(list_lemmas.l2))"
    "NIL" (94 30 94 50))))
 (|combo_list_TCC1| 0
  (|combo_list_TCC1-1| |nil| 3810907533
   ("" (SKEEP)
    (("" (LEMMA "length_appendn[T]")
      (("" (INST?)
        (("" (REPLACE -1)
          (("" (LEMMA "length_appendn[T]")
            (("" (INST -1 "l1" "length(l2)")
              (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_appendn| FORMULA-DECL NIL |more_list_props| NIL)) NIL
   (|combo_list| SUBTYPE
    "more_list_props[list_lemmas.T].^(list_lemmas.l2, list_props[list_lemmas.T].length(list_lemmas.l1))"
    "{ll: list_adt[list_lemmas.T].list | list_props[list_lemmas.T].length(ll) = list_props[list_lemmas.T].length(more_list_props[list_lemmas.T].^(list_lemmas.l1, list_props[list_lemmas.T].length(list_lemmas.l2)))}"
    (105 22 105 35))))
 (|append_left_inj| 0
  (|append_left_inj-1| |nil| 3810908541
   ("" (SKEEP)
    (("" (LEMMA "list_extensionality[T]")
      (("" (LEMMA "nth_append_below[T]")
        (("" (LEMMA "length_append[T]")
          (("" (INST? -1)
            (("" (REPLACE -4)
              (("" (LEMMA "length_append[T]")
                (("" (INST -1 "l2" "l")
                  (("" (REPLACE -1)
                    (("" (HIDE -1)
                      (("" (ASSERT)
                        (("" (INST -3 "l1" "l2")
                          (("" (FLATTEN -3)
                            (("" (HIDE -3)
                              (("" (ASSERT)
                                (("" (SKEEP)
                                  (("" (INST -2 "n" "l1" "l")
                                    (("" (TYPEPRED "n")
                                      (("" (ASSERT)
                                        (("" (HIDE -1)
                                          (("" (LEMMA "nth_append_below[T]")
                                            (("" (INST -1 "n" "l2" "l")
                                              (("" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_extensionality| FORMULA-DECL NIL |more_list_props| NIL)
    (|nth_append_below| FORMULA-DECL NIL |more_list_props| NIL))
   SHOSTAK))
 (|caret_swap| 0
  (|caret_swap-1| |nil| 3811087739
   ("" (INDUCT "n")
    (("1" (EXPAND "^")
      (("1" (EXPAND "^")
        (("1" (SKEEP)
          (("1" (REWRITE "append_null_right")
            (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "^" 1 1)
          (("2" (INST?)
            (("2" (EXPAND "^" 1 2)
              (("2" (REPLACE -1) (("2" (REWRITE "append_assoc") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append_null_right| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK))
 (|caret_to_append_TCC1| 0
  (|caret_to_append_TCC1-1| |nil| 3811086967 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|caret_to_append| SUBTYPE
    "((number_fields.-)(list_lemmas.m, list_lemmas.n))" "nat"
    (122 23 122 26))))
 (|caret_to_append| 0
  (|caret_to_append-1| |nil| 3811086968
   (""
    (CASE "FORALL (l: list[T], m, n, k: nat):
        m > n AND k = m-n IMPLIES l ^ m = append(l ^ n, l ^ (m - n))")
    (("1" (SKEEP)
      (("1" (INST?)
        (("1" (INST -1 "m-n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "k")
        (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (CASE "j=0")
              (("1" (REPLACE -1)
                (("1" (MOVE-TERMS -4 R 2)
                  (("1" (REPLACE -4 :DIR RL)
                    (("1" (ASSERT)
                      (("1" (REWRITE "caret_swap")
                        (("1" (EXPAND "^" 1 3)
                          (("1" (EXPAND "^" 1 3)
                            (("1" (REWRITE "append_null_right") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (MOVE-TERMS -3 L 2)
                (("2" (INST -1 "l" "m-1" "n")
                  (("1" (ASSERT)
                    (("1" (EXPAND "^" 2 3)
                      (("1" (REWRITE "append_assoc" 2 :DIR RL)
                        (("1" (REWRITE "caret_swap" 2 :DIR RL)
                          (("1" (EXPAND "^" 2 2)
                            (("1" (REWRITE "append_assoc" 2)
                              (("1" (REPLACE -1 :DIR RL)
                                (("1" (EXPAND "^" 2 1) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL)
     ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|append_null_right| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK))
 (|append_carat| 0
  (|append_carat-1| |nil| 3810908543
   ("" (SKEEP)
    (("" (LEMMA "caret_to_append")
      (("" (CASE "n=0")
        (("1" (REPLACE -1)
          (("1" (ASSERT)
            (("1" (EXPAND "^" -4 1)
              (("1" (REWRITE "append_null_right") NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (INST -1 "(: w :)" "m" "m-n")
          (("1" (ASSERT)
            (("1" (REPLACE -1)
              (("1" (REWRITE "append_assoc" -3 :DIR RL)
                (("1" (LEMMA "append_left_inj")
                  (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append_null_right| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK))
 (|append_list| 0
  (|append_list-1| |nil| 3813415663
   ("" (SKEEP)
    (("" (LEMMA "list_extensionality[T]")
      (("" (INST -1 "l1" "l3")
        (("" (ASSERT)
          (("" (SKEEP)
            (("" (HIDE 2)
              (("" (LEMMA "nth_append[T]")
                (("" (INST-CP -1 "l1" "l2" "n")
                  (("" (INST -1 "l3" "l4" "n")
                    (("" (ASSERT)
                      (("" (LEMMA "list_extensionality[T]")
                        (("" (INST?)
                          (("" (FLATTEN)
                            (("" (HIDE -2)
                              (("" (SPLIT -1)
                                (("1" (FLATTEN)
                                  (("1" (INST -2 "n")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (TYPEPRED "n")
                                      (("2" (LEMMA "length_append[T]")
                                        (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_extensionality| FORMULA-DECL NIL |more_list_props| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| NIL))
   SHOSTAK))
 (|add_lists_TCC1| 0
  (|add_lists_TCC1-1| |nil| 3810907533 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   NIL NIL
   (|add_lists| SUBTYPE "list_lemmas.l1" "(list_adt[nat].cons?)"
                (147 13 147 15))))
 (|add_lists_TCC2| 0
  (|add_lists_TCC2-1| |nil| 3810907533 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   NIL NIL
   (|add_lists| SUBTYPE "list_lemmas.l2" "(list_adt[nat].cons?)"
                (147 23 147 25))))
 (|add_lists_TCC3| 0
  (|add_lists_TCC3-1| |nil| 3810907533
   ("" (SKEEP)
    (("" (EXPAND "length" 3 3)
      (("" (ASSERT) (("" (EXPAND "length" 3 4) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|add_lists| TERMINATION
                "list_lemmas.add_lists(list_adt[nat].cdr(list_lemmas.l1), list_adt[nat].cdr(list_lemmas.l2))"
                "NIL" (147 28 147 54))))
 (|add_lists_length| 0
  (|add_lists_length-1| |nil| 3882462317
   ("" (INDUCT "l1")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "add_lists" 1)
          (("2" (LIFT-IF 1)
            (("2" (SPLIT 1)
              (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (INST -1 "cdr(l2)")
                  (("2" (EXPAND "length" 2 1) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|add_list_nth_TCC1| 0
  (|add_list_nth_TCC1-1| |nil| 3859279826 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|add_list_nth| SUBTYPE "list_lemmas.n" "below[length[nat](l1)]"
    (158 9 158 10))))
 (|add_list_nth_TCC2| 0
  (|add_list_nth_TCC2-1| |nil| 3859279826 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|add_list_nth| SUBTYPE "list_lemmas.n" "below[length[nat](l2)]"
    (158 21 158 22))))
 (|add_list_nth_TCC3| 0
  (|add_list_nth_TCC3-1| |nil| 3859279826
   ("" (SKEEP)
    (("" (LEMMA "add_lists_length")
      (("" (INST?) (("" (TYPEPRED "n") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|add_list_nth| SUBTYPE "list_lemmas.n"
    "below[length[nat](add_lists(l1, l2))]" (158 47 158 48))))
 (|add_list_nth| 0
  (|add_list_nth-1| |nil| 3859279833
   (""
    (CASE
        "FORALL (a,b:nat, l1, l2: list[nat], n: nat | n < min(length(l1), length(l2))): length(l1)=a AND length(l2)=b IMPLIES nth(l1, n) + nth(l2, n) = nth(add_lists(l1, l2), n)")
    (("1" (SKEEP)
      (("1" (INST?) (("1" (INST -1 "length(l1)" "length(l2)") NIL NIL)) NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "a")
        (("1" (SKEEP)
          (("1" (TYPEPRED "n")
            (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "add_lists" 1)
              (("2" (ASSERT)
                (("2" (LIFT-IF 1)
                  (("2" (ASSERT)
                    (("2" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (TYPEPRED "n")
                              (("1" (EXPAND "min")
                                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (CASE "n = 0")
                              (("1" (REPLACE -1)
                                (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "nth" 3)
                                (("2" (ASSERT)
                                  (("2"
                                    (INST -1 "b-1" "cdr(l1)" "cdr(l2)" "n-1")
                                    (("1" (EXPAND "length" -2)
                                      (("1" (EXPAND "length" -3)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (TYPEPRED "n")
                                      (("2" (EXPAND "length" -1)
                                        (("2" (EXPAND "min")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("3" (EXPAND "length" -2)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2)
          (("3" (INDUCT "a")
            (("1" (SKEEP) (("1" (TYPEPRED "n") (("1" (GRIND) NIL NIL)) NIL))
              NIL)
             ("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (TYPEPRED "n")
                  (("2" (EXPAND "add_lists" 1)
                    (("2" (ASSERT)
                      (("2" (LIFT-IF 1)
                        (("2" (ASSERT)
                          (("2" (SPLIT 1)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (FLATTEN)
                              (("2" (SPLIT 2)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "length" 2)
                                    (("2" (EXPAND "length" -3)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "length" -4)
                                          (("2"
                                            (INST -2 "b-1" "cdr(l1)" "cdr(l2)"
                                             "n-1")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (EXPAND "length" -1)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (ASSERT)
          (("4" (SKEEP) (("4" (TYPEPRED "n") (("4" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("5" (SKEEP) (("5" (TYPEPRED "n") (("5" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("3" (INDUCT "a")
      (("1" (SKEEP) (("1" (TYPEPRED "n") (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (SKEEP)
        (("2" (HIDE 2)
          (("2" (SKEEP)
            (("2" (EXPAND "add_lists" 1)
              (("2" (LIFT-IF)
                (("2" (SPLIT 1)
                  (("1" (FLATTEN)
                    (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (TYPEPRED "n") (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "length" 2)
                          (("2" (INST -1 "b-1" "cdr(l1)" "cdr(l2)" "n-1")
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" -1)
                                (("1" (EXPAND "length" -2)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "n")
                              (("2" (EXPAND "length" -1)
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP) (("4" (TYPEPRED "n") (("4" (GRIND) NIL NIL)) NIL)) NIL)
     ("5" (SKEEP) (("5" (TYPEPRED "n") (("5" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|list_length_n_TCC1| 0
  (|list_length_n_TCC1-1| NIL 3964289050 ("" (GRIND) NIL NIL) NIL NIL
   (|list_length_n| SUBTYPE "(: 1 :)" "list[nat]" (169 23 169 30))))
 (|list_length_n_TCC2| 0
  (|list_length_n_TCC1-1| |nil| 3810907533
   ("" (ASSERT) (("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)) NIL) NIL NIL
   (|list_length_n| SUBTYPE "((number_fields.-)(list_lemmas.n, 1))" "nat"
                    (169 32 169 35))))
 (|list_length_n_TCC3| 0
  (|list_length_n_TCC2-1| |nil| 3810907533
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|list_length_n| TERMINATION
                    "list_lemmas.list_length_n((number_fields.-)(list_lemmas.n, 1))"
                    "NIL" (170 6 170 24))))
 (|ex_list_n| 0
  (|ex_list_n-1| |nil| 3810908544 ("" (EVAL-FORMULA) NIL NIL) NIL SHOSTAK))
 (|add_list_length| 0
  (|add_list_length-1| |nil| 3810908545
   ("" (INDUCT "l1")
    (("1" (SKEEP)
      (("1" (EXPAND "add_lists")
        (("1" (EXPAND "length" 1 2)
          (("1" (ASSERT)
            (("1" (EXPAND "max")
              (("1" (ASSERT)
                (("1" (LIFT-IF 1)
                  (("1" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (INDUCT "l2")
        (("1" (EXPAND "add_lists" +)
          (("1" (EXPAND "length" 1 3)
            (("1" (EXPAND "max")
              (("1" (LIFT-IF 1)
                (("1" (SPLIT 1)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "add_lists" 1)
            (("2" (INST -2 "cons2_var_1")
              (("2" (EXPAND "length" +)
                (("2" (ASSERT)
                  (("2" (HIDE -1)
                    (("2" (EXPAND "max")
                      (("2" (LIFT-IF 1)
                        (("2" (SPLIT 1)
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|list_length_n| 0
                  (|list_length_n-1| |nil| 3810908545
                   ("" (INDUCT "n")
                    (("1" (EXPAND "list_length_n")
                      (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL))
                      NIL)
                     ("2" (SKEEP)
                      (("2" (EXPAND "list_length_n" +)
                        (("2" (EXPAND "length" +)
                          (("2" (REWRITE "add_list_length")
                            (("2" (REWRITE "length_appendn")
                              (("2" (ASSERT)
                                (("2" (EXPAND "max") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ((|length_appendn| FORMULA-DECL NIL |more_list_props| NIL)
                    (|length_singleton| FORMULA-DECL NIL |more_list_props|
                     NIL))
                   SHOSTAK))
 (|list_n_nth_TCC1| 0
  (|list_n_nth_TCC1-1| |nil| 3859278972
   ("" (SKEEP)
    (("" (LEMMA "list_length_n") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|list_n_nth| SUBTYPE "list_lemmas.i" "below[length[nat](list_length_n(n))]"
    (196 48 196 49))))
 (|list_n_nth| 0
  (|list_n_nth-1| |nil| 3859278972
   ("" (INDUCT "n")
    (("1" (SKEEP) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (TYPEPRED "i")
          (("2" (EXPAND "list_length_n" 1)
            (("2" (CASE "i=0")
              (("1" (EXPAND "nth" 1) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (EXPAND "nth" 2)
                (("2" (ASSERT)
                  (("2" (LEMMA "add_list_nth")
                    (("2" (INST?)
                      (("1" (INST -3 "i-1")
                        (("1" (REPLACE -3)
                          (("1" (REPLACE -1 2 RL)
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    "FORALL(i:nat,k:below(i)): nth((:1:)^i,k) = 1")
                                (("1" (INST -1 "j" "i-1")
                                  (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INDUCT "i")
                                  (("1" (SKEEP) NIL NIL)
                                   ("2" (SKEEP)
                                    (("2" (SKEEP)
                                      (("2" (EXPAND "^" 1)
                                        (("2" (CASE "k=0")
                                          (("1" (EXPAND "nth" 1)
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "car_append[real]")
                                                (("1" (INST?)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "nth" 2)
                                            (("2" (ASSERT)
                                              (("2" (LEMMA "cdr_append[real]")
                                                (("2" (INST?)
                                                  (("2" (REPLACE -1)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA
                                                         "append_null_left[real]")
                                                        (("2" (INST?)
                                                          (("2" (REPLACE -1)
                                                            (("2"
                                                              (INST -3 "k-1")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (SKEEP)
                                    (("3" (TYPEPRED "k")
                                      (("3"
                                        (CASE
                                            "FORALL(i:nat): length((:1:)^i) = i")
                                        (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (INDUCT "i")
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (SKEEP)
                                            (("2" (EXPAND "^" 1)
                                              (("2" (LEMMA "cons_append[nat]")
                                                (("2"
                                                  (INST -1 "(: 1 :) ^ j!1" "1")
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKEEP)
                                  (("3"
                                    (CASE "FORALL(i:nat): length((:1:)^i) = i")
                                    (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)
                                     ("2" (INDUCT "i")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SKEEP)
                                        (("2" (EXPAND "^" 1)
                                          (("2" (LEMMA "cons_append[nat]")
                                            (("2" (INST -1 "(: 1 :) ^ j!1" "1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "list_length_n")
                        (("2" (INST?)
                          (("2" (REPLACE -1 1 RL)
                            (("2" (CASE "FORALL(i:nat): length((:1:)^i) = i")
                              (("1" (INST?)
                                (("1" (REPLACE -1)
                                  (("1" (TYPEPRED "i")
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INDUCT "i")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (SKEEP)
                                  (("2" (EXPAND "^" 1)
                                    (("2" (LEMMA "cons_append[nat]")
                                      (("2" (INST -1 "(: 1 :) ^ j!1" "1")
                                        (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "list_length_n")
        (("3" (INST?) (("3" (TYPEPRED "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|car_append| FORMULA-DECL NIL |more_list_props| NIL)
    (|append_null_left| FORMULA-DECL NIL |more_list_props| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| NIL)
    (|cons_append| FORMULA-DECL NIL |more_list_props| NIL))
   SHOSTAK))
 (|every_filter| 0
  (|every_filter-1| |nil| 3812719936 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL) NIL
   SHOSTAK))
 (|every_of_filter| 0
  (|every_of_filter-1| |nil| 3813054937 ("" (INDUCT-AND-SIMPLIFY "l") NIL NIL)
   NIL SHOSTAK))
 (|filter_exists_cons| 0
  (|filter_exists_cons-1| |nil| 3813329521
   ("" (SKOLEM 1 ("_" "P"))
    (("" (INDUCT "l")
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (TYPEPRED "i")
            (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (SKEEP :PREDS? T)
          (("2" (ASSERT)
            (("2" (CASE "i=0")
              (("1" (EXPAND "nth" -4)
                (("1" (ASSERT)
                  (("1" (EXPAND "filter" 1) (("1" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "length" -1)
                (("2" (EXPAND "filter" 2)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF 2)
                      (("2" (SPLIT 2)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "nth" -2)
                              (("2" (INST 4 "i-1") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|cons_filter_exists| 0
  (|cons_filter_exists-1| |nil| 3813572960
   ("" (INDUCT "l")
    (("1" (SKEEP) (("1" (EXPAND "filter" -1) (("1" (PROPAX) NIL NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "filter" -2)
          (("2" (LIFT-IF -2)
            (("2" (SPLIT -2)
              (("1" (FLATTEN)
                (("1" (INST 1 "0")
                  (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)
                   ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (INST -2 "P")
                  (("2" (ASSERT)
                    (("2" (SKEEP :PREDS? T)
                      (("2" (INST 2 "i+1")
                        (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|min_list_TCC1| 0
  (|min_list_TCC1-1| |nil| 3882461239
   ("" (SKEEP*)
    (("" (GRIND) (("" (TYPEPRED "i") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
   NIL NIL
   (|min_list| SUBTYPE "list_adt[real].car(list_lemmas.l)"
    "{t: reals.real | FORALL (i: naturalnumbers.below(list_props[real].length(list_lemmas.l))): booleans.AND(reals.<=(t, list_props[real].nth(list_lemmas.l, i)), EXISTS (i: naturalnumbers.below(list_props[real].length(list_lemmas.l))): t = list_props[real].nth(list_lemmas.l, i))}"
    (225 28 225 34))))
 (|min_list_TCC2| 0
  (|min_list_TCC2-1| |nil| 3882461239 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   NIL NIL
   (|min_list| SUBTYPE "list_adt[real].cdr(list_lemmas.l)"
    "{l: list_adt[real].list | list_adt[real].cons?(l)}" (226 27 226 33))))
 (|min_list_TCC3| 0
  (|min_list_TCC3-1| |nil| 3882461239 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|min_list| TERMINATION
    "list_lemmas.min_list(list_adt[real].cdr(list_lemmas.l))" "NIL"
    (226 18 226 34))))
 (|min_list_TCC4| 0
  (|min_list_TCC4-1| |nil| 3882461239
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "v(cdr(l))")
        (("" (SPLIT 2)
          (("1" (CASE "i=0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST -1 "i-1")
              (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (GRIND)
                (("2" (TYPEPRED "i")
                  (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST 1 "0") (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|min_list| SUBTYPE "list_adt[real].car(list_lemmas.l)"
    "{t: reals.real | FORALL (i: naturalnumbers.below(list_props[real].length(list_lemmas.l))): booleans.AND(reals.<=(t, list_props[real].nth(list_lemmas.l, i)), EXISTS (i: naturalnumbers.below(list_props[real].length(list_lemmas.l))): t = list_props[real].nth(list_lemmas.l, i))}"
    (226 40 226 46))))
 (|min_list_TCC5| 0
  (|min_list_TCC5-1| |nil| 3882461239
   ("" (SKEEP*)
    (("" (TYPEPRED "v(cdr(l))")
      (("" (TYPEPRED "v!1(cdr(l))")
        (("" (CASE "i=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 3 1)
              (("1" (ASSERT)
                (("1" (INST-CP -2 "0")
                  (("1" (INST-CP -4 "0")
                    (("1" (FLATTEN)
                      (("1" (SKEEP*)
                        (("1" (INST -2 "i!2")
                          (("1" (INST -5 "i!1")
                            (("1" (FLATTEN)
                              (("1" (ASSERT)
                                (("1" (INST 3 "i!1+1")
                                  (("1" (EXPAND "nth" 3)
                                    (("1" (PROPAX) NIL NIL)) NIL)
                                   ("2" (ASSERT)
                                    (("2" (HIDE-ALL-BUT (1))
                                      (("2" (TYPEPRED "i!1")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (INST-CP -1 "i-1")
            (("1" (INST-CP -3 "i-1")
              (("1" (FLATTEN)
                (("1" (SKEEP*)
                  (("1" (ASSERT)
                    (("1" (EXPAND "nth" 4 1)
                      (("1" (ASSERT)
                        (("1" (INST 4 "i!1+1")
                          (("1" (EXPAND "nth" 4 1) (("1" (PROPAX) NIL NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (TYPEPRED "i!1") (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "i")
                (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|min_list| SUBTYPE
    "list_lemmas.min_list(list_adt[real].cdr(list_lemmas.l))"
    "{t: reals.real | FORALL (i: naturalnumbers.below(list_props[real].length(list_lemmas.l))): booleans.AND(reals.<=(t, list_props[real].nth(list_lemmas.l, i)), EXISTS (i: naturalnumbers.below(list_props[real].length(list_lemmas.l))): t = list_props[real].nth(list_lemmas.l, i))}"
    (227 7 227 23))))
 (|min_lemma_TCC1| 0
  (|min_lemma_TCC1-1| |nil| 3882461239
   ("" (SKEEP) (("" (TYPEPRED "l1" "l2") (("" (GRIND) NIL NIL)) NIL)) NIL) NIL
   NIL
   (|min_lemma| SUBTYPE
    "list_props[real].append(list_lemmas.l1, list_lemmas.l2)"
    "{l: list_adt[real].list | list_adt[real].cons?(l)}" (233 13 233 32))))
 (|min_lemma_TCC2| 0
  (|min_lemma_TCC2-1| |nil| 3882461239 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   NIL NIL
   (|min_lemma| SUBTYPE "list_lemmas.l1"
    "{l: list_adt[real].list | list_adt[real].cons?(l)}" (233 49 233 51))))
 (|min_lemma| 0
  (|min_lemma-1| |nil| 3882530012
   ("" (INDUCT "l1")
    (("1" (SKEEP) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "append" 1 1)
          (("2" (EXPAND "min_list" 1 2)
            (("2" (LIFT-IF 1)
              (("2" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (CASE "cons2_var = null")
                    (("1" (REPLACE -1)
                      (("1" (EXPAND "append" 1 1)
                        (("1" (EXPAND "min_list" 1 1)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (TYPEPRED "l2") (("1" (GRIND) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "min" 1 1)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "min" 2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST -2 "l2")
                      (("1" (EXPAND "min_list" 2 1)
                        (("1" (LIFT-IF 2)
                          (("1" (SPLIT 2)
                            (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (FLATTEN)
                              (("2" (SPLIT 2)
                                (("1" (FLATTEN)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -3 -1)
                                      (("1" (EXPAND "min" 1 1)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (INST -2 "l2")
                        (("1" (EXPAND "min_list" 1 1)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (GRIND)
                                  (("1" (EXPAND "append" -1)
                                    (("1" (EXPAND "length" 1)
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (EXPAND "length")
                                    (("2" (EXPAND "append")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                                   ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (INST -1 "l2")
                        (("1" (EXPAND "min_list" 2 1)
                          (("1" (LIFT-IF 2)
                            (("1" (SPLIT 2)
                              (("1" (FLATTEN)
                                (("1" (EXPAND "length" 3)
                                  (("1" (EXPAND "length" -1)
                                    (("1" (EXPAND "append" -1)
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                                   ("2" (FLATTEN) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| NIL)) SHOSTAK)))

