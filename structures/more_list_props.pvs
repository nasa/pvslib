%------------------------------------------------------------------------
%
% This theory defines additional properties of lists.
%
%    Author: Kristin Y. Rozier,
%                      Formal Methods Group, NASA Langley Research Center
%            with thanks to Paul Miner and Ben Di Vito for their helpful
%                 comments and suggestions
%            Cesar Munoz 2012, Anthony Narkawicz 2013, Mariano Moscato (NIA) 2015
%------------------------------------------------------------------------

more_list_props   [ T : TYPE ]
		: THEORY

  BEGIN

  m, n: VAR nat
  L: VAR list[T]
  p: VAR PRED[T]
  A: VAR finite_set[T]
  B: VAR list[T]
  X, Y: VAR list[T]
  l, l1, l2, l3, l4: VAR list[T]
  pair: VAR [nat, nat]
  a, b, t: VAR T

%
% Functions
%

  prefix?(x: list[T], 
          y: list[T]): RECURSIVE bool = 
    IF length(y) < length(x) THEN FALSE 
    ELSE 
      CASES x OF
        null: TRUE,
        cons(sigma_x, x1):
          CASES y OF
            null: FALSE,
	    cons(sigma_y, y1): 
              IF sigma_x = sigma_y AND prefix?(x1, y1) THEN TRUE
              ELSE FALSE
              ENDIF
          ENDCASES
      ENDCASES
    ENDIF
    MEASURE length(x)

  suffix?(x: list[T], 
          y: list[T]): RECURSIVE bool = 
    IF length(y) < length(x) THEN FALSE 
    ELSE 
      CASES reverse(x) OF
        null: TRUE,
        cons(sigma_x, x1):
          CASES reverse(y) OF
            null: FALSE,
	    cons(sigma_y, y1): 
              IF sigma_x = sigma_y AND suffix?(reverse(x1), reverse(y1)) THEN TRUE
              ELSE FALSE
              ENDIF
          ENDCASES
      ENDCASES
    ENDIF
    MEASURE length(x)

  %Multiple concatenation of a list: w^3 means (: w  w  w :).
  ;^(l1, n): RECURSIVE list[T] = 
    IF n = 0 THEN (null)
    ELSE append( l1, ^(l1, n-1) )
    ENDIF
    MEASURE n

  % Just like for sequences, a sub-list can be extracted with the operator '^'.
  % Note that ^ allows any natural numbers m and n to define the range; 
  % if m > n then the empty sequence is returned.
  ;^(l1, pair): RECURSIVE list[T] =
    LET (m, n) = pair
     IN IF m > n OR m >= length(l1) OR m < 0
        THEN null
        ELSIF m = n THEN cons( nth(l1, m), null)
        ELSE cons( nth(l1, m), ^(l1, (m+1, n)))
        ENDIF
  MEASURE IF pair`2 > pair`1 THEN pair`2 - pair`1 ELSE 0 ENDIF

 caret_length: LEMMA  
    pair`2>=pair`1 AND pair`2<length(l1)      
    IMPLIES 
    length(^(l1,pair)) = pair`2-pair`1+1
 
  caret_cdr: LEMMA 
     pair`2>=pair`1 AND pair`2<length(l1) AND pair`1>0 
     IMPLIES 
     cdr(^(l1, pair)) = ^(cdr(l1), (pair`1, pair`2-1))

  caret_nth: LEMMA 
    pair`2>=pair`1 AND pair`2<length(l1) AND n>=pair`1 AND n<=pair`2
    IMPLIES
    nth(l1, n) = nth(l1^pair, n-pair`1)

  %
  % Lemmas and Theorems
  %

  prefix_length: LEMMA
    prefix?(X,Y) IMPLIES length(X) <= length(Y)

  suffix_length: LEMMA
    suffix?(X,Y) IMPLIES length(X) <= length(Y)

  every_forall: LEMMA
    every(p)(L) IFF FORALL (n:below(length(L))): p(nth(L,n))

  every_as_member
  : LEMMA
    FORALL(P: PRED[T], l: list[T])
    : every(P)(l) IMPLIES FORALL(x: T): member(x,l) IMPLIES P(x)

  some_exists: LEMMA
    some(p)(L) IFF EXISTS (n:below(length(L))): p(nth(L,n))

  list_extensionality : LEMMA
    l1=l2 IFF length(l1) = length(l2) AND FORALL(n:below(length(l1))): nth(l1,n) = nth(l2,n)

  % If the length of the list of elements from set A is greater than the 
  % cardinality of the set, then there is at least one repeated element
  % in the list.
  list_pigeonhole: THEOREM
      every(A)(B) AND 
      length(B) > card(A)
    IMPLIES
      EXISTS (n:below[length(B)], m:below[length(B)]):
         n /= m 
         AND nth(B, n) = nth(B, m)  

  nth_append : LEMMA
    FORALL(i:nat): i < length(l1)+length(l2) IMPLIES
      nth(append(l1,l2),i) = IF i < length(l1) THEN nth(l1,i)
                              ELSE nth(l2,i-length(l1))
                              ENDIF

  append_eq_length_left
  : LEMMA
    append(l1,l2) = append(l3,l4) AND
    length(l2) = length(l4)
    IMPLIES l2=l4 AND l1=l3

  length_null : LEMMA
    length(null[T]) = 0

  length_singleton : LEMMA
    length((:t:)) = 1

  AUTO_REWRITE+ length_singleton
  AUTO_REWRITE+ length_null

  length_null_list: LEMMA
    length(L)=0 IFF null?(L)

  reverse_def: LEMMA FORALL (j:nat): 
    j<length(L) IMPLIES nth(reverse(L),j) = nth(L,length(L)-1-j)

  cons_append: LEMMA
    cons(t,L) = append((: t :),L)

  expand_list: LEMMA
    null?(L) OR L = cons(car(L),cdr(L))

  expand_list_app: LEMMA
    member(a,l)
    IMPLIES EXISTS(l1,l2: list[T]): l = append(l1,append((:a:),l2))

  append_null_left: LEMMA append(null,L) = L

  append_null_right: LEMMA append(L, null) = L

  member_append_fi: LEMMA
   FORALL(i: T, l1,l2: list[T]):
    member(i, append(l1, l2)) IMPLIES (member(i, l1) OR member(i, l2))

  null_append: LEMMA
   FORALL(l1,l2: list[T]):
    null?(append(l1, l2)) IFF null?(l1) AND null?(l2)

  cdr_append: LEMMA FORALL(l1|NOT null?(l1)):
    cdr(append(l1,l2)) = append(cdr(l1),l2)

  car_append
  : LEMMA FORALL(l1|NOT null?(l1)): car(append(l1,l2)) = car(l1)

  car_append_2
  : LEMMA FORALL(l1|null?(l1) AND cons?(append(l1,l2))): car(append(l1,l2)) = car(l2)

  member_nth: LEMMA
   FORALL(l: list[T], t: T): 
    member(t, l) IMPLIES EXISTS(i: below(length(l))): nth(l,i) = t

  nth_member: LEMMA 
   FORALL (l: list[T], t: T, i: below(length(l))):
    nth(l, i) = t IMPLIES member(t, l)

  member_iff_nth : LEMMA
   FORALL(l: list[T], t: T): 
    member(t, l) IFF EXISTS(i: below(length(l))): nth(l,i) = t

  member_append_r: LEMMA
   FORALL(i: T, l1,l2: list[T]):
    member(i, l2) IMPLIES member(i, append(l1, l2))

  member_append_l: LEMMA   
   FORALL(i: T, l1,l2: list[T]):
    member(i, l1) IMPLIES member(i, append(l1, l2))

  every_implies: LEMMA
   FORALL(P,Q: PRED[T], l: list[T]):
    (FORALL(x: T): P(x) IMPLIES Q(x))
    IMPLIES every(P)(l) IMPLIES every(Q)(l)

  append_right_inj: LEMMA
    append(l, l1) = append(l, l2) IMPLIES l1 = l2

  % Lemmas involving l^(i,j)
  
  subl_over_len: LEMMA FORALL(m:nat, l: list[T] | m < length(l), i: upfrom(length(l))):
  l^(m, i) = l^(m, length(l)-1)
  
  subl_shr: LEMMA FORALL(m,n: above(0)):
  cons(a,l)^(m,n) = l^(m-1,n-1)

  subl_idemp: LEMMA FORALL(l: (cons?[T])):
  l^(0, length(l)-1) = l

  length_subl: LEMMA
   FORALL(m:nat, n:upfrom(m), l: list[T] | length(l) >= m):
    length(l^(m,n)) = min(length(l), n+1)-m

  cdr_subl: LEMMA FORALL(m: nat,n: above(m)):
   NOT null?(l^(m,n)) 
    IMPLIES cdr(l^(m,n)) = cdr(l)^(m,n-1)

  member_nth_subl: LEMMA
   FORALL(j: nat, l: list[T] | j < length(l), m: upto(j), n: upfrom(j)): 
    member(nth(l, j), l^(m,n))

  nth_subl_prefix: LEMMA
   FORALL(j: nat, l: list[T], m : nat, n: nat | j < length(l^(m,n))): 
    nth(l^(m,n), j) = nth(l, m+j)

  subl_incl: LEMMA
   FORALL(l: list[T], m, n: nat): 
    member(a, l^(m,n)) 
     IMPLIES 
      FORALL(m_: upto(m), n_: upfrom(n)): member(a, l^(m_,n_))

  % The following definitions and lemmas are used in affine_arith

  appin(l:list[T])(i:T): bool = member(i,l)

  take(l: list[T], n: nat): RECURSIVE list[T]
    = IF length(l) < n THEN take(l, n-1)
      ELSIF n = 0 THEN null
      ELSE cons(car(l), take(cdr(l), n-1)) ENDIF
    MEASURE n

  length_take: LEMMA FORALL(l:list[T],n:nat):
  length(take(l,n)) = min(length(l), n)

  nth_take: LEMMA
  FORALL(l: list[T], i: below(length(l)+1), (j: nat | j<i)): 
  member(nth(l, j), take(l, i))

  nth_take2: LEMMA
  FORALL(l: list[T], i: nat, (j: nat | j<i and j<length(l))): 
  nth(take(l, i), j) = nth(l, j)

  take_null: LEMMA FORALL(i: nat):
  take(null, i) = null

  take_prop_1: LEMMA FORALL(l: list[T], i: above(length(l))):
  take(l, i) = take(l, length(l))

  take_prop_2: LEMMA FORALL(l: list[T]):
  take(l, length(l)) = l

  member_take_1: LEMMA
  FORALL(l: list[T], i: nat, j: above(i), x: T): 
  member(x, take(l, i)) IMPLIES member(x, take(l, j))

  % Suffix and prefix properties

  suffix_rev_prefix: LEMMA
    suffix?(l1,l2) IFF prefix?(reverse(l1),reverse(l2))

  prefix_rev_suffix:  COROLLARY
    prefix?(l1,l2)  IFF suffix?(reverse(l1),reverse(l2))

  prefix_first: LEMMA
    prefix?(append(l1,l2),L) => prefix?(l1,L)

  suffix_last: COROLLARY
    suffix?(append(l1,l2),L) => suffix?(l2,L)

  suffix_end: COROLLARY
    suffix?(cons(a,l),L) => suffix?(l,L)

  prefix_app: LEMMA
    prefix?(append(l1,l2),append(l1,L)) IFF prefix?(l2,L)

  suffix_app: COROLLARY 
    suffix?(append(l1,l2),append(L,l2)) IFF suffix?(l1,L)

  prefix_supl: LEMMA
    prefix?(l1,l2) IFF EXISTS(L): append(l1,L) = l2

  suffix_supl: COROLLARY
    suffix?(l1,l2) IFF EXISTS(L): append(L,l1) = l2

  suffix_same_length: LEMMA
    suffix?(l2,l1) AND
    length(l1) = length(l2) IMPLIES l1 = l2

  suffix_of_null: LEMMA 
    suffix?(l,null) IMPLIES l = null

  prefix_of_null
  : LEMMA 
    prefix?(l,null) IMPLIES l = null

  suffix_of_cons: LEMMA
    suffix?(l2,cons(a,l1)) AND
    length(l2) < length(cons(a,l1)) 
    IMPLIES suffix?(l2,l1)

  suffix_nth: LEMMA
    suffix?(l2,l1) 
    IMPLIES FORALL(i:below(length(l2))): 
    	      nth(l2,i) = nth(l1, length(l1) - length(l2) + i)

  prefix_reflexive: COROLLARY prefix?(l,l)

  suffix_reflexive: COROLLARY suffix?(l,l)

  suffix_member: LEMMA
    suffix?(l1,l2) IMPLIES FORALL(a): member(a,l1) IMPLIES member(a,l2)

  prefix_cdr: LEMMA FORALL(l1|NOT null?(l1))(l2|NOT null?(l2)):
    prefix?(l1,l2) IMPLIES prefix?(cdr(l1),cdr(l2))

  prefix_eq: LEMMA
    prefix?(l1,l2) AND
    length(l1) = length(l2)
    IMPLIES l1 = l2

  suffix_first_elem: LEMMA FORALL(l2|NOT null?(l2)):
    suffix?(l2,l1) IMPLIES nth(l1,length(l1)-length(l2)) = car(l2)

  %% rdc and rac (as opposites to the list functions rdc and rac).

  rdc((l: list[T] | NOT null?(l))):  list[T]
  = reverse(cdr(reverse(l)))

  rac((l: list[T] | NOT null?(l))):  T
  = nth(l, length(l)-1)

   snoc(l:list[T], t:T): list[T]
  = append(l, (: t :))

  length_snoc: LEMMA
    FORALL(m: list[T], s: T)
    : length(snoc(m,s)) = 1 + length(m)

  rac_append: LEMMA 
    FORALL (l1: list[T], (l2: list[T] | NOT null?(l2))) : 
      rac(append(l1, l2)) = rac(l2)
  
  rdc_append: LEMMA 
    FORALL (l1: list[T], (l2: list[T] | NOT null?(l2))) : 
       rdc(append(l1, l2)) = append(l1, rdc(l2))
  
  rdc_rac: COROLLARY
    FORALL (l1 : list[T] | NOT null?(l1)) :
       append(rdc(l1),(:rac(l1):)) = l1

  snoc_def: COROLLARY
    FORALL (l: list[T] | NOT null?(l)):
    l = snoc(rdc(l), rac(l))

  cons_snoc_commute: LEMMA
    FORALL (l:list[T], t1, t2:T):
    cons(t1, snoc(l, t2)) =
    snoc(cons(t1, l), t2)

  car_rdc: LEMMA
    FORALL ((l: list[T] | length(l)>=2)):
    car(rdc(l)) = car(l)

  nth_rdc: LEMMA
    FORALL ((l1 : list[T] | NOT null?(l1)), i:nat):
    i< length(l1)-1 IMPLIES
    nth(rdc(l1),i) = nth(l1, i)

  length_rdc: LEMMA 
    FORALL ( l1 : (cons?[T])):
    length(rdc(l1)) = length(l1)-1

  rdc_cdr: lEMMA
    FORALL(l:list[T]):
    (cons?(l) AND cons?(cdr(l))) IMPLIES
    rdc(cdr(l)) = cdr(rdc(l))

  % Lemmas involving l^n

  length_appendn: LEMMA
    length(l^n) = length(l) * n

  nth_appendn: LEMMA
    FORALL(l: list[T] | NOT null?(l))(n)(i: below(length(l^n))):
      nth(l^n, i) = nth(l, rem(length(l))(i))
  
  % nth extensionality
  nth_extensionality: LEMMA
   length(l1) = length(l2) AND
   (FORALL(n: below(length(l1))): 
     nth(l1,n) = nth(l2,n))
   IMPLIES l1 = l2

  % last
  last(l: list[T] | NOT null?(l)): T = nth(l,length(l)-1)

  last_cons: LEMMA FORALL(l|NOT null?(l)):
    last(cons(a,l)) = last(l)

  last_append: LEMMA FORALL(l2|NOT null?(l2)):
    last(append(l1,l2)) = last(l2)

  last_cdr: LEMMA FORALL(l1|cons?(l1) AND cons?(cdr(l1))):
    last(cdr(l1)) = last(l1)

  % reverse
  null_reverse: LEMMA
    null?(reverse(l)) IFF null?(l)

  last_reverse: LEMMA FORALL(l|NOT null?(l)):
    last(reverse(l)) = car(l)

  car_reverse: LEMMA FORALL(l|NOT null?(l)):
    car(reverse(l)) = last(l)

  member_reverse: LEMMA
    member(a,l) IFF member(a, reverse(l))

  cut_ends_equal: LEMMA FORALL ((l:list[T] | length(l)>=2)):
    cdr(reverse(cdr(reverse(l)))) =
    reverse(cdr(reverse(cdr(l))))

  %
  %
  %

  prefix(l1:list[T])(l2:list[T]) : MACRO bool
  = EXISTS(l3: list[T]): append(l2,l3) = l1

  prefixes(l1:list[T])(l2:list[T]) : bool
    = EXISTS(l3: list[T]): append(l2,l3) = l1

  suffix(l1:list[T])(l2:list[T]) : MACRO bool
  = EXISTS(l3: list[T]): append(l3, l2) = l1

  suffixes(l1:list[T])(l2:list[T]) : bool
    = EXISTS(l3: list[T]): append(l3, l2) = l1

  %
  
  nnprefixes_same_head: LEMMA
   FORALL(l1: list[T], l2: (prefixes[T](l1))): 
    NOT null?(l1) AND NOT null?(l2) IMPLIES car(l1) = car(l2)

  % "no_repetitions?" holds when the list contains only one apparition of each 
  % of its elements.
  no_repetitions?(l:list[T]):bool =
    FORALL(i,j:below(length(l))): i /= j IMPLIES nth(l,i) /= nth(l,j)

  no_repetitions_append: LEMMA
    no_repetitions?(l1) AND
    no_repetitions?(l2) AND 
    (FORALL(n:T): member(n,l1) IMPLIES NOT member(n,l2))
    IFF no_repetitions?(append(l1,l2))

  %
  % Index function.
  %

  % Returns the first index for a given element of the list.
  idx(l,(a:T|member(a,l))): RECURSIVE {i: below(length(l)) | nth(l,i) = a} =
    IF car(l) = a THEN 0 ELSE 1 + idx(cdr(l),a) ENDIF
  MEASURE length(l)

  idx_nth_no_rep: LEMMA FORALL(l:(no_repetitions?), i:below(length(l))):
    idx(l,nth(l,i)) = i

  idx_inj: LEMMA FORALL(l:(no_repetitions?)):
    member(a,l) AND 
    member(b,l) AND
    idx(l,a) = idx(l,b) 
    IMPLIES a = b

  % filter 
  filtered_from(l1,
		(idxs:list[nat]|FORALL(i:below(length(idxs))):
			          nth(idxs,i)<length(l1)))(l2): bool =
    length(l2) = length(idxs) AND
    FORALL(i:below(length(idxs))): nth(l2,i) = nth(l1,nth(idxs,i))

  filter_idxs(l, (idxs: list[nat] | 
   		   FORALL(i:below(length(idxs))):
                    nth(idxs,i)<length(l))): RECURSIVE (filtered_from(l,idxs)) =
     CASES idxs OF
       null: null,
       cons(i,is): cons( nth(l,i), filter_idxs(l,cdr(idxs)) )
     ENDCASES
  MEASURE length(idxs)

  no_rep_filter: LEMMA
   FORALL(l1:(no_repetitions?))
	 (idxs:list[nat]|FORALL(i:below(length(idxs))):nth(idxs,i)<length(l1))
	 (l2:(filtered_from(l1,idxs))):
    (FORALL(i,j:below(length(idxs))): i /= j IMPLIES nth(idxs,i) /= nth(idxs,j))
    IMPLIES no_repetitions?(l2)

  % update
  update_list(l: list[T], i: below(length(l)), x: T) : RECURSIVE {r: list[T] |
       length(l) = length(r) AND FORALL(j:below(length(l))): nth(r,j) = 
                                            IF i=j THEN x ELSE nth(l,j) ENDIF} =
    IF i=0 THEN cons(x,cdr(l)) ELSE cons(car(l),update_list(cdr(l),i-1,x)) ENDIF
  MEASURE length(l)

  no_rep_cdr: LEMMA
    no_repetitions?(cons(a,l)) IMPLIES no_repetitions?(l) AND NOT member(a,l)

  no_rep_suffix: LEMMA
    no_repetitions?(l1) AND
    suffix?(l2,l1)
    IMPLIES no_repetitions?(l2)

  % clone a given list n times.
  clone_times(n:nat)(l: list[nat]): RECURSIVE {r: list[list[nat]] |
    length(r) = n AND FORALL(i:below(n)): nth(r,i) = l } =
    IF n = 0 THEN null
    ELSE cons( l , clone_times(n-1)(l) ) ENDIF
  MEASURE n

  x: VAR T
  P, Q: VAR PRED[T]
  i: VAR nat

  %
  % 
  %

  length_parm: LEMMA
     FORALL (pl: list[(P)]):
      length[(P)](pl) = length[T](pl)

  nth_parm: LEMMA
     FORALL (pl: list[(P)], (n:below[length(pl)])):
      nth[(P)](pl, n) = nth[T](pl, n)

  every_parm: LEMMA
     FORALL (pl: list[(P)]):
      every[(P)](Q)(pl) = every[T](Q)(pl)

  append_parm: LEMMA
     FORALL (l1, l2: list[(P)]):
      append[(P)](l1, l2) = append[T](l1, l2)

  member_parm: LEMMA
     FORALL (pl: list[(P)], x: (P)):
      member[(P)](x,pl) = member[T](x,pl)
      
  append_append_cons: LEMMA
    append(l1, cons(x, l2)) = append(append(l1, cons(x, null)), l2)

  append_equal_null: LEMMA append(l1, l2) = l2 => l1 = null

  nth_append_below: LEMMA
    i < length(l1) => nth(append(l1, l2), i) = nth(l1, i)

  nth_append_above: LEMMA
    i >= length(l1) and i < length(append(l1, l2)) => nth(append(l1, l2), i) = nth(l2, i - length(l1))

  tail?(l1, l2): recursive bool =
    if null?(l1)
    then null?(l2)
    else l1 = l2 or tail?(cdr(l1), l2)
    endif
   measure l1 by <<

  tail_append: LEMMA tail?(append(l1, l2), l2)

  ldiff(l1, (l2 | tail?(l1, l2))): recursive list[T] =
    if l1 = l2
    then null
    else cons(car(l1), ldiff(cdr(l1), l2))
    endif
   measure l1 by <<

  ldiff_append: LEMMA forall (l1, l2): ldiff(append(l1, l2), l2) = l1

  filter_nth: LEMMA forall (L :list[T], P: [T->bool]):
     LET FL = filter(L,P)  IN  
       cons?(FL) IMPLIES
      FORALL (i:below(length(FL))):
      EXISTS (j: below(length(L))):
        nth(FL, i) = nth(L,j)

  length_sum_null: LEMMA
   forall (l1, l2: list[T]):
   length(l1)+length(l2) = 0 IFF (null?(l1) AND null?(l2))

  takeFromRight(l: list[T], n: nat)
  : RECURSIVE list[T]
  = IF length(l) <= n OR null?(l) THEN l
    ELSE takeFromRight(cdr(l),n) ENDIF
  MEASURE l BY <<

  takeFromRight_decreasing
  : LEMMA
    FORALL(n: upto(length(l)))
    : takeFromRight(cons(a,l),n) = takeFromRight(l,n)

  takeFromRight_length
  : LEMMA
    FORALL(n: upto(length(l)))
    : length(takeFromRight(l,n)) = n

  takeFromRight_member
  : LEMMA
    member(a,takeFromRight(l,n)) IMPLIES member(a,l)

  takeFromRight_takeFromRight
  : LEMMA
    FORALL (l: list[T], n: below(length(l)), m: upto(n))
    : takeFromRight(takeFromRight(l, n), m) = takeFromRight(l, m)

  nth_takeFromRight
  : LEMMA
    FORALL (l: list[T], n: below(length(l)), m: below(length(takeFromRight(l, n))))
    : nth(takeFromRight(l, n), m) = nth(l, length(l) - n + m)

  %
  % Merge
  %

  merge(l: list[list[T]])
  : RECURSIVE list[T]
  = CASES l OF
      null: null,
      cons(x,xs): append(x, merge(xs))
    ENDCASES
  MEASURE length(l)

  %
  % Generalized induction on lists
  %

  LIST_induction: LEMMA
    FORALL (p: [list[T] -> boolean]):
      (FORALL (l1: list[T]):
        (FORALL (l2: list[T]): length(l2) < length(l1) IMPLIES p(l2)) IMPLIES p(l1))
       IMPLIES (FORALL (l: list[T]): p(l))

  %
  % Sublist
  %

  sublist?(l1,l2: list[T]): RECURSIVE bool
  = null?(l1) OR (NOT null?(l2) AND (prefix?(l1,l2) OR sublist?(l1, cdr(l2))))
  MEASURE l2 BY <<

  sublist(l: list[T]): TYPE = { l_:list[T] | sublist?(l_,l) }

  sublist_alt_def
  : RECURSIVE JUDGEMENT
    sublist?(l1,l2) HAS_TYPE { b:bool | b = EXISTS(l_: list[T] | suffix?(l_,l2)): prefix?(l1,l_) }

  prefix_is_sublist
  : LEMMA
    prefix?(l1,l2) IMPLIES sublist?(l1,l2)

  %
  %
  %

  respects_order?(l2)(l1)
  : MACRO bool
  = FORALL(i1: below(length(l1)), j1: subrange(i1+1,length(l1)-1))
    : EXISTS(i2: below(length(l2)), j2: subrange(i2+1,length(l2)-1))
      : nth(l1,i1) = nth(l2,i2) AND nth(l1,j1) = nth(l2,j2)

  prefix_respects_order
  : LEMMA
    FORALL(l2: list[T], l1: list[T] | prefix?(l1,l2))
    : respects_order?(l2)(l1)

  suffix_respects_order
  : LEMMA
    FORALL(l2: list[T], l1: list[T] | suffix?(l1,l2))
    : respects_order?(l2)(l1)

  sublist_respects_order
  : LEMMA
    FORALL(l2: list[T], l1: list[T]| sublist?(l1,l2))
    : respects_order?(l2)(l1)

  snoc_car_sublist_append
  : LEMMA
    FORALL(l:(cons?[T]),l_:list[T])
    : sublist?(snoc(l_, car(l)),append(l_,l))

  append_consume_one
  : LEMMA
    FORALL(l: (cons?[T]),l_:list[T])
    : append(snoc(l_, car(l)), cdr(l)) = append(l_, l)

  suffix_append
  : LEMMA
    FORALL(l1,l2,l3,s : list[T])
    : append(l1,l2) = l3 AND suffix?(s,l3) IMPLIES
    IF length(s) <= length(l2)
      THEN suffix?(s,l2)
      ELSE EXISTS(L:list[T] |cons?(L)): append(L,l2) = s AND suffix?(L,l1) 
    ENDIF

  caret_suffix
  : LEMMA
    FORALL(s,l:(cons?[T]))
    : suffix?(s,l) IFF EXISTS(i:below(length(l))): s = l^(i,length(l)-1)

END more_list_props

