(|semi_algebraic|
 (|negative_atom_eval_TCC1| 0
  (|negative_atom_eval_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (EXPAND "negative_atom")
      (("" (TYPEPRED "x") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|negative_atom| CONST-DECL "atomic_poly" |semi_algebraic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|negative_atom_eval| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), standard_form_mult_poly.max_length(semi_algebraic.negative_atom(semi_algebraic.a)`poly))}")))
 (|negative_atom_eval| 0
  (|negative_atom_eval-1| |nil| 3810907546
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (EXPAND "negative_atom")
        (("" (LIFT-IF)
          (("" (SPLIT)
            (("1" (EXPAND "atom_eval")
              (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "atom_eval")
                    (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "atom_eval")
                        (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "atom_eval")
                        (("2" (TYPEPRED "a`ineq")
                          (("2" (ASSERT)
                            (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|negative_atom| CONST-DECL "atomic_poly" |semi_algebraic| NIL))
   SHOSTAK))
 (|atom_max_TCC1| 0
  (|atom_max_TCC1-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|atom_max| SUBTYPE "semi_algebraic.m" "(list_adt[atomic_poly].cons?)")))
 (|atom_max_TCC2| 0
  (|atom_max_TCC2-1| |nil| 3810907544 ("" (TERMINATION-TCC) NIL NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|atom_max| TERMINATION
    "semi_algebraic.atom_max(list_adt[atomic_poly].cdr(semi_algebraic.m))"
    "NIL")))
 (|atom_max_max| 0
  (|atom_max_max-1| |nil| 3882544064
   ("" (INDUCT "m")
    (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "nth" 1)
              (("1" (EXPAND "atom_max" 1 1) (("1" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "nth" 2 1)
              (("2" (EXPAND "atom_max" 2)
                (("2" (INST -1 "i-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|atom_max_nth| 0
  (|atom_max_nth-1| |nil| 3882544111
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL)
     ("2" (SKEEP)
      (("2" (SPLIT -1)
        (("1" (INST 1 "0")
          (("1" (GRIND) NIL NIL)
           ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "atom_max" 1 1)
            (("2" (EXPAND "max" 1 1)
              (("2" (CASE " max_length(cons1_var`poly) < atom_max(cons2_var)")
                (("1" (ASSERT)
                  (("1" (INST 1 "i+1")
                    (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (TYPEPRED "i")
                      (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (INST 2 "0")
                    (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    NIL (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|max_atom| 0
  (|max_atom-1| |nil| 3810907548
   ("" (INDUCT "m1")
    (("1" (SKEEP)
      (("1" (EXPAND "append" 1)
        (("1" (EXPAND "atom_max" 1 2)
          (("1" (ASSERT)
            (("1" (EXPAND "max")
              (("1" (ASSERT)
                (("1" (LIFT-IF 1)
                  (("1" (SPLIT 1)
                    (("1" (PROPAX) NIL NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "atom_max" 1 1)
          (("2" (LIFT-IF 1)
            (("2" (SPLIT)
              (("1" (FLATTEN)
                (("1" (EXPAND "append" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (LEMMA "car_append[atomic_poly]")
                  (("2" (INST?)
                    (("2" (REPLACE -1)
                      (("2" (HIDE -1)
                        (("2" (EXPAND "atom_max" 2 2)
                          (("2" (LEMMA "cdr_append[atomic_poly]")
                            (("2" (INST?)
                              (("2" (REPLACE -1)
                                (("2" (ASSERT)
                                  (("2" (INST?)
                                    (("2" (REPLACE -2)
                                      (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|meet_TCC1| 0
  (|meet_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x") (("" (EXPAND "atom_max") (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL)
   NIL
   (|meet| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), standard_form_mult_poly.max_length(list_adt[atomic_poly].car(semi_algebraic.m)`poly))}")))
 (|meet_TCC2| 0
  (|meet_TCC2-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (EXPAND "atom_max" -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL)
   NIL
   (|meet| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(list_adt[atomic_poly].cdr(semi_algebraic.m)))}")))
 (|meet_meet_TCC1| 0
  (|meet_meet_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (LEMMA "max_atom") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_atom| FORMULA-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|meet_meet| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(list_props[atomic_poly].append(semi_algebraic.m1, semi_algebraic.m2)))}")))
 (|meet_meet_TCC2| 0
  (|meet_meet_TCC2-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|meet_meet| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(semi_algebraic.m1))}")))
 (|meet_meet_TCC3| 0
  (|meet_meet_TCC3-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|meet_meet| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(semi_algebraic.m2))}")))
 (|meet_meet| 0
  (|meet_meet-1| |nil| 3810907550
   ("" (INDUCT "m1")
    (("1" (SKEEP)
      (("1" (LEMMA "append_null_left[atomic_poly]")
        (("1" (INST?)
          (("1" (REPLACE -1)
            (("1" (EXPAND "meet" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "meet" 1 1)
          (("2" (EXPAND "append" 1 1)
            (("2" (LEMMA "car_append[atomic_poly]")
              (("2" (INST? -1)
                (("2" (REPLACE -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "meet" 1 2)
                      (("2" (LEMMA "cdr_append[atomic_poly]")
                        (("2" (INST? -1)
                          (("2" (REPLACE -1)
                            (("2" (ASSERT)
                              (("2" (INST -3 "m2" "x")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (TYPEPRED "x")
                                  (("2" (EXPAND "atom_max" -2 1)
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP) (("3" (TYPEPRED "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)
     ("4" (SKEEP) (("4" (TYPEPRED "x") (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKEEP)
      (("5" (LEMMA "max_atom") (("5" (INST? -1) (("5" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|max_atom| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL))
   SHOSTAK))
 (|meet_dim_TCC1| 0
  (|meet_dim_TCC1-1| |nil| 3859464403 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|meet_dim| SUBTYPE "semi_algebraic.i" "below[length[real](x1)]")))
 (|meet_dim_TCC2| 0
  (|meet_dim_TCC2-1| |nil| 3859464403 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|meet_dim| SUBTYPE "semi_algebraic.i" "below[length[real](x2)]")))
 (|meet_dim_TCC3| 0
  (|meet_dim_TCC1-1| |nil| 3859463799 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|meet_dim| SUBTYPE "semi_algebraic.x2"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(semi_algebraic.m))}")))
 (|meet_dim| 0
  (|meet_dim-1| |nil| 3859463799
   ("" (INDUCT "m")
    (("1" (SKEEP) (("1" (EXPAND "meet") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "meet" 1)
          (("2" (INST -1 "x1" "x2")
            (("1" (ASSERT)
              (("1"
                (CASE "atom_eval(cons1_var)(x1) = atom_eval(cons1_var)(x2)")
                (("1" (ASSERT)
                  (("1" (SPLIT -2)
                    (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (SKEEP)
                      (("2" (INST -2 "i")
                        (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -1)
                  (("2" (HIDE 2)
                    (("2" (EXPAND "atom_eval")
                      (("2" (LEMMA "eval_higher_dim_poly")
                        (("2" (INST?)
                          (("2" (SPLIT -1)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (SKEEP)
                              (("2" (INST -1 "i")
                                (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (TYPEPRED "x2")
                  (("3" (TYPEPRED "x1") (("3" (GRIND) NIL NIL)) NIL)) NIL)
                 ("4" (TYPEPRED "x1") (("4" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "x1") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|eval_higher_dim_poly| FORMULA-DECL NIL |eval_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL) NIL NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|meet_max_TCC1| 0
  (|meet_max_TCC1-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|meet_max| SUBTYPE "semi_algebraic.j" "(list_adt[meeting].cons?)")))
 (|meet_max_TCC2| 0
  (|meet_max_TCC2-1| |nil| 3810907544 ("" (TERMINATION-TCC) NIL NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|meet_max| TERMINATION
    "semi_algebraic.meet_max(list_adt[meeting].cdr(semi_algebraic.j))" "NIL")))
 (|meet_max_nth| 0
  (|meet_max_nth-1| |nil| 3882533161
   ("" (INDUCT "j")
    (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (EXPAND "nth" 1)
            (("1" (ASSERT)
              (("1" (EXPAND "meet_max" 1 1) (("1" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (INST -1 "i-1")
            (("1" (EXPAND "nth" 2)
              (("1" (ASSERT)
                (("1" (EXPAND "meet_max" 2) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL NIL NIL
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|meet_max_nth_e| 0
  (|meet_max_nth_e-1| |nil| 3882533267
   ("" (INDUCT "j")
    (("1" (ASSERT) NIL NIL)
     ("2" (SKEEP)
      (("2" (SPLIT -1)
        (("1" (INST 1 "0")
          (("1" (GRIND) NIL NIL)
           ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "meet_max" 1 1)
            (("2" (EXPAND "max" 1 1)
              (("2" (CASE " atom_max(cons1_var) < meet_max(cons2_var)")
                (("1" (ASSERT)
                  (("1" (INST 1 "i+1")
                    (("1" (EXPAND "nth" 1 1) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (INST 2 "0")
                    (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    NIL (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|max_meet| 0
  (|max_meet-1| |nil| 3810907553
   ("" (INDUCT "j1")
    (("1" (EXPAND "append")
      (("1" (EXPAND "meet_max" 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "meet_max" 1 2)
          (("2" (EXPAND "meet_max" 1 1)
            (("2" (LIFT-IF 1)
              (("2" (TYPEPRED "cons(cons1_var,cons2_var)")
                (("2" (ASSERT)
                  (("2" (EXPAND "append" 1)
                    (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|meet_max_zero| 0
  (|meet_max_zero-1| |nil| 3860230264
   ("" (INDUCT "j")
    (("" (SKEEP)
      (("" (ASSERT)
        (("" (SKEEP)
          (("" (CASE "meet_max(cons2_var)=0")
            (("1" (ASSERT)
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (SKEEP)
                    (("1" (TYPEPRED "i")
                      (("1" (EXPAND "length" -1)
                        (("1" (EXPAND "length" -1)
                          (("1" (EXPAND "length" -1)
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" 2)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 3 2)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "meet_max" -4 1)
                                        (("1" (LEMMA "atom_max_max")
                                          (("1" (ASSERT)
                                            (("1" (INST -1 "cons1_var" "n")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKEEP)
                    (("2" (CASE "i=0")
                      (("1" (EXPAND "nth" 3 2)
                        (("1" (ASSERT)
                          (("1" (EXPAND "nth" 2)
                            (("1" (ASSERT)
                              (("1" (EXPAND "meet_max" -4)
                                (("1" (LEMMA "atom_max_max")
                                  (("1" (INST -1 "cons1_var" "n")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "nth" 4 2)
                        (("2" (ASSERT)
                          (("2" (INST -1 "i-1")
                            (("2" (ASSERT)
                              (("2" (EXPAND "nth" 3)
                                (("2" (ASSERT) (("2" (INST -1 "n") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "meet_max" -2 1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atom_max_max| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|join_TCC1| 0
  (|join_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (EXPAND "meet_max" -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL)
   NIL
   (|join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(list_adt[meeting].car(semi_algebraic.j)))}")))
 (|join_TCC2| 0
  (|join_TCC2-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (EXPAND "meet_max" -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL)
   NIL
   (|join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(list_adt[meeting].cdr(semi_algebraic.j)))}")))
 (|join_composed_null| 0
  (|join_composed_null-1| |nil| 3866896390
   ("" (INDUCT "j")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SPLIT)
        (("1" (INST -2 "0")
          (("1" (EXPAND "nth" -2 (1 3))
            (("1" (SPLIT)
              (("1" (EXPAND "join" (1 2))
                (("1" (EXPAND "meet" (1 2)) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
               ("2" (SKEEP 1)
                (("2" (EXPAND "join" 1)
                  (("2" (INST -2 "x") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL)
         ("2" (INST -2 "0")
          (("1" (EXPAND "nth" -2 (1 3))
            (("1" (SPLIT)
              (("1" (EXPAND "join" (1 2))
                (("1" (EXPAND "meet" (1 2)) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
               ("2"
                (CASE
                    "FORALL(m:meeting): (FORALL(n:below(length(m))): max_length(nth(m,n)`poly)=0) IMPLIES (FORALL(x:list[real]|length(x )>=atom_max(m)): meet(m)(x) = FALSE) OR (FORALL(x:list[real]|length(x)>=atom_max(m)): meet(m)(x) = TRUE)")
                (("1" (INST -1 "cons1_var")
                  (("1" (SPLIT)
                    (("1" (EXPAND "join" 2)
                      (("1" (SKEEP 2)
                        (("1" (INST -1 "x")
                          (("1" (INST -3 "x")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (TYPEPRED "x")
                              (("2" (EXPAND "meet_max" -2)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "x")
                            (("2" (EXPAND "meet_max" -2)
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP 1)
                      (("2" (EXPAND "join" 1)
                        (("2" (INST -1 "x")
                          (("2" (INST -3 "x") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKEEP)
                      (("3" (INST -1 "n") (("3" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2 3 -1 -2)
                  (("2" (INDUCT "m")
                    (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (SKEEP)
                      (("2" (COPY -2)
                        (("2" (INST -3 "0")
                          (("1" (EXPAND "nth" -3)
                            (("1" (EXPAND "meet" (1 2))
                              (("1" (EXPAND "atom_eval" (1 2))
                                (("1"
                                  (CASE
                                      "FORALL(p:MultPoly): max_length(p) =0 IMPLIES EXISTS(a:real): FORALL(x:list[real]|length(x)>=max_length(p)): full_eval(p)(x) = a")
                                  (("1" (INST -1 "cons1_var!1`poly")
                                    (("1" (ASSERT)
                                      (("1" (SKEEP -1)
                                        (("1" (COPY -1)
                                          (("1" (SPLIT -4)
                                            (("1" (SKEEP 1)
                                              (("1" (INST -1 "x") NIL NIL))
                                              NIL)
                                             ("2" (SKEEP*)
                                              (("2" (COPY -1)
                                                (("2" (INST? -1)
                                                  (("2" (INST -2 "x!1")
                                                    (("1" (ASSERT)
                                                      (("1" (INST -3 "x")
                                                        (("1" (REPLACE -3)
                                                          (("1" (INST -4 "x!1")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "x!1")
                                                      (("2"
                                                        (EXPAND "atom_max" -2)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (SKEEP)
                                              (("3" (INST -3 "n+1")
                                                (("1" (EXPAND "nth" -3)
                                                  (("1" (PROPAX) NIL NIL)) NIL)
                                                 ("2" (GRIND) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2 3 -1 -2 -3)
                                    (("2" (INDUCT "p")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SKEEP)
                                        (("2" (EXPAND "max_length" -2)
                                          (("2" (SPLIT)
                                            (("1" (SKEEP)
                                              (("1" (LEMMA "full_eval_recurs")
                                                (("1"
                                                  (INST -1
                                                   "cons(cons1_var!2, cons2_var!2)"
                                                   "_")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "full_eval" -1 2)
                                                      (("1"
                                                        (LEMMA
                                                         "alpha_null_eval")
                                                        (("1"
                                                          (INST -1
                                                           "cons1_var!2" "_"
                                                           "_")
                                                          (("1"
                                                            (INST 1
                                                             "cons1_var!2`C + a")
                                                            (("1" (SKEEP)
                                                              (("1"
                                                                (INST -3 "x")
                                                                (("1"
                                                                  (INST -2 "x")
                                                                  (("1"
                                                                    (INST? -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (REWRITE
                                                                       "list_length_n")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "list_length_n[nat]")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "length(x)")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "list_length_n"
                                                                               -1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1
                                                                                   RL)
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (TYPEPRED
                                                                   "x")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "max_length"
                                                                     -2)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "max" -1)
                                              (("2" (LIFT-IF)
                                                (("2" (SPLIT)
                                                  (("1" (FLATTEN) NIL NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (INST -1 "i+1")
            (("1" (SPLIT)
              (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (SKEEP)
                (("2" (INST -1 "n")
                  (("1" (EXPAND "nth" -1 2) (("1" (PROPAX) NIL NIL)) NIL)
                   ("2" (EXPAND "nth" 1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn(0)" |standard_form_mult_poly| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "meeting" |semi_algebraic| NIL)
    (|cons2_var| SKOLEM-CONST-DECL "list[meeting]" |semi_algebraic| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|x| SKOLEM-CONST-DECL
     "{x: list[real] | length(x) >= meet_max(cons(cons1_var, cons2_var))}"
     |semi_algebraic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|n| SKOLEM-CONST-DECL "below(length(cons1_var))" |semi_algebraic| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|full_eval_recurs| FORMULA-DECL NIL |eval_properties| NIL)
    (|alpha_null_eval| FORMULA-DECL NIL |eval_properties| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|x| SKOLEM-CONST-DECL
     "{x: list[real] | length(x) >= max_length(cons(cons1_var!2, cons2_var!2))}"
     |semi_algebraic| NIL)
    (|cons2_var!2| SKOLEM-CONST-DECL "list[monomial]" |semi_algebraic| NIL)
    (|cons1_var!2| SKOLEM-CONST-DECL "monomial" |semi_algebraic| NIL)
    (|list_length_n| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|eval| DEF-DECL "MultPoly" |eval_MultPoly| NIL)
    (|sum_C| DEF-DECL "real" |eval_MultPoly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_length_n| FORMULA-DECL NIL |list_lemmas| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL)
    (|x!1| SKOLEM-CONST-DECL
     "{x: list[real] | length(x) >= atom_max(cons(cons1_var!1, cons2_var!1))}"
     |semi_algebraic| NIL)
    (|n| SKOLEM-CONST-DECL "below(length(cons2_var!1))" |semi_algebraic| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|cons1_var!1| SKOLEM-CONST-DECL "atomic_poly" |semi_algebraic| NIL)
    (|cons2_var!1| SKOLEM-CONST-DECL "list[atomic_poly]" |semi_algebraic| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cons2_var))" |semi_algebraic| NIL)
    (|n| SKOLEM-CONST-DECL "below(length(nth(cons2_var, i)))" |semi_algebraic|
     NIL))
   SHOSTAK))
 (|join_dim_TCC1| 0
  (|join_dim_TCC1-1| |nil| 3859464667 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|join_dim| SUBTYPE "semi_algebraic.i" "below[length[real](x1)]")))
 (|join_dim_TCC2| 0
  (|join_dim_TCC2-1| |nil| 3859464667 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|join_dim| SUBTYPE "semi_algebraic.i" "below[length[real](x2)]")))
 (|join_dim_TCC3| 0
  (|join_dim_TCC3-1| |nil| 3859464667 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|join_dim| SUBTYPE "semi_algebraic.x2"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.j))}")))
 (|join_dim| 0
  (|join_dim-1| |nil| 3859464681
   ("" (INDUCT "j")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "join" 1)
          (("2" (INST -1 "x1" "x2")
            (("2" (SPLIT -1)
              (("1" (CASE "meet(cons1_var)(x1) =meet(cons1_var)(x2)")
                (("1" (GRIND) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "meet_dim")
                      (("2" (INST?)
                        (("2" (SPLIT -1)
                          (("1" (PROPAX) NIL NIL)
                           ("2" (SKEEP)
                            (("2" (INST -1 "i")
                              (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP)
                (("2" (INST -1 "i")
                  (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|meet_dim| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL) NIL
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|max_append_to_each| 0
  (|max_append_to_each-1| |nil| 3810907555
   ("" (INDUCT "L")
    (("1" (ASSERT) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "append_to_each" 1)
          (("2" (EXPAND "meet_max" 1 1)
            (("2" (LEMMA "max_atom")
              (("2" (INST?)
                (("2" (REPLACE -1)
                  (("2" (HIDE -1)
                    (("2" (EXPAND "meet_max" 1 2)
                      (("2" (INST?)
                        (("2" (CASE "cons2_var = null")
                          (("1" (REPLACE -1)
                            (("1" (EXPAND "append_to_each" 1)
                              (("1" (EXPAND "meet_max" 1)
                                (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (REPLACE -1) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_atom| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append_to_each| DEF-DECL "joining" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|append_join_TCC1| 0
  (|append_join_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (LEMMA "max_append_to_each")
      (("" (INST?)
        (("" (CASE "L = null")
          (("1" (REPLACE -1)
            (("1" (EXPAND "append_to_each")
              (("1" (TYPEPRED "x")
                (("1" (EXPAND "meet_max" -2)
                  (("1" (ASSERT)
                    (("1" (ASSERT)
                      (("1" (EXPAND "meet_max" 1) (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_append_to_each| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|append_to_each| DEF-DECL "joining" |semi_algebraic| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|append_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.append_to_each(semi_algebraic.m, semi_algebraic.L)))}")))
 (|append_join_TCC2| 0
  (|append_join_TCC2-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|append_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.atom_max(semi_algebraic.m))}")))
 (|append_join_TCC3| 0
  (|append_join_TCC3-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|append_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.L))}")))
 (|append_join| 0
  (|append_join-1| |nil| 3810907559
   ("" (INDUCT "L")
    (("1" (SKEEP)
      (("1" (EXPAND "append_to_each")
        (("1" (EXPAND "join") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "append_to_each" 1)
          (("2" (EXPAND "join" 1 1)
            (("2" (EXPAND "join" 1 2)
              (("2" (INST -1 "m" "x")
                (("1" (LEMMA "meet_meet")
                  (("1" (INST? -1)
                    (("1" (REPLACE -1)
                      (("1" (REPLACE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                     ("2" (TYPEPRED "x")
                      (("2" (HIDE -1)
                        (("2" (HIDE -2)
                          (("2" (EXPAND "meet_max" -1)
                            (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "x")
                  (("2" (EXPAND "meet_max" -2) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP) (("3" (TYPEPRED "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)
     ("4" (SKEEP) (("4" (TYPEPRED "x") (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKEEP)
      (("5" (TYPEPRED "x")
        (("5" (LEMMA "max_append_to_each")
          (("5" (INST?)
            (("5" (CASE "L=null")
              (("1" (EXPAND "append_to_each" 1) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_append_to_each| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|meet_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|append_to_each| DEF-DECL "joining" |semi_algebraic| NIL))
   SHOSTAK))
 (|max_cap_join| 0
  (|max_cap_join-1| |nil| 3810907564
   ("" (INDUCT "j1")
    (("1" (SKEEP) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "cons2_var = null")
          (("1" (REPLACE -1)
            (("1" (EXPAND "cap_join" 1)
              (("1" (ASSERT)
                (("1" (EXPAND "cap_join" 1)
                  (("1" (EXPAND "meet_max" 1 2)
                    (("1" (EXPAND "meet_max" 1 2)
                      (("1" (EXPAND "max" 1 2)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF 1)
                            (("1" (ASSERT)
                              (("1" (LEMMA "max_meet")
                                (("1" (INST? -1)
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "meet_max" 1 2)
                                      (("1" (LEMMA "max_append_to_each")
                                        (("1" (INST? -1)
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "cap_join" 2)
            (("2" (ASSERT)
              (("2" (LEMMA "max_meet")
                (("2" (INST? -1)
                  (("2" (REPLACE -1)
                    (("2" (LEMMA "max_append_to_each")
                      (("2" (INST? -1)
                        (("2" (ASSERT)
                          (("2" (REPLACE -1)
                            (("2" (HIDE -1)
                              (("2" (HIDE -1)
                                (("2" (EXPAND "meet_max" 2 3)
                                  (("2" (INST -1 "j2")
                                    (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|append_to_each| DEF-DECL "joining" |semi_algebraic| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max_append_to_each| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|max_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|union_join_TCC1| 0
  (|union_join_TCC1-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|union_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.j1))}")))
 (|union_join_TCC2| 0
  (|union_join_TCC2-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|union_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.j2))}")))
 (|union_join_TCC3| 0
  (|union_join_TCC3-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (LEMMA "max_meet") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_meet| FORMULA-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|union_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(list_props[meeting].append(semi_algebraic.j1, semi_algebraic.j2)))}")))
 (|union_join| 0
  (|union_join-1| |nil| 3810907574
   ("" (INDUCT "j1")
    (("1" (SKEEP)
      (("1" (LEMMA "append_null_left[meeting]")
        (("1" (INST?)
          (("1" (REPLACE -1)
            (("1" (EXPAND "join" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "join" 1 1)
          (("2" (EXPAND "join" 1 3)
            (("2" (EXPAND "append" 1 1)
              (("2" (LEMMA "car_append[meeting]")
                (("2" (INST?)
                  (("2" (REPLACE -1)
                    (("2" (ASSERT)
                      (("2" (LEMMA "cdr_append[meeting]")
                        (("2" (INST?)
                          (("2" (REPLACE -1)
                            (("2" (ASSERT)
                              (("2" (TYPEPRED "x")
                                (("2" (EXPAND "meet_max" -2 1)
                                  (("2" (INST -5 "j2" "x")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (TYPEPRED "x")
        (("3" (LEMMA "max_meet")
          (("3" (INST?) (("3" (REPLACE -1) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP) (("4" (TYPEPRED "x") (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKEEP) (("5" (TYPEPRED "x") (("5" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|max_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL NIL NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_append| FORMULA-DECL NIL |more_list_props| |structures|) NIL
    (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL))
   SHOSTAK))
 (|intersect_join_TCC1| 0
  (|intersect_join_TCC1-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|intersect_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.j2))}")))
 (|intersect_join_TCC2| 0
  (|intersect_join_TCC2-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (HIDE -1)
        (("" (CASE "j1 = null")
          (("1" (EXPAND "cap_join" 1) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (CASE "j2 = null")
            (("1" (EXPAND "cap_join") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (LEMMA "max_cap_join")
              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|max_cap_join| FORMULA-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|intersect_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.cap_join(semi_algebraic.j1, semi_algebraic.j2)))}")))
 (|intersect_join| 0
  (|intersect_join-1| |nil| 3810907577
   ("" (INDUCT "j1")
    (("1" (EXPAND "cap_join")
      (("1" (EXPAND "join") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "cap_join" 1)
          (("2" (ASSERT)
            (("2" (LIFT-IF)
              (("2" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (EXPAND "join" 1)
                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (EXPAND "join" 2 1)
                    (("2" (LEMMA "union_join")
                      (("2"
                        (INST -1 "append_to_each(cons1_var, j2)"
                         "cap_join(cons2_var, j2)" "x")
                        (("1" (INST -2 "j2" "x")
                          (("1" (LEMMA "append_join")
                            (("1" (INST -1 "cons1_var" "j2" "x")
                              (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)
                               ("2" (HIDE -1)
                                (("2" (HIDE -1)
                                  (("2" (TYPEPRED "x")
                                    (("2" (HIDE -1)
                                      (("2" (EXPAND "meet_max" -1 1)
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1)
                            (("2" (TYPEPRED "x")
                              (("2" (EXPAND "meet_max" -2 1)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1)
                          (("2" (TYPEPRED "x")
                            (("2" (HIDE -1)
                              (("2" (EXPAND "meet_max" -1 1)
                                (("2" (LEMMA "max_append_to_each")
                                  (("2" (INST -1 "cons1_var" "j2")
                                    (("2" (ASSERT)
                                      (("2" (REPLACE -1)
                                        (("2" (HIDE -1)
                                          (("2" (LEMMA "max_cap_join")
                                            (("2" (INST? -1)
                                              (("2" (ASSERT)
                                                (("2" (CASE "cons2_var = null")
                                                  (("1" (REPLACE -1)
                                                    (("1"
                                                      (EXPAND "meet_max" -3 1)
                                                      (("1"
                                                        (EXPAND "cap_join" 1)
                                                        (("1"
                                                          (EXPAND "meet_max" 1
                                                                  2)
                                                          (("1" (ASSERT)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (REPLACE -1)
                                                      (("2" (HIDE -1)
                                                        (("2" (HIDE 4)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "max")
                                                              (("2" (ASSERT)
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (TYPEPRED "x")
        (("3" (HIDE -1)
          (("3" (CASE "j1=null")
            (("1" (REPLACE -1)
              (("1" (EXPAND "meet_max" -2 1)
                (("1" (EXPAND "cap_join" 1)
                  (("1" (EXPAND "meet_max" 1) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j2=null")
              (("1" (EXPAND "cap_join" 2) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (LEMMA "max_cap_join")
                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP) (("4" (TYPEPRED "x") (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKEEP) (("5" (TYPEPRED "x") (("5" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|union_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|max_append_to_each| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max_cap_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|append_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|append_to_each| DEF-DECL "joining" |semi_algebraic| NIL) NIL NIL NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL))
   SHOSTAK))
 (|not_join_cons| 0
  (|not_join_cons-1| |nil| 3857722673
   ("" (INDUCT "j")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (SPLIT -1)
        (("1" (EXPAND "not_join" 1)
          (("1" (EXPAND "cap_join" 1)
            (("1" (LIFT-IF 1)
              (("1" (ASSERT)
                (("1" (SPLIT 1)
                  (("1" (EXPAND "negative_atom_meet" -1)
                    (("1" (INST -3 "0")
                      (("1" (EXPAND "nth" -3) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (LEMMA "null_append[meeting]")
                      (("2" (INST?)
                        (("2" (ASSERT)
                          (("2" (FLATTEN)
                            (("2" (EXPAND "append_to_each" -1)
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (INST -1 "i+1")
            (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|negative_atom_meet| DEF-DECL "joining" |semi_algebraic| NIL)
    (|null_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append_to_each| DEF-DECL "joining" |semi_algebraic| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|not_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|not_join_null| 0
  (|not_join_null-1| |nil| 3860148361
   ("" (INDUCT "j")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (EXPAND "not_join" 1)
        (("3" (SKEEP -2)
          (("3" (CASE "i=0")
            (("1" (EXPAND "nth" -3)
              (("1" (ASSERT)
                (("1" (EXPAND "negative_atom_meet")
                  (("1" (EXPAND "cap_join") (("1" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "nth" -2)
              (("2" (ASSERT)
                (("2" (SPLIT -1)
                  (("1" (REPLACE -1)
                    (("1" (EXPAND "cap_join") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL)
                   ("2" (INST 1 "i-1") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|negative_atom_meet| DEF-DECL "joining" |semi_algebraic| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|not_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|max_not_meet| 0
  (|max_not_meet-1| |nil| 3810907594
   ("" (INDUCT "m")
    (("1" (EXPAND "atom_max")
      (("1" (EXPAND "negative_atom_meet")
        (("1" (EXPAND "meet_max") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "atom_max" 1)
        (("2" (EXPAND "negative_atom_meet" 1)
          (("2" (EXPAND "meet_max" 1)
            (("2" (EXPAND "atom_max" 1 2)
              (("2" (EXPAND "negative_atom" 1)
                (("2" (ASSERT)
                  (("2" (EXPAND "atom_max" 1 2)
                    (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|negative_atom| CONST-DECL "atomic_poly" |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|negative_atom_meet| DEF-DECL "joining" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|max_not_null| 0
  (|max_not_null-1| |nil| 3857647277
   ("" (INDUCT "j")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (EXPAND "not_join" 1)
        (("3" (LEMMA "max_cap_join")
          (("3" (INST? -1)
            (("3" (SPLIT -1)
              (("1" (REPLACE -1)
                (("1" (EXPAND "meet_max" 1 1)
                  (("1" (LEMMA "max_not_meet")
                    (("1" (INST? -1)
                      (("1" (REPLACE -1)
                        (("1" (SPLIT -3)
                          (("1" (GRIND) NIL NIL)
                           ("2" (SKEEP)
                            (("2" (INST -3 "i+1")
                              (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST -2 "0")
                (("1" (EXPAND "nth" -2)
                  (("1" (EXPAND "negative_atom_meet" 1)
                    (("1" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL))
                NIL)
               ("3" (LEMMA "not_join_cons")
                (("3" (INST -1 "cons2_var")
                  (("3" (SPLIT -1)
                    (("1" (SKEEP)
                      (("1" (INST -2 "i+1")
                        (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP)
                      (("2" (INST -1 "i+1")
                        (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_cap_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_not_meet| FORMULA-DECL NIL |semi_algebraic| NIL) NIL NIL
    (|not_join_cons| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|negative_atom_meet| DEF-DECL "joining" |semi_algebraic| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|not_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|max_not| 0
  (|max_not-1| |nil| 3810907596
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (LEMMA "max_not_null") (("1" (INST?) NIL NIL)) NIL)) NIL)
       ("2" (FLATTEN)
        (("2" (CASE "EXISTS(i: below(length(j))): null?(nth(j, i))")
          (("1" (LEMMA "not_join_null")
            (("1" (INST?)
              (("1" (REPLACE -1)
                (("1" (EXPAND "meet_max") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKEEP) (("2" (INST 1 "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_not_null| FORMULA-DECL NIL |semi_algebraic| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) NIL
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|not_join_null| FORMULA-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|not_meet_TCC1| 0
  (|not_meet_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (LEMMA "max_not_meet") (("" (INST? -1) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_not_meet| FORMULA-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|not_meet| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.negative_atom_meet(semi_algebraic.m)))}")))
 (|not_meet| 0
  (|not_meet-1| |nil| 3810907598
   ("" (INDUCT "m")
    (("1" (SKEEP)
      (("1" (EXPAND "negative_atom_meet")
        (("1" (EXPAND "join")
          (("1" (EXPAND "meet") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "meet" 1)
          (("2" (SIMPLIFY 1)
            (("2" (EXPAND "negative_atom_meet" 1)
              (("2" (EXPAND "join" 1)
                (("2" (EXPAND "negative_atom" 1)
                  (("2" (LIFT-IF 1)
                    (("2" (INST -1 "x")
                      (("1" (SPLIT 1)
                        (("1" (FLATTEN)
                          (("1" (EXPAND "atom_eval" 1 1)
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "meet" 1 2)
                                (("1" (EXPAND "atom_eval" 1)
                                  (("1" (EXPAND "meet" 1 2)
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (SPLIT 2)
                            (("1" (FLATTEN)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "meet" 1 2)
                                  (("1" (EXPAND "atom_eval" 1)
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (SPLIT 2)
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "meet" 1 2)
                                    (("1" (EXPAND "atom_eval" 1)
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (TYPEPRED "cons1_var`ineq")
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "meet" 2 2)
                                        (("2" (EXPAND "atom_eval" 2)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "x")
                        (("2" (EXPAND "atom_max" -2) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (TYPEPRED "x")
        (("3" (LEMMA "max_not_meet")
          (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|max_not_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|negative_atom| CONST-DECL "atomic_poly" |semi_algebraic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    NIL NIL (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|negative_atom_meet| DEF-DECL "joining" |semi_algebraic| NIL))
   SHOSTAK))
 (|not_join_TCC1| 0
  (|not_join_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (TYPEPRED "x")
      (("" (LEMMA "max_not") (("" (INST? -1) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_not| FORMULA-DECL NIL |semi_algebraic| NIL) NIL)
   NIL
   (|not_join| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.not_join(semi_algebraic.j)))}")))
 (|not_join| 0
  (|not_join-1| |nil| 3810907602
   ("" (INDUCT "j")
    (("1" (EXPAND "not_join")
      (("1" (EXPAND "join")
        (("1" (EXPAND "meet") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "not_join" 1)
          (("2" (LEMMA "intersect_join")
            (("2" (INST? -1)
              (("1" (LEMMA "not_meet")
                (("1" (INST? -1)
                  (("1" (EXPAND "join" 1 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (HIDE 2)
                    (("2" (TYPEPRED "x")
                      (("2" (EXPAND "meet_max" -2) (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1)
                (("2" (TYPEPRED "x")
                  (("2" (EXPAND "meet_max" -2)
                    (("2" (LEMMA "max_not")
                      (("2" (INST? -1)
                        (("2" (ASSERT)
                          (("2" (HIDE -2)
                            (("2" (LEMMA "max_not_meet")
                              (("2" (INST? -1)
                                (("2" (REPLACE -1)
                                  (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (TYPEPRED "x")
        (("3" (LEMMA "max_not") (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    NIL NIL (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|negative_atom_meet| DEF-DECL "joining" |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|not_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|max_not| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|max_not_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|intersect_join| FORMULA-DECL NIL |semi_algebraic| NIL) NIL
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|not_join| DEF-DECL "joining" |semi_algebraic| NIL))
   SHOSTAK))
 (|semi_alg_TCC1| 0
  (|semi_alg_TCC1-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|semi_alg| SUBTYPE "semi_algebraic.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic.meet_max(semi_algebraic.j))}")))
 (|all_true_TCC1| 0
  (|all_true_TCC1-1| |nil| 3810907544
   ("" (SKEEP)
    (("" (EXPAND "meet_max")
      (("" (EXPAND "atom_max")
        (("" (EXPAND "meet_max")
          (("" (ASSERT)
            (("" (TYPEPRED "n")
              (("" (EXPAND "max") (("" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL))
   NIL
   (|all_true| SUBTYPE "semi_algebraic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: (: :) :)))}")))
 (|all_true| 0
  (|all_true-1| |nil| 3810907605
   ("" (SKEEP)
    (("" (EXPAND "semi_alg")
      (("" (EXPAND "join") (("" (EXPAND "meet") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL))
   SHOSTAK))
 (|sa_union_TCC1| 0
  (|sa_union_TCC1-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|sa_union| SUBTYPE "semi_algebraic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max(semi_algebraic.j1))}")))
 (|sa_union_TCC2| 0
  (|sa_union_TCC2-1| |nil| 3810907544 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|sa_union| SUBTYPE "semi_algebraic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max(semi_algebraic.j2))}")))
 (|sa_union| 0
  (|sa_union-1| |nil| 3810907606
   ("" (SKEEP)
    (("" (INST 1 "append(j1,j2)")
      (("" (TYPEPRED "n")
        (("" (ASSERT)
          (("" (LEMMA "max_meet")
            (("" (INST?)
              (("" (ASSERT)
                (("" (EXPAND "union")
                  (("" (EXPAND "member")
                    (("" (EXPAND "semi_alg")
                      (("" (LEMMA "union_join")
                        (("" (INST?)
                          (("" (HIDE -2)
                            (("" (HIDE -2)
                              (("" (DECOMPOSE-EQUALITY 1)
                                (("" (INST? -1) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL) NIL
    (|union_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|max_meet| FORMULA-DECL NIL |semi_algebraic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL))
   SHOSTAK))
 (|sa_intersection| 0
  (|sa_intersection-1| |nil| 3810907608
   ("" (SKEEP)
    (("" (INST 1 "cap_join(j1,j2)")
      (("" (FLATTEN)
        (("" (EXPAND "intersection")
          (("" (EXPAND "semi_alg")
            (("" (EXPAND "member")
              (("" (DECOMPOSE-EQUALITY 1)
                (("1" (LEMMA "intersect_join") (("1" (INST? -1) NIL NIL)) NIL)
                 ("2" (SKEEP)
                  (("2" (TYPEPRED "x")
                    (("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (SKEEP)
                  (("3" (TYPEPRED "x")
                    (("3" (TYPEPRED "n") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|intersect_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL) NIL NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL))
   SHOSTAK))
 (|sa_complement| 0
  (|sa_complement-1| |nil| 3810907610
   ("" (SKEEP)
    (("" (INST 1 "not_join(j)")
      (("" (FLATTEN)
        (("" (EXPAND "complement")
          (("" (EXPAND "semi_alg")
            (("" (EXPAND "member")
              (("" (DECOMPOSE-EQUALITY 1)
                (("" (LEMMA "not_join") (("" (INST?) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|not_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|not_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL) NIL NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL))
   SHOSTAK))
 (|sa_difference| 0
  (|sa_difference-1| |nil| 3810907611
   ("" (SKEEP)
    (("" (EXPAND "difference")
      (("" (EXPAND "member")
        (("" (INST 1 " cap_join(j1,not_join(j2))")
          (("" (FLATTEN)
            (("" (LEMMA "intersect_join")
              (("" (INST?)
                (("" (DECOMPOSE-EQUALITY 1)
                  (("1" (INST? -1)
                    (("1" (LEMMA "not_join")
                      (("1" (INST -1 "j2" "x!1")
                        (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                         ("2" (HIDE -1)
                          (("2" (TYPEPRED "x!1")
                            (("2" (LEMMA "max_not")
                              (("2" (INST -1 "j2")
                                (("2" (CASE "not_join(j2) = null")
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "not_join" -1)
                                      (("1" (LIFT-IF -1)
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -1)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (TYPEPRED "n")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "max_not")
                      (("2" (INST -1 "j2")
                        (("2" (TYPEPRED "n")
                          (("2" (ASSERT)
                            (("2" (TYPEPRED "x!1")
                              (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKEEP)
                    (("2" (TYPEPRED "n") (("2" (ASSERT) NIL NIL)) NIL)) NIL)
                   ("3" (SKEEP)
                    (("3" (TYPEPRED "n") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|difference| CONST-DECL "set" |sets| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|cap_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|not_join| DEF-DECL "joining" |semi_algebraic| NIL)
    (|intersect_join| FORMULA-DECL NIL |semi_algebraic| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL NIL NIL (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|not_join| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|max_not| FORMULA-DECL NIL |semi_algebraic| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) NIL
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   SHOSTAK)))

