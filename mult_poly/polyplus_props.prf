(polyplus_props
 (init_polyplus_nth_TCC1 0
  (init_polyplus_nth_TCC1-1 nil 3813477819 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (init_polyplus_nth subtype "polyplus_props.i"
    "below[length[real](init_polyplus(f, g))]")))
 (init_polyplus_nth 0
  (init_polyplus_nth-1 nil 3813477859
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polyplus")
        (("1" (typepred "i")
          (("1" (assert)
            (("1" (expand "max")
              (("1" (lift-if -1)
                (("1" (split -1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "enth") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "i")
          (("2" (expand "length" -1 1)
            (("2" (case "i=0")
              (("1" (replace -1)
                (("1" (expand "init_polyplus" 1)
                  (("1" (assert)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "length" -3 2)
                              (("1"
                                (expand "max" -3)
                                (("1"
                                  (expand "enth")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "enth" 2)
                            (("2" (assert)
                              (("2"
                                (expand " length" 2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "nth" 2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "length" -1 2)
                (("2" (lift-if -1)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (expand "init_polyplus" 2)
                        (("1" (assert)
                          (("1" (expand "enth")
                            (("1" (expand "max" -2)
                              (("1"
                                (expand "length" 2)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "init_polyplus" 3)
                        (("2" (assert)
                          (("2" (inst -2 "cdr(g) " "i-1")
                            (("1" (expand "nth" 3)
                              (("1"
                                (replace -2)
                                (("1"
                                  (expand "max")
                                  (("1"
                                    (lift-if -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "enth" +)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" 3 2)
                                              (("1"
                                                (expand "length" 3 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 3 3)
                                                    (("1"
                                                      (lift-if 3)
                                                      (("1"
                                                        (split 3)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               2
                                                               2)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "enth" +)
                                          (("2"
                                            (expand "length" 4 3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" 4 2)
                                                (("2"
                                                  (expand "nth" 4 3)
                                                  (("2"
                                                    (expand "nth" 4 2)
                                                    (("2"
                                                      (lift-if 4)
                                                      (("2"
                                                        (split 4)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "max")
                              (("2"
                                (lift-if -1)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (assert)
      (("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (i skolem-const-decl
       "below(max(length(cons(cons1_var, cons2_var)), length(g)))"
       polyplus_props nil)
    (g skolem-const-decl "Polynomial" polyplus_props nil)
    (cons2_var skolem-const-decl "list[real]" polyplus_props nil)
    (cons1_var skolem-const-decl "real" polyplus_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length_null formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (enth const-decl "real" polyplus_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil))
   shostak)))

