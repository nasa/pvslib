(|arithmetic_poly|
 (|init_polyplus_TCC1| 0
  (|init_polyplus_TCC1-1| |nil| 3777802202
   ("" (SKEEP) (("" (EXPAND "max" 1) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|init_polyplus| SUBTYPE "arithmetic_poly.g"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (|init_polyplus_TCC2| 0
  (|init_polyplus_TCC2-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL))
   NIL
   (|init_polyplus| SUBTYPE "arithmetic_poly.f"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (|init_polyplus_TCC3| 0
  (|init_polyplus_TCC3-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL))
   NIL (|init_polyplus| SUBTYPE "arithmetic_poly.f" "(list_adt[real].cons?)")))
 (|init_polyplus_TCC4| 0
  (|init_polyplus_TCC4-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL))
   NIL (|init_polyplus| SUBTYPE "arithmetic_poly.g" "(list_adt[real].cons?)")))
 (|init_polyplus_TCC5| 0
  (|init_polyplus_TCC5-1| |nil| 3777802202 ("" (TERMINATION-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|init_polyplus| TERMINATION
    "arithmetic_poly.init_polyplus(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cdr(arithmetic_poly.g))"
    "NIL")))
 (|init_polyplus_TCC6| 0
  (|init_polyplus_TCC6-1| |nil| 3777802202
   ("" (SKEEP)
    (("" (EXPAND "length" 3 1)
      (("" (TYPEPRED "v(cdr[real](f), cdr[real](g))")
        (("" (HIDE -1)
          (("" (EXPAND "max" 3 1)
            (("" (LIFT-IF)
              (("" (SPLIT 3)
                (("1" (FLATTEN)
                  (("1" (EXPAND "length" -1)
                    (("1" (EXPAND "max" -2)
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (EXPAND "length" 1)
                    (("2" (EXPAND "max" -1)
                      (("2" (ASSERT)
                        (("2" (EXPAND "length" 2 2) (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL)
   NIL
   (|init_polyplus| SUBTYPE
    "list_adt[real].cons((number_fields.+)(list_adt[real].car(arithmetic_poly.f), list_adt[real].car(arithmetic_poly.g)), arithmetic_poly.init_polyplus(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cdr(arithmetic_poly.g)))"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (|init_polyscale_TCC1| 0
  (|init_polyscale_TCC1-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL))
   NIL
   (|init_polyscale| SUBTYPE "arithmetic_poly.f" "(list_adt[real].cons?)")))
 (|init_polyscale_TCC2| 0
  (|init_polyscale_TCC2-1| |nil| 3777802202 ("" (TERMINATION-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|init_polyscale| TERMINATION
    "arithmetic_poly.init_polyscale(arithmetic_poly.r, list_adt[real].cdr(arithmetic_poly.f))"
    "NIL")))
 (|init_polyscale_TCC3| 0
  (|init_polyscale_TCC3-1| |nil| 3777802202
   ("" (SKEEP)
    (("" (EXPAND "length" 2 1)
      (("" (TYPEPRED "v(r,cdr(f))")
        (("" (ASSERT) (("" (EXPAND "length" 2 2) (("" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL)
   NIL
   (|init_polyscale| SUBTYPE
    "list_adt[real].cons(number_fields.*(arithmetic_poly.r, list_adt[real].car(arithmetic_poly.f)), arithmetic_poly.init_polyscale(arithmetic_poly.r, list_adt[real].cdr(arithmetic_poly.f)))"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = list_props[real].length(arithmetic_poly.f)}")))
 (|init_polymult_TCC1| 0
  (|init_polymult_TCC1-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|init_polymult| SUBTYPE "list_adt[real].null"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}")))
 (|init_polymult_TCC2| 0
  (|init_polymult_TCC2-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|init_polymult| SUBTYPE
    "arithmetic_poly.init_polyscale(list_adt[real].car(arithmetic_poly.f), arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}")))
 (|init_polymult_TCC3| 0
  (|init_polymult_TCC3-2| |nil| 3777802782
   ("" (SKEEP)
    (("" (SPLIT 4)
      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (FLATTEN)
        (("2" (TYPEPRED " v(cdr[real](f), cons[real](0, g))")
          (("2" (HIDE -1)
            (("2" (ASSERT)
              (("2" (CASE "null?(cdr(f))")
                (("1" (ASSERT)
                  (("1"
                    (TYPEPRED "init_polyplus(init_polyscale(car[real](f), g),
                         v(cdr[real](f), cons[real](0, g)))")
                    (("1" (HIDE -1)
                      (("1" (REPLACE -3)
                        (("1" (EXPAND "max" -1)
                          (("1" (REPLACE -1 3)
                            (("1" (TYPEPRED "init_polyscale(car[real](f), g)")
                              (("1" (HIDE -1)
                                (("1" (REPLACE -1 3)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length" 3)
                                      (("1" (EXPAND "length" 3)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (HIDE -1)
                    (("2"
                      (TYPEPRED "init_polyplus(init_polyscale(car[real](f), g),
                         v(cdr[real](f), cons[real](0, g)))")
                      (("2" (HIDE -1)
                        (("2" (EXPAND "max" -1)
                          (("2" (LIFT-IF -1)
                            (("2" (SPLIT -1)
                              (("1" (FLATTEN)
                                (("1" (REPLACE -2)
                                  (("1" (REPLACE -3 4)
                                    (("1" (EXPAND "length" 4 2)
                                      (("1" (EXPAND "length" 4 2)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (FLATTEN)
                                  (("2" (REPLACE -1 5)
                                    (("2"
                                      (TYPEPRED
                                       "init_polyscale(car[real](f), g)")
                                      (("2" (HIDE -1)
                                        (("2" (REPLACE -1)
                                          (("2" (REPLACE -3 1)
                                            (("2" (EXPAND "length" 1 3)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "length" 5 1)
                                                  (("2" (EXPAND "length" 1 2)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    NIL)
   NIL
   (|init_polymult| SUBTYPE
    "arithmetic_poly.init_polyplus(arithmetic_poly.init_polyscale(list_adt[real].car(arithmetic_poly.f), arithmetic_poly.g), arithmetic_poly.init_polymult(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cons(0, arithmetic_poly.g)))"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}"))
  (|init_polymult_TCC3-1| |nil| 3777802202 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|init_polymult| SUBTYPE
    "arithmetic_poly.init_polyplus(arithmetic_poly.init_polyscale(list_adt[real].car(arithmetic_poly.f), arithmetic_poly.g), arithmetic_poly.init_polymult(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cons(0, arithmetic_poly.g)))"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}")))
 (|init_polyexp_TCC1| 0
  (|init_polyexp_TCC1-1| |nil| 3778842333 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|init_polyexp| SUBTYPE "list_adt[real].null"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(list_adt[real].null?(arithmetic_poly.f), list_props[real].length(ff) = 0)), booleans.AND((booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), arithmetic_poly.k = 0)), list_props[real].length(ff) = 1)), (booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), reals.>(arithmetic_poly.k, 0))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(1, number_fields.*(list_props[real].length(arithmetic_poly.f), arithmetic_poly.k)), arithmetic_poly.k)))))}")))
 (|init_polyexp_TCC2| 0
  (|init_polyexp_TCC2-1| |nil| 3778842333
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    NIL)
   NIL
   (|init_polyexp| SUBTYPE "(: 1 :)"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(list_adt[real].null?(arithmetic_poly.f), list_props[real].length(ff) = 0)), booleans.AND((booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), arithmetic_poly.k = 0)), list_props[real].length(ff) = 1)), (booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), reals.>(arithmetic_poly.k, 0))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(1, number_fields.*(list_props[real].length(arithmetic_poly.f), arithmetic_poly.k)), arithmetic_poly.k)))))}")))
 (|init_polyexp_TCC3| 0
  (|init_polyexp_TCC3-1| |nil| 3778842333 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|init_polyexp| SUBTYPE "(number_fields.-)(arithmetic_poly.k, 1)" "nat")))
 (|init_polyexp_TCC4| 0
  (|init_polyexp_TCC4-1| |nil| 3778842333 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|init_polyexp| TERMINATION
    "arithmetic_poly.init_polyexp(arithmetic_poly.f, (number_fields.-)(arithmetic_poly.k, 1))"
    "NIL")))
 (|init_polyexp_TCC5| 0
  (|init_polyexp_TCC5-1| |nil| 3778842333
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "v(f,k-1)")
        (("" (HIDE -1)
          (("" (HIDE -1)
            (("" (CASE "k-1=0")
              (("1" (ASSERT)
                (("1" (TYPEPRED "init_polymult(f, v(f, k - 1))")
                  (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (HIDE -1)
                (("2" (CASE "k-1>0")
                  (("1" (ASSERT)
                    (("1" (TYPEPRED "init_polymult(f, v(f, k - 1))")
                      (("1" (HIDE -1)
                        (("1" (CASE "null?(v(f,k-1))")
                          (("1" (ASSERT)
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "length" -4)
                                (("1" (ASSERT)
                                  (("1"
                                    (CASE
                                        "NOT  length(cdr(f)) * k - length(cdr(f)) = length(cdr(f))*(k-1)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2"
                                      (CASE
                                          "NOT 0 = 1 + length(cdr(f)) * (k - 1)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE -6)
                                        (("2"
                                          (CASE
                                              "NOT length(cdr(f)) * (k - 1)>0")
                                          (("1"
                                            (CASE
                                                "FORALL (a,b:int): (a>=0 and b>0) IMPLIES a*b>=0")
                                            (("1"
                                              (INST -1 "length(cdr(f))" "k-1")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (ASSERT)
                                              (("2" (SKEEP)
                                                (("2" (ASSERT)
                                                  (("2" (REPLACE -1)
                                                    (("2" (DIV-BY 1 "b")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "k") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|init_polyexp| SUBTYPE
    "arithmetic_poly.init_polymult(arithmetic_poly.f, arithmetic_poly.init_polyexp(arithmetic_poly.f, (number_fields.-)(arithmetic_poly.k, 1)))"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(list_adt[real].null?(arithmetic_poly.f), list_props[real].length(ff) = 0)), booleans.AND((booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), arithmetic_poly.k = 0)), list_props[real].length(ff) = 1)), (booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), reals.>(arithmetic_poly.k, 0))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(1, number_fields.*(list_props[real].length(arithmetic_poly.f), arithmetic_poly.k)), arithmetic_poly.k)))))}")))
 (|init_polysub_TCC1| 0
  (|init_polysub_TCC1-1| |nil| 3778493816 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|init_polysub| SUBTYPE
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.init_polyscale(-1, arithmetic_poly.g))"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (|assoc_init_polyplus| 0
  (|assoc_init_polyplus-1| |nil| 3777802695
   ("" (INDUCT "f")
    (("1" (ASSERT)
      (("1" (SKEEP)
        (("1" (EXPAND "init_polyplus" 1 2)
          (("1" (EXPAND "init_polyplus" 1 2) (("1" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (SKEEP)
        (("2" (INDUCT "g" 1)
          (("1" (ASSERT)
            (("1" (SKEEP)
              (("1" (EXPAND "init_polyplus" 1 2)
                (("1" (EXPAND "init_polyplus" 1 3) (("1" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (EXPAND "init_polyplus" 1 4)
                  (("2" (ASSERT)
                    (("2" (CASE "null?(h)")
                      (("1" (ASSERT)
                        (("1" (EXPAND "init_polyplus" 1 1)
                          (("1" (EXPAND "init_polyplus" 1 1)
                            (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "init_polyplus" 2 1)
                          (("2" (LIFT-IF)
                            (("2" (EXPAND "init_polyplus" 2 1)
                              (("2" (ASSERT)
                                (("2" (EXPAND "init_polyplus" 2 1)
                                  (("2" (EXPAND "init_polyplus" 2 3)
                                    (("2" (DECOMPOSE-EQUALITY 2)
                                      (("2" (INST -2 "cons2_var_1" "cdr(h)")
                                        (("2" (ASSERT)
                                          (("2" (REPLACE -2 1 RL)
                                            (("2" (EXPAND "init_polyplus" 1 2)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|poly_scale_assoc| 0
  (|poly_scale_assoc-1| |nil| 3777802804
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "init_polyscale" 1 2)
          (("2" (EXPAND "init_polyscale" 1 3)
            (("2" (EXPAND "init_polyscale" 1 1)
              (("2" (DECOMPOSE-EQUALITY 1) (("2" (INST -1 "r1" "r2") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|poly_scale_dist1| 0
  (|poly_scale_dist1-1| |nil| 3777802823
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polyplus" 1 1)
        (("1" (EXPAND "init_polyscale" 1 2)
          (("1" (EXPAND "init_polyplus" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "init_polyscale" 1 2)
          (("2" (EXPAND "init_polyplus" 1 1)
            (("2" (CASE "g=null")
              (("1" (ASSERT)
                (("1" (REPLACE -1 1)
                  (("1" (EXPAND "init_polyscale" 1 3)
                    (("1" (EXPAND "init_polyplus" 1 1)
                      (("1" (EXPAND "init_polyscale" 1 1)
                        (("1" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "init_polyscale" 2 1)
                  (("2" (EXPAND "init_polyplus" 2 2)
                    (("2" (TYPEPRED "init_polyscale(r,g)")
                      (("2" (CASE "init_polyscale(r,g)=null")
                        (("1" (REPLACE -1 -2)
                          (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|poly_scale_dist2| 0
  (|poly_scale_dist2-1| |nil| 3777802844
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polyscale" 1 2)
              (("1" (EXPAND "init_polyscale" 1 1)
                (("1" (EXPAND "init_polyscale" 1 1)
                  (("1" (EXPAND "init_polyscale" 1 1)
                    (("1" (EXPAND "init_polyscale" 1 1)
                      (("1" (EXPAND "init_polyscale" 1 1)
                        (("1" (EXPAND "init_polyplus" 1 1)
                          (("1" (DECOMPOSE-EQUALITY 1)
                            (("1" (EXPAND "init_polyplus" 1 1)
                              (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "init_polyscale" 2 1)
            (("2" (EXPAND "init_polyscale" 2 2)
              (("2" (EXPAND "init_polyscale" 2 3)
                (("2" (EXPAND "init_polyplus" 2 1)
                  (("2" (DECOMPOSE-EQUALITY 2)
                    (("2" (INST -1 "r1" "r2") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|poly_scale_mult1| 0
  (|poly_scale_mult1-1| |nil| 3777802886
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polymult" 1 2)
        (("1" (EXPAND "init_polyscale" 1 2)
          (("1" (EXPAND "init_polymult" 1 1)
            (("1" (EXPAND "init_polyscale" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (CASE "cons2_var=null")
        (("1" (REPLACE -1 1)
          (("1" (EXPAND "init_polyscale" 1 2)
            (("1" (EXPAND "init_polyscale" 1 2)
              (("1" (SKEEP)
                (("1" (CASE "g=null")
                  (("1" (REPLACE -1 1)
                    (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                   ("2" (EXPAND "init_polymult" 2 2)
                    (("2" (ASSERT)
                      (("2" (EXPAND "init_polymult" 2 1)
                        (("2" (EXPAND "length" 2 1)
                          (("2" (ASSERT)
                            (("2" (LEMMA "poly_scale_assoc")
                              (("2" (INST -1 "r" "cons1_var" "g") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (CASE "g=null")
            (("1" (REPLACE -1 2) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL))
              NIL)
             ("2" (EXPAND "init_polymult" 3 1)
              (("2" (ASSERT)
                (("2" (EXPAND "length" 3 1)
                  (("2" (EXPAND "length" 3 1)
                    (("2" (ASSERT)
                      (("2" (ASSERT)
                        (("2" (EXPAND "init_polyscale" 3 3)
                          (("2" (EXPAND "init_polymult" 3 2)
                            (("2" (EXPAND "length" 3 1)
                              (("2" (TYPEPRED "init_polyscale(r,cons2_var)" 3)
                                (("2" (HIDE -1)
                                  (("2" (REPLACE -1 3)
                                    (("2" (EXPAND "length" 3 1)
                                      (("2" (INST-CP -5 "r" "cons(0,g)")
                                        (("2" (REPLACE -6 3 RL)
                                          (("2" (LEMMA "poly_scale_dist1")
                                            (("2"
                                              (INST -1 "r"
                                               "init_polyscale(cons1_var, g)"
                                               "init_polymult(cons2_var,
                                                                 cons(0, g))")
                                              (("2" (ASSERT)
                                                (("2" (REPLACE -1 3)
                                                  (("2"
                                                    (LEMMA "poly_scale_assoc")
                                                    (("2"
                                                      (INST -1 "r" "cons1_var"
                                                       "g")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (|listn_0| NAME-JUDGEMENT "listn(0)" |standard_form_poly| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|poly_scale_assoc| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|poly_scale_dist1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL))
 (|poly_scale_one| 0
  (|poly_scale_one-1| |nil| 3777802915
   ("" (INDUCT "f")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "init_polyscale" 1 1)
        (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|last_plus_TCC1| 0
  (|last_plus_TCC1-1| |nil| 3777810365
   ("" (SKEEP)
    (("" (TYPEPRED "init_polyplus(f,g)")
      (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    NIL)
   NIL
   (|last_plus| SUBTYPE
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_plus_TCC2| 0
  (|last_plus_TCC2-1| |nil| 3777810734
   ("" (SKEEP)
    (("" (TYPEPRED "g") (("" (TYPEPRED "f") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|last_plus| SUBTYPE "arithmetic_poly.g"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_plus| 0
  (|last_plus-1| |nil| 3777810414
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (TYPEPRED "g")
              (("1" (EXPAND "length" -2 2)
                (("1" (ASSERT)
                  (("1" (EXPAND "length" -2 2)
                    (("1" (CASE "NOT g= (: car(g) :)")
                      (("1" (DECOMPOSE-EQUALITY 1)
                        (("1" (EXPAND "length" -2)
                          (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REPLACE -1 1)
                        (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "last" 2 2)
              (("2" (EXPAND "length" 2)
                (("2" (LIFT-IF 2)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "length" -1 1) (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (INST -1 "cdr(g)")
                        (("1" (EXPAND "init_polyplus" 2 1)
                          (("1" (ASSERT)
                            (("1" (LIFT-IF 2)
                              (("1" (TYPEPRED "g")
                                (("1" (EXPAND "length" -2 1)
                                  (("1" (ASSERT)
                                    (("1" (LIFT-IF -2)
                                      (("1" (SPLIT -2)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "length" -2)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "last" 3 1)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "length" 3 1)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (TYPEPRED
                                                       "init_polyplus(cons2_var, cdr(g))")
                                                      (("2" (TYPEPRED "g")
                                                        (("2"
                                                          (EXPAND "length" -2)
                                                          (("2"
                                                            (EXPAND "max" -4)
                                                            (("2" (ASSERT)
                                                              (("2" (REVEAL -)
                                                                (("2"
                                                                  (EXPAND
                                                                   "last" 3 3)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "g")
                          (("2" (EXPAND "length" -2)
                            (("2" (ASSERT)
                              (("2" (LIFT-IF -2)
                                (("2" (SPLIT -2)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "g")
            (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (TYPEPRED "g")
            (("5" (TYPEPRED "init_polyplus(f, g)") (("5" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|last_plus1_TCC1| 0
  (|last_plus1_TCC1-1| |nil| 3777816302
   ("" (SKEEP)
    (("" (TYPEPRED "init_polyplus(f,g)")
      (("" (TYPEPRED "f" "g") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|last_plus1| SUBTYPE
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_plus1_TCC2| 0
  (|last_plus1_TCC2-1| |nil| 3777816302 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|last_plus1| SUBTYPE "arithmetic_poly.g"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_plus1| 0
  (|last_plus1-1| |nil| 3777816302
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polyplus" 1 1)
              (("1" (TYPEPRED "g")
                (("1" (EXPAND "length" -2)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF -2)
                      (("1" (SPLIT -2)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "last" 2 1)
                              (("2" (LIFT-IF 2)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "length" -1)
                                      (("1" (EXPAND "init_polyplus" -1)
                                        (("1" (EXPAND "last" 1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "init_polyplus" 2 1)
                                        (("2" (EXPAND "last" 2 2)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF 2)
                                              (("2" (SPLIT 2)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" 2)
                                                      (("1"
                                                        (EXPAND "init_polyplus"
                                                                2 1)
                                                        (("1"
                                                          (EXPAND "length" -1)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "init_polyplus" 2 1)
              (("2" (TYPEPRED "g")
                (("2" (EXPAND "length" -2)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF -2)
                      (("2" (SPLIT -2)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (ASSERT)
                          (("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (INST -3 "cdr(g)")
                                (("2" (EXPAND "last" 3 1)
                                  (("2" (EXPAND "length" 3 1)
                                    (("2" (ASSERT)
                                      (("2"
                                        (TYPEPRED
                                         "init_polyplus(cons2_var, cdr(g))")
                                        (("2" (EXPAND "max" -2)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "last" 3 2)
                                              (("2" (ASSERT)
                                                (("2" (LIFT-IF 3)
                                                  (("2" (SPLIT 3)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1" (TYPEPRED "g")
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -2)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -3)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "g")
            (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (TYPEPRED "init_polyplus(f,g)") (("5" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|last_scale_TCC1| 0
  (|last_scale_TCC1-1| |nil| 3777809860
   ("" (SUBTYPE-TCC)
    (("" (TYPEPRED "init_polyscale(c!1,g!1)")
      (("" (EXPAND "length" -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   NIL
   (|last_scale| SUBTYPE
    "arithmetic_poly.init_polyscale(arithmetic_poly.c, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_scale| 0
  (|last_scale-1| |nil| 3777809862
   ("" (INDUCT "g")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (SKEEP)
          (("3" (CASE "cons2_var=null")
            (("1" (REPLACE -1 1)
              (("1" (EXPAND "last" 1 1)
                (("1" (EXPAND "length" 1 1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "init_polyscale" 1 1)
                      (("1" (EXPAND "init_polyscale" 1 1)
                        (("1" (EXPAND "last" 1 1)
                          (("1" (EXPAND "length" 1 1) (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "last" 2 1)
              (("2" (EXPAND "length" 2 1)
                (("2" (ASSERT)
                  (("2" (EXPAND "length" 2 1)
                    (("2" (ASSERT)
                      (("2" (LIFT-IF)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (EXPAND "init_polyscale" 2 1)
                                (("2" (INST -1 "c")
                                  (("2" (EXPAND "last" 2 2)
                                    (("2" (EXPAND "length" 2 1)
                                      (("2" (ASSERT)
                                        (("2" (LIFT-IF 2)
                                          (("2" (SPLIT 2)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (TYPEPRED
                                                   "init_polyscale(c, cons2_var)")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "length" -2 2)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (HIDE 2)
        (("4" (SKEEP)
          (("4" (TYPEPRED "init_polyscale" 1 1)
            (("4" (TYPEPRED "init_polyscale(c,g)")
              (("4" (ASSERT)
                (("4" (EXPAND "length" -2 2) (("4" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|last_mult_TCC1| 0
  (|last_mult_TCC1-1| |nil| 3777809712
   ("" (SKEEP)
    (("" (TYPEPRED "init_polymult(f,g)")
      (("" (ASSERT)
        (("" (ASSERT)
          (("" (EXPAND "length" -2)
            (("" (EXPAND "length" -3) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|last_mult| SUBTYPE
    "arithmetic_poly.init_polymult(arithmetic_poly.f, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_mult| 0
  (|last_mult-1| |nil| 3777809758
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (EXPAND "last" 1 1)
            (("1" (EXPAND "length" 1 1)
              (("1" (ASSERT)
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (EXPAND "length" 1 1)
                    (("1" (LEMMA "last_scale")
                      (("1" (INST -1 "cons1_var" "g") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "last" 2 1)
              (("2" (EXPAND "length" 2 1)
                (("2" (ASSERT)
                  (("2" (LIFT-IF 2)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (EXPAND "init_polymult" 2 1)
                            (("2" (EXPAND "length" 2 1)
                              (("2" (LEMMA "last_plus")
                                (("2" (LEMMA "last_plus1")
                                  (("2"
                                    (INST -1 "init_polyscale(cons1_var, g)"
                                     "init_polymult(cons2_var, cons(0, g))")
                                    (("1" (REPLACE -1 2)
                                      (("1" (INST -3 "cons(0,g)")
                                        (("1" (EXPAND "last" -3 2)
                                          (("1" (EXPAND "length" -3 1)
                                            (("1" (ASSERT)
                                              (("1" (LIFT-IF -3)
                                                (("1" (SPLIT -3)
                                                  (("1" (FLATTEN)
                                                    (("1" (CASE "NOT g=null")
                                                      (("1"
                                                        (EXPAND "length" -1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (REPLACE -1 2)
                                                        (("2" (TYPEPRED "g")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2"
                                        (TYPEPRED
                                         "init_polymult(cons2_var, cons[real](0, g))"
                                         "init_polyscale(cons1_var, g)")
                                        (("2" (HIDE -1 -3)
                                          (("2" (ASSERT)
                                            (("2" (HIDE -1)
                                              (("2" (HIDE -1)
                                                (("2" (REPLACE -1)
                                                  (("2"
                                                    (TYPEPRED
                                                     "init_polymult(cons2_var, cons[real](0, g))")
                                                    (("2" (HIDE -1)
                                                      (("2" (ASSERT)
                                                        (("2" (HIDE -1)
                                                          (("2" (REPLACE -1 1)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      1 1)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3"
                                      (TYPEPRED "init_polyscale(cons1_var, g)")
                                      (("3" (TYPEPRED "g")
                                        (("3" (EXPAND "length" -4)
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "init_polymult(f, g)")
            (("4" (ASSERT)
              (("4" (EXPAND "length" -2)
                (("4" (ASSERT)
                  (("4" (EXPAND "length" -3 1)
                    (("4" (ASSERT)
                      (("4" (EXPAND "length" -3) (("4" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|last_scale| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last_plus1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (> CONST-DECL "bool" |reals| NIL) NIL NIL
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|last_plus| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|standard_polymult| 0
  (|standard_polymult-1| |nil| 3777817269
   ("" (SKEEP)
    (("" (EXPAND "standard_form?" 1)
      (("" (SPLIT 1)
        (("1" (PROPAX) NIL NIL)
         ("2" (FLATTEN)
          (("2" (LEMMA "last_mult")
            (("2" (INST -1 "f" "g")
              (("1" (SPLIT 2)
                (("1" (TYPEPRED "f" "g")
                  (("1" (HIDE -1 -3)
                    (("1" (EXPAND "standard_form?" -1)
                      (("1" (EXPAND "standard_form?" -2)
                        (("1" (SPLIT -1)
                          (("1" (ASSERT)
                            (("1" (EXPAND "init_polymult")
                              (("1" (PROPAX) NIL NIL)) NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (SPLIT -2)
                              (("1" (EXPAND "init_polymult")
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN)
                                (("2" (SPLIT -1)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (SPLIT -1)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL)
               ("2" (EXPAND "init_polymult") (("2" (ASSERT) NIL NIL)) NIL)
               ("3" (EXPAND "init_polymult") (("3" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL) NIL
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|last_mult| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|reflex_init| 0
  (|reflex_init-1| |nil| 3777821202
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (GRIND)
        (("1" (EXPAND "init_polyplus" 1)
          (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "init_polyplus" 1 2)
          (("2" (ASSERT)
            (("2" (LIFT-IF)
              (("2" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "init_polyplus" 1) (("1" (ASSERT) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (EXPAND "init_polyplus" 2 1)
                      (("2" (ASSERT)
                        (("2" (DECOMPOSE-EQUALITY 2)
                          (("2" (INST -1 "cdr(g)") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|reflex_init1| 0
  (|reflex_init1-1| |nil| 3777821243
   ("" (SKEEP)
    (("" (EXPAND "polyplus")
      (("" (LEMMA "reflex_init")
        (("" (INST -1 "f" "g") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|reflex_init| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL)
   NIL))
 (|add_car_TCC1| 0
  (|add_car_TCC1-1| |nil| 3777985748
   ("" (SKEEP)
    (("" (TYPEPRED "f" "g")
      (("" (TYPEPRED "init_polyplus(f,g)")
        (("" (EXPAND "max" -2)
          (("" (EXPAND "length" -2)
            (("" (ASSERT)
              (("" (LIFT-IF -2)
                (("" (SPLIT -2)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    NIL)
   NIL
   (|add_car| SUBTYPE
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.g)"
    "(list_adt[real].cons?)")))
 (|add_car| 0
  (|add_car-1| |nil| 3777986065
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (SKEEP)
              (("1" (EXPAND "init_polyplus" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (EXPAND "init_polyplus" 2 1) (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "init_polyplus(f,g)")
            (("4" (ASSERT)
              (("4" (EXPAND "max" -2)
                (("4" (TYPEPRED "g")
                  (("4" (EXPAND "length") (("4" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|mult_car| 0
  (|mult_car-1| |nil| 3777985578
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (LEMMA "add_car")
              (("1" (EXPAND "init_polymult" 1 1)
                (("1" (EXPAND "length" 1 1)
                  (("1" (EXPAND "init_polyscale" 1 1) (("1" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "init_polymult" 2 1)
              (("2" (EXPAND "length" 2 1)
                (("2" (EXPAND "length" 2 1)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF 2)
                      (("2" (SPLIT 2)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (LEMMA "add_car")
                            (("2"
                              (INST -1 "init_polyscale(cons1_var,g)"
                               "init_polymult(cons2_var,cons(0,g))")
                              (("1" (REPLACE -1 2)
                                (("1" (EXPAND "init_polyscale" 2 1)
                                  (("1" (ASSERT)
                                    (("1" (INST -2 "cons(0,g)")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2"
                                (TYPEPRED
                                 "init_polymult(cons2_var, cons[real](0, g))")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "length" -2)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" -3)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (TYPEPRED "init_polyscale(cons1_var, g)")
                                (("3" (EXPAND "length" -2)
                                  (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "init_polymult(f,g)")
            (("4" (ASSERT)
              (("4" (EXPAND "length" -2)
                (("4" (ASSERT)
                  (("4" (EXPAND "length" -3) (("4" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|add_car| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    NIL NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|zero_p_TCC1| 0
  (|zero_p_TCC1-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL)
   ((|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|zero_p| SUBTYPE "list_adt[real].null"
    "{f: standard_form_poly.Polynomial | list_props[real].length(f) = arithmetic_poly.n}")))
 (|zero_p_TCC2| 0
  (|zero_p_TCC2-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|zero_p| SUBTYPE "(number_fields.-)(arithmetic_poly.n, 1)" "nat")))
 (|zero_p_TCC3| 0
  (|zero_p_TCC3-1| |nil| 3777822184 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|zero_p| TERMINATION
    "arithmetic_poly.zero_p((number_fields.-)(arithmetic_poly.n, 1))" "NIL")))
 (|zero_p_TCC4| 0
  (|zero_p_TCC4-2| |nil| 3777822646
   ("" (SKEEP) (("" (EXPAND "length" 2 1) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|zero_p| SUBTYPE
    "list_adt[real].cons(0, arithmetic_poly.zero_p((number_fields.-)(arithmetic_poly.n, 1)))"
    "{f: standard_form_poly.Polynomial | list_props[real].length(f) = arithmetic_poly.n}"))
  (|zero_p_TCC4-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|zero_p| SUBTYPE
    "list_adt[real].cons(0, arithmetic_poly.zero_p((number_fields.-)(arithmetic_poly.n, 1)))"
    "{f: standard_form_poly.Polynomial | list_props[real].length(f) = arithmetic_poly.n}")))
 (|zero_eval_TCC1| 0
  (|zero_eval_TCC1-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL)
   NIL
   (|zero_eval| SUBTYPE "arithmetic_poly.deg"
    "upfrom((number_fields.-)(list_props[real].length(arithmetic_poly.zero_p(arithmetic_poly.n)), 1))")))
 (|zero_eval| 0
  (|zero_eval-1| |nil| 3777822670
   ("" (INDUCT "n")
    (("1" (ASSERT)
      (("1" (EXPAND "zero_p" 1)
        (("1" (EXPAND "init_eval" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "init_eval" 1 1)
          (("2" (LIFT-IF 1)
            (("2" (SPLIT 1)
              (("1" (PROPAX) NIL NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "zero_p" 2)
                  (("2" (ASSERT) (("2" (INST -1 "x" "deg" "acc") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL))
 (|last_zero_TCC1| 0
  (|last_zero_TCC1-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|last_zero| SUBTYPE "arithmetic_poly.zero_p(arithmetic_poly.n)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_zero| 0
  (|last_zero-1| |nil| 3777822696
   ("" (INDUCT "n")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1 1)
          (("1" (EXPAND "zero_p" 1)
            (("1" (EXPAND "zero_p" 1)
              (("1" (EXPAND "last" 1)
                (("1" (EXPAND "length" 1)
                  (("1" (EXPAND "length" 1) (("1" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "zero_p" 2)
            (("2" (EXPAND "last" 2 1)
              (("2" (EXPAND "length" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (ASSERT)
      (("4" (SKEEP) (("4" (EXPAND "zero_p" 1) (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly|
     NIL))
   NIL))
 (|chop_zero_TCC1| 0
  (|chop_zero_TCC1-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|chop_zero| SUBTYPE "(number_fields.-)(arithmetic_poly.n, 1)" "nat")))
 (|chop_zero| 0
  (|chop_zero-1| |nil| 3777822723
   ("" (INDUCT "n")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1 1)
          (("1" (EXPAND "zero_p" 1)
            (("1" (EXPAND "zero_p" 1)
              (("1" (EXPAND "chop" 1)
                (("1" (EXPAND "length" 1)
                  (("1" (EXPAND "length" 1) (("1" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "zero_p" 2)
            (("2" (EXPAND "chop" 2 1)
              (("2" (EXPAND "length" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL))
 (|standard_zero| 0
  (|standard_zero-1| |nil| 3777822761
   ("" (INDUCT "n")
    (("1" (EXPAND "zero_p" 1 1)
      (("1" (EXPAND "standard_form" 1 1)
        (("1" (EXPAND "standard_form?" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (SKEEP)
        (("2" (EXPAND "zero_p" 1 1)
          (("2" (EXPAND "standard_form" 1 1)
            (("2" (LIFT-IF 1)
              (("2" (SPLIT 1)
                (("1" (EXPAND "standard_form?" 1 1)
                  (("1" (LEMMA "last_zero")
                    (("1" (INST -1 "j+1")
                      (("1" (EXPAND "zero_p" -1 1) (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (LEMMA "chop_zero")
                    (("2" (INST -1 "j+1")
                      (("2" (EXPAND "zero_p" -1 1)
                        (("2" (REPLACE -1 2) (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|chop_zero| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|last_zero| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL))
 (|zero_p_props| 0
  (|zero_p_props-1| |nil| 3777822976
   ("" (INDUCT "n")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (ASSERT)
        (("3" (SPLIT -1)
          (("1" (ASSERT)
            (("1" (EXPAND "last" 1)
              (("1" (EXPAND "zero_p" 1)
                (("1" (EXPAND "last" 1)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF)
                      (("1" (SPLIT)
                        (("1" (PROPAX) NIL NIL)
                         ("2" (TYPEPRED "j")
                          (("2" (CASE "j=0")
                            (("1" (GRIND 2) NIL NIL)
                             ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP) (("4" (EXPAND "zero_p" 1) (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly|
     NIL))
   SHOSTAK))
 (|zero_p_props1| 0
  (|zero_p_props1-1| |nil| 3777823029
   ("" (INDUCT "n")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (REPLACE -1 1)
          (("1" (EXPAND "zero_p" 1)
            (("1" (EXPAND "zero_p" 1)
              (("1" (EXPAND "chop" 1)
                (("1" (EXPAND "length" 1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "length" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "zero_p" 2 1)
            (("2" (EXPAND "chop" 2 1)
              (("2" (EXPAND "length" 2 1)
                (("2" (ASSERT)
                  (("2" (REPLACE -1 2)
                    (("2" (EXPAND "zero_p" 2 2) (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (ASSERT) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|zero_p_init_polyplus| 0
  (|zero_p_init_polyplus-1| |nil| 3777823151
   ("" (ASSERT)
    (("" (INDUCT "f")
      (("1" (SKEEP)
        (("1" (EXPAND "length" -1)
          (("1" (ASSERT)
            (("1" (TYPEPRED "i")
              (("1" (CASE "NOT i=0")
                (("1" (ASSERT) NIL NIL)
                 ("2" (REPLACE -1 1)
                  (("2" (EXPAND "zero_p" 1 1)
                    (("2" (EXPAND "init_polyplus" 1 1) (("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (SKEEP)
          (("2" (CASE "cons2_var=null")
            (("1" (REPLACE -1 1)
              (("1" (REPLACE -1 -3)
                (("1" (EXPAND "length" -3)
                  (("1" (EXPAND "length" -3)
                    (("1" (CASE "i=0")
                      (("1" (REPLACE -1 1)
                        (("1" (EXPAND "zero_p" 1 1)
                          (("1" (EXPAND "init_polyplus" 1 1)
                            (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (CASE "NOT i=1")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (REPLACE -1 1)
                            (("2" (REPLACE -1 2)
                              (("2" (EXPAND "zero_p" 2 1)
                                (("2" (EXPAND "zero_p" 2 1)
                                  (("2" (EXPAND "init_polyplus" 2 1)
                                    (("2" (EXPAND "init_polyplus" 2 1)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "zero_p" 2 1)
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (ASSERT)
                      (("1" (EXPAND "init_polyplus" 2 1)
                        (("1" (PROPAX) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "init_polyplus" 3 1)
                        (("2" (DECOMPOSE-EQUALITY 3)
                          (("2" (INST -1 "i-1")
                            (("2" (ASSERT)
                              (("2" (EXPAND "length" -1)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   SHOSTAK))
 (|zero_p_scal| 0
  (|zero_p_scal-1| |nil| 3777823363
   ("" (INDUCT "g")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "init_polyscale" 1 1)
        (("2" (EXPAND "zero_p" 1 1)
          (("2" (EXPAND "length" 1 1)
            (("2" (ASSERT)
              (("2" (DECOMPOSE-EQUALITY 1)
                (("1" (EXPAND "length" 1) (("1" (PROPAX) NIL NIL)) NIL)
                 ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|zero_p_scal1| 0
  (|zero_p_scal1-1| |nil| 3777823464
   ("" (INDUCT "i")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polyscale")
        (("1" (EXPAND "zero_p") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (EXPAND "init_polyscale")
      (("2" (SKEEP)
        (("2" (SKEEP)
          (("2" (EXPAND "zero_p" 1)
            (("2" (EXPAND "init_polyscale" 1)
              (("2" (DECOMPOSE-EQUALITY 1)
                (("1" (INST -1 "r") NIL NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|zero_p_mult_TCC1| 0
  (|zero_p_mult_TCC1-1| |nil| 3777822184 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|zero_p_mult| SUBTYPE
    "(number_fields.-)((number_fields.+)(arithmetic_poly.i, list_props[real].length(arithmetic_poly.g)), 1)"
    "nat")))
 (|zero_p_mult| 0
  (|zero_p_mult-1| |nil| 3777823531
   ("" (INDUCT "i" 1)
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (FLATTEN)
      (("2" (SKEEP)
        (("2" (EXPAND "zero_p" 1 1)
          (("2" (EXPAND "init_polymult" 1 1)
            (("2" (TYPEPRED "g") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "j=0")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "zero_p" 1 1)
              (("1" (EXPAND "zero_p" 1 1)
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (EXPAND "length" 1 1)
                    (("1" (LEMMA "zero_p_scal") (("1" (INST -1 "g") NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "zero_p" 2 1)
              (("2" (EXPAND "init_polymult" 2 1)
                (("2" (EXPAND "length" 2 1)
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "zero_p(j)")
                      (("2" (HIDE -1)
                        (("2" (EXPAND "length" -1)
                          (("2" (ASSERT)
                            (("2" (LEMMA "zero_p_scal")
                              (("2" (INST -1 "g")
                                (("2" (REPLACE -1 2)
                                  (("2" (INST -3 "cons(0,g)")
                                    (("2" (REPLACE -3 2)
                                      (("2" (LEMMA "zero_p_init_polyplus")
                                        (("2"
                                          (INST -1
                                           "zero_p(length(cons(0, g)) - 1 + j)"
                                           "length(g)")
                                          (("1" (ASSERT)
                                            (("1" (SPLIT -1)
                                              (("1" (ASSERT)
                                                (("1" (REPLACE -1 2)
                                                  (("1" (EXPAND "length" 2 1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (TYPEPRED
                                                 "zero_p(length(cons(0, g)) - 1 + j)")
                                                (("2" (HIDE -1)
                                                  (("2" (EXPAND "length" -1 3)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "length" 1 1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|zero_p_scal| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zero_p_init_polyplus| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|zero_p_multr| 0
  (|zero_p_multr-1| |nil| 3777823828
   ("" (INDUCT "g")
    (("1" (SKEEP) (("1" (TYPEPRED "g!1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "length" 1 1)
              (("1" (EXPAND "length" 1 1)
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (CASE "i=0")
                    (("1" (REPLACE -1 1)
                      (("1" (EXPAND "zero_p" 1 1)
                        (("1" (EXPAND "zero_p" 1 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (TYPEPRED "zero_p(i)")
                        (("2" (TYPEPRED "zero_p(i)")
                          (("2" (HIDE -1)
                            (("2" (EXPAND "length" -1 1)
                              (("2" (ASSERT)
                                (("2" (LEMMA "zero_p_scal1")
                                  (("2" (INST -1 "cons1_var" "i") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "length" 2 1)
              (("2" (EXPAND "init_polymult" 2 1)
                (("2" (TYPEPRED "i")
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "zero_p(i)")
                      (("2" (HIDE -1)
                        (("2" (EXPAND "length" 2 1)
                          (("2" (EXPAND "length" 2 1)
                            (("2" (ASSERT)
                              (("2" (LIFT-IF 2)
                                (("2" (ASSERT)
                                  (("2" (LEMMA "zero_p_scal1")
                                    (("2" (INST -1 "cons1_var" "i")
                                      (("2" (REPLACE -1 2)
                                        (("2" (LEMMA "zero_p_scal1")
                                          (("2" (LEMMA "zero_p_init_polyplus")
                                            (("2" (INST -6 "i+1")
                                              (("2" (EXPAND "zero_p" -6 1)
                                                (("2" (ASSERT)
                                                  (("2" (REPLACE -6 2)
                                                    (("2"
                                                      (INST -1
                                                       "zero_p(length(cons2_var) + i)"
                                                       "i")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|zero_p_scal1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zero_p_init_polyplus| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|cons_init_poly_plus| 0
  (|cons_init_poly_plus-1| |nil| 3777824891
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polyplus" 1 1)
        (("1" (EXPAND "init_polyplus" 1 1)
          (("1" (ASSERT)
            (("1" (EXPAND "init_polyplus" 1) (("1" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "g=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polyplus" 1 1)
              (("1" (EXPAND "init_polyplus" 1 1)
                (("1" (DECOMPOSE-EQUALITY 1)
                  (("1" (EXPAND "init_polyplus" 1 1) (("1" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (INST -1 "cons1_var+car(g)" "cdr(g)")
              (("2" (EXPAND "init_polyplus" 2 1)
                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|poly_mult_cons| 0
  (|poly_mult_cons-1| |nil| 3777826400
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polymult" 1 1)
              (("1" (EXPAND "length")
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (EXPAND "length" 1 1)
                    (("1" (EXPAND "length" 1 1)
                      (("1" (ASSERT)
                        (("1" (LEMMA "zero_p_scal")
                          (("1" (LEMMA "zero_p_init_polyplus")
                            (("1" (INST -2 "g")
                              (("1" (REPLACE -2 1)
                                (("1"
                                  (INST -1 "init_polymult(cons(cons1_var, null),
                                         cons(0, g))"
                                   "length(g)")
                                  (("1" (ASSERT)
                                    (("1" (SPLIT -1)
                                      (("1" (ASSERT)
                                        (("1" (REPLACE -1 1)
                                          (("1" (EXPAND "init_polymult" 1 1)
                                            (("1" (EXPAND "length" 1 1)
                                              (("1"
                                                (EXPAND "init_polyscale" 1 2)
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (DECOMPOSE-EQUALITY 2)
                                        (("1"
                                          (TYPEPRED
                                           "init_polymult(cons(cons1_var, null), cons(0, g))")
                                          (("1" (ASSERT)
                                            (("1" (HIDE -1)
                                              (("1" (EXPAND "length" -1 2)
                                                (("1" (EXPAND "length" -1 2)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" 2 1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (TYPEPRED
                                           "init_polymult(cons(cons1_var, null), cons(0, g))")
                                          (("2" (HIDE -1)
                                            (("2" (EXPAND "length" -1 2)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3"
                                          (TYPEPRED
                                           "init_polymult(cons(cons1_var, null), cons(0, g))")
                                          (("3" (EXPAND "length" -2 2)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "init_polymult" 2 1)
              (("2" (EXPAND "length" 2 1)
                (("2" (EXPAND "length" 2 1)
                  (("2" (ASSERT)
                    (("2" (ASSERT)
                      (("2" (LEMMA "cons_init_poly_plus")
                        (("2"
                          (INST -1 "0" "init_polyscale(cons1_var, g)"
                           "init_polymult(cons2_var, cons(0, g))")
                          (("2" (REPLACE -1 2)
                            (("2" (INST -2 "cons(0,g)")
                              (("2" (SPLIT -2)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -1 2)
                                    (("1" (EXPAND "init_polymult" 2 2)
                                      (("1" (EXPAND "length" 2 1)
                                        (("1" (EXPAND "length" 2 1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "length" 2 1)
                                              (("1" (ASSERT)
                                                (("1" (LEMMA "zero_p_scal")
                                                  (("1" (INST -1 "g")
                                                    (("1" (REPLACE -1 2)
                                                      (("1"
                                                        (LEMMA
                                                         "zero_p_init_polyplus")
                                                        (("1"
                                                          (INST -1
                                                           "init_polymult(cons(cons1_var, cons2_var),
                                           cons(0, g))"
                                                           "length(g)")
                                                          (("1" (ASSERT)
                                                            (("1" (SPLIT -1)
                                                              (("1"
                                                                (REPLACE -1 2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "init_polymult"
                                                                   2 2)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length" 2
                                                                     1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       2 1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "init_polyscale"
                                                                           2 2)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "init_polymult"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "length"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 2
                                                                                 1)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "zero_p_scal")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "cons(0,g)")
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "zero_p_init_polyplus")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "init_polymult(cons2_var,
                                                          cons
                                                          (0,
                                                           cons(0, g)))"
                                                                                           "length(cons(0,g))")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (TYPEPRED
                                                                                               "init_polymult(cons2_var, cons(0, cons(0, g)))")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -2
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (TYPEPRED
                                                                 "init_polymult(cons2_var, cons(0, cons(0, g)))")
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "(init_polymult(cons(cons1_var, cons2_var), cons(0, g)))")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -2 2)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2"
                                    (TYPEPRED
                                     "init_polymult(cons2_var, cons(0, g))")
                                    (("2" (ASSERT)
                                      (("2" (ASSERT)
                                        (("2"
                                          (TYPEPRED
                                           "init_polymult(cons2_var, cons(0, g))")
                                          (("2" (ASSERT)
                                            (("2" (HIDE -2)
                                              (("2" (HIDE -2)
                                                (("2" (EXPAND "length" -4)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|zero_p_scal| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) NIL NIL
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zero_p_init_polyplus| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|cons_init_poly_plus| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|chop_last_equiv| 0
  (|chop_last_equiv-1| |nil| 3777882763
   (""
    (CASE "FORALL (n:nat, f, g: {ff: Polynomial | cons?(ff)}):
               (length(f)=n AND length(g)=n) IMPLIES ((last(f) = last(g) AND chop(f) = chop(g)) IFF f = g)")
    (("1" (SKEEP)
      (("1" (INST -1 "length(f)" "f" "g")
        (("1" (ASSERT)
          (("1" (SPLIT 1)
            (("1" (FLATTEN)
              (("1" (LEMMA "chop_length")
                (("1" (INST-CP -1 "f")
                  (("1" (INST -1 "g") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (EXPAND "length" -) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (CASE "j=0")
              (("1" (REPLACE -1 -4)
                (("1" (REPLACE -1 -3)
                  (("1" (ASSERT)
                    (("1" (EXPAND "last" 1)
                      (("1" (EXPAND "chop" 1)
                        (("1" (CASE "NOT f = (: car(f):)")
                          (("1" (ASSERT)
                            (("1" (DECOMPOSE-EQUALITY 1)
                              (("1" (EXPAND "length" -3)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "length" -3)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE "NOT g = (: car(g) :)")
                            (("1" (ASSERT)
                              (("1" (DECOMPOSE-EQUALITY 1)
                                (("1" (EXPAND "length" -5)
                                  (("1" (EXPAND "length" -5)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (REPLACE -1 1)
                                (("2" (REPLACE -2 1)
                                  (("2" (ASSERT)
                                    (("2" (SPLIT 1)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SPLIT 2)
                (("1" (FLATTEN)
                  (("1" (EXPAND "last" -1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "chop" -2)
                        (("1" (ASSERT)
                          (("1" (DECOMPOSE-EQUALITY -2)
                            (("1" (INST -4 "cdr(f)" "cdr(g)")
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -5)
                                  (("1" (EXPAND "length" -6)
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE "NOT f = cons(car(f),cdr(f))")
                                        (("1" (ASSERT)
                                          (("1" (DECOMPOSE-EQUALITY 1) NIL
                                            NIL))
                                          NIL)
                                         ("2"
                                          (CASE "NOT g= cons(car(g),cdr(g))")
                                          (("1" (ASSERT)
                                            (("1" (DECOMPOSE-EQUALITY 1) NIL
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL))
   SHOSTAK))
 (|standard_null| 0
  (|standard_null-1| |nil| 3777882942
   ("" (INDUCT "n")
    (("1" (SKEEP)
      (("1" (TYPEPRED "f")
        (("1" (EXPAND "zero_p" 1)
          (("1" (HIDE -1)
            (("1" (EXPAND "standard_form" 1 1)
              (("1" (EXPAND "standard_form?" 1 1)
                (("1" (ASSERT)
                  (("1" (EXPAND "length" -1)
                    (("1" (LIFT-IF -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" -1)
                          (("1" (LIFT-IF -1)
                            (("1" (SPLIT -1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (LIFT-IF 1)
                                (("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (SPLIT -1)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (TYPEPRED "j")
          (("2" (EXPAND "zero_p" 1 1)
            (("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (EXPAND "standard_form" -1)
                  (("1" (EXPAND "standard_form?" -1)
                    (("1" (ASSERT)
                      (("1" (LIFT-IF)
                        (("1" (TYPEPRED "f")
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (SPLIT -2)
                                (("1" (EXPAND "length" -2)
                                  (("1" (ASSERT)
                                    (("1" (INST -4 "chop(f)")
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "zero_p_props1")
                                          (("1" (INST -1 "j+1")
                                            (("1" (ASSERT)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (LEMMA "chop_last_equiv")
                                                    (("1"
                                                      (INST -1 "f"
                                                       "zero_p(j+1)")
                                                      (("1" (ASSERT)
                                                        (("1" (FLATTEN)
                                                          (("1" (SPLIT -1)
                                                            (("1"
                                                              (EXPAND "zero_p"
                                                                      -1)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2"
                                                              (LEMMA
                                                               "zero_p_props")
                                                              (("2"
                                                                (INST -1 "1+j")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (LEMMA "chop_length")
                                        (("2" (INST -1 "f")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (FLATTEN)
                  (("2" (LEMMA "zero_p_props")
                    (("2" (EXPAND "standard_form" 1)
                      (("2" (EXPAND "standard_form?" 1 1)
                        (("2" (ASSERT)
                          (("2" (LIFT-IF)
                            (("2" (ASSERT)
                              (("2" (CASE "NOT f = zero_p(j+1)")
                                (("1" (EXPAND "zero_p" 1)
                                  (("1" (PROPAX) NIL NIL)) NIL)
                                 ("2" (ASSERT)
                                  (("2" (INST -2 "1+j")
                                    (("2" (ASSERT)
                                      (("2" (LEMMA "zero_p_props1")
                                        (("2" (INST -1 "1+j")
                                          (("2" (REPLACE -2 -1 RL)
                                            (("2" (INST -6 "chop(f)")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (LEMMA "chop_length")
                                                (("2" (INST -1 "f")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL) NIL NIL
    (|zero_p_props1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|zero_p_props| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|chop_last_equiv| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|standard_form_polyscale| 0
  (|standard_form_polyscale-1| |nil| 3777883470
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "r=0")
          (("1" (REPLACE -1 1)
            (("1" (LEMMA "zero_p_scal")
              (("1" (INST-CP -1 "cons(cons1_var, cons2_var)")
                (("1" (REPLACE -2 1)
                  (("1"
                    (INST -1 "standard_form
                                          (cons(cons1_var, cons2_var))")
                    (("1" (REPLACE -1 1)
                      (("1" (LEMMA "standard_null")
                        (("1"
                          (INST-CP -1 "length(cons(cons1_var, cons2_var))"
                           "zero_p(length(cons(cons1_var, cons2_var)))")
                          (("1" (FLATTEN -2)
                            (("1"
                              (INST -1 "length(standard_form
                                           (cons(cons1_var, cons2_var)))"
                               "zero_p(length(standard_form
                                           (cons(cons1_var, cons2_var))))")
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "cons2_var=null")
            (("1" (CASE "cons1_var=0")
              (("1" (REPLACE -1 2)
                (("1" (REPLACE -2 2)
                  (("1" (HIDE -1 -2 -3 1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (REPLACE -1 3)
                (("2" (HIDE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (EXPAND "init_polyscale" 3 1)
              (("2" (EXPAND "init_polyscale" 3 2)
                (("2" (LIFT-IF 3)
                  (("2" (SPLIT 3)
                    (("1" (FLATTEN)
                      (("1" (LEMMA "standard_null")
                        (("1"
                          (INST -1 "length(cons(cons1_var, cons2_var))"
                           "cons(cons1_var, cons2_var)")
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "zero_p" -1 1)
                                (("1" (EXPAND "length" -1 1)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length" -1)
                                      (("1" (ASSERT)
                                        (("1" (LIFT-IF -1)
                                          (("1" (SPLIT -1)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (DECOMPOSE-EQUALITY -1)
                                                (("2" (REPLACE -1 2)
                                                  (("2" (REPLACE -2 2)
                                                    (("2" (REPLACE -2 2)
                                                      (("2"
                                                        (LEMMA "zero_p_scal1")
                                                        (("2"
                                                          (INST -1 "r"
                                                           "length(cons2_var)")
                                                          (("2"
                                                            (EXPAND
                                                             "standard_form" 2
                                                             2)
                                                            (("2"
                                                              (LEMMA
                                                               "standard_form_cdr2")
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (LEMMA "standard_form_cdr2")
                        (("2" (INST -1 "cons(cons1_var,cons2_var)")
                          (("1" (REPLACE -1 2)
                            (("1" (ASSERT)
                              (("1"
                                (CASE "null?(standard_form(cons(r * cons1_var,
                                          init_polyscale(r, cons2_var))))")
                                (("1" (LEMMA "standard_null_decomp")
                                  (("1"
                                    (INST -1 "cons(r * cons1_var,
                                       init_polyscale(r, cons2_var))")
                                    (("1" (ASSERT)
                                      (("1" (FLATTEN)
                                        (("1" (INST -5 "r")
                                          (("1" (ASSERT)
                                            (("1"
                                              (CASE
                                                  "NOT  standard_form(init_polyscale(r, standard_form(cons2_var)))=null")
                                              (("1"
                                                (LEMMA "standard_null_decomp")
                                                (("1"
                                                  (INST -1 "cons(r * cons1_var,
                                          init_polyscale(r, standard_form(cons2_var)))")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA "standard_null_decomp")
                                                (("2"
                                                  (INST -1 "cons(r * cons1_var,
                                          init_polyscale(r, standard_form(cons2_var)))")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (CASE
                                      "null?( standard_form(cons(r * cons1_var,
                                             init_polyscale(r, standard_form(cons2_var)))))")
                                  (("1" (LEMMA "standard_null_decomp")
                                    (("1"
                                      (INST -1 "cons(r * cons1_var,
                                          init_polyscale(r, standard_form(cons2_var)))")
                                      (("1" (ASSERT)
                                        (("1" (FLATTEN)
                                          (("1" (INST -5 "r")
                                            (("1"
                                              (LEMMA "standard_null_decomp")
                                              (("1"
                                                (INST -1 "cons(r * cons1_var,
                                         init_polyscale(r, cons2_var))")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "standard_form_cdr2")
                                    (("2"
                                      (INST-CP -1 "(cons(r * cons1_var,
                                         init_polyscale(r, cons2_var)))")
                                      (("1"
                                        (INST -1 "cons(r * cons1_var,
                                            init_polyscale(r, standard_form(cons2_var)))")
                                        (("1" (INST -4 "r")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|zero_p_scal| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|standard_null| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    NIL NIL (|standard_null_decomp| FORMULA-DECL NIL |standard_form_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|standard_form_cdr2| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zero_p_scal1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|chop_plus| 0
  (|chop_plus-1| |nil| 3777802938
   (""
    (CASE
        "FORALL (n:nat, f: {ff: Polynomial | NOT standard_form?(ff)}, g: Polynomial):
                      length(f)=n IMPLIES polyplus(f, g) = polyplus(chop(f), g)")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f" "g") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (CASE "NOT f=null")
            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (REPLACE -1 1) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (CASE "f=null")
              (("1" (TYPEPRED "f")
                (("1" (EXPAND "standard_form?" 1) (("1" (ASSERT) NIL NIL))
                  NIL))
                NIL)
               ("2" (CASE "j=0")
                (("1" (LEMMA "chop_length")
                  (("1" (INST -1 "f")
                    (("1" (CASE "not chop(f)=null")
                      (("1" (REPLACE -4 -1)
                        (("1" (REPLACE -2 -1)
                          (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REPLACE -1 2)
                        (("2" (TYPEPRED "f")
                          (("2" (HIDE -1)
                            (("2" (CASE "not f = (:car(f):)")
                              (("1" (DECOMPOSE-EQUALITY 1)
                                (("1" (EXPAND "length" -5)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length" -5)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REPLACE -1 1)
                                (("2" (REPLACE -1 3)
                                  (("2" (EXPAND "standard_form?" 1)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT 1)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "last" -1)
                                            (("1" (REPLACE -1 2)
                                              (("1" (EXPAND "polyplus" 2)
                                                (("1"
                                                  (EXPAND "init_polyplus" 2)
                                                  (("1" (CASE "null?(g)")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (EXPAND "standard_form"
                                                                2)
                                                        (("1" (EXPAND "chop" 2)
                                                          (("1"
                                                            (EXPAND
                                                             "standard_form?" 2
                                                             1)
                                                            (("1"
                                                              (EXPAND
                                                               "standard_form"
                                                               2 1)
                                                              (("1"
                                                                (EXPAND
                                                                 "standard_form?"
                                                                 2 1)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "init_polyplus"
                                                                3 1)
                                                        (("2"
                                                          (CASE
                                                              "Not g =  cons(car(g), cdr(g))")
                                                          (("1"
                                                            (DECOMPOSE-EQUALITY
                                                             1)
                                                            NIL NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "polyplus" 3)
                    (("2" (CASE "g=null")
                      (("1" (REPLACE -1 3)
                        (("1" (TYPEPRED "f")
                          (("1" (HIDE -1)
                            (("1" (EXPAND "init_polyplus" 4)
                              (("1" (ASSERT)
                                (("1" (LEMMA "chop_length")
                                  (("1" (INST -1 "f")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -4 -1)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "standard_form" 4 1)
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "chop(f)=null")
                        (("1" (LEMMA "chop_length")
                          (("1" (INST -1 "f")
                            (("1" (REPLACE -4 -1)
                              (("1" (EXPAND "length" -1)
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "init_polyplus" 5)
                            (("2"
                              (CASE
                                  "standard_form(init_polyplus(cdr(f), cdr(g)))=null IFF standard_form(init_polyplus(cdr(chop(f)), cdr(g)))=null")
                              (("1"
                                (CASE
                                    "standard_form(init_polyplus(cdr(f),cdr(g)))=null")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "standard_form_car")
                                    (("1"
                                      (INST -1 "cons(car(f) + car(g),
                                                             init_polyplus(cdr(f), cdr(g)))")
                                      (("1" (ASSERT)
                                        (("1" (REPLACE -1 5)
                                          (("1" (LEMMA "standard_form_car")
                                            (("1"
                                              (INST -1
                                               "cons(car(chop(f))+ car(g),
                                                                  init_polyplus(cdr(chop(f)), cdr(g)))")
                                              (("1" (ASSERT)
                                                (("1" (REPLACE -1 5)
                                                  (("1" (LEMMA "first_chop")
                                                    (("1" (INST -1 "f")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (TYPEPRED
                                                 "init_polyplus(cdr(chop(f)), cdr(g))")
                                                (("2" (ASSERT)
                                                  (("2" (LEMMA "chop_length")
                                                    (("2" (INST -1 "f")
                                                      (("2" (HIDE -2)
                                                        (("2" (REPLACE -7 -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      -1)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (CASE "j=1")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             -2)
                                                                    (("1"
                                                                      (CASE
                                                                          "NOT cdr(chop(f))=null")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "length"
                                                                           -2)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (REPLACE
                                                                         -1 -4)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           -4
                                                                           2)
                                                                          (("2"
                                                                            (CASE
                                                                                "length(g)=1")
                                                                            (("1"
                                                                              (CASE
                                                                                  "not cdr(g)=null")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (REPLACE
                                                                                 -1
                                                                                 -6)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -6
                                                                                   2)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "max"
                                                                                     -6)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       6)
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -3
                                                                                         6)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "init_polyplus"
                                                                                           6)
                                                                                          (("2"
                                                                                            (LEMMA
                                                                                             "first_chop")
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "f")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 6)
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "max"
                                                                                 -4)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "max" -2
                                                                     1)
                                                                    (("2"
                                                                      (LIFT-IF
                                                                       -2)
                                                                      (("2"
                                                                        (SPLIT
                                                                         -2)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2"
                                          (TYPEPRED
                                           "init_polyplus(cdr(f),cdr(g))")
                                          (("2" (HIDE -1)
                                            (("2" (CASE "cdr(f)=null")
                                              (("1" (CASE "cdr(g)=null")
                                                (("1" (REPLACE -1 -3)
                                                  (("1" (REPLACE -2 -3)
                                                    (("1" (EXPAND "max" -3)
                                                      (("1" (REPLACE -1 6)
                                                        (("1" (REPLACE -2 6)
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -7)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "length" -6)
                                                  (("2" (EXPAND "length" -6)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "max" -1)
                                                (("2" (LIFT-IF -1)
                                                  (("2" (SPLIT -1)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (EXPAND "length" -2 1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2"
                                                        (EXPAND "length" -1 1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (LEMMA "standard_form_cdr3")
                                      (("2"
                                        (INST -1 "cons(car(f)+ car(g),
                                                             init_polyplus(cdr(f), cdr(g)))")
                                        (("2" (LEMMA "standard_form_cdr3")
                                          (("2" (REPLACE -2 7)
                                            (("2"
                                              (INST -1
                                               "cons(car(chop(f))+ car(g),
                                                              init_polyplus(cdr(chop(f)), cdr(g)))")
                                              (("2" (REPLACE -1 7)
                                                (("2" (DECOMPOSE-EQUALITY 7)
                                                  (("1" (LEMMA "first_chop")
                                                    (("1" (INST -1 "f")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (INST -4 "cdr(f)" "cdr(g)")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (EXPAND "length" -5)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "polyplus"
                                                                    -4)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (LEMMA
                                                                 "chop_cdr")
                                                                (("1"
                                                                  (INST -1 "f")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "length" -5)
                                                      (("2" (ASSERT)
                                                        (("2" (TYPEPRED "f")
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "standard_form_cdr1")
                                                              (("2"
                                                                (INST -1 "f")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INST -1 "cdr(f)" "cdr(g)")
                                (("1" (EXPAND "length" -2)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "polyplus" -1)
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "chop_cdr")
                                          (("1" (INST -1 "f")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 1)
                                                (("1" (SPLIT 1)
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "length" -2)
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "f")
                                      (("2" (HIDE -1)
                                        (("2" (LEMMA "standard_form_cdr1")
                                          (("2" (INST -1 "f")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|standard_form_cdr3| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|standard_form_cdr1| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|first_chop| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|standard_form_car| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL) NIL
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL))
   NIL))
 (|standard_eliminatel| 0
  (|standard_eliminatel-1| |nil| 3777821302
   (""
    (CASE "FORALL (n:nat, f, g: Polynomial):
               length(f)=n IMPLIES polyplus(f, g) = standard_form(init_polyplus(standard_form(f), g))")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f" "g") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (CASE "NOT f=null")
            (("1" (EXPAND "length" -) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (REPLACE -1 1)
              (("2" (HIDE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (CASE "standard_form?(f)")
              (("1" (EXPAND "standard_form" 1 2)
                (("1" (ASSERT)
                  (("1" (EXPAND "polyplus" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "standard_form" 2 2)
                  (("2" (INST -1 "chop(f)" "g")
                    (("2" (LEMMA "chop_length")
                      (("2" (INST -1 "f")
                        (("2" (ASSERT)
                          (("2" (LEMMA "chop_plus")
                            (("2" (INST -1 "f" "g") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|chop_plus| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL))
   SHOSTAK))
 (|standard_eliminater| 0
  (|standard_eliminater-1| |nil| 3777821679
   ("" (LEMMA "standard_eliminatel")
    (("" (LEMMA "reflex_init1")
      (("" (SKEEP)
        (("" (INST-CP -1 "f" "g")
          (("" (INST-CP -3 "g" "f")
            (("" (ASSERT)
              (("" (INST -1 "standard_form(g)" "f")
                (("" (ASSERT)
                  (("" (REPLACE -2 -4 RL)
                    (("" (EXPAND "polyplus" -1)
                      (("" (REPLACE -1 -4) (("" (PROPAX) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|reflex_init1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL) NIL
    (|standard_eliminatel| FORMULA-DECL NIL |arithmetic_poly| NIL))
   NIL))
 (|standard_eliminate1| 0
  (|standard_eliminate1-2| |nil| 3777821703
   ("" (SKEEP)
    (("" (LEMMA "standard_eliminatel")
      (("" (LEMMA "standard_eliminater")
        (("" (INST -1 "f" "g")
          (("" (INST -2 "f" "standard_form(g)")
            (("" (ASSERT)
              (("" (EXPAND "polyplus" -2 1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_eliminatel| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|standard_eliminater| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL)
   NIL)
  (|standard_eliminate1-1| |nil| 3777821349 ("" (POSTPONE) NIL NIL) NIL
   SHOSTAK))
 (|standard_eliminate_multl| 0
  (|standard_eliminate_multl-2| |nil| 3777826094
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "g=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "polymult" 1 1)
              (("1" (EXPAND "init_polymult" 1 1)
                (("1" (EXPAND "init_polymult" 1 1) (("1" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "cons2_var=null")
            (("1" (REPLACE -1 2)
              (("1" (EXPAND "polymult" 2 1)
                (("1" (EXPAND "init_polymult" 2 1)
                  (("1" (ASSERT)
                    (("1" (CASE "cons1_var = 0")
                      (("1" (REPLACE -1 2)
                        (("1" (EXPAND "standard_form" 2 3)
                          (("1" (EXPAND "standard_form?" 2)
                            (("1" (EXPAND "last" 2)
                              (("1" (EXPAND "length" 2)
                                (("1" (EXPAND "chop" 2)
                                  (("1" (EXPAND "length" 2)
                                    (("1" (EXPAND "standard_form" 2 3)
                                      (("1" (EXPAND "standard_form?" 2 1)
                                        (("1" (EXPAND "init_polymult" 2 1)
                                          (("1" (EXPAND "standard_form" 2 2)
                                            (("1" (EXPAND "standard_form?")
                                              (("1" (LEMMA "zero_p_scal")
                                                (("1" (INST -1 "g")
                                                  (("1" (REPLACE -1 2)
                                                    (("1"
                                                      (LEMMA "standard_null")
                                                      (("1"
                                                        (INST -1 "length(g)"
                                                         "zero_p(length(g))")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "standard_form" 3 3)
                        (("2" (EXPAND "standard_form?" 3 1)
                          (("2" (EXPAND "last" 3 1)
                            (("2" (EXPAND "length" 3 1)
                              (("2" (ASSERT)
                                (("2" (EXPAND "init_polymult" 3)
                                  (("2" (EXPAND "length" 3)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "polymult" 3)
                (("2" (EXPAND "init_polymult" 3 1)
                  (("2" (EXPAND "length" 3)
                    (("2" (ASSERT)
                      (("2" (EXPAND "length" 3 1)
                        (("2" (ASSERT)
                          (("2" (ASSERT)
                            (("2" (LEMMA "standard_eliminater")
                              (("2"
                                (INST -1 "init_polyscale(cons1_var,g)"
                                 "init_polymult(cons2_var,cons(0,g))")
                                (("2" (EXPAND "polyplus" -1 1)
                                  (("2" (REPLACE -1 3)
                                    (("2" (INST -2 "cons(0,g)")
                                      (("2" (EXPAND "polymult" -2 1)
                                        (("2" (REPLACE -2 3)
                                          (("2"
                                            (CASE
                                                "standard_form(cons(cons1_var,cons2_var))=null")
                                            (("1" (REPLACE -1 3)
                                              (("1"
                                                (LEMMA "standard_null_decomp")
                                                (("1"
                                                  (INST -1
                                                   "cons(cons1_var,cons2_var)")
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (CASE
                                                            "NOT standard_form(cons2_var) = null")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (REPLACE -1 3)
                                                          (("2"
                                                            (EXPAND
                                                             "init_polymult" 3
                                                             1)
                                                            (("2"
                                                              (EXPAND
                                                               "standard_form"
                                                               3 2)
                                                              (("2"
                                                                (EXPAND
                                                                 "init_polyscale"
                                                                 3 1)
                                                                (("2"
                                                                  (EXPAND
                                                                   "init_polyplus"
                                                                   3 1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "init_polymult"
                                                                     3 1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "standard_form"
                                                                       3 2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "standard_form"
                                                                         -2)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "standard_form?"
                                                                           -2)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "last"
                                                                             -2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               -2)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (LIFT-IF
                                                                                   -2)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (SPLIT
                                                                                       -2)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             3)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "zero_p_scal")
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "standard_null")
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "standard_null")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "length(cons(0, zero_p(length(cdr(g)))))"
                                                                                                     "cons(0, zero_p(length(cdr(g))))")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "zero_p"
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (CASE
                                                                                                              "NOT 0 * car(g)=0")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (REPLACE
                                                                                                             -1
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -4
                                                                                                               "cdr(g)")
                                                                                                              (("2"
                                                                                                                (REPLACE
                                                                                                                 -4
                                                                                                                 3
                                                                                                                 LR)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  (("2"
                                                                                                                    (LIFT-IF
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (SPLIT
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (FLATTEN)
                                                                                                                        (("1"
                                                                                                                          (REPLACE
                                                                                                                           -1
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "zero_p"
                                                                                                                             4)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "standard_form"
                                                                                                                               4)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "standard_form?")
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "last")
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "length")
                                                                                                                                    (("1"
                                                                                                                                      (EXPAND
                                                                                                                                       "length")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "chop")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "length")
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "length")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "standard_form")
                                                                                                                                              (("1"
                                                                                                                                                (PROPAX)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (FLATTEN)
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "zero_p"
                                                                                                                             2
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (EXPAND
                                                                                                                               "length"
                                                                                                                               2
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "length"
                                                                                                                                   2
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (TYPEPRED
                                                                                                                                     "zero_p(length(cdr(g)))")
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "zero_p"
                                                                                                                                         2
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (REPLACE
                                                                                                                                           -2
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (PROPAX)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (CASE
                                                  "standard_form(cons2_var)=null")
                                              (("1" (LEMMA "standard_form_car")
                                                (("1"
                                                  (INST -1
                                                   "cons(cons1_var,cons2_var)")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 4)
                                                      (("1" (REPLACE -1 1)
                                                        (("1"
                                                          (EXPAND
                                                           "standard_form" 1 1)
                                                          (("1"
                                                            (EXPAND
                                                             "standard_form?" 1
                                                             1)
                                                            (("1"
                                                              (EXPAND "last" 1
                                                                      1)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" 1 1)
                                                                (("1"
                                                                  (LIFT-IF 1)
                                                                  (("1"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "chop"
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "standard_form")
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "standard_form"
                                                                         5 5)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "standard_form?"
                                                                             5)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "last"
                                                                               5)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 5)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -2
                                                                                     5)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "init_polymult"
                                                                                       5
                                                                                       1)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "standard_form"
                                                                                         5
                                                                                         2)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "init_polymult"
                                                                                           5
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             5
                                                                                             1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "init_polyplus"
                                                                                               5
                                                                                               1)
                                                                                              (("2"
                                                                                                (LIFT-IF
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (SPLIT
                                                                                                   5)
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       2
                                                                                                       3
                                                                                                       4
                                                                                                       5)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "standard_form")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "standard_form?")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2"
                                                  (LEMMA "standard_form_cdr3")
                                                  (("2"
                                                    (INST -1 "cons
                                                             (cons1_var, cons2_var)")
                                                    (("2" (REPLACE -1 5)
                                                      (("2"
                                                        (EXPAND "init_polymult"
                                                                5 2)
                                                        (("2"
                                                          (EXPAND "length" 5)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      5 1)
                                                              (("2" (ASSERT)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "standard_eliminater")
                                                                    (("2"
                                                                      (INST -1
                                                                       "init_polyscale(cons1_var, g)"
                                                                       "init_polymult(standard_form(cons2_var),
                                                             cons(0, g))")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "polyplus"
                                                                         -1)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|standard_eliminater| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_form_car| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|standard_form_cdr3| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|standard_null_decomp| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|standard_null| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|zero_p_scal| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL)
  (|standard_eliminate_multl-1| |nil| 3777821930
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "g=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "polymult" 1 1)
              (("1" (EXPAND "init_polymult" 1 1)
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (EXPAND "standard_form")
                    (("1" (EXPAND "standard_form?") (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "cons2_var=null")
            (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|standard_eliminate_multr| 0
  (|standard_eliminate_multr-1| |nil| 3777884429
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "polymult" 1 1)
          (("2" (CASE "g=null")
            (("1" (REPLACE -1 1)
              (("1" (EXPAND "init_polymult" 1 1)
                (("1" (EXPAND "standard_form" 1 3)
                  (("1" (EXPAND "standard_form?" 1 1)
                    (("1" (EXPAND "init_polymult" 1 1) (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "standard_form(g)=null")
              (("1" (LEMMA "standard_null")
                (("1" (INST -1 "length(g)" "g")
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (REPLACE -3 2)
                        (("1" (REPLACE -1 2)
                          (("1" (LEMMA "zero_p_multr")
                            (("1"
                              (INST -1 "length(g)" "cons(cons1_var,cons2_var)")
                              (("1" (REPLACE -1 2)
                                (("1" (EXPAND "init_polymult" 2 1)
                                  (("1" (LEMMA "standard_null")
                                    (("1"
                                      (INST -1
                                       "length(cons(cons1_var, cons2_var)) + length(g)
                                                  - 1"
                                       "zero_p(length(cons(cons1_var, cons2_var)) + length(g)
                                                  - 1)")
                                      (("1" (EXPAND "standard_form" 2 2)
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (EXPAND "length" 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "length" 1)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (CASE "cons2_var=null")
                (("1" (REPLACE -1 3)
                  (("1" (EXPAND "init_polymult" 3)
                    (("1" (ASSERT)
                      (("1" (LEMMA "standard_form_polyscale")
                        (("1" (INST -1 "cons1_var" "g") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "init_polymult" 4)
                    (("2" (ASSERT)
                      (("2" (EXPAND "length" 4)
                        (("2" (ASSERT)
                          (("2" (CASE "length(cons2_var)=0")
                            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2"
                                (CASE
                                    "NOT (standard_form(init_polymult(cons2_var,
                                                                                  cons(0, g))) = null IFF standard_form(init_polymult(cons2_var,
                                                                                   cons
                                                                                   (0,
                                                                                    standard_form(g)))) = null)")
                                (("1" (ASSERT)
                                  (("1" (SPLIT 1)
                                    (("1" (FLATTEN)
                                      (("1" (INST -2 "cons(0, g)")
                                        (("1" (LEMMA "standard_form_cdr3")
                                          (("1" (INST -1 "cons(0, g)")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 -3)
                                                (("1" (EXPAND "polymult" -3 1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (INST -2 "cons(0,g)")
                                        (("2" (LEMMA "standard_form_cdr3")
                                          (("2" (INST -1 "cons(0,g)")
                                            (("2" (ASSERT)
                                              (("2" (REPLACE -1 -3)
                                                (("2" (EXPAND "polymult" -3 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "standard_eliminater")
                                  (("2"
                                    (INST-CP -1 "init_polyscale(cons1_var, g)"
                                     "init_polymult(cons2_var,
                                                              cons(0, g))")
                                    (("2" (EXPAND "polyplus" -2 1)
                                      (("2" (REPLACE -2 5)
                                        (("2"
                                          (INST -1 "init_polyscale(cons1_var,
                                                                standard_form(g))"
                                           "init_polymult(cons2_var,
                                                               cons
                                                               (0,
                                                                standard_form(g)))")
                                          (("2" (EXPAND "polyplus" -1 1)
                                            (("2" (REPLACE -1 5)
                                              (("2" (INST -4 "cons(0,g)")
                                                (("2"
                                                  (LEMMA "standard_form_cdr3")
                                                  (("2" (INST -1 "cons(0,g)")
                                                    (("2" (ASSERT)
                                                      (("2" (REPLACE -1 -5)
                                                        (("2"
                                                          (EXPAND "polymult" -5
                                                                  1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REPLACE -5 5)
                                                              (("2" (HIDE -)
                                                                (("2"
                                                                  (LEMMA
                                                                   "standard_eliminatel")
                                                                  (("2"
                                                                    (INST-CP -1
                                                                     "init_polyscale(cons1_var,
                                                                standard_form(g))"
                                                                     "standard_form(init_polymult
                                                               (cons2_var,
                                                                cons
                                                                (0,
                                                                 standard_form(g))))")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "polyplus"
                                                                       -2)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -2 5)
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "init_polyscale(cons1_var, g)"
                                                                           "standard_form(init_polymult
                                                              (cons2_var,
                                                               cons
                                                               (0,
                                                                standard_form(g))))")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "polyplus"
                                                                             -1)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -1
                                                                               5)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "standard_form_polyscale")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "cons1_var"
                                                                                     "g")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL) NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|zero_p_multr| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|standard_null| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|standard_eliminater| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_eliminatel| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|standard_form_cdr3| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|standard_form_polyscale| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|standard_eliminate_mult1| 0
  (|standard_eliminate_mult1-1| |nil| 3777884676
   ("" (SKEEP)
    (("" (LEMMA "standard_eliminate_multl")
      (("" (LEMMA "standard_eliminate_multr")
        (("" (INST -1 "f" "g")
          (("" (INST -2 "f" "standard_form(g)")
            (("" (ASSERT)
              (("" (EXPAND "polymult" -2 1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_eliminate_multl| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|standard_eliminate_multr| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|standard_polymult2| 0
  (|standard_polymult2-1| |nil| 3777884771
   ("" (SKEEP)
    (("" (LEMMA "standard_eliminate_mult1")
      (("" (INST -1 "f" "g")
        (("" (EXPAND "polymult" -1)
          (("" (ASSERT)
            (("" (LEMMA "standard_polymult")
              (("" (INST -1 "standard_form(f)" "standard_form(g)")
                (("" (ASSERT)
                  (("" (EXPAND "standard_form" -2 2) (("" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_eliminate_mult1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_polymult| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|Poly_zero_TCC1| 0
  (|Poly_zero_TCC1-1| |nil| 3778846719 ("" (SUBTYPE-TCC) NIL NIL)
   ((|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL) NIL) NIL
   (|Poly_zero| SUBTYPE "list_adt[real].null"
    "{tt: standard_form_poly.Polynomial | standard_form_poly.standard_form?(tt)}")))
 (|assocpr_init| 0
  (|assocpr_init-1| |nil| 3779187538
   ("" (INDUCT "t1")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polyplus" 1 2)
        (("1" (EXPAND "init_polyplus" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "t2=null")
          (("1" (REPLACE -1 1)
            (("1" (CASE "t3=null")
              (("1" (REPLACE -1 1)
                (("1" (EXPAND "init_polyplus" 1 2)
                  (("1" (EXPAND "init_polyplus" 1 1)
                    (("1" (EXPAND "init_polyplus" 1 2)
                      (("1" (EXPAND "init_polyplus" 1 1)
                        (("1" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "init_polyplus" 2 2)
                (("2" (EXPAND "init_polyplus" 2 3) (("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "t3=null")
            (("1" (REPLACE -1 2)
              (("1" (EXPAND "init_polyplus" 2 1)
                (("1" (EXPAND "init_polyplus" 2 4)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF)
                      (("1" (SPLIT 2)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "init_polyplus" 3 2)
                (("2" (EXPAND "init_polyplus" 3 4)
                  (("2" (EXPAND "init_polyplus" 3 1)
                    (("2" (EXPAND "init_polyplus" 3 3)
                      (("2" (DECOMPOSE-EQUALITY 3)
                        (("2" (INST -1 "cdr(t2)" "cdr(t3)") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|assocpr1_init| 0
  (|assocpr1_init-1| |nil| 3779187595
   ("" (SKEEP)
    (("" (LEMMA "assocpr_init")
      (("" (LEMMA "reflex_init")
        (("" (INST-CP -2 "t1" "t2" "t3")
          (("" (REPLACE -3 1)
            (("" (INST -1 "t2" "t3")
              (("" (REPLACE -1 1)
                (("" (REPLACE -1 1 RL)
                  (("" (REPLACE -1 1)
                    (("" (INST -2 "t1" "t3" "t2") (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|assocpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|reflex_init| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL)
   NIL))
 (|assocpr2_init| 0
  (|assocpr2_init-1| |nil| 3779187619
   ("" (LEMMA "assocpr_init")
    (("" (SKEEP)
      (("" (INST -1 "t1" "t2" "t3")
        (("" (LEMMA "reflex_init")
          (("" (INST -1 "t1" "t2")
            (("" (REPLACE -1 -2)
              (("" (REPLACE -2 1 RL)
                (("" (LEMMA "assocpr_init")
                  (("" (INST -1 "t2" "t1" "t3") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|reflex_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|assocpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL))
   NIL))
 (|assocpr3_init| 0
  (|assocpr3_init-1| |nil| 3779187644
   ("" (SKEEP)
    (("" (LEMMA "assocpr_init")
      (("" (INST-CP -1 "t1" "t2" "init_polyplus(t3,t4)")
        (("" (REPLACE -2 1)
          (("" (HIDE -2)
            (("" (LEMMA "reflex_init")
              (("" (INST-CP -1 "t3" "t4")
                (("" (REPLACE -2 1)
                  (("" (INST-CP -3 "t2" "t4" "t3")
                    (("" (REPLACE -4 1 RL)
                      (("" (INST-CP -1 "init_polyplus(t2,t4)" "t3")
                        (("" (REPLACE -2 1 LR)
                          (("" (INST -4 "t1" "t3" "init_polyplus(t2,t4)")
                            (("" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|assocpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|reflex_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL))
 (|assocpr| 0
  (|assocpr-1| |nil| 3779187668
   ("" (EXPAND "polyplus" 1)
    (("" (SKEEP)
      (("" (LEMMA "standard_eliminatel")
        (("" (LEMMA "standard_eliminater")
          (("" (INST -2 "init_polyplus(t1,t2)" "t3")
            (("" (REPLACE -2 1 RL)
              (("" (INST -1 "t1" "init_polyplus(t2,t3)")
                (("" (REPLACE -1 1 RL)
                  (("" (EXPAND "polyplus" 1)
                    (("" (LEMMA "assocpr_init")
                      (("" (INST -1 "t1" "t2" "t3") (("" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|standard_eliminater| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|assocpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|standard_eliminatel| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL))
   NIL))
 (|poly_plus_mult1| 0
  (|poly_plus_mult1-1| |nil| 3779187741
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polymult" 1 1)
        (("1" (EXPAND "init_polyplus" 1 1)
          (("1" (EXPAND "init_polyplus" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (INDUCT "g" 1)
        (("1" (SKEEP)
          (("1" (EXPAND "init_polymult" 1 2)
            (("1" (EXPAND "init_polyplus" 1 2)
              (("1" (EXPAND "init_polyplus" 1 1)
                (("1" (LIFT-IF 1)
                  (("1" (SPLIT)
                    (("1" (ASSERT)
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (CASE "h=null")
              (("1" (REPLACE -1 1)
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (EXPAND "init_polymult" 1 1)
                    (("1" (EXPAND "init_polyplus" 1 1)
                      (("1" (EXPAND "init_polymult" 1 1)
                        (("1" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (CASE "cons2_var_1=null")
                (("1" (REPLACE -1 2)
                  (("1" (EXPAND "init_polymult" 2 2)
                    (("1" (ASSERT)
                      (("1" (EXPAND "init_polyplus" 2 2)
                        (("1" (EXPAND "init_polyplus" 2 2)
                          (("1" (ASSERT)
                            (("1" (CASE "cons2_var=null")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 2)
                                  (("1" (EXPAND "init_polymult" 2 1)
                                    (("1" (EXPAND "length" 2 1)
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "poly_scale_dist2")
                                          (("1"
                                            (INST -1 "cons1_var" "cons1_var_1"
                                             "h")
                                            (("1" (ASSERT)
                                              (("1"
                                                (EXPAND "init_polymult" 2 1)
                                                (("1" (EXPAND "length" 2 1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "init_polymult" 3 2)
                                  (("2" (EXPAND "length" 3 1)
                                    (("2" (EXPAND "length" 3 1)
                                      (("2" (ASSERT)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "init_polymult" 3 1)
                                            (("2" (EXPAND "length" 3 1)
                                              (("2" (EXPAND "length" 3 1)
                                                (("2" (ASSERT)
                                                  (("2" (LEMMA "assocpr1_init")
                                                    (("2"
                                                      (INST -1
                                                       "init_polyscale(cons1_var, h)"
                                                       "init_polymult(cons2_var,
                                                            cons(0, h))"
                                                       "init_polyscale(cons1_var_1, h)")
                                                      (("2" (REPLACE -1 3)
                                                        (("2"
                                                          (LEMMA
                                                           "poly_scale_dist2")
                                                          (("2"
                                                            (INST -1
                                                             "cons1_var"
                                                             "cons1_var_1" "h")
                                                            (("2"
                                                              (REPLACE -1 3)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (CASE "cons2_var=null")
                    (("1" (REPLACE -1 3)
                      (("1" (EXPAND "init_polymult" 3 1)
                        (("1" (EXPAND "length" 3 1)
                          (("1" (EXPAND "init_polyplus" 3 2)
                            (("1" (EXPAND "init_polyplus" 3 2)
                              (("1" (EXPAND "init_polymult" 3 2)
                                (("1" (EXPAND "length" 3 1)
                                  (("1" (EXPAND "length" 3 1)
                                    (("1" (ASSERT)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "init_polymult" 3 1)
                                          (("1" (EXPAND "length" 3 1)
                                            (("1" (EXPAND "length" 3 1)
                                              (("1" (ASSERT)
                                                (("1" (LEMMA "assocpr_init")
                                                  (("1"
                                                    (INST -1
                                                     "init_polyscale(cons1_var, h)"
                                                     "init_polyscale(cons1_var_1, h)"
                                                     "init_polymult(cons2_var_1,
                                                            cons(0, h))")
                                                    (("1" (REPLACE -1 3 RL)
                                                      (("1"
                                                        (LEMMA
                                                         "poly_scale_dist2")
                                                        (("1"
                                                          (INST -1 "cons1_var"
                                                           "cons1_var_1" "h")
                                                          (("1" (REPLACE -1 3)
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "init_polymult" 4 2)
                        (("2" (EXPAND "length" 4 1)
                          (("2" (EXPAND "length" 4 1)
                            (("2" (ASSERT)
                              (("2" (ASSERT)
                                (("2" (EXPAND "init_polymult" 4 1)
                                  (("2" (EXPAND "length" 4 1)
                                    (("2" (EXPAND "length" 4 1)
                                      (("2" (ASSERT)
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "assocpr3_init")
                                            (("2"
                                              (INST -1
                                               "init_polyscale(cons1_var,h)"
                                               "init_polymult(cons2_var,cons(0,h))"
                                               "init_polyscale(cons1_var_1,h)"
                                               "init_polymult(cons2_var_1,cons(0,h))")
                                              (("2" (REPLACE -1 4)
                                                (("2"
                                                  (INST-CP -3 "cons2_var_1"
                                                   "cons(0,h)")
                                                  (("2" (REPLACE -4 4)
                                                    (("2"
                                                      (EXPAND "init_polymult" 4
                                                              2)
                                                      (("2"
                                                        (TYPEPRED
                                                         "init_polyplus(cons(cons1_var, cons2_var),
                                          cons(cons1_var_1, cons2_var_1))")
                                                        (("2" (HIDE -1)
                                                          (("2"
                                                            (HIDE -2 -3 -4 -5)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      -1 1)
                                                              (("2"
                                                                (LIFT-IF -1)
                                                                (("2"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           5 1)
                                                                          (("2"
                                                                            (LIFT-IF
                                                                             -1)
                                                                            (("2"
                                                                              (SPLIT
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "init_polyplus"
                                                                                     6
                                                                                     5)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "init_polyplus"
                                                                                       6
                                                                                       5)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "poly_scale_dist2")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "cons1_var"
                                                                                           "cons1_var_1"
                                                                                           "h")
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             6
                                                                                             RL)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}"
     |real_defs| NIL)
    (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}"
     |real_defs| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|assocpr3_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|assocpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|poly_scale_dist2| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|assocpr1_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL))
 (|poly_plus_mult2| 0
  (|poly_plus_mult2-1| |nil| 3779187839
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polymult" 1 3)
        (("1" (EXPAND "init_polymult" 1 2)
          (("1" (EXPAND "init_polymult" 1 1)
            (("1" (EXPAND "init_polyplus" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "g=null")
          (("1" (CASE "h=null")
            (("1" (REPLACE -1 1)
              (("1" (REPLACE -2 1)
                (("1" (EXPAND "init_polymult" 1 1)
                  (("1" (EXPAND "init_polymult" 1 1)
                    (("1" (EXPAND "init_polyplus" 1 2)
                      (("1" (EXPAND "init_polymult" 1 1)
                        (("1" (EXPAND "init_polyplus" 1 1)
                          (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "init_polymult" 2 1)
              (("2" (ASSERT)
                (("2" (REPLACE -1 2)
                  (("2" (EXPAND "init_polyplus" 2 2)
                    (("2" (EXPAND "init_polyplus" 2 1) (("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "h=null")
            (("1" (REPLACE -1 2)
              (("1" (EXPAND "init_polymult" 2 2)
                (("1" (EXPAND "init_polyplus" 2 2)
                  (("1" (ASSERT)
                    (("1" (CASE "cons2_var=null")
                      (("1" (REPLACE -1 2)
                        (("1" (EXPAND "init_polymult" 2 1)
                          (("1" (EXPAND "length" 2 1)
                            (("1" (EXPAND "init_polymult" 2 1)
                              (("1" (EXPAND "length" 2 1)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "init_polyplus" 2 1)
                                    (("1" (LIFT-IF 2)
                                      (("1" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "init_polymult" 3 1)
                          (("2" (EXPAND "length" 3 1)
                            (("2" (EXPAND "length" 3 1)
                              (("2" (CASE "length(cons2_var)=0")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "length" -1 1)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "length" 1)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "init_polymult" 4 2)
                                        (("2" (EXPAND "length" 4)
                                          (("2" (EXPAND "init_polyplus" 4 1)
                                            (("2"
                                              (TYPEPRED
                                               "init_polyplus(init_polyscale(cons1_var, g),
                                         init_polymult(cons2_var, cons(0, g)))")
                                              (("2" (HIDE -1)
                                                (("2"
                                                  (TYPEPRED
                                                   "init_polyscale(cons1_var, g)")
                                                  (("2" (HIDE -1)
                                                    (("2"
                                                      (TYPEPRED
                                                       "init_polymult(cons2_var, cons(0, g))")
                                                      (("2" (HIDE -1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "length"
                                                                    -3)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LIFT-IF -3)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (SPLIT -3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (HIDE
                                                                           -2)
                                                                          (("2"
                                                                            (LIFT-IF
                                                                             5)
                                                                            (("2"
                                                                              (SPLIT
                                                                               5)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "init_polymult" 3 1)
              (("2" (CASE "cons2_var=null")
                (("1" (ASSERT)
                  (("1" (EXPAND "length" 3 1)
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 3)
                        (("1" (EXPAND "init_polymult" 3 1)
                          (("1" (EXPAND "length" 3)
                            (("1" (ASSERT)
                              (("1" (EXPAND "init_polymult" 3 1)
                                (("1" (TYPEPRED "init_polyplus(g,h)")
                                  (("1" (ASSERT)
                                    (("1" (LIFT-IF 3)
                                      (("1" (SPLIT 3)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "init_polyplus" -1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (LEMMA "poly_scale_dist1")
                                              (("2"
                                                (INST -1 "cons1_var" "g" "h")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "length" 4 1)
                    (("2" (ASSERT)
                      (("2" (CASE "length(cons2_var)=0")
                        (("1" (EXPAND "length" -1 1) (("1" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "init_polymult" 5 3)
                            (("2" (TYPEPRED "init_polyplus(g,h)")
                              (("2" (HIDE -1)
                                (("2" (EXPAND "length" -1)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF -1)
                                      (("2" (SPLIT -1)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "length" 6 1)
                                              (("2" (ASSERT)
                                                (("2"
                                                  (EXPAND "init_polymult" 6 2)
                                                  (("2" (EXPAND "length" 6 1)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (LEMMA "assocpr3_init")
                                                        (("2"
                                                          (INST -1
                                                           "init_polyscale(cons1_var, g)"
                                                           "init_polymult(cons2_var,
                                                              cons(0, g))"
                                                           "init_polyscale(cons1_var, h)"
                                                           "init_polymult(cons2_var,
                                                              cons(0, h))")
                                                          (("2" (REPLACE -1 6)
                                                            (("2" (HIDE -1)
                                                              (("2"
                                                                (INST -2
                                                                 "cons(0,g)"
                                                                 "cons(0,h)")
                                                                (("2"
                                                                  (REPLACE -2
                                                                           6)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "init_polyplus"
                                                                     6 3)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "poly_scale_dist1")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "cons1_var"
                                                                         "g"
                                                                         "h")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|assocpr3_init| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}"
     |real_defs| NIL)
    (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}"
     |real_defs| NIL)
    (|poly_scale_dist1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL))
 (|abelianpr_init| 0
  (|abelianpr_init-1| |nil| 3779188137
   ("" (INDUCT "t1")
    (("1" (SKEEP)
      (("1" (GRIND)
        (("1" (EXPAND "init_polyplus" 1 1)
          (("1" (LIFT-IF 1)
            (("1" (SPLIT 1)
              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "t2=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polyplus" 1 1)
              (("1" (EXPAND "init_polyplus" 1 1) (("1" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (EXPAND "init_polyplus" 2 1)
            (("2" (ASSERT)
              (("2" (EXPAND "init_polyplus" 2 2)
                (("2" (DECOMPOSE-EQUALITY 2)
                  (("2" (INST -1 "cdr(t2)") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|abelianpr| 0
  (|abelianpr-1| |nil| 3779188177
   ("" (LEMMA "abelianpr_init")
    (("" (EXPAND "polyplus" 1)
      (("" (SKEEP)
        (("" (INST -1 "t1" "t2")
          (("" (REPLACE -1 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL) NIL
    (|abelianpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL))
   NIL))
 (|assocmultpr_init| 0
  (|assocmultpr_init-1| |nil| 3778846863
   ("" (INDUCT "t1")
    (("1" (EXPAND "init_polymult" 1) (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "t2=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polymult" 1 2)
              (("1" (EXPAND "init_polymult" 1 1)
                (("1" (EXPAND "init_polymult" 1 2)
                  (("1" (EXPAND "init_polymult" 1 1) (("1" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "t3=null")
            (("1" (REPLACE -1 2)
              (("1" (EXPAND "init_polymult" 2 2)
                (("1" (EXPAND "init_polymult" 2 2)
                  (("1" (EXPAND "init_polymult" 2 1) (("1" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "init_polymult(t2,t3)=null")
              (("1" (TYPEPRED "init_polymult(t2,t3)")
                (("1" (ASSERT)
                  (("1" (ASSERT)
                    (("1" (HIDE -1)
                      (("1" (HIDE -1)
                        (("1" (REPLACE -2)
                          (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (CASE "cons2_var=null")
                (("1" (REPLACE -1 4)
                  (("1" (EXPAND "init_polymult" 4 1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "init_polymult" 4 3)
                        (("1" (EXPAND "length" 4)
                          (("1" (LEMMA "poly_scale_mult1")
                            (("1" (INST -1 "cons1_var" "t2" "t3") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "init_polymult" 5 1)
                    (("2" (EXPAND "length" 5)
                      (("2" (EXPAND "length" 5)
                        (("2" (ASSERT)
                          (("2" (ASSERT)
                            (("2" (LEMMA "poly_mult_cons")
                              (("2" (INST -1 "t2" "t3")
                                (("2" (ASSERT)
                                  (("2" (REPLACE -1 5)
                                    (("2" (INST-CP -2 "cons(0,t2)" "t3")
                                      (("2" (REPLACE -3 5)
                                        (("2" (EXPAND "init_polymult" 5 5)
                                          (("2" (EXPAND "length" 5 1)
                                            (("2" (EXPAND "length" 5 1)
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA "poly_scale_mult1")
                                                  (("2"
                                                    (INST -1 "cons1_var" "t2"
                                                     "t3")
                                                    (("2" (REPLACE -1 5)
                                                      (("2"
                                                        (LEMMA
                                                         "poly_plus_mult1")
                                                        (("2"
                                                          (INST -1
                                                           "init_polyscale(cons1_var,t2)"
                                                           "init_polymult(cons2_var,cons(0,t2))"
                                                           "t3")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|poly_mult_cons| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|poly_plus_mult1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|poly_scale_mult1| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|assocmultpr| 0
  (|assocmultpr-1| |nil| 3779188458
   ("" (LEMMA "assocmultpr_init")
    (("" (SKEEP)
      (("" (EXPAND "polymult" 1)
        (("" (LEMMA "standard_eliminate_multr")
          (("" (LEMMA "standard_eliminate_multl")
            (("" (INST -1 "init_polymult(t1,t2)" "t3")
              (("" (REPLACE -1 1 RL)
                (("" (INST -2 "t1" "init_polymult(t2,t3)")
                  (("" (REPLACE -2 1 RL)
                    (("" (EXPAND "polymult" 1)
                      (("" (INST -3 "t1" "t2" "t3") (("" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|standard_eliminate_multr| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|standard_eliminate_multl| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|assocmultpr_init| FORMULA-DECL NIL |arithmetic_poly| NIL))
   NIL))
 (|distl| 0
  (|distl-1| |nil| 3779188757
   ("" (SKEEP)
    (("" (EXPAND "polyplus" 1)
      (("" (EXPAND "polymult" 1)
        (("" (LEMMA "standard_eliminate1")
          (("" (INST -1 "init_polymult(t1,t2)" "init_polymult(t1,t3)")
            (("" (EXPAND "polyplus" -1)
              (("" (REPLACE -1 1 RL)
                (("" (LEMMA "standard_eliminate_multr")
                  (("" (INST -1 "t1" "init_polyplus(t2,t3)")
                    (("" (EXPAND "polymult" -1)
                      (("" (REPLACE -1 1 RL)
                        (("" (LEMMA "poly_plus_mult2")
                          (("" (INST -1 "t1" "t2" "t3") (("" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_eliminate1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|standard_eliminate_multr| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|poly_plus_mult2| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    NIL)
   NIL))
 (|distr| 0
  (|distr-1| |nil| 3779188780
   ("" (SKEEP)
    (("" (EXPAND "polymult" 1)
      (("" (EXPAND "polyplus" 1)
        (("" (LEMMA "standard_eliminate1")
          (("" (INST -1 "init_polymult(t1,t3)" "init_polymult(t2,t3)")
            (("" (EXPAND "polyplus" -1 1)
              (("" (REPLACE -1 1 RL)
                (("" (LEMMA "standard_eliminate_multl")
                  (("" (INST -1 "init_polyplus(t1,t2)" "t3")
                    (("" (EXPAND "polymult" -1 1)
                      (("" (REPLACE -1 1 RL)
                        (("" (LEMMA "poly_plus_mult1")
                          (("" (INST -1 "t1" "t2" "t3") (("" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|polymult| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL)
    (|standard_eliminate1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|standard_eliminate_multl| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|poly_plus_mult1| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|polyplus| CONST-DECL "(standard_form?)" |arithmetic_poly| NIL) NIL)
   NIL))
 (|eval_add| 0
  (|eval_add-1| |nil| 3777990171
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (GRIND)
        (("1" (EXPAND "init_eval" 1 2) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "init_polyplus" 1 1)
          (("2" (CASE "g=null")
            (("1" (ASSERT)
              (("1" (REPLACE -1 1)
                (("1" (DECOMPOSE-EQUALITY 1)
                  (("1" (EXPAND "+" 1)
                    (("1" (EXPAND "eval" 1 1)
                      (("1" (EXPAND "init_eval" 1) (("1" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "eval" 2 1)
                (("2" (EXPAND "init_eval" 2 1)
                  (("2" (DECOMPOSE-EQUALITY 2)
                    (("1" (EXPAND "+" 1)
                      (("1" (EXPAND "length" 1 1)
                        (("1" (LEMMA "expt_x0_aux")
                          (("1" (INST -1 "x!1")
                            (("1" (EXPAND "^")
                              (("1" (REPLACE -1 1)
                                (("1" (ASSERT)
                                  (("1" (CASE "NOT 1*cons1_var=cons1_var")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (REPLACE -1 1)
                                      (("2" (LEMMA "init_eval_acc")
                                        (("2"
                                          (INST -1
                                           "(init_polyplus(cons2_var, cdr(g)))"
                                           "length(init_polyplus(cons2_var, cdr(g)))"
                                           "car(g) + cons1_var")
                                          (("1" (REPLACE -1 1)
                                            (("1" (EXPAND "+")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "eval" -4 1)
                                                  (("1"
                                                    (LEMMA "eval_poly_times_x")
                                                    (("1" (INST -5 "cdr(g)")
                                                      (("1"
                                                        (INST -1
                                                         "(init_polyplus(cons2_var, cdr(g)))"
                                                         "length(init_polyplus(cons2_var, cdr(g)))"
                                                         "x!1" "0")
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY
                                                           -5)
                                                          (("1" (INST -1 "x!1")
                                                            (("1"
                                                              (REPLACE -1 -2)
                                                              (("1"
                                                                (HIDE -1 -3)
                                                                (("1"
                                                                  (CASE
                                                                      "NOT 0 * x!1=0")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (REPLACE -1
                                                                             -2)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -2 1 RL)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "eval"
                                                                         1 3)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "init_eval"
                                                                           1 1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "^")
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -4
                                                                                 1)
                                                                                (("2"
                                                                                  (CASE
                                                                                      "car(g) + eval(cdr(g))(x!1) * x!1 = eval(g)(x!1)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "eval"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "eval_poly_times_x")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "cons2_var"
                                                                                             "length(cons2_var)"
                                                                                             "x!1"
                                                                                             "0")
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "NOT 0 * x!1=0")
                                                                                                (("1"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "init_eval_acc")
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "cons2_var"
                                                                                                           "length(cons2_var)"
                                                                                                           "cons1_var")
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (CASE
                                                                                                                "NOT cons2_var=null")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "length"
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "init_eval"
                                                                                                                   2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "init_eval"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "eval_poly_times_x")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "eval"
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "init_eval"
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "cdr(g)"
                                                                                               "length(g)-1"
                                                                                               "x!1"
                                                                                               "0")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "^")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -5
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "init_eval_acc")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "cdr(g)"
                                                                                                             "length(g)-1"
                                                                                                             "car(g)*1")
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (CASE
                                                                                                                  "NOT cdr(g)=null")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (REPLACE
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "init_eval"
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (TYPEPRED
                                             "(init_polyplus(cons2_var, cdr[real](g)))")
                                            (("2" (ASSERT)
                                              (("2" (CASE "cons2_var=null")
                                                (("1" (REPLACE -1 2)
                                                  (("1" (HIDE -)
                                                    (("1" (EXPAND "eval" 2 1)
                                                      (("1" (GRIND)
                                                        (("1"
                                                          (LEMMA
                                                           "init_eval_acc")
                                                          (("1"
                                                            (INST -1 "cdr(g)"
                                                             "length(cdr(g))"
                                                             "car(g)")
                                                            (("1"
                                                              (REPLACE -1 2)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "init_eval_acc")
                                                                  (("1"
                                                                    (INST -1
                                                                     "cdr(g)"
                                                                     "length(cdr(g))"
                                                                     "car(g)+cons1_var")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (CASE "cdr(g)=null")
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "max" -3)
                                                      (("1"
                                                        (EXPAND "length" -3)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (EXPAND "max" -2)
                                                      (("2" (HIDE -1 -3 -4 -5)
                                                        (("2" (HIDE 4 5)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt_x0_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|eval_poly_times_x| FORMULA-DECL NIL |eval_poly| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|init_eval_acc| FORMULA-DECL NIL |eval_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) NIL NIL NIL
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) NIL
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|init_eval_scal_TCC1| 0
  (|init_eval_scal_TCC1-1| |nil| 3777807827 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|init_eval_scal| SUBTYPE "arithmetic_poly.deg"
    "upfrom((number_fields.-)(list_props[real].length(arithmetic_poly.init_polyscale(arithmetic_poly.r, arithmetic_poly.f)), 1))")))
 (|init_eval_scal| 0
  (|init_eval_scal-1| |nil| 3777807921
   ("" (INDUCT "f")
    (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "init_polyscale" 1 1)
          (("2" (EXPAND "init_eval" 1 1)
            (("2" (EXPAND "init_eval" 1 2)
              (("2"
                (INST -1 "x" "r" "deg" "cons1_var *
                      x ^ (1 - length(cons(cons1_var, cons2_var)) + deg)
                      + acc")
                (("2" (REPLACE -1 1 RL)
                  (("2"
                    (CASE "NOT length(cons(r * cons1_var,
                                         init_polyscale(r, cons2_var))) = length(cons(cons1_var, cons2_var))")
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" 1)
                        (("1" (TYPEPRED "init_polyscale(r,cons2_var)")
                          (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACE -1 1)
                      (("2"
                        (CASE
                            "NOT (x ^ (1 - length(cons(cons1_var, cons2_var)) + deg)) *
                            cons1_var
                            * r
                            + r * acc =  r *
                             (cons1_var *
                               x ^ (1 - length(cons(cons1_var, cons2_var)) + deg)
                               + acc)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (TYPEPRED "deg")
          (("3" (TYPEPRED "init_polyscale(r,f)") (("3" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|eval_scale| 0
  (|eval_scale-1| |nil| 3777992903
   ("" (SKEEP)
    (("" (EXPAND "eval" 1)
      (("" (LEMMA "init_eval_scal")
        (("" (INST -1 "x" "r" "f" "length(f)-1" "0")
          (("" (CASE "length(init_polyscale(r,f))= length(f)")
            (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (TYPEPRED "init_polyscale" 1)
              (("2" (TYPEPRED "init_polyscale(r,f)") (("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|init_eval_scal| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL)
   NIL))
 (|eval_sub| 0
  (|eval_sub-1| |nil| 3778493978
   ("" (SKEEP)
    (("" (LEMMA "eval_add")
      (("" (LEMMA "eval_scale")
        (("" (EXPAND "init_polysub")
          (("" (INST -2 "f" "init_polyscale(-1,g)")
            (("" (REPLACE -2 1)
              (("" (DECOMPOSE-EQUALITY 1)
                (("" (INST -1 "x!1" "-1" "g")
                  (("" (ASSERT)
                    (("" (EXPAND "+" 1)
                      (("" (ASSERT)
                        (("" (REPLACE -1 1)
                          (("" (EXPAND "-" 1) (("" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval_add| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|init_polysub| CONST-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL) NIL
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|eval_scale| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL)
   SHOSTAK))
 (|sub_zerop| 0
  (|sub_zerop-1| |nil| 3778494354
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (TYPEPRED "g")
        (("1" (EXPAND "length" -2)
          (("1" (ASSERT)
            (("1" (LIFT-IF -2)
              (("1" (SPLIT -2)
                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (SPLIT 1)
          (("1" (FLATTEN)
            (("1" (EXPAND "zero_p" -1)
              (("1" (EXPAND "length" -1)
                (("1" (ASSERT)
                  (("1" (LIFT-IF -1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "init_polysub" -1 1)
                        (("1" (EXPAND "init_polyscale" -1)
                          (("1" (CASE "g=null")
                            (("1" (TYPEPRED "g")
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -2)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (EXPAND "init_polyplus" -1)
                                (("2" (DECOMPOSE-EQUALITY -1)
                                  (("2" (ASSERT)
                                    (("2" (DECOMPOSE-EQUALITY 2)
                                      (("2" (INST -3 "cdr(g)")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "init_polysub" 3)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (TYPEPRED "g")
                                            (("2" (EXPAND "length" -2)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (FLATTEN)
              (("2" (INST -2 "cdr(g)")
                (("1" (ASSERT)
                  (("1" (CASE "g=null")
                    (("1" (TYPEPRED "g")
                      (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (CASE "cdr(g)=cons2_var")
                      (("1" (ASSERT)
                        (("1" (EXPAND "init_polysub" 2 1)
                          (("1" (EXPAND "init_polyscale" 2)
                            (("1" (EXPAND "init_polyplus" 2)
                              (("1" (EXPAND "zero_p" 2 1)
                                (("1" (EXPAND "length" 2)
                                  (("1" (ASSERT)
                                    (("1" (DECOMPOSE-EQUALITY 2)
                                      (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)
                                       ("2" (EXPAND "init_polysub" -3)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (DECOMPOSE-EQUALITY -1) (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "g")
                  (("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("3" (TYPEPRED "g")
                  (("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) NIL NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|init_polysub| CONST-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|eval_prod| 0
  (|eval_prod-1| |nil| 3777912043
   ("" (INDUCT "f")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polymult" 1 1)
        (("1" (EXPAND "eval" 1)
          (("1" (EXPAND "init_eval" 1)
            (("1" (ASSERT)
              (("1" (LIFT-IF 1)
                (("1" (SPLIT 1)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "g=null")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "init_polymult" 1 1)
              (("1" (EXPAND "eval" 1 1)
                (("1" (EXPAND "init_eval" 1 1)
                  (("1" (EXPAND "eval" 1 2)
                    (("1" (EXPAND "init_eval" 1 1) (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "cons2_var=null")
            (("1" (REPLACE -1 2)
              (("1" (EXPAND "init_polymult" 2 1)
                (("1" (ASSERT)
                  (("1" (EXPAND "eval" 2 2)
                    (("1" (ASSERT)
                      (("1" (EXPAND "init_eval" 2 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "init_eval" 2 1)
                            (("1" (ASSERT)
                              (("1" (LEMMA "expt_x0_aux")
                                (("1" (INST -1 "x")
                                  (("1" (EXPAND "^")
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "eval_scale")
                                        (("1" (INST -1 "x" "cons1_var" "g")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "init_polymult" 3 1)
              (("2" (ASSERT)
                (("2" (EXPAND "length" 3 1)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF 3)
                      (("2" (SPLIT 3)
                        (("1" (FLATTEN)
                          (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (LEMMA "eval_add")
                              (("2"
                                (INST -1 "init_polyscale(cons1_var,g)"
                                 "init_polymult(cons2_var,cons(0,g))")
                                (("2" (REPLACE -1 2)
                                  (("2" (LEMMA "eval_scale")
                                    (("2" (EXPAND "+")
                                      (("2" (INST -1 "x" "cons1_var" "g")
                                        (("2" (REPLACE -1 2)
                                          (("2" (INST -3 "cons(0,g)" "x")
                                            (("2" (REPLACE -3 2)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "eval" 2 4)
                                                  (("2"
                                                    (EXPAND "init_eval" 2 1)
                                                    (("2" (EXPAND "length" 2 1)
                                                      (("2"
                                                        (LEMMA "init_eval_acc")
                                                        (("2"
                                                          (INST -1 "cons2_var"
                                                           "length(cons2_var)"
                                                           "cons1_var*x^(0)")
                                                          (("2" (REPLACE -1 2)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "expt_x0_aux")
                                                                (("2"
                                                                  (INST -1 "x")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "^")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1 2)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "eval"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "eval_poly_times_x")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "cons2_var"
                                                                                 "length(cons2_var)"
                                                                                 "x"
                                                                                 "0")
                                                                                (("2"
                                                                                  (CASE
                                                                                      "NOT 0*x=0")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -2
                                                                                       2
                                                                                       RL)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "eval_cons")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "g"
                                                                                             "x")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (CASE
                                                                                                    "NOT eval(g)(x) * (init_eval(cons2_var, length(cons2_var) - 1, 0)(x) * x) = eval(g)(x)* x * (init_eval(cons2_var, length(cons2_var) - 1, 0)(x))")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (CASE
                                                                                                          "eval(g)(x)=0")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (DIV-BY
                                                                                                         2
                                                                                                         "eval(g)(x)")
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|eval_add| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|eval_poly_times_x| FORMULA-DECL NIL |eval_poly| NIL)
    (|eval_cons| FORMULA-DECL NIL |eval_poly| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|init_eval_acc| FORMULA-DECL NIL |eval_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|eval_scale| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt_x0_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|eval_zero| 0
  (|eval_zero-2| |nil| 3779186512
   (""
    (CASE "FORALL (n:nat, f: Polynomial):
                      length(f)=n IMPLIES (f = zero_p(length(f)) IFF (eval(f) = LAMBDA (x: real): 0))")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (CASE "NOT f=null")
            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "zero_p")
              (("2" (EXPAND "length")
                (("2" (ASSERT)
                  (("2" (EXPAND "eval")
                    (("2" (EXPAND "init_eval") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (CASE "cdr(f) = zero_p(length(cdr(f)))")
                  (("1" (INST -3 "cdr(f)")
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" -4)
                        (("1" (ASSERT)
                          (("1" (EXPAND "eval" 1 1)
                            (("1" (EXPAND "eval" -3 1)
                              (("1" (EXPAND "init_eval" 1 1)
                                (("1" (DECOMPOSE-EQUALITY 1)
                                  (("1" (EXPAND "length" 1 1)
                                    (("1" (LEMMA "init_eval_acc")
                                      (("1"
                                        (INST -1 "cdr(f)" "length(cdr(f))"
                                         "car(f)*x!1^0")
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (INST -1 "x!1")
                                            (("1" (REPLACE -1 1)
                                              (("1" (CASE "car(f) = 0")
                                                (("1" (REPLACE -1 1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "eval_poly_times_x")
                                                      (("1"
                                                        (INST -1 "cdr(f)"
                                                         "length(cdr(f))" "x!1"
                                                         "0")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "zero_p" -3)
                                                  (("2" (CASE "f=null")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (DECOMPOSE-EQUALITY -3)
                                                      (("2"
                                                        (CASE
                                                            "NOT f=cons(car(f),cdr(f))")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (DECOMPOSE-EQUALITY
                                                             1)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (REPLACE -1 -4)
                                                            (("2"
                                                              (REPLACE -1 -5)
                                                              (("2"
                                                                (DECOMPOSE-EQUALITY
                                                                 -5)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -5)
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -5)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (CASE "NOT cdr(f)=null")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (REPLACE -1 2)
                                            (("2" (EXPAND "init_eval" 2 1)
                                              (("2" (CASE "car(f)=0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (EXPAND "zero_p" -3)
                                                  (("2" (EXPAND "length" -3)
                                                    (("2"
                                                      (CASE
                                                          "NOT f=cons(car(f),cdr(f))")
                                                      (("1"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        NIL NIL)
                                                       ("2" (REPLACE -1 -4)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           -4)
                                                          (("2"
                                                            (CASE "NOT j=0")
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -6)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2"
                                                              (REPLACE -1 -5)
                                                              (("2"
                                                                (EXPAND
                                                                 "zero_p" -5)
                                                                (("2"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -5)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "zero_p" -1 1)
                    (("2" (ASSERT)
                      (("2" (CASE "f=cons(car(f),cdr(f))")
                        (("1" (REPLACE -1 -2)
                          (("1" (EXPAND "length" -2)
                            (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL))
                          NIL)
                         ("2" (DECOMPOSE-EQUALITY 1) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "length" -3) (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "zero_p" 1 1)
                  (("2" (EXPAND "length" -3)
                    (("2" (ASSERT)
                      (("2" (LIFT-IF 1)
                        (("2" (SPLIT 1)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" -1)
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (CASE "NOT f = cons(car(f),cdr(f))")
                                (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (REPLACE -1 2)
                                    (("2" (DECOMPOSE-EQUALITY 2)
                                      (("1" (DECOMPOSE-EQUALITY -2)
                                        (("1" (INST-CP -1 "0")
                                          (("1" (LEMMA "eval_car")
                                            (("1" (INST -1 "f")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "zero_p" 1 1)
                                        (("2" (CASE "car(f)=0")
                                          (("1" (REPLACE -1 -2)
                                            (("1" (REPLACE -1)
                                              (("1" (EXPAND "length" 1)
                                                (("1" (ASSERT)
                                                  (("1" (LIFT-IF 1)
                                                    (("1" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND "length" -1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2"
                                                          (LEMMA "eval_cons")
                                                          (("2"
                                                            (INST -5 "cdr(f)")
                                                            (("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (HIDE -5)
                                                                  (("2"
                                                                    (SPLIT -5)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "zero_p"
                                                                       -1)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (APPLY-EXTENSIONALITY
                                                                       1)
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "cdr(f)"
                                                                         "x!1")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REVEAL
                                                                             +)
                                                                            (("2"
                                                                              (REVEAL
                                                                               -)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -2)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -2)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -2)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       -2)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -2)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "x!1=0")
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "FORALL(x:{xx:real| xx /= 0}): eval(cdr(f))(x)=0")
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "eval(cdr(f))(x!1)>0")
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "pos_ball")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "cdr(f)"
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (SKEEP)
                                                                                                      (("1"
                                                                                                        (SKEEP
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "Eps/2")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -3
                                                                                                               "Eps/2+x!1")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "abs"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (CASE
                                                                                                    "eval(cdr(f))(x!1)<0")
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "neg_ball")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "cdr(f)"
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (SKEEP
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "Eps/2")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -3
                                                                                                             "Eps/2+x!1")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (EXPAND
                                                                                                             "abs"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (SKEEP
                                                                                               1)
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -2
                                                                                                 "cdr(f)"
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (TYPEPRED
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (EXPAND "length" 2 1)
                                              (("2" (LIFT-IF 2)
                                                (("2" (SPLIT 2)
                                                  (("1" (FLATTEN)
                                                    (("1" (EXPAND "length" -1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (INST -3 "cdr(f)")
                                                      (("2" (ASSERT)
                                                        (("2" (FLATTEN)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      2 1)
                                                              (("2"
                                                                (EXPAND
                                                                 "zero_p" -4)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "eval_cons")
                                                                    (("2"
                                                                      (LEMMA
                                                                       "eval_car")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "f")
                                                                        (("2"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -4)
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "0")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|init_eval_acc| FORMULA-DECL NIL |eval_poly| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|eval_poly_times_x| FORMULA-DECL NIL |eval_poly| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|eval_car| FORMULA-DECL NIL |eval_poly| NIL)
    (|eval_cons| FORMULA-DECL NIL |eval_poly| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pos_ball| FORMULA-DECL NIL |eval_poly| NIL)
    (|neg_ball| FORMULA-DECL NIL |eval_poly| NIL) NIL
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|zero_p| DEF-DECL "{f: Polynomial | length(f) = n}" |arithmetic_poly| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL))
   NIL)
  (|eval_zero-1| |nil| 3778428381
   (""
    (CASE "FORALL (n:nat, f: Polynomial):
        length(f)=n IMPLIES (f = zero_p(length(f)) IFF (eval(f) = LAMBDA (x: real): 0))")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (CASE "NOT f=null")
            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "zero_p")
              (("2" (EXPAND "length")
                (("2" (ASSERT)
                  (("2" (EXPAND "eval")
                    (("2" (EXPAND "init_eval") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (CASE "cdr(f) = zero_p(length(cdr(f)))")
                  (("1" (INST -3 "cdr(f)")
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" -4)
                        (("1" (ASSERT)
                          (("1" (EXPAND "eval" 1 1)
                            (("1" (EXPAND "eval" -3 1)
                              (("1" (EXPAND "init_eval" 1 1)
                                (("1" (DECOMPOSE-EQUALITY 1)
                                  (("1" (EXPAND "length" 1 1)
                                    (("1" (LEMMA "init_eval_acc")
                                      (("1"
                                        (INST -1 "cdr(f)" "length(cdr(f))"
                                         "car(f)*x!1^0")
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (INST -1 "x!1")
                                            (("1" (REPLACE -1 1)
                                              (("1" (CASE "car(f) = 0")
                                                (("1" (REPLACE -1 1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "eval_poly_times_x")
                                                      (("1"
                                                        (INST -1 "cdr(f)"
                                                         "length(cdr(f))" "x!1"
                                                         "0")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "zero_p" -3)
                                                  (("2" (CASE "f=null")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (DECOMPOSE-EQUALITY -3)
                                                      (("2"
                                                        (CASE
                                                            "NOT f=cons(car(f),cdr(f))")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (DECOMPOSE-EQUALITY
                                                             1)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2" (REPLACE -1 -4)
                                                            (("2"
                                                              (REPLACE -1 -5)
                                                              (("2"
                                                                (DECOMPOSE-EQUALITY
                                                                 -5)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -5)
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -5)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (CASE "NOT cdr(f)=null")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (REPLACE -1 2)
                                            (("2" (EXPAND "init_eval" 2 1)
                                              (("2" (CASE "car(f)=0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (EXPAND "zero_p" -3)
                                                  (("2" (EXPAND "length" -3)
                                                    (("2"
                                                      (CASE
                                                          "NOT f=cons(car(f),cdr(f))")
                                                      (("1"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        NIL NIL)
                                                       ("2" (REPLACE -1 -4)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           -4)
                                                          (("2"
                                                            (CASE "NOT j=0")
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -6)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2"
                                                              (REPLACE -1 -5)
                                                              (("2"
                                                                (EXPAND
                                                                 "zero_p" -5)
                                                                (("2"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -5)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "zero_p" -1 1)
                    (("2" (ASSERT)
                      (("2" (CASE "f=cons(car(f),cdr(f))")
                        (("1" (REPLACE -1 -2)
                          (("1" (EXPAND "length" -2)
                            (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL))
                          NIL)
                         ("2" (DECOMPOSE-EQUALITY 1) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "length" -3) (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "zero_p" 1 1)
                  (("2" (EXPAND "length" -3)
                    (("2" (ASSERT)
                      (("2" (LIFT-IF 1)
                        (("2" (SPLIT 1)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" -1)
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (CASE "NOT f = cons(car(f),cdr(f))")
                                (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (REPLACE -1 2)
                                    (("2" (DECOMPOSE-EQUALITY 2)
                                      (("1" (DECOMPOSE-EQUALITY -2)
                                        (("1" (INST-CP -1 "0")
                                          (("1" (LEMMA "eval_car")
                                            (("1" (INST -1 "f")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "zero_p" 1 1)
                                        (("2" (CASE "car(f)=0")
                                          (("1" (REPLACE -1 -2)
                                            (("1" (REPLACE -1)
                                              (("1" (EXPAND "length" 1)
                                                (("1" (ASSERT)
                                                  (("1" (LIFT-IF 1)
                                                    (("1" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND "length" -1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2"
                                                          (LEMMA "eval_cons")
                                                          (("2"
                                                            (INST -5 "cdr(f)")
                                                            (("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (HIDE -5)
                                                                  (("2"
                                                                    (SPLIT -5)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "zero_p"
                                                                       -1)
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (APPLY-EXTENSIONALITY
                                                                       1)
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "cdr(f)"
                                                                         "x!1")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REVEAL
                                                                             +)
                                                                            (("2"
                                                                              (REVEAL
                                                                               -)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -2)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -2)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -2)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       -2)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -2)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "x!1=0")
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "FORALL(x:{xx:real| xx /= 0}): eval(cdr(f))(x)=0")
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "eval(cdr(f))(x!1)>0")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "eval"
                                                                                                 -8
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "init_eval"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (DECOMPOSE-EQUALITY
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "init_eval_acc")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "cdr(f)"
                                                                                                             "length(f)-1"
                                                                                                             "car(f)*x!1^0")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (DECOMPOSE-EQUALITY
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "x!1")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -8
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (LEMMA
                                                                                                                           "eval_car")
                                                                                                                          (("1"
                                                                                                                            (INST
                                                                                                                             -1
                                                                                                                             "cdr(f)")
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (POSTPONE)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (POSTPONE)
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("3"
                                                                                                      (POSTPONE)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (POSTPONE)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (POSTPONE)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (POSTPONE)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (POSTPONE) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|eval_eq| 0
  (|eval_eq-1| |nil| 3778425377
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (LEMMA "eval_sub")
          (("1" (INST -1 "f" "g") (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (LEMMA "sub_zerop")
          (("2" (TYPEPRED "f" "g")
            (("2" (HIDE -1 -2)
              (("2" (INST -2 "f" "g")
                (("2" (ASSERT)
                  (("2" (CASE "not eval(f)-eval(g) = LAMBDA(x:real): 0")
                    (("1" (DECOMPOSE-EQUALITY 1)
                      (("1" (DECOMPOSE-EQUALITY -2)
                        (("1" (INST -1 "x!1")
                          (("1" (ASSERT)
                            (("1" (EXPAND "-" 1) (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "eval_sub")
                      (("2" (INST -1 "f" "g")
                        (("2" (ASSERT)
                          (("2" (REPLACE -1 -2 RL)
                            (("2" (LEMMA "eval_zero")
                              (("2" (INST -1 "init_polysub(f,g)")
                                (("2" (ASSERT)
                                  (("2" (TYPEPRED "init_polysub(f,g)")
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "max" -2)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval_sub| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sub_zerop| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|eval_zero| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polysub| CONST-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL)
   SHOSTAK))
 (|mult_commute| 0
  (|mult_commute-1| |nil| 3778853083
   ("" (SKEEP)
    (("" (LEMMA "eval_prod")
      (("" (CASE "eval( init_polymult(f, g)) = eval(init_polymult(g, f))")
        (("1" (LEMMA "eval_eq")
          (("1" (INST -1 "init_polymult(f,g)" "init_polymult(g,f)")
            (("1" (ASSERT) NIL NIL)
             ("2" (TYPEPRED "init_polymult(g,f)" "init_polymult(f,g)")
              (("2" (HIDE -1 -3)
                (("2" (ASSERT)
                  (("2" (SPLASH -1)
                    (("1" (ASSERT)
                      (("1" (TYPEPRED "init_polymult(g, f)")
                        (("1" (ASSERT)
                          (("1" (HIDE -1)
                            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "init_polymult" 2)
                      (("2" (ASSERT)
                        (("2" (HIDE -1)
                          (("2" (SPLIT -2)
                            (("1" (LIFT-IF 2)
                              (("1" (SPLIT 2)
                                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF 3)
                                      (("2" (SPLIT 3)
                                        (("1" (FLATTEN)
                                          (("1" (SPLIT 1)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2"
                                                  (EXPAND "init_polymult" -2)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF 2)
                                              (("2" (SPLIT 2)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "init_polymult"
                                                              -2)
                                                      (("1" (REPLACE -2 1)
                                                        (("1"
                                                          (TYPEPRED
                                                           "init_polyplus(init_polyscale(car(g), f),
                         init_polymult(cdr(g), cons(0, f)))")
                                                          (("1" (HIDE -1)
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (EXPAND "max" 1
                                                                        1)
                                                                (("1"
                                                                  (LIFT-IF 1)
                                                                  (("1"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "max"
                                                                           -2)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "(init_polymult(cdr(g), cons(0, f)))")
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (LIFT-IF
                                                                                         -4)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -4)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -2
                                                                                               2)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "max"
                                                                           -1)
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "(init_polyscale(car(g), f))")
                                                                            (("2"
                                                                              (HIDE
                                                                               -1)
                                                                              (("2"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (TYPEPRED
                                                                                     "init_polymult(cdr(g), cons(0, f))")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -2)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   3
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             3)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               3)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT)
                                                    (("2" (HIDE -2)
                                                      (("2"
                                                        (TYPEPRED
                                                         "init_polyplus(init_polyscale(car(g), f),
                         init_polymult(cdr(g), cons(0, f)))")
                                                        (("2" (HIDE -1)
                                                          (("2"
                                                            (EXPAND "max" -1)
                                                            (("2" (LIFT-IF -1)
                                                              (("2" (SPLIT -1)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -2)
                                                                    (("1"
                                                                      (TYPEPRED
                                                                       "init_polyplus(init_polyscale(car(f), g),
                          init_polymult(cdr(f), cons(0, g)))")
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "max"
                                                                           -1)
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             -1)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -1)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -2)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "init_polymult(cdr(g), cons(0, f))"
                                                                                       "init_polymult(cdr(f), cons(0, g))")
                                                                                      (("1"
                                                                                        (HIDE
                                                                                         -4)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -2)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -3
                                                                                               4)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 4
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   4
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     4
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       4
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "init_polyscale(car(f), g)")
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "init_polymult(cdr(f), cons(0, g))")
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (SPLIT
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         1
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           2
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       2
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         2
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "init_polyscale(car(g), f)")
                                                                        (("2"
                                                                          (HIDE
                                                                           -1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "init_polymult(cdr(g), cons(0, f))")
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       1
                                                                                       3)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           2
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               4
                                                                                               1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       4
                                                                                       1)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL) ("3" (FLATTEN) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (DECOMPOSE-EQUALITY 1)
            (("2" (INST-CP -1 "f" "g" "x!1")
              (("2" (ASSERT)
                (("2" (INST -1 "g" "f" "x!1") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval_prod| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|eval_eq| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|init_polyscale| DEF-DECL "{ff: Polynomial | length(ff) = length(f)}"
     |arithmetic_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL) NIL NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    NIL
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|even_exp| 0
  (|even_exp-1| |nil| 3779447161
   ("" (INDUCT "n")
    (("1" (SKEEP)
      (("1" (EXPAND "init_polyexp" 1)
        (("1" (ASSERT)
          (("1" (SKEEP)
            (("1" (LIFT-IF 1)
              (("1" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (EXPAND "eval" 1)
                    (("1" (EXPAND "init_eval" 1 1) (("1" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "f=null")
          (("1" (EXPAND "init_polyexp" 1 1)
            (("1" (ASSERT) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (EXPAND "init_polyexp" 2 1)
              (("2" (ASSERT)
                (("2" (EXPAND "init_polyexp" 2 1)
                  (("2" (LEMMA "eval_prod")
                    (("2"
                      (INST-CP -1 "f" "init_polymult(f,init_polyexp(f,2*j))"
                       "x")
                      (("2" (REPLACE -2)
                        (("2" (REPLACE -2 2 RL)
                          (("2" (REPLACE -2 2 LR)
                            (("2" (INST -1 "f" "init_polyexp(f,2*j)" "x")
                              (("2" (REPLACE -1 2)
                                (("2" (INST -3 "f")
                                  (("2" (INST -3 "x")
                                    (("2" (ASSERT)
                                      (("2"
                                        (CASE
                                            "eval(f)(x) * (eval(f)(x) * eval(init_polyexp(f, 2 * j))(x)) = (eval(f)(x)*eval(f)(x)) * eval(init_polyexp(f, 2 * j))(x)")
                                        (("1" (REPLACE -1 2)
                                          (("1"
                                            (CASE "eval(f)(x) * eval(f)(x)>=0")
                                            (("1" (LEMMA "pos_times_ge")
                                              (("1"
                                                (INST -1
                                                 " (eval(f)(x) * eval(f)(x))"
                                                 "eval(init_polyexp(f, 2 * j))(x)")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (LEMMA "pos_times_ge")
                                              (("2"
                                                (INST -1 "eval(f)(x)"
                                                 "eval(f)(x)")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|init_polymult| DEF-DECL
     "{ff: Polynomial | (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND ((NOT null?(f) AND NOT null?(g)) IMPLIES length(ff) = length(f) + length(g) - 1)}"
     |arithmetic_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|eval_prod| FORMULA-DECL NIL |arithmetic_poly| NIL) NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|init_polyexp| DEF-DECL "{ff: Polynomial |
   (null?(f) IMPLIES length(ff) = 0) AND ((cons?(f) AND k = 0) IMPLIES length(ff) = 1) AND ((cons?(f) AND k > 0) IMPLIES length(ff) = length(f) * k - (k - 1))}"
     |arithmetic_poly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL))
   SHOSTAK)))

