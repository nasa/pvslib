standard_form_poly  % Welcome
		: THEORY

% Last Update              Oct 2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| Defining Polynomials as lists |%
%| and standard form             |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author:          J. Tanner Slagel

%-----     %
  BEGIN
%     -----%

%----------------------------------------------------------------------
%%Importing array definition of polynomials, and array2list to be
%  able to relate the array and list definition of polynomials
%----------------------------------------------------------------------

IMPORTING reals@polynomials,
          structures@array2list[real],
          structures@more_list_props[real]

%----------------------------------------------------------------------
%%Define univariate polynomial over reals
%----------------------------------------------------------------------

Polynomial: TYPE = list[real]

%----------------------------------------------------------------------
%%Define last. Note that last is defined as 'rac' in `more list props'
%----------------------------------------------------------------------

last(f:{ff:Polynomial | cons?(ff)}): RECURSIVE real =
  IF length(f) = 1
    THEN car(f)
  ELSE
    last(cdr(f))
  ENDIF
  MEASURE length(f)

%----------------------------------------------------------------------
%%Properties of last
%----------------------------------------------------------------------

last_cdr: LEMMA
  FORALL(f:{ff:Polynomial | length(ff)>1}):
    last(f) = last(cdr(f))

%----------------------------------------------------------------------
%%Define chop. Note that chop is defined as 'rdc' in `more list props'
%----------------------------------------------------------------------

chop(f:Polynomial): RECURSIVE Polynomial =
  IF length(f) <= 1
    THEN null
  ELSE
    cons(car(f), chop(cdr(f)))
  ENDIF
  MEASURE length(f)

%----------------------------------------------------------------------
%%Properties of chop
%----------------------------------------------------------------------

first_chop: LEMMA
  FORALL (f:{ff:Polynomial |  length(ff) > 1}):
    car(chop(f)) = car(f)

chop_cdr: LEMMA
  FORALL (f:{ff:Polynomial | cons?(ff) AND cons?(cdr(ff)) }):
    cdr(chop(f)) = chop(cdr(f))

chop_length: LEMMA
  FORALL (f:{ff:Polynomial| cons?(ff)}):
    length(f) = length(chop(f))+1

%----------------------------------------------------------------------
%%Define standard form, which allows each polynomial to have a unique
%  representation. 
%----------------------------------------------------------------------

standard_form?(f:Polynomial): bool =
  IF null?(f)
    THEN TRUE
  ELSIF last(f) = 0
    THEN FALSE
  ELSE
    TRUE
  ENDIF

standard_form(f:Polynomial):
 RECURSIVE {ff:(standard_form?)| length(ff)<=length(f)}=
  IF standard_form?(f) = TRUE
    THEN f
  ELSE
    standard_form(chop(f))
  ENDIF
  MEASURE length(f)

standard_form_ex: LEMMA
  standard_form((: 0, 1, 2, 0, 0 :)) = (: 0, 1, 2 :)

%----------------------------------------------------------------------
%%Properties of standard form
%----------------------------------------------------------------------

standard_form_cdr: LEMMA
  FORALL (f: Polynomial):
  cons?(f) AND standard_form?(f)
  IMPLIES standard_form?(cdr(f))

standard_form_cdr1: LEMMA
  FORALL (f:{ff: Polynomial | cons?(ff) AND cons?(cdr(ff))}):
  standard_form?(cdr(f)) IMPLIES standard_form?(f)

standard_form_cdr2: LEMMA
  FORALL (f:{ff:Polynomial | cons?(standard_form(ff))}):
  (standard_form(f) = cons(car(f), standard_form(cdr(f))))

standard_form_cdr3: LEMMA
  FORALL (f:{ff:Polynomial |
         cons?(ff) AND cons?(standard_form(cdr(ff)))}):
  standard_form(f) = cons(car(f), standard_form(cdr(f)))

standard_form_car: LEMMA
  FORALL (f: {ff:Polynomial | cons?(ff) and cons?(cdr(ff))}):
  standard_form(cdr(f)) = null
  IMPLIES standard_form(f) = standard_form( (: car(f) :))

standard_null_decomp: LEMMA
  FORALL (f: {ff:Polynomial |cons?(ff)}):
  null?(standard_form(f))
  IFF null?(standard_form((:car(f):)))
  AND null?(standard_form(cdr(f)))

standard_form_cons: LEMMA
  FORALL (f:{ff:Polynomial |cons?(ff)}):
  car(f) /= 0
  IMPLIES standard_form(f) =
  cons(car(f), standard_form(cdr(f)))

standard_form: LEMMA
  FORALL (f:{ff:Polynomial | cons?(ff)}):
  standard_form?(standard_form(f))
  
  %__________The End___%
  END standard_form_poly
