(|standard_form_poly|
 (|last_TCC1| 0
  (|last_TCC1-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (TYPEPRED "f")
      (("" (EXPAND "length" 1 1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL)
   NIL
   (|last| SUBTYPE "list_adt[real].cdr(standard_form_poly.f)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_TCC2| 0
  (|last_TCC2-1| |nil| 3777799350 ("" (TERMINATION-TCC) NIL NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)) NIL
   (|last| TERMINATION
    "standard_form_poly.last(list_adt[real].cdr(standard_form_poly.f))"
    "NIL")))
 (|last_cdr_TCC1| 0
  (|last_cdr_TCC1-1| |nil| 3777799350 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|last_cdr| SUBTYPE "standard_form_poly.f"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_cdr_TCC2| 0
  (|last_cdr_TCC2-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (TYPEPRED "f") (("" (EXPAND "length" -2) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|last_cdr| SUBTYPE "list_adt[real].cdr(standard_form_poly.f)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|last_cdr| 0
  (|last_cdr-1| |nil| 3777799483
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)
     ("3" (SKEEP)
      (("3" (EXPAND "length" -2 1)
        (("3" (ASSERT)
          (("3" (CASE "null?(cons2_var)")
            (("1" (ASSERT) NIL NIL)
             ("2" (CASE "length(cons2_var)=1")
              (("1" (ASSERT)
                (("1" (EXPAND "last" 2)
                  (("1" (LIFT-IF 2)
                    (("1" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (FLATTEN)
                          (("2" (EXPAND "last" 2) (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "last" 3)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (ASSERT)
      (("4" (SKEEP) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (SKEEP) (("5" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   SHOSTAK))
 (|chop_TCC1| 0
  (|chop_TCC1-1| |nil| 3777799350 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|chop| SUBTYPE "standard_form_poly.f" "(list_adt[real].cons?)")))
 (|chop_TCC2| 0
  (|chop_TCC2-1| |nil| 3777799350 ("" (TERMINATION-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|chop| TERMINATION
    "standard_form_poly.chop(list_adt[real].cdr(standard_form_poly.f))"
    "NIL")))
 (|first_chop_TCC1| 0
  (|first_chop_TCC1-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (TYPEPRED "f") (("" (EXPAND "chop" 1) (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL) NIL)
   NIL
   (|first_chop| SUBTYPE "standard_form_poly.chop(standard_form_poly.f)"
    "(list_adt[real].cons?)")))
 (|first_chop| 0
  (|first_chop-1| |nil| 3777800579
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL)
     ("2" (ASSERT) (("2" (EXPAND "length" 1) (("2" (PROPAX) NIL NIL)) NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (CASE "null?(cons2_var)")
        (("1" (EXPAND "chop" 1) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (ASSERT)
          (("2" (CASE "length(cons2_var)=1")
            (("1" (ASSERT)
              (("1" (EXPAND "chop" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
             ("2" (ASSERT)
              (("2" (CASE "length(cons2_var)<=1")
                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "chop" 4) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (SKEEP) (("5" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL))
   NIL))
 (|chop_cdr_TCC1| 0
  (|chop_cdr_TCC1-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (TYPEPRED "f")
      (("" (EXPAND "chop" 1 1)
        (("" (LIFT-IF 1)
          (("" (SPLIT 1)
            (("1" (EXPAND "length" 1)
              (("1" (ASSERT)
                (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL) NIL)
   NIL
   (|chop_cdr| SUBTYPE "standard_form_poly.chop(standard_form_poly.f)"
    "(list_adt[real].cons?)")))
 (|chop_cdr| 0
  (|chop_cdr-1| |nil| 3777800614
   (""
    (CASE "FORALL (n:nat, f: {ff: Polynomial | cons?(ff) AND cons?(cdr(ff))}):
                      length(f)=n IMPLIES cdr(chop(f)) = chop(cdr(f))")
    (("1" (SKEEP)
      (("1" (ASSERT) (("1" (INST -1 "length(f)" "f") NIL NIL)) NIL)) NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (TYPEPRED "f")
              (("1" (ASSERT)
                (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (EXPAND "chop" 1 1)
                (("2" (ASSERT)
                  (("2" (CASE "length(f)=1")
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" -1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT)
            (("3" (HIDE 2)
              (("3" (SKEEP)
                (("3" (TYPEPRED "f")
                  (("3" (EXPAND "chop" 1)
                    (("3" (ASSERT)
                      (("3" (CASE "length(f)=1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -1)
                            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (CASE "length(f)=0")
                            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (EXPAND "chop" 1)
          (("3" (CASE "length(f)=1")
            (("1" (EXPAND "length" -1)
              (("1" (TYPEPRED "f")
                (("1" (ASSERT)
                  (("1" (EXPAND "length" 1 1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" -4) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (LIFT-IF 2)
                (("2" (ASSERT)
                  (("2" (CASE "length(f)=0")
                    (("1" (TYPEPRED "f")
                      (("1" (EXPAND "length" -4) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL))
   NIL))
 (|chop_length| 0
  (|chop_length-1| |nil| 3777800639
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (SPLIT)
            (("1" (ASSERT)
              (("1" (EXPAND "chop" 1)
                (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "length" 2 1)
                (("2" (ASSERT)
                  (("2" (CASE "length(cons2_var) /= 0")
                    (("1" (EXPAND "length" -1) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "length" 3 1)
                        (("2" (EXPAND "chop" 3) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|standard_form?_TCC1| 0
  (|standard_form?_TCC1-1| |nil| 3777799350 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL))
   NIL
   (|standard_form?| SUBTYPE "standard_form_poly.f"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (|standard_form_TCC1| 0
  (|standard_form_TCC1-1| |nil| 3777799350 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL))
   NIL
   (|standard_form| SUBTYPE "standard_form_poly.f"
    "{ff: (standard_form_poly.standard_form?) | reals.<=(list_props[real].length(ff), list_props[real].length(standard_form_poly.f))}")))
 (|standard_form_TCC2| 0
  (|standard_form_TCC2-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (LEMMA "chop_length")
      (("" (INST -1 "f")
        (("1" (ASSERT) NIL NIL)
         ("2" (EXPAND "standard_form?" 2) (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL) NIL NIL)
   NIL
   (|standard_form| TERMINATION
    "standard_form_poly.standard_form(standard_form_poly.chop(standard_form_poly.f))"
    "NIL")))
 (|standard_form_TCC3| 0
  (|standard_form_TCC3-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (TYPEPRED "v(chop(f))")
      (("" (LEMMA "chop_length")
        (("" (INST -1 "f")
          (("1" (ASSERT) NIL NIL)
           ("2" (EXPAND "standard_form?" 2) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL) NIL)
   NIL
   (|standard_form| SUBTYPE
    "standard_form_poly.standard_form(standard_form_poly.chop(standard_form_poly.f))"
    "{ff: (standard_form_poly.standard_form?) | reals.<=(list_props[real].length(ff), list_props[real].length(standard_form_poly.f))}")))
 (|standard_form_ex| 0
  (|standard_form_ex-1| |nil| 3787063584
   ("" (EVAL-EXPR 1) (("" (ASSERT) NIL NIL)) NIL)
   (NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|standard_form_cdr| 0
  (|standard_form_cdr-1| |nil| 3777800664
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (EXPAND "standard_form?" -2)
        (("" (SPLIT -2)
          (("1" (PROPAX) NIL NIL)
           ("2" (EXPAND "standard_form?" 2)
            (("2" (SPLIT 2)
              (("1" (PROPAX) NIL NIL)
               ("2" (FLATTEN)
                (("2" (ASSERT)
                  (("2" (SPLIT 2)
                    (("1" (LEMMA "last_cdr")
                      (("1" (INST -1 "f")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (ASSERT)
                          (("2" (CASE "length(f)=1")
                            (("1" (EXPAND "length" -1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -1)
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|last_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL) NIL)
   NIL))
 (|standard_form_cdr1| 0
  (|standard_form_cdr1-1| |nil| 3777800695
   ("" (SKEEP)
    (("" (EXPAND "standard_form?")
      (("" (LEMMA "last_cdr")
        (("" (INST -1 "f")
          (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
           ("2" (ASSERT)
            (("2" (TYPEPRED "f")
              (("2" (EXPAND "length" 1)
                (("2" (ASSERT)
                  (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last_cdr| FORMULA-DECL NIL |standard_form_poly| NIL) NIL)
   NIL))
 (|standard_form_cdr2_TCC1| 0
  (|standard_form_cdr2_TCC1-1| |nil| 3777799350
   ("" (SKEEP)
    (("" (TYPEPRED "f")
      (("" (EXPAND "standard_form" -2 1)
        (("" (ASSERT)
          (("" (EXPAND "standard_form?" -2) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL)
   NIL
   (|standard_form_cdr2| SUBTYPE "standard_form_poly.f"
    "(list_adt[real].cons?)")))
 (|standard_form_cdr2| 0
  (|standard_form_cdr2-1| |nil| 3777800729
   (""
    (CASE " FORALL (n:nat, f: {ff: Polynomial | cons?(standard_form(ff))}):
              length(f)=n IMPLIES (standard_form(f) = cons(car(f), standard_form(cdr(f))))")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (CASE "NOT f=null")
            (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (REPLACE -1 1)
              (("2" (TYPEPRED "f")
                (("2" (REPLACE -3 -2)
                  (("2" (EXPAND "standard_form" -2)
                    (("2" (ASSERT)
                      (("2" (EXPAND "standard_form?" -2 1)
                        (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "standard_form" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (CASE "cdr(f)=null")
                    (("1" (REPLACE -1 1)
                      (("1" (HIDE -)
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (GRIND)
                              (("1" (DECOMPOSE-EQUALITY 1)
                                (("1" (TYPEPRED "f")
                                  (("1" (EXPAND "standard_form" -2)
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "last" 1)
                                (("2" (DECOMPOSE-EQUALITY 2)
                                  (("2" (LIFT-IF 2)
                                    (("2" (SPLIT 2)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (EXPAND "length" -1)
                                            (("1" (ASSERT)
                                              (("1" (LIFT-IF -1)
                                                (("1" (SPLIT -1)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (REVEAL -)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "standard_form?" 2 1)
                      (("2" (LIFT-IF 2)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (TYPEPRED "f")
                              (("1" (EXPAND "standard_form" -2 1)
                                (("1" (EXPAND "standard_form?" -2)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (SPLIT 2)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (LEMMA "last_cdr")
                                    (("2" (INST -1 "f")
                                      (("1" (EXPAND "standard_form" 2 1)
                                        (("1" (EXPAND "standard_form?" 2 1)
                                          (("1" (ASSERT)
                                            (("1" (DECOMPOSE-EQUALITY 2) NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "length" 1 1)
                                        (("2" (EXPAND "length" 1 1)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (REVEAL -)
                        (("2" (TYPEPRED "f")
                          (("2" (HIDE -1)
                            (("2" (INST -3 "chop(f)")
                              (("1" (LEMMA "chop_length")
                                (("1" (INST -1 "f")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -4 2)
                                      (("1" (DECOMPOSE-EQUALITY 2)
                                        (("1" (LEMMA "first_chop")
                                          (("1" (INST -1 "f")
                                            (("1" (ASSERT)
                                              (("1" (CASE "NOT cdr(f)=null")
                                                (("1" (EXPAND "length" 2)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" 2)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (EXPAND "standard_form" -3)
                                                  (("2" (LEMMA "chop_length")
                                                    (("2" (INST -1 "f")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "length" -1)
                                                          (("2" (LIFT-IF)
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "standard_form" 1 2)
                                          (("2" (LIFT-IF 1)
                                            (("2" (SPLIT 1)
                                              (("1" (FLATTEN)
                                                (("1"
                                                  (LEMMA "standard_form_cdr1")
                                                  (("1" (INST -1 "f")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (EXPAND "length" -2)
                                                      (("2" (LIFT-IF -2)
                                                        (("2" (ASSERT)
                                                          (("2" (SPLIT -2)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (CASE
                                                                      "NOT cdr(f)=null")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (REPLACE -1
                                                                             2)
                                                                    (("2"
                                                                      (CASE
                                                                          "NOT chop(f)=null")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (REPLACE
                                                                         -1 2)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "standard_form"
                                                                             -6)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -1
                                                                               -6)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "standard_form"
                                                                                 -6)
                                                                                (("2"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2"
                                                                (CASE
                                                                    " NOT cdr(f)=null")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "standard_form"
                                                                   -4)
                                                                  (("2"
                                                                    (CASE
                                                                        "NOT length(f)=1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (LEMMA "chop_cdr")
                                                  (("2" (INST -1 "f")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (EXPAND "standard_form?"
                                                              2)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "standard_form" -1)
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2)
          (("3" (SKEEP)
            (("3" (TYPEPRED "f")
              (("3" (CASE "NOT f=null")
                (("1" (ASSERT) NIL NIL)
                 ("2" (REPLACE -1 -4)
                  (("2" (REPLACE -1 -3)
                    (("2" (ASSERT)
                      (("2" (EXPAND "standard_form" -3)
                        (("2" (EXPAND "standard_form?" -3)
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (CASE "f=null")
          (("1" (TYPEPRED "f")
            (("1" (EXPAND "standard_form" -2)
              (("1" (ASSERT)
                (("1" (EXPAND "standard_form?" -2) (("1" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|standard_form_cdr1| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|first_chop| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   NIL))
 (|standard_form_cdr3| 0
  (|standard_form_cdr3-1| |nil| 3777800757
   (""
    (CASE "FORALL (n:nat, f:
                              {ff: Polynomial |
                                 cons?(ff) AND cons?(standard_form(cdr(ff)))}):
                      length(f)=n IMPLIES standard_form(f) = cons(car(f), standard_form(cdr(f)))")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f") NIL NIL)) NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (TYPEPRED "f")
              (("1" (HIDE -1)
                (("1" (ASSERT)
                  (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (TYPEPRED "f")
                (("2" (HIDE -1)
                  (("2" (CASE "j=0")
                    (("1" (EXPAND "length" -5)
                      (("1" (ASSERT)
                        (("1" (REPLACE -1 -5)
                          (("1" (EXPAND "standard_form" -3)
                            (("1" (EXPAND "length" -5)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT -5)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "standard_form?" -4)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "standard_form" 2 1)
                        (("2" (CASE "standard_form?(f)")
                          (("1" (ASSERT)
                            (("1" (LEMMA "standard_form_cdr")
                              (("1" (INST -1 "f")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "standard_form" 2)
                                    (("1" (DECOMPOSE-EQUALITY 2) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (CASE "j=1")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 -5)
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "chop_length")
                                      (("1" (INST -1 "f")
                                        (("1" (REPLACE -6 -1)
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "standard_form_cdr1")
                                              (("1" (INST -1 "f")
                                                (("1"
                                                  (EXPAND "standard_form" 3 2)
                                                  (("1" (ASSERT)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "chop" 4 2)
                                                        (("1"
                                                          (EXPAND "length" -6)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "standard_form"
                                                               4 2)
                                                              (("1"
                                                                (EXPAND
                                                                 "standard_form?"
                                                                 4 1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "standard_form"
                                                                     -4)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "chop_cdr")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "f")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "standard_form"
                                                                                 -5)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "standard_form?"
                                                                                     -5)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (LIFT-IF
                                                                                         -2)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -2)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (FLATTEN)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (EXPAND "length" -6)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "length" -6)
                                                        (("2"
                                                          (EXPAND "length" -6)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (INST -3 "chop(f)")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "chop_length")
                                      (("1" (INST -1 "f")
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "first_chop")
                                            (("1" (INST -1 "f")
                                              (("1" (REPLACE -1 -5)
                                                (("1" (ASSERT)
                                                  (("1" (LEMMA "chop_cdr")
                                                    (("1" (INST -1 "f")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (LEMMA
                                                           "standard_form_cdr1")
                                                          (("1" (INST -1 "f")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "standard_form"
                                                                 5 2)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "length"
                                                                      -7)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -7)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND "length" -6)
                                                        (("2"
                                                          (EXPAND "length" -6)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SPLIT)
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "chop_length")
                                        (("1" (INST -1 "f")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (CASE "standard_form?(cdr(f))")
                                        (("1" (LEMMA "standard_form_cdr1")
                                          (("1" (INST -1 "f")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT)
                                              (("2" (EXPAND "length" -4)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "length" -4)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "standard_form" 6 2)
                                            (("2" (EXPAND "standard_form" -2)
                                              (("2" (ASSERT)
                                                (("2" (LEMMA "chop_cdr")
                                                  (("2" (INST -1 "f")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (LEMMA "chop_cdr")
                                                        (("2"
                                                          (CASE "cdr(f)=null")
                                                          (("1" (REPLACE -1 -4)
                                                            (("1"
                                                              (EXPAND "chop"
                                                                      -4)
                                                              (("1"
                                                                (EXPAND
                                                                 "standard_form")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "standard_form?")
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|standard_form_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|standard_form_cdr1| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL) NIL
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|first_chop| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL))
 (|standard_form_car| 0
  (|standard_form_car-1| |nil| 3777800806
   (""
    (CASE "FORALL (n:nat, f: {ff: Polynomial | cons?(ff) AND cons?(cdr(ff))}):
                             length(f)=n IMPLIES (standard_form(cdr(f)) = null IMPLIES
                              standard_form(f) = standard_form((: car(f) :)))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(f)" "f") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP)
          (("1" (EXPAND "length" -1)
            (("1" (TYPEPRED "f") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "standard_form" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (LEMMA "standard_form_cdr")
                      (("1" (INST -1 "f")
                        (("1" (ASSERT)
                          (("1" (EXPAND "standard_form" -5)
                            (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (EXPAND "standard_form" -3)
                        (("2" (LIFT-IF -3)
                          (("2" (SPLIT -3)
                            (("1" (FLATTEN)
                              (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (LEMMA "chop_cdr")
                                (("2" (INST -1 "f")
                                  (("2" (INST -3 "chop(f)")
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "chop_length")
                                        (("1" (INST -1 "f")
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "first_chop")
                                              (("1" (INST -1 "f")
                                                (("1" (REPLACE -1 3 RL)
                                                  (("1" (PROPAX) NIL NIL)) NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (TYPEPRED "f")
                                                    (("2" (HIDE -1)
                                                      (("2" (EXPAND "length" 1)
                                                        (("2"
                                                          (EXPAND "length" 1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SPLIT)
                                      (("1" (CASE "length(f)=1")
                                        (("1" (EXPAND "length" -1)
                                          (("1" (EXPAND "length" -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (LEMMA "chop_length")
                                          (("2" (INST -1 "f")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "standard_form" 4 1)
                                        (("2" (LIFT-IF 4)
                                          (("2" (SPLIT 4)
                                            (("1" (FLATTEN)
                                              (("1" (CASE "NOT length(f)=2")
                                                (("1" (ASSERT)
                                                  (("1" (LEMMA "chop_length")
                                                    (("1" (INST -1 "f")
                                                      (("1"
                                                        (EXPAND "length" -1 2)
                                                        (("1" (LIFT-IF -1)
                                                          (("1" (SPLIT -1)
                                                            (("1" (ASSERT)
                                                              (("1" (FLATTEN)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "chop" -2 1)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "cdr(chop(f))=null")
                                                      (("1" (REPLACE -1 -4)
                                                        (("1"
                                                          (REPLACE -4 -3 RL)
                                                          (("1"
                                                            (EXPAND
                                                             "standard_form?"
                                                             -3)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "last"
                                                                        -3)
                                                                (("1"
                                                                  (EXPAND
                                                                   "length" -3
                                                                   1)
                                                                  (("1"
                                                                    (SPLIT -3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "standard_form"
                                                                         2 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "chop"
                                                                           2)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "chop"
                                                                             2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               -2)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND "length" -1)
                                                        (("2"
                                                          (EXPAND " chop" -3 2)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (REPLACE -1 3)
                                                  (("2" (EXPAND "chop" 3)
                                                    (("2" (ASSERT)
                                                      (("2" (LIFT-IF 3)
                                                        (("2" (SPLIT 3)
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "chop" 3
                                                                      2)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LIFT-IF 3)
                                                                  (("1"
                                                                    (SPLIT 3)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "standard_form?"
                                                                             4)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "last"
                                                                               4)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|standard_form_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|first_chop| FORMULA-DECL NIL |standard_form_poly| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL) NIL
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|chop_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL))
 (|standard_null_decomp| 0
  (|standard_null_decomp-1| |nil| 3777800835
   (""
    (CASE "FORALL (n:nat, f: {ff: Polynomial | cons?(ff)}):
                     length(f)=n IMPLIES ( null?(standard_form(f)) IFF
                       null?(standard_form((: car(f) :))) AND null?(standard_form(cdr(f))))")
    (("1" (SKEEP) (("1" (INST -1 "length(f)" "f") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n" 1)
        (("1" (SKEEP) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (CASE "j=0")
              (("1" (CASE "NOT cdr(f)=null")
                (("1" (EXPAND "length" -3)
                  (("1" (ASSERT)
                    (("1" (REPLACE -1 -3)
                      (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (REPLACE -1 1)
                    (("2" (EXPAND "standard_form" 1 3)
                      (("2" (EXPAND "standard_form?" 1 1)
                        (("2" (CASE "NOT f=(:car(f):)")
                          (("1" (DECOMPOSE-EQUALITY 1) NIL NIL)
                           ("2" (ASSERT)
                            (("2" (REPLACE -1 1 RL 1) (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SPLIT 2)
                (("1" (FLATTEN)
                  (("1" (CASE "standard_form?(cdr(f))")
                    (("1" (LEMMA "standard_form_cdr1")
                      (("1" (INST -1 "f")
                        (("1" (ASSERT)
                          (("1" (EXPAND "standard_form" -3)
                            (("1" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("2" (EXPAND "length" -4)
                          (("2" (ASSERT)
                            (("2" (EXPAND "length" -4) (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "standard_form" 2 2)
                      (("2" (ASSERT)
                        (("2" (EXPAND "standard_form" -1)
                          (("2" (CASE "standard_form?(f)")
                            (("1" (LEMMA "standard_form_cdr")
                              (("1" (INST -1 "f") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (LEMMA "chop_cdr")
                                (("2" (LEMMA "first_chop")
                                  (("2" (INST -1 "f")
                                    (("2" (INST -2 "f")
                                      (("2" (REPLACE -1 3 RL)
                                        (("2" (INST -4 "chop(f)")
                                          (("2" (LEMMA "chop_length")
                                            (("2" (INST -1 "f")
                                              (("2" (ASSERT)
                                                (("2" (REPLACE -3 3 RL)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (TYPEPRED "f")
                    (("2" (HIDE -1)
                      (("2" (CASE "standard_form?(f)")
                        (("1" (EXPAND "standard_form" 1 1)
                          (("1" (ASSERT)
                            (("1" (LEMMA "standard_form_cdr")
                              (("1" (INST -1 "f")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "standard_form" -5)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "length" -7)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "standard_form" 2 1)
                            (("2" (CASE "standard_form?(cdr(f))")
                              (("1" (LEMMA "standard_form_cdr1")
                                (("1" (INST -1 "f")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (EXPAND "length" -6)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" -6)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "standard_form" -3)
                                (("2" (ASSERT)
                                  (("2" (INST -4 "chop(f)")
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "first_chop")
                                        (("1" (LEMMA "chop_cdr")
                                          (("1" (LEMMA "chop_length")
                                            (("1" (INST -1 "f")
                                              (("1" (ASSERT)
                                                (("1" (INST -2 "f")
                                                  (("1" (INST -3 "f")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (LEMMA "chop_length")
                                      (("2" (INST -1 "f")
                                        (("2" (EXPAND "length" -1 2)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|first_chop| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|chop_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|standard_form_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|standard_form_cdr1| FORMULA-DECL NIL |standard_form_poly| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   NIL))
 (|standard_form_cons| 0
  (|standard_form_cons-1| |nil| 3777800899
   (""
    (CASE "FORALL (n:nat, f: {ff: Polynomial | cons?(ff)}):
                             length(f)=n IMPLIES (car(f) /= 0 IMPLIES
                              standard_form(f) = cons(car(f), standard_form(cdr(f))))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(f)" "f") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n" 1)
        (("1" (SKEEP)
          (("1" (TYPEPRED "f")
            (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (ASSERT)
              (("2" (EXPAND "standard_form" 2)
                (("2" (CASE "standard_form?(f)")
                  (("1" (ASSERT)
                    (("1" (CASE "standard_form?(cdr(f))")
                      (("1" (ASSERT)
                        (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "last_cdr")
                        (("2" (EXPAND "standard_form?" -2)
                          (("2" (EXPAND "standard_form?" 1)
                            (("2" (ASSERT)
                              (("2" (CASE "null?(cdr(f))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (INST -1 "f")
                                    (("1" (ASSERT)
                                      (("1" (SPLIT 2)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (TYPEPRED "j")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" -4)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (CASE "j=0")
                                                  (("1" (REPLACE -1 -5)
                                                    (("1" (EXPAND "length" -5)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (LIFT-IF 3)
                      (("2" (CASE "standard_form?(cdr(f))")
                        (("1" (LEMMA "standard_form_cdr1")
                          (("1" (INST -1 "f")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (ASSERT)
                              (("2" (CASE "j=0")
                                (("1" (REPLACE -1 -4)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "standard_form?" 2)
                                      (("1" (EXPAND "last" 2)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "length" -3)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" -3)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (INST -1 "chop(f)")
                            (("1" (ASSERT)
                              (("1" (LEMMA "chop_length")
                                (("1" (INST -1 "f")
                                  (("1" (REPLACE -3 -1)
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "first_chop")
                                        (("1" (INST -1 "f")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -3 4)
                                              (("1" (DECOMPOSE-EQUALITY 4)
                                                (("1" (LEMMA "chop_cdr")
                                                  (("1" (INST -1 "f")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND
                                                         "standard_form?" 3)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (CASE "length(f)=0")
                                              (("1" (TYPEPRED "f")
                                                (("1" (HIDE -1)
                                                  (("1" (EXPAND "length" -2)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (TYPEPRED "j")
                                                (("2" (ASSERT)
                                                  (("2" (CASE "length(f)=1")
                                                    (("1"
                                                      (CASE "null?(cdr(f))")
                                                      (("1" (EXPAND "chop" 6 2)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -2)
                                                            (("1"
                                                              (EXPAND
                                                               "standard_form?"
                                                               3)
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "length" -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      -1)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "f")
                                (("2" (CASE "null?(chop(f))")
                                  (("1" (EXPAND "standard_form" 5 1)
                                    (("1" (EXPAND "standard_form?" 5 1)
                                      (("1" (LEMMA "chop_length")
                                        (("1" (INST -1 "f")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "length" -1)
                                              (("1" (CASE "NOT null?(cdr(f))")
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "length" -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2"
                                                    (EXPAND "standard_form?" 2)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop_cdr| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|first_chop| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop_length| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|chop| DEF-DECL "Polynomial" |standard_form_poly| NIL)
    (|standard_form_cdr1| FORMULA-DECL NIL |standard_form_poly| NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   NIL))
 (|standard_form| 0
  (|standard_form-1| |nil| 3777800967
   ("" (INDUCT "f")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)
   (NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|standard_form| DEF-DECL
     "{ff: (standard_form?) | length(ff) <= length(f)}" |standard_form_poly|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|standard_form?| CONST-DECL "bool" |standard_form_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL)))

