(|smooth_not_analytic|
 (|Rolles_thrm_TCC1| 0
  (|Rolles_thrm_TCC1-1| |nil| 3808433019
   ("" (LEMMA "deriv_domain_open")
    (("" (SKEEP) (("" (INST -1 "a" "b") NIL NIL)) NIL)) NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|))
   NIL
   (|Rolles_thrm| ASSUMING
    "analysis@derivatives[open_interval[real](smooth_not_analytic.a, smooth_not_analytic.b)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|Rolles_thrm_TCC2| 0
  (|Rolles_thrm_TCC2-1| |nil| 3808433019
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?" 1)
      (("" (SKEEP)
        (("" (INST 1 "x+min(abs(x-a),abs(x-b))/2")
          (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) NIL
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|Rolles_thrm| ASSUMING
    "analysis@derivatives[open_interval[real](smooth_not_analytic.a, smooth_not_analytic.b)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|Rolles_thrm_TCC3| 0
  (|Rolles_thrm_TCC3-1| |nil| 3808433019
   ("" (SKEEP)
    (("" (LEMMA "derivable_subtype_del[real,open_interval(a,b)]")
      (("1" (SKEEP)
        (("1" (INST -1 "f" "(restrict[real, open_interval(a,b), real](f))" "c")
          (("1" (ASSERT)
            (("1" (SPLIT -1)
              (("1" (ASSERT)
                (("1" (EXPAND "derivable?" -1) (("1" (INST -1 "c") NIL NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "deriv_domain_open")
                (("2" (INST -1 "a" "b") NIL NIL)) NIL)
               ("3" (LEMMA "Rolles_thrm_TCC2")
                (("3" (INST -1 "a" "b") NIL NIL)) NIL)
               ("4" (DECOMPOSE-EQUALITY 1)
                (("4" (EXPAND "restrict" 1) (("4" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (INST 1 "min(abs(b-c),abs(a-c))/2")
              (("1" (SKEEP)
                (("1" (EXPAND "extend" 1)
                  (("1" (ASSERT)
                    (("1" (HIDE -2 -3)
                      (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1 -2) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (EXPAND "not_one_element?" 1)
          (("2" (SKEEP) (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE 2)
        (("3" (LEMMA "deriv_domain_real") (("3" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) NIL NIL NIL
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (|Rolles_thrm_TCC2| ASSUMING-TCC NIL |smooth_not_analytic| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|Rolles_thrm| SUBTYPE "smooth_not_analytic.c"
    "{x | derivatives_def[real].derivable?(smooth_not_analytic.f, x)}")))
 (|Rolles_thrm| 0
  (|Rolles_thrm-1| |nil| 3808433764
   ("" (SKEEP)
    (("" (LEMMA "max_in_interval[closed_interval[real](a, b)]")
      (("1"
        (INST -1 "a" "b"
         "restrict[real, closed_interval[real](a, b), real](f)")
        (("1" (ASSERT)
          (("1" (SKEEP)
            (("1" (TYPEPRED "c")
              (("1" (CASE "a<c AND c<b")
                (("1" (FLATTEN)
                  (("1" (LEMMA "deriv_maximum[open_interval[real](a, b)]")
                    (("1"
                      (INST -1 "(a+c)/2" "(c+b)/2" "c"
                       "restrict[real, open_interval[real](a, b), real](f)")
                      (("1" (ASSERT)
                        (("1" (SPLIT -1)
                          (("1" (INST 1 "c")
                            (("1" (ASSERT)
                              (("1"
                                (LEMMA
                                 "deriv_subtype_del[real, open_interval[real](a, b)]")
                                (("1"
                                  (INST -1 "f"
                                   "restrict[real, open_interval[real](a, b), real](f)"
                                   "c")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "deriv_domain_open")
                                      (("1" (INST -1 "a" "b")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT 1)
                                            (("1" (LEMMA "Rolles_thrm_TCC2")
                                              (("1" (INST -1 "a" "b") NIL NIL))
                                              NIL)
                                             ("2" (DECOMPOSE-EQUALITY 1)
                                              (("2" (EXPAND "restrict" 1)
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL)
                                             ("3" (FLATTEN)
                                              (("3" (ASSERT)
                                                (("3" (EXPAND "derivable?" -8)
                                                  (("3" (INST -8 "c") NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (INST 1 "min(abs(a-c),abs(b-c))/2")
                                      (("1" (SKEEP)
                                        (("1" (EXPAND "extend" 1)
                                          (("1" (ASSERT)
                                            (("1" (HIDE -2)
                                              (("1" (HIDE -6 -7 -8)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -6 -7 -8)
                                        (("2" (HIDE -1 2)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (LEMMA "not_one_element_real")
                                  (("2" (PROPAX) NIL NIL)) NIL)
                                 ("3" (LEMMA "deriv_domain_real")
                                  (("3" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "derivable?" -6)
                              (("2" (INST -6 "c") NIL NIL)) NIL))
                            NIL)
                           ("3" (SKEEP)
                            (("3" (EXPAND "restrict" 1)
                              (("3" (INST -7 "x")
                                (("3" (EXPAND "restrict")
                                  (("3" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
                       ("4" (ASSERT) NIL NIL))
                      NIL)
                     ("2" (LEMMA "Rolles_thrm_TCC2")
                      (("2" (INST -1 "a" "b") NIL NIL)) NIL)
                     ("3" (EXPAND "connected?" 1)
                      (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (CASE "FORALL(x:closed_interval(a,b)): f(x)=f(a)")
                    (("1" (INST 2 "(a+b)/2")
                      (("1" (ASSERT)
                        (("1"
                          (CASE
                              "deriv[open_interval(a,b)](f) = LAMBDA(x:open_interval(a,b)): 0")
                          (("1" (ASSERT)
                            (("1" (DECOMPOSE-EQUALITY -1)
                              (("1" (INST -1 "(a+b)/2")
                                (("1" (EXPAND "restrict" -1)
                                  (("1" (ASSERT)
                                    (("1"
                                      (LEMMA
                                       "deriv_subtype_del[real, open_interval[real](a, b)]")
                                      (("1"
                                        (INST -1 "f"
                                         "(LAMBDA (s: open_interval[real](a, b)): f(s))"
                                         "(a+b)/2")
                                        (("1" (SPLIT -1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "deriv" -2)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (LEMMA "deriv_domain_open")
                                            (("2" (INST -1 "a" "b") NIL NIL))
                                            NIL)
                                           ("3" (LEMMA "Rolles_thrm_TCC2")
                                            (("3" (INST -1 "a" "b") NIL NIL))
                                            NIL)
                                           ("4" (EXPAND "derivable?" -6)
                                            (("4" (INST -6 "(a+b)/2")
                                              (("4" (EXPAND "restrict" -6)
                                                (("4" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (INST 1 "abs((a+b)/2-b)")
                                          (("1" (SKEEP)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "extend" 1)
                                                (("1" (HIDE -6 -7 -8)
                                                  (("1" (HIDE 3)
                                                    (("1" (HIDE -2)
                                                      (("1" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -5 -6 -7)
                                            (("2" (HIDE -1)
                                              (("2" (HIDE 3)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "not_one_element?" 1 1)
                                        (("2" (SKEEP)
                                          (("2" (INST 1 "x+1")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("3" (EXPAND "deriv_domain?" 1 1)
                                        (("3" (SKEEP)
                                          (("3" (INST 1 "e/2")
                                            (("3" (ASSERT)
                                              (("3" (HIDE -5 -6 -7)
                                                (("3" (HIDE -2)
                                                  (("3" (HIDE -1)
                                                    (("3" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2"
                              (LEMMA
                               "deriv_const_func[open_interval[real](a, b)]")
                              (("2" (INST -1 "f(a)")
                                (("2" (EXPAND "const_fun" -1)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "restrict" 1)
                                      (("2" (DECOMPOSE-EQUALITY 1)
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (INST -1 "x!1")
                                            (("1" (EXPAND "deriv")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (CASE
                                                      "(LAMBDA (x: open_interval[real](a, b)) -> real: f(a)) = (LAMBDA (s: open_interval[real](a, b)): f(s))")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (DECOMPOSE-EQUALITY 1)
                                                    (("2" (INST -2 "x!2")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "restrict" -8)
                                            (("2" (ASSERT)
                                              (("2"
                                                (CASE
                                                    "(LAMBDA (s: open_interval[real](a, b)): f(s)) =  (LAMBDA (x: open_interval[real](a, b)) -> real: f(b))")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (DECOMPOSE-EQUALITY 1)
                                                  (("2" (INST -4 "x!2") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3"
                                            (CASE
                                                "(LAMBDA (s: open_interval[real](a, b)): f(s)) =  (LAMBDA (x: open_interval[real](a, b)) -> real: f(b))")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (DECOMPOSE-EQUALITY 1)
                                              (("2" (INST -4 "x!2") NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "restrict" -6)
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP)
                      (("2" (LEMMA "min_in_interval[closed_interval(a,b)]")
                        (("2"
                          (INST -1 "a" "b"
                           "(restrict[real, closed_interval[real](a, b), real](f))")
                          (("2" (ASSERT)
                            (("2" (SKEEP)
                              (("2" (TYPEPRED "c!1")
                                (("2" (CASE "a<c!1 AND c!1<b")
                                  (("1" (ASSERT)
                                    (("1"
                                      (LEMMA
                                       "deriv_minimum[open_interval[real](a, b)]")
                                      (("1"
                                        (INST -1 "(a+c!1)/2" "(c!1+b)/2" "c!1"
                                         "(restrict[real, open_interval[real](a, b), real](f))")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -1)
                                            (("1" (INST 3 "c!1")
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "deriv_subtype_del[real, open_interval[real](a, b)]")
                                                      (("1"
                                                        (INST -1 "f"
                                                         "(restrict[real, open_interval[real](a, b), real](f))"
                                                         "c!1")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "deriv_domain_open")
                                                            (("1"
                                                              (INST -1 "a" "b")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "Rolles_thrm_TCC2")
                                                                  (("1"
                                                                    (INST -1
                                                                     "a" "b")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (SPLIT
                                                                         1)
                                                                        (("1"
                                                                          (DECOMPOSE-EQUALITY
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "restrict"
                                                                             1)
                                                                            (("1"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "derivable?"
                                                                           -12)
                                                                          (("2"
                                                                            (INST
                                                                             -12
                                                                             "c!1")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (INST 1
                                                           "min(abs(b-c!1),abs(a-c!1))/2")
                                                          (("1" (SKEEP)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "extend" 1)
                                                                (("1"
                                                                  (HIDE -7 -11
                                                                   -12)
                                                                  (("1"
                                                                    (HIDE -2)
                                                                    (("1"
                                                                      (HIDE 4)
                                                                      (("1"
                                                                        (HIDE
                                                                         -8)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "fullset"
                                                                           1)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "y")
                                                                            (("1"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE -9 -10 -11)
                                                            (("2" (HIDE -6)
                                                              (("2" (HIDE -1)
                                                                (("2" (HIDE 4)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND
                                                         "not_one_element?" 1)
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (INST 1 "x!1+1")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3"
                                                        (LEMMA
                                                         "deriv_domain_real")
                                                        (("3" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (ASSERT) NIL NIL)
                                             ("4" (EXPAND "derivable?" -8)
                                              (("4" (INST -8 "c!1") NIL NIL))
                                              NIL)
                                             ("5" (ASSERT)
                                              (("5" (SKEEP)
                                                (("5" (ASSERT)
                                                  (("5" (INST -7 "x!1")
                                                    (("5" (ASSERT)
                                                      (("5" (EXPAND "restrict")
                                                        (("5" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL)
                                         ("3" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (LEMMA "Rolles_thrm_TCC2")
                                        (("2" (INST -1 "a" "b") NIL NIL)) NIL)
                                       ("3" (ASSERT)
                                        (("3" (HIDE -4 -7 -8 -9)
                                          (("3" (EXPAND "connected?" 1)
                                            (("3" (SKEEP)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (CASE "f(c!1)=f(a)")
                                      (("1" (ASSERT)
                                        (("1" (INST -4 "x")
                                          (("1" (INST -7 "x")
                                            (("1" (EXPAND "restrict")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|max_in_interval| FORMULA-DECL NIL |continuous_functions_props|
     |analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|deriv_minimum| FORMULA-DECL NIL |derivative_props| |analysis|) NIL
    (|min_in_interval| FORMULA-DECL NIL |continuous_functions_props|
     |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_const_func| FORMULA-DECL NIL |derivatives| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|Rolles_thrm_TCC2| ASSUMING-TCC NIL |smooth_not_analytic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|deriv_maximum| FORMULA-DECL NIL |derivative_props| |analysis|)
    (< CONST-DECL "bool" |reals| NIL) NIL NIL NIL
    (|restrict| CONST-DECL "R" |restrict| NIL) NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|open_noe| 0
  (|open_noe-1| |nil| 3812192422
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?" 1 1)
      ((""
        (CASE
            "EXISTS(eps:posreal): FORALL(del:posreal): del<eps IMPLIES a< a + del AND a+del < b")
        (("1" (SKEEP)
          (("1" (SKEEP)
            (("1" (INST-CP -1 "eps/2")
              (("1" (INST -1 "eps/3")
                (("1" (ASSERT)
                  (("1" (INST-CP 1 "eps/2+a")
                    (("1" (INST 1 "eps/3+a") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (INST 1 "(b-a)/2")
            (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) NIL
    NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|closed_cont| 0
  (|closed_cont-1| |nil| 3812197528
   ("" (SKEEP*)
    (("" (EXPAND "continuous?")
      (("" (SKEEP)
        (("" (INST -1 "x0")
          (("" (EXPAND "continuous?")
            (("" (SKEEP)
              (("" (INST -1 "epsilon")
                (("" (SKEEP)
                  (("" (INST 1 "delta")
                    (("" (SKEEP)
                      (("" (INST -1 "x") (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|mean_value_gen_TCC1| 0
  (|mean_value_gen_TCC1-1| |nil| 3808436436
   ("" (SKEEP*)
    (("" (LEMMA "derivable_subtype_del[real,open_interval[real](a,b)]")
      ((""
        (INST -1 "f" "restrict[real, open_interval[real](a, b), real](f)" "c")
        (("1" (ASSERT)
          (("1" (SPLIT -1)
            (("1" (EXPAND "restrict")
              (("1" (ASSERT)
                (("1" (EXPAND "derivable?" -1) (("1" (INST -1 "c") NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "deriv_domain_open") (("2" (INST -1 "a" "b") NIL NIL))
              NIL)
             ("3" (EXPAND "not_one_element?" 1)
              (("3" (SKEEP)
                (("3" (CASE "NOT x= (a+b)/2")
                  (("1" (INST 2 "(a+b)/2") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (INST 1 "a/3+2*b/3") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (EXPAND "restrict" 1) (("4" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (INST 1 "min(b-c,c-a)/2")
            (("1" (SKEEP)
              (("1" (ASSERT)
                (("1" (EXPAND "extend") (("1" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (SPLIT 1)
              (("1" (EXPAND "min" 1 1)
                (("1" (ASSERT)
                  (("1" (LIFT-IF 1)
                    (("1" (SPLIT 1)
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "min" 1)
                (("2" (LIFT-IF 1)
                  (("2" (SPLIT 1)
                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL) NIL NIL NIL
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|mean_value_gen| SUBTYPE "smooth_not_analytic.c"
    "{x | derivatives_def[real].derivable?(smooth_not_analytic.f, x)}")))
 (|mean_value_gen| 0
  (|mean_value_gen-1| |nil| 3808436712
   ("" (SKEEP)
    (("" (LEMMA "Rolles_thrm")
      (("" (INST -1 "LAMBDA(x:real): f(x) - (x-a)*(f(b)-f(a))/(b-a)" "a" "b")
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (SKEEP)
              (("1" (ASSERT)
                (("1"
                  (CASE "deriv(LAMBDA (x: real):
              f(x) -
               (x * f(b) - x * f(a) + (f(a) * a - f(b) * a)) / (b - a),
            c) = deriv(
              f,c) -
                (f(b) - f(a))/(b - a)")
                  (("1" (INST 1 "c") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 2)
                    (("2" (LEMMA "deriv_diff[real]")
                      (("2"
                        (INST -1 "f" "LAMBDA(x:real):  (x-a)*(f(b)-f(a))/(b-a)"
                         "c")
                        (("2" (ASSERT)
                          (("2" (SPLIT -1)
                            (("1" (EXPAND "-" -1)
                              (("1" (REPLACE -1 1)
                                (("1" (ASSERT)
                                  (("1" (LEMMA "deriv_scal[real]")
                                    (("1"
                                      (INST -1 "(f(b)-f(a))/(b-a)"
                                       "LAMBDA(x:real): (x-a)" "c")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -1)
                                          (("1" (EXPAND "*" -1)
                                            (("1" (REPLACE -1 1 LR)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA "deriv_diff[real]")
                                                  (("1"
                                                    (INST -1
                                                     "LAMBDA(x:real): x"
                                                     "LAMBDA(x:real): a" "c")
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT -1)
                                                        (("1" (EXPAND "-" -1)
                                                          (("1"
                                                            (REPLACE -1 1 LR)
                                                            (("1"
                                                              (LEMMA
                                                               "deriv_const[real]")
                                                              (("1"
                                                                (INST -1 "a"
                                                                 "c")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "const_fun"
                                                                     -1 1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "deriv_identity[real]")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "c")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "I"
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (LEMMA
                                                           "identity_derivable[real]")
                                                          (("2" (EXPAND "I" -1)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (INST -1 "c")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (LEMMA
                                                           "const_derivable[real]")
                                                          (("3"
                                                            (INST -1 "a" "c")
                                                            (("3"
                                                              (EXPAND
                                                               "const_fun")
                                                              (("3" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2"
                                              (LEMMA "diff_derivable[real]")
                                              (("2"
                                                (INST -1 "LAMBDA (x: real): x"
                                                 "LAMBDA (x: real): a" "c")
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "-" -1)
                                                    (("2"
                                                      (LEMMA
                                                       "const_derivable[real]")
                                                      (("2" (INST -1 "a" "c")
                                                        (("2"
                                                          (EXPAND "const_fun"
                                                                  -1 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA
                                                               "identity_derivable[real]")
                                                              (("2"
                                                                (INST -1 "c")
                                                                (("2"
                                                                  (EXPAND "I"
                                                                          -1)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (HIDE -5)
                                (("2"
                                  (LEMMA
                                   "derivable_subtype_del[real,open_interval[real](a, b)]")
                                  (("2"
                                    (INST -1 "f"
                                     "restrict[real, open_interval[real](a, b), real](f)"
                                     "c")
                                    (("1" (ASSERT)
                                      (("1" (SPLIT -1)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "derivable?" -4)
                                            (("1" (INST -4 "c") NIL NIL)) NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (LEMMA "deriv_domain_open")
                                            (("2" (INST -1 "a" "b") NIL NIL))
                                            NIL))
                                          NIL)
                                         ("3" (LEMMA "Rolles_thrm_TCC2")
                                          (("3" (INST -1 "a" "b") NIL NIL))
                                          NIL)
                                         ("4" (ASSERT)
                                          (("4" (DECOMPOSE-EQUALITY 1)
                                            (("4" (EXPAND "restrict" 1)
                                              (("4" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST 1 "min(abs(c-a), abs(b-c))/2")
                                      (("1" (SKEEP)
                                        (("1" (HIDE 2 3)
                                          (("1" (HIDE -5 -4)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2 3)
                                        (("2" (HIDE -3 -4)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (HIDE 2)
                              (("3" (LEMMA "scal_derivable[real]")
                                (("3"
                                  (INST -1 "(f(b)-f(a))/(b-a)"
                                   "LAMBDA(x:real): x-a" "c")
                                  (("3" (ASSERT)
                                    (("3" (SPLIT -1)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "*" -1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (LEMMA "diff_derivable[real]")
                                          (("2"
                                            (INST -1 "LAMBDA (x: real): x"
                                             "LAMBDA (x: real):  a" "c")
                                            (("2" (ASSERT)
                                              (("2" (SPLIT -1)
                                                (("1" (EXPAND "-" -1)
                                                  (("1" (PROPAX) NIL NIL)) NIL)
                                                 ("2" (ASSERT)
                                                  (("2"
                                                    (LEMMA
                                                     "identity_derivable[real]")
                                                    (("2" (INST -1 "c")
                                                      (("2" (EXPAND "I" -1)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3"
                                                  (LEMMA
                                                   "const_derivable[real]")
                                                  (("3" (INST -1 "a" "c")
                                                    (("3"
                                                      (EXPAND "const_fun" -1)
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (ASSERT)
                    (("3" (HIDE -5)
                      (("3" (HIDE 2)
                        (("3" (HIDE -3)
                          (("3"
                            (LEMMA
                             "derivable_subtype_del[real,open_interval[real](a, b)]")
                            (("1"
                              (INST -1 "f"
                               " (restrict[real, open_interval[real](a, b), real](f))"
                               "c")
                              (("1" (ASSERT)
                                (("1" (SPLIT -1)
                                  (("1" (EXPAND "derivable?" -3)
                                    (("1" (INST -3 "c") NIL NIL)) NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "restrict" -3)
                                      (("2" (ASSERT)
                                        (("2" (LEMMA "deriv_domain_open")
                                          (("2" (INST -1 "a" "b") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (LEMMA "Rolles_thrm_TCC2")
                                    (("3" (INST -1 "a" "b") NIL NIL)) NIL)
                                   ("4" (ASSERT)
                                    (("4" (DECOMPOSE-EQUALITY 1)
                                      (("4" (EXPAND "restrict" 1)
                                        (("4" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INST 1 "min(abs(a-c),abs(c-b))/2")
                                (("1" (SKEEP)
                                  (("1" (HIDE -4)
                                    (("1" (HIDE 2) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (HIDE -3) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "not_one_element?" 1 1)
                              (("2" (SKEEP)
                                (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (LEMMA "deriv_domain_real")
                              (("3" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (EXPAND "not_one_element?" 1 1)
                    (("4" (SKEEP)
                      (("4" (INST 1 "x+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("5" (LEMMA "deriv_domain_real") (("5" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "restrict" 1 1)
              (("2" (LEMMA "diff_derivable[open_interval[real](a, b)]")
                (("2" (EXPAND "derivable?" 1)
                  (("2" (SKEEP)
                    (("2"
                      (INST -1
                       "(restrict[real, open_interval[real](a, b), real](f))"
                       "LAMBDA(s:open_interval(a,b)): (s * f(b) + f(a) * a - s * f(a) - f(b) * a) / (b - a)"
                       "x")
                      (("2" (ASSERT)
                        (("2" (SPLIT -1)
                          (("1" (EXPAND "restrict")
                            (("1" (EXPAND "-" -1) (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "restrict")
                              (("2" (EXPAND "derivable?" -1)
                                (("2" (INST -1 "x") NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (LEMMA "scal_derivable[open_interval(a, b)]")
                            (("3"
                              (INST -1 "(f(b)-f(a))/(b-a)"
                               "LAMBDA(s:open_interval(a,b)): s-a" "x")
                              (("3" (ASSERT)
                                (("3" (EXPAND "*" -1)
                                  (("3" (ASSERT)
                                    (("3"
                                      (LEMMA
                                       "diff_derivable[ open_interval[real](a, b)]")
                                      (("3"
                                        (INST -1
                                         "(LAMBDA (s: open_interval(a, b)): s)"
                                         "LAMBDA (s: open_interval(a, b)):  a"
                                         "x")
                                        (("3" (ASSERT)
                                          (("3" (SPLIT -1)
                                            (("1" (EXPAND "-" -1)
                                              (("1" (PROPAX) NIL NIL)) NIL)
                                             ("2"
                                              (LEMMA
                                               "identity_derivable[open_interval[real](a, b)]")
                                              (("2" (INST -1 "x")
                                                (("2" (EXPAND "I")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (ASSERT)
                                              (("3"
                                                (LEMMA
                                                 "const_derivable[open_interval[real](a, b)]")
                                                (("3" (INST -1 "a" "x")
                                                  (("3" (ASSERT)
                                                    (("3"
                                                      (EXPAND "const_fun" -1)
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (ASSERT)
              (("3" (HIDE 2)
                (("3" (EXPAND "restrict" 1)
                  (("3" (EXPAND "continuous?" 1)
                    (("3" (SKEEP)
                      (("3"
                        (LEMMA "diff_continuous[closed_interval[real](a, b)]")
                        (("3"
                          (INST -1 "LAMBDA (s: closed_interval[real](a, b)):
                    f(s)"
                           "LAMBDA (s: closed_interval[real](a, b)):  (s * f(b) + f(a) * a - s * f(a) - f(b) * a) / (b - a)"
                           "x0")
                          (("3" (ASSERT)
                            (("3" (SPLIT -1)
                              (("1" (EXPAND "-" -1) (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (EXPAND "restrict" -2)
                                (("2" (EXPAND "continuous?" -2)
                                  (("2" (INST -2 "x0") NIL NIL)) NIL))
                                NIL)
                               ("3" (ASSERT)
                                (("3"
                                  (LEMMA
                                   "scal_continuous[closed_interval[real](a, b)]")
                                  (("3"
                                    (INST -1
                                     "LAMBDA(s: closed_interval[real](a, b)): s-a"
                                     "(f(b)-f(a))/(b-a)" "x0")
                                    (("3" (ASSERT)
                                      (("3" (SPLIT -1)
                                        (("1" (EXPAND "*" -1)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (HIDE 2)
                                          (("2"
                                            (LEMMA
                                             "diff_continuous[closed_interval[real](a, b)]")
                                            (("2"
                                              (INST -1
                                               "LAMBDA (s: closed_interval[real](a, b)): s"
                                               "LAMBDA (s: closed_interval[real](a, b)): a"
                                               "x0")
                                              (("2" (ASSERT)
                                                (("2" (SPLIT -1)
                                                  (("1" (EXPAND "-")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2"
                                                    (LEMMA
                                                     "identity_continuous[closed_interval[real](a, b)]")
                                                    (("2" (INST -1 "x0")
                                                      (("2" (EXPAND "I" -1)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3"
                                                    (LEMMA
                                                     "const_continuous[closed_interval[real](a, b)]")
                                                    (("3" (INST -1 "a" "x0")
                                                      (("3"
                                                        (EXPAND "const_fun" -1)
                                                        (("3" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (CASE "NOT 0/(b-a)=0")
              (("1" (ASSERT) NIL NIL)
               ("2" (REPLACE -1)
                (("2" (ASSERT)
                  (("2"
                    (CASE
                        "NOT (f(a) * a - f(b) * a + (f(b) * b - f(a) * b)) = (f(b)-f(a))*(b-a)")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -1 1)
                      (("2"
                        (CASE
                            "NOT (f(b) - f(a)) * (b - a) / (b - a) = f(b)-f(a)")
                        (("1" (MULT-BY 1 "(b-a)") NIL NIL)
                         ("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Rolles_thrm| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|scal_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|)
    (|identity_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|)
    (|const_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|)
    (|closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|diff_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|) NIL
    (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives|
     |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_diff| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|scal_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|derivable_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|Rolles_thrm_TCC2| ASSUMING-TCC NIL |smooth_not_analytic| NIL)
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL) NIL NIL NIL
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) NIL
    (|const_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|identity_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops|
     |analysis|)
    NIL (|deriv_identity| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (I CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) NIL
    (|diff_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|deriv_scal| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|deriv_left_right_point_TCC1| 0
  (|deriv_left_right_point_TCC1-1| |nil| 3808426649
   ("" (SKEEP)
    (("" (EXPAND "deriv_domain?" 1)
      (("" (SKEEP)
        (("" (TYPEPRED "x")
          (("" (TYPEPRED "x1")
            (("" (INST 1 "min(e!1,x-x1)/2")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   NIL
   (|deriv_left_right_point| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.<(r, smooth_not_analytic.x))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|deriv_left_right_point_TCC2| 0
  (|deriv_left_right_point_TCC2-1| |nil| 3808426649
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?")
      (("" (SKEEP) (("" (INST 1 "x1-1") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|deriv_left_right_point| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.<(r, smooth_not_analytic.x))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|deriv_left_right_point_TCC3| 0
  (|deriv_left_right_point_TCC3-1| |nil| 3808426649
   ("" (SKEEP)
    (("" (HIDE -1)
      (("" (EXPAND "deriv_domain?" 1)
        (("" (SKEEP)
          (("" (TYPEPRED "x1")
            (("" (INST 1 "min(e!1,x1-x)/2")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|deriv_left_right_point| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, smooth_not_analytic.x))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|deriv_left_right_point_TCC4| 0
  (|deriv_left_right_point_TCC4-1| |nil| 3808426649
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?" 1)
      (("" (SKEEP) (("" (INST 1 "x1+1") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|deriv_left_right_point| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, smooth_not_analytic.x))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|deriv_left_right_point| 0
  (|deriv_left_right_point-1| |nil| 3808427006
   ("" (SKEEP*)
    ((""
      (WITH-TCCS
       (NAME "lm" "lim(deriv[(LAMBDA (r: real): r < x)]
                      (restrict[real, (LAMBDA (r: real): r < x), real](f)),
                  x)"))
      (("" (REPLACE -1)
        (("" (ASSERT)
          (("" (EXPAND "derivable?" 1)
            (("" (EXPAND "convergent?" 1)
              (("" (INST 1 "lm")
                (("" (EXPAND "convergence" 1)
                  ((""
                    (WITH-TCCS (LEMMA "lim_fun_lemma[(LAMBDA(r:real): r>x)]"))
                    (("" (INST?)
                      (("1" (REPLACE -7 -1 RL)
                        (("1" (ASSERT)
                          (("1"
                            (LEMMA "lim_fun_lemma[(LAMBDA (r: real): r < x)]")
                            (("1" (INST?)
                              (("1" (REPLACE -3 -1)
                                (("1" (EXPAND "convergence" -1)
                                  (("1" (EXPAND "convergence" -2)
                                    (("1" (EXPAND "convergence" -1)
                                      (("1" (EXPAND "convergence" -2)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "convergence" 1)
                                            (("1" (ASSERT)
                                              (("1" (SPLIT 1)
                                                (("1" (EXPAND "adh" 1)
                                                  (("1" (SKEEP)
                                                    (("1" (INST 1 "e!1/2")
                                                      (("1" (GRIND) NIL NIL)
                                                       ("2" (EXPAND "A" 1)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKEEP)
                                                  (("2" (INST -2 "epsilon")
                                                    (("2" (INST -4 "epsilon")
                                                      (("2" (SKEEP*)
                                                        (("2"
                                                          (INST 1
                                                           "min(delta,delta!1)")
                                                          (("2" (SKEEP)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND "NQ" 1)
                                                                (("2"
                                                                  (LEMMA
                                                                   "mean_value_gen")
                                                                  (("2"
                                                                    (CASE
                                                                        "x2=0")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (CASE
                                                                            "x2>0")
                                                                        (("1"
                                                                          (HIDE
                                                                           -3)
                                                                          (("1"
                                                                            (INST
                                                                             -2
                                                                             "f"
                                                                             "x"
                                                                             "x2+x")
                                                                            (("1"
                                                                              (SPLIT
                                                                               -2)
                                                                              (("1"
                                                                                (SKEEP)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -3
                                                                                   2
                                                                                   RL)
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "not (x2 + x) * deriv(f, c) - x * deriv(f, c) = x2*deriv(f,c)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       2)
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "c")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -11
                                                                                           "c")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               -11)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "restrict")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "deriv"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (CASE
                                                                                                          "deriv(LAMBDA (s: (LAMBDA (r: real): r > x)): f(s), c) = deriv(f, c)")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "not x2 * deriv(f, c) / x2  = deriv(f,c)")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (LEMMA
                                                                                                           "deriv_subtype_del[real,(LAMBDA (r: real): r > x)]")
                                                                                                          (("2"
                                                                                                            (HIDE
                                                                                                             -16
                                                                                                             -17
                                                                                                             -18)
                                                                                                            (("2"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "LAMBDA (s: (LAMBDA (r: real): r > x)): f(s)"
                                                                                                               "c")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (SPLIT
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "deriv_domain?"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (SKEEP)
                                                                                                                      (("1"
                                                                                                                        (INST
                                                                                                                         1
                                                                                                                         "e!1/2")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (EXPAND
                                                                                                                     "not_one_element?"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (SKEEP)
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         1
                                                                                                                         "x1+1")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("3"
                                                                                                                    (FLATTEN)
                                                                                                                    (("3"
                                                                                                                      (EXPAND
                                                                                                                       "derivable?"
                                                                                                                       -14)
                                                                                                                      (("3"
                                                                                                                        (INST
                                                                                                                         -14
                                                                                                                         "c")
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (EXPAND
                                                                                                                 "extend"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   1
                                                                                                                   "(c-x)/2")
                                                                                                                  (("2"
                                                                                                                    (SKEEP)
                                                                                                                    (("2"
                                                                                                                      (ASSERT)
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "fullset"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (EXPAND
                                                                                                         "not_one_element?"
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (SKEEP)
                                                                                                          (("3"
                                                                                                            (INST
                                                                                                             1
                                                                                                             "x1+1")
                                                                                                            (("3"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("4"
                                                                                                        (EXPAND
                                                                                                         "deriv_domain?"
                                                                                                         1)
                                                                                                        (("4"
                                                                                                          (SKEEP)
                                                                                                          (("4"
                                                                                                            (INST
                                                                                                             1
                                                                                                             "e!1/2")
                                                                                                            (("4"
                                                                                                              (ASSERT)
                                                                                                              (("4"
                                                                                                                (GRIND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (EXPAND
                                                                                                 "fullset"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (ASSERT)
                                                                                                (("3"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (EXPAND
                                                                                 "restrict"
                                                                                 1)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "derivable_subtype[(LAMBDA (r: real): r > x),open_interval[real](x, x2 + x)]")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "f")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "restrict"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -)
                                                                                          (("1"
                                                                                            (SPLIT
                                                                                             1)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "deriv_domain?"
                                                                                               1)
                                                                                              (("1"
                                                                                                (SKEEP)
                                                                                                (("1"
                                                                                                  (TYPEPRED
                                                                                                   "x1")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     1
                                                                                                     "min(e!1,abs(x2+x-x1))/2")
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (SPLIT
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (TYPEPRED
                                                                                               "x2"
                                                                                               "x")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "A"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "open_noe")
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "x"
                                                                                                     "x2+x")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "not_one_element?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (SKEEP)
                                                                                      (("2"
                                                                                        (INST
                                                                                         1
                                                                                         "x1+1")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("3"
                                                                                    (EXPAND
                                                                                     "deriv_domain?"
                                                                                     1)
                                                                                    (("3"
                                                                                      (SKEEP)
                                                                                      (("3"
                                                                                        (INST
                                                                                         1
                                                                                         "e!1/2")
                                                                                        (("3"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (EXPAND
                                                                                 "restrict"
                                                                                 1)
                                                                                (("3"
                                                                                  (LEMMA
                                                                                   "closed_cont")
                                                                                  (("3"
                                                                                    (HIDE
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -13
                                                                                     -14)
                                                                                    (("3"
                                                                                      (INST
                                                                                       -1
                                                                                       "x"
                                                                                       "x2+x"
                                                                                       "f")
                                                                                      (("3"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (CASE
                                                                                "x2<0")
                                                                            (("1"
                                                                              (INST
                                                                               -2
                                                                               "f"
                                                                               "x2+x"
                                                                               "x")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (SKEEP)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -8
                                                                                       "c")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -8)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "deriv"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "NOT -1 * (deriv(f, c) * x2) - deriv(f, c) * x + x * deriv(f, c) = -deriv(f,c)*x2")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (REPLACE
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "abs_diff_commute")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "f(x2+x)"
                                                                                                       "f(x)")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (REPLACE
                                                                                                           -5
                                                                                                           -1
                                                                                                           RL)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "restrict"
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (CASE
                                                                                                                  "(deriv(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s), c)) = deriv(f, c)")
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (HIDE
                                                                                                                   -13
                                                                                                                   -14
                                                                                                                   -15
                                                                                                                   -16
                                                                                                                   -17
                                                                                                                   -18)
                                                                                                                  (("1"
                                                                                                                    (HIDE
                                                                                                                     -12)
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -10
                                                                                                                       -11)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         -10)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "abs"
                                                                                                                           -2
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (LIFT-IF
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (SPLIT
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (FLATTEN)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "abs"
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (LIFT-IF
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (SPLIT
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          NIL
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("2"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("2"
                                                                                                                                            (CASE
                                                                                                                                                "(f(x2 + x) - f(x)) = deriv(f, c) * x2")
                                                                                                                                            (("1"
                                                                                                                                              (REPLACE
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (CASE
                                                                                                                                                    "not deriv(f, c) * x2 / x2 = deriv(f,c)")
                                                                                                                                                (("1"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL)
                                                                                                                                                 ("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  (("2"
                                                                                                                                                    (REPLACE
                                                                                                                                                     -1
                                                                                                                                                     4)
                                                                                                                                                    (("2"
                                                                                                                                                      (PROPAX)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (ASSERT)
                                                                                                                                (("2"
                                                                                                                                  (FLATTEN)
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("2"
                                                                                                                                      (REPLACE
                                                                                                                                       -1
                                                                                                                                       4)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "abs"
                                                                                                                                         4
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (LIFT-IF
                                                                                                                                           4)
                                                                                                                                          (("2"
                                                                                                                                            (SPLIT
                                                                                                                                             4)
                                                                                                                                            (("1"
                                                                                                                                              (FLATTEN)
                                                                                                                                              (("1"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("1"
                                                                                                                                                  (CASE
                                                                                                                                                      "-(-deriv(f, c) * x2) / x2  = deriv(f,c)")
                                                                                                                                                  (("1"
                                                                                                                                                    (REPLACE
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (PROPAX)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL)
                                                                                                                                                   ("2"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (FLATTEN)
                                                                                                                                              (("2"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "abs "
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (CASE
                                                                                                                                                        "f(x)-f(x2+x)=0")
                                                                                                                                                    (("1"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (CASE
                                                                                                                                                            "NOT f(x)= f(x2+x)")
                                                                                                                                                        (("1"
                                                                                                                                                          (ASSERT)
                                                                                                                                                          NIL
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (REPLACE
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            (("2"
                                                                                                                                                              (REPLACE
                                                                                                                                                               -3
                                                                                                                                                               2
                                                                                                                                                               RL)
                                                                                                                                                              (("2"
                                                                                                                                                                (TYPEPRED
                                                                                                                                                                 "x2")
                                                                                                                                                                (("2"
                                                                                                                                                                  (DIV-BY
                                                                                                                                                                   -5
                                                                                                                                                                   "x2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (LEMMA
                                                                                                                 "deriv_subtype_del[real,(LAMBDA (r: real): r < x)]")
                                                                                                                (("2"
                                                                                                                  (HIDE
                                                                                                                   -13)
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     -15
                                                                                                                     -16)
                                                                                                                    (("2"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))"
                                                                                                                       "c")
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (SPLIT
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "deriv_domain?"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (SKEEP)
                                                                                                                              (("1"
                                                                                                                                (INST
                                                                                                                                 1
                                                                                                                                 "-e!1/2")
                                                                                                                                (("1"
                                                                                                                                  (GRIND)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (EXPAND
                                                                                                                             "not_one_element?"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (SKEEP)
                                                                                                                              (("2"
                                                                                                                                (INST
                                                                                                                                 1
                                                                                                                                 "x1-1")
                                                                                                                                (("2"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("3"
                                                                                                                            (FLATTEN)
                                                                                                                            (("3"
                                                                                                                              (ASSERT)
                                                                                                                              (("3"
                                                                                                                                (EXPAND
                                                                                                                                 "derivable?"
                                                                                                                                 -12)
                                                                                                                                (("3"
                                                                                                                                  (INST
                                                                                                                                   -12
                                                                                                                                   "c")
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (ASSERT)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "extend"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (INST
                                                                                                                             1
                                                                                                                             "(x-c)/2")
                                                                                                                            (("2"
                                                                                                                              (SKEEP)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "fullset"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (PROPAX)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("3"
                                                                                                                (EXPAND
                                                                                                                 "not_one_element?"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (SKEEP)
                                                                                                                  (("3"
                                                                                                                    (INST
                                                                                                                     1
                                                                                                                     "x1-1")
                                                                                                                    (("3"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("4"
                                                                                                                (EXPAND
                                                                                                                 "deriv_domain?"
                                                                                                                 1)
                                                                                                                (("4"
                                                                                                                  (SKEEP)
                                                                                                                  (("4"
                                                                                                                    (INST
                                                                                                                     1
                                                                                                                     "-e!1/2")
                                                                                                                    (("4"
                                                                                                                      (ASSERT)
                                                                                                                      (("4"
                                                                                                                        (GRIND)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (EXPAND
                                                                                             "fullset"
                                                                                             1)
                                                                                            (("2"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (ASSERT)
                                                                                            (("3"
                                                                                              (GRIND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "restrict"
                                                                                     1)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "derivable_subtype[(LAMBDA (r: real): r < x), open_interval[real](x2 + x, x)]")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "restrict"
                                                                                         -)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               1)
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "deriv_domain_open")
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "x2+x"
                                                                                                   "x")
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "open_noe")
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "x2+x"
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (EXPAND
                                                                                         "not_one_element?"
                                                                                         1)
                                                                                        (("2"
                                                                                          (SKEEP)
                                                                                          (("2"
                                                                                            (INST
                                                                                             1
                                                                                             "x1-1")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (EXPAND
                                                                                         "deriv_domain?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (SKEEP)
                                                                                          (("3"
                                                                                            (INST
                                                                                             1
                                                                                             "-e!1/2")
                                                                                            (("3"
                                                                                              (ASSERT)
                                                                                              (("3"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("3"
                                                                                    (LEMMA
                                                                                     "closed_cont")
                                                                                    (("3"
                                                                                      (INST
                                                                                       -1
                                                                                       "x2+x"
                                                                                       "x"
                                                                                       "f")
                                                                                      (("3"
                                                                                        (ASSERT)
                                                                                        (("3"
                                                                                          (EXPAND
                                                                                           "restrict"
                                                                                           1)
                                                                                          (("3"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "not_one_element?" 1)
                        (("2" (SKEEP)
                          (("2" (INST 1 "x1+1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "deriv_domain?" 1)
                        (("3" (SKEEP)
                          (("3" (INST 1 "e!1/2") (("3" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|lim| CONST-DECL "{l: real | convergence(f, x0, l)}" |lim_of_functions|
     |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|mean_value_gen| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|abs_diff_commute| FORMULA-DECL NIL |abs_lems| |reals|)
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|) NIL
    (|deriv_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|extend| CONST-DECL "R" |extend| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|open_noe| FORMULA-DECL NIL |smooth_not_analytic| NIL) NIL NIL
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|closed_cont| FORMULA-DECL NIL |smooth_not_analytic| NIL) NIL
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lim_fun_lemma| FORMULA-DECL NIL |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|deriv_left_right_point_deriv_TCC1| 0
  (|deriv_left_right_point_deriv_TCC1-1| |nil| 3812994887
   ("" (SKEEP)
    (("" (LEMMA "deriv_left_right_point")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|deriv_left_right_point| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|deriv_left_right_point_deriv| SUBTYPE "smooth_not_analytic.x"
    "{x | derivatives_def[real].derivable?(smooth_not_analytic.f, x)}")))
 (|deriv_left_right_point_deriv| 0
  (|deriv_left_right_point_deriv-1| |nil| 3812995322
   ("" (SKEEP)
    (("" (LEMMA "deriv_def[real]")
      (("" (INST?)
        (("" (ASSERT)
          (("" (HIDE 2)
            ((""
              (WITH-TCCS
               (NAME "lm" "lim(deriv[(LAMBDA (r: real): r < x)]
                              (restrict[real, (LAMBDA (r: real): r < x), real](f)),
                          x)"))
              (("" (REPLACE -1)
                (("" (ASSERT)
                  (("" (EXPAND "convergence" 1)
                    ((""
                      (WITH-TCCS
                       (LEMMA "lim_fun_lemma[(LAMBDA(r:real): r>x)]"))
                      (("" (INST?)
                        (("1" (REPLACE -7 -1 RL)
                          (("1" (ASSERT)
                            (("1"
                              (LEMMA
                               "lim_fun_lemma[(LAMBDA (r: real): r < x)]")
                              (("1" (INST?)
                                (("1" (REPLACE -3 -1)
                                  (("1" (EXPAND "convergence" -1)
                                    (("1" (EXPAND "convergence" -2)
                                      (("1" (EXPAND "convergence" -1)
                                        (("1" (EXPAND "convergence" -2)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "convergence" 1)
                                              (("1" (ASSERT)
                                                (("1" (SPLIT 1)
                                                  (("1" (EXPAND "adh" 1)
                                                    (("1" (SKEEP)
                                                      (("1" (INST 1 "e!1/2")
                                                        (("1" (GRIND) NIL NIL)
                                                         ("2" (EXPAND "A" 1)
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (SKEEP)
                                                    (("2" (INST -2 "epsilon")
                                                      (("2" (INST -4 "epsilon")
                                                        (("2" (SKEEP*)
                                                          (("2"
                                                            (INST 1
                                                             "min(delta,delta!1)")
                                                            (("2" (SKEEP)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND "NQ"
                                                                          1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "mean_value_gen")
                                                                    (("2"
                                                                      (CASE
                                                                          "x2=0")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (CASE
                                                                              "x2>0")
                                                                          (("1"
                                                                            (HIDE
                                                                             -3)
                                                                            (("1"
                                                                              (INST
                                                                               -2
                                                                               "f"
                                                                               "x"
                                                                               "x2+x")
                                                                              (("1"
                                                                                (SPLIT
                                                                                 -2)
                                                                                (("1"
                                                                                  (SKEEP)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -3
                                                                                     2
                                                                                     RL)
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "not (x2 + x) * deriv(f, c) - x * deriv(f, c) = x2*deriv(f,c)")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (TYPEPRED
                                                                                           "c")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -11
                                                                                             "c")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -11)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "restrict")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "deriv"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (CASE
                                                                                                            "deriv(LAMBDA (s: (LAMBDA (r: real): r > x)): f(s), c) = deriv(f, c)")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (CASE
                                                                                                                  "not x2 * deriv(f, c) / x2  = deriv(f,c)")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (PROPAX)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (LEMMA
                                                                                                             "deriv_subtype_del[real,(LAMBDA (r: real): r > x)]")
                                                                                                            (("2"
                                                                                                              (HIDE
                                                                                                               -16
                                                                                                               -17
                                                                                                               -18)
                                                                                                              (("2"
                                                                                                                (INST
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "LAMBDA (s: (LAMBDA (r: real): r > x)): f(s)"
                                                                                                                 "c")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (SPLIT
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "deriv_domain?"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (SKEEP)
                                                                                                                        (("1"
                                                                                                                          (INST
                                                                                                                           1
                                                                                                                           "e!1/2")
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            (("1"
                                                                                                                              (GRIND)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (EXPAND
                                                                                                                       "not_one_element?"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (SKEEP)
                                                                                                                        (("2"
                                                                                                                          (INST
                                                                                                                           1
                                                                                                                           "x1+1")
                                                                                                                          (("2"
                                                                                                                            (ASSERT)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("3"
                                                                                                                      (FLATTEN)
                                                                                                                      (("3"
                                                                                                                        (EXPAND
                                                                                                                         "derivable?"
                                                                                                                         -14)
                                                                                                                        (("3"
                                                                                                                          (INST
                                                                                                                           -14
                                                                                                                           "c")
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (EXPAND
                                                                                                                   "extend"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     1
                                                                                                                     "(c-x)/2")
                                                                                                                    (("2"
                                                                                                                      (SKEEP)
                                                                                                                      (("2"
                                                                                                                        (ASSERT)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "fullset"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("3"
                                                                                                          (EXPAND
                                                                                                           "not_one_element?"
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (SKEEP)
                                                                                                            (("3"
                                                                                                              (INST
                                                                                                               1
                                                                                                               "x1+1")
                                                                                                              (("3"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("4"
                                                                                                          (EXPAND
                                                                                                           "deriv_domain?"
                                                                                                           1)
                                                                                                          (("4"
                                                                                                            (SKEEP)
                                                                                                            (("4"
                                                                                                              (INST
                                                                                                               1
                                                                                                               "e!1/2")
                                                                                                              (("4"
                                                                                                                (ASSERT)
                                                                                                                (("4"
                                                                                                                  (GRIND)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (EXPAND
                                                                                                   "fullset"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("3"
                                                                                                  (ASSERT)
                                                                                                  (("3"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (EXPAND
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "derivable_subtype[(LAMBDA (r: real): r > x),open_interval[real](x, x2 + x)]")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "f")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "restrict"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               1)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "deriv_domain?"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (SKEEP)
                                                                                                  (("1"
                                                                                                    (TYPEPRED
                                                                                                     "x1")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "min(e!1,abs(x2+x-x1))/2")
                                                                                                      (("1"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (SPLIT
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("3"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (TYPEPRED
                                                                                                 "x2"
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "A"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "open_noe")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "x"
                                                                                                       "x2+x")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (EXPAND
                                                                                       "not_one_element?"
                                                                                       1)
                                                                                      (("2"
                                                                                        (SKEEP)
                                                                                        (("2"
                                                                                          (INST
                                                                                           1
                                                                                           "x1+1")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (EXPAND
                                                                                       "deriv_domain?"
                                                                                       1)
                                                                                      (("3"
                                                                                        (SKEEP)
                                                                                        (("3"
                                                                                          (INST
                                                                                           1
                                                                                           "e!1/2")
                                                                                          (("3"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (EXPAND
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("3"
                                                                                    (LEMMA
                                                                                     "closed_cont")
                                                                                    (("3"
                                                                                      (HIDE
                                                                                       -8
                                                                                       -9
                                                                                       -10
                                                                                       -11
                                                                                       -12
                                                                                       -13
                                                                                       -14)
                                                                                      (("3"
                                                                                        (INST
                                                                                         -1
                                                                                         "x"
                                                                                         "x2+x"
                                                                                         "f")
                                                                                        (("3"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (CASE
                                                                                  "x2<0")
                                                                              (("1"
                                                                                (INST
                                                                                 -2
                                                                                 "f"
                                                                                 "x2+x"
                                                                                 "x")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -2)
                                                                                    (("1"
                                                                                      (SKEEP)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -8
                                                                                         "c")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (SPLIT
                                                                                             -8)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "deriv"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "NOT -1 * (deriv(f, c) * x2) - deriv(f, c) * x + x * deriv(f, c) = -deriv(f,c)*x2")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (REPLACE
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "abs_diff_commute")
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "f(x2+x)"
                                                                                                         "f(x)")
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (REPLACE
                                                                                                             -5
                                                                                                             -1
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "restrict"
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (CASE
                                                                                                                    "(deriv(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s), c)) = deriv(f, c)")
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (HIDE
                                                                                                                     -13
                                                                                                                     -14
                                                                                                                     -15
                                                                                                                     -16
                                                                                                                     -17
                                                                                                                     -18)
                                                                                                                    (("1"
                                                                                                                      (HIDE
                                                                                                                       -12)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         -10
                                                                                                                         -11)
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "abs"
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (LIFT-IF
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (SPLIT
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (FLATTEN)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "abs"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (LIFT-IF
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (SPLIT
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (FLATTEN)
                                                                                                                                          (("1"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL)
                                                                                                                                         ("2"
                                                                                                                                          (FLATTEN)
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (CASE
                                                                                                                                                  "(f(x2 + x) - f(x)) = deriv(f, c) * x2")
                                                                                                                                              (("1"
                                                                                                                                                (REPLACE
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (CASE
                                                                                                                                                      "not deriv(f, c) * x2 / x2 = deriv(f,c)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL)
                                                                                                                                                   ("2"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("2"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -1
                                                                                                                                                       4)
                                                                                                                                                      (("2"
                                                                                                                                                        (PROPAX)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (ASSERT)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL)
                                                                                                                                 ("2"
                                                                                                                                  (ASSERT)
                                                                                                                                  (("2"
                                                                                                                                    (FLATTEN)
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      (("2"
                                                                                                                                        (REPLACE
                                                                                                                                         -1
                                                                                                                                         4)
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "abs"
                                                                                                                                           4
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (LIFT-IF
                                                                                                                                             4)
                                                                                                                                            (("2"
                                                                                                                                              (SPLIT
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  (("1"
                                                                                                                                                    (CASE
                                                                                                                                                        "-(-deriv(f, c) * x2) / x2  = deriv(f,c)")
                                                                                                                                                    (("1"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (PROPAX)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "abs "
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (CASE
                                                                                                                                                          "f(x)-f(x2+x)=0")
                                                                                                                                                      (("1"
                                                                                                                                                        (REPLACE
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (CASE
                                                                                                                                                              "NOT f(x)= f(x2+x)")
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            NIL
                                                                                                                                                            NIL)
                                                                                                                                                           ("2"
                                                                                                                                                            (REPLACE
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              (("2"
                                                                                                                                                                (REPLACE
                                                                                                                                                                 -3
                                                                                                                                                                 2
                                                                                                                                                                 RL)
                                                                                                                                                                (("2"
                                                                                                                                                                  (TYPEPRED
                                                                                                                                                                   "x2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (DIV-BY
                                                                                                                                                                     -5
                                                                                                                                                                     "x2")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (ASSERT)
                                                                                                                                                                      NIL
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL)
                                                                                                                                                       ("2"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (LEMMA
                                                                                                                   "deriv_subtype_del[real,(LAMBDA (r: real): r < x)]")
                                                                                                                  (("2"
                                                                                                                    (HIDE
                                                                                                                     -13)
                                                                                                                    (("2"
                                                                                                                      (HIDE
                                                                                                                       -15
                                                                                                                       -16)
                                                                                                                      (("2"
                                                                                                                        (INST
                                                                                                                         -1
                                                                                                                         "f"
                                                                                                                         "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))"
                                                                                                                         "c")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (SPLIT
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "deriv_domain?"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (SKEEP)
                                                                                                                                (("1"
                                                                                                                                  (INST
                                                                                                                                   1
                                                                                                                                   "-e!1/2")
                                                                                                                                  (("1"
                                                                                                                                    (GRIND)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (EXPAND
                                                                                                                               "not_one_element?"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (SKEEP)
                                                                                                                                (("2"
                                                                                                                                  (INST
                                                                                                                                   1
                                                                                                                                   "x1-1")
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("3"
                                                                                                                              (FLATTEN)
                                                                                                                              (("3"
                                                                                                                                (ASSERT)
                                                                                                                                (("3"
                                                                                                                                  (EXPAND
                                                                                                                                   "derivable?"
                                                                                                                                   -12)
                                                                                                                                  (("3"
                                                                                                                                    (INST
                                                                                                                                     -12
                                                                                                                                     "c")
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "extend"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (INST
                                                                                                                               1
                                                                                                                               "(x-c)/2")
                                                                                                                              (("2"
                                                                                                                                (SKEEP)
                                                                                                                                (("2"
                                                                                                                                  (ASSERT)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "fullset"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (PROPAX)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("3"
                                                                                                                  (EXPAND
                                                                                                                   "not_one_element?"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (SKEEP)
                                                                                                                    (("3"
                                                                                                                      (INST
                                                                                                                       1
                                                                                                                       "x1-1")
                                                                                                                      (("3"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("4"
                                                                                                                  (EXPAND
                                                                                                                   "deriv_domain?"
                                                                                                                   1)
                                                                                                                  (("4"
                                                                                                                    (SKEEP)
                                                                                                                    (("4"
                                                                                                                      (INST
                                                                                                                       1
                                                                                                                       "-e!1/2")
                                                                                                                      (("4"
                                                                                                                        (ASSERT)
                                                                                                                        (("4"
                                                                                                                          (GRIND)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (EXPAND
                                                                                               "fullset"
                                                                                               1)
                                                                                              (("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("3"
                                                                                              (ASSERT)
                                                                                              (("3"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (EXPAND
                                                                                       "restrict"
                                                                                       1)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "derivable_subtype[(LAMBDA (r: real): r < x), open_interval[real](x2 + x, x)]")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "restrict"
                                                                                           -)
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "(LAMBDA (s: (LAMBDA (r: real): r < x)): f(s))")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "deriv_domain_open")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "x2+x"
                                                                                                     "x")
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "open_noe")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "x2+x"
                                                                                                       "x")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "not_one_element?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (SKEEP)
                                                                                            (("2"
                                                                                              (INST
                                                                                               1
                                                                                               "x1-1")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (EXPAND
                                                                                           "deriv_domain?"
                                                                                           1)
                                                                                          (("3"
                                                                                            (SKEEP)
                                                                                            (("3"
                                                                                              (INST
                                                                                               1
                                                                                               "-e!1/2")
                                                                                              (("3"
                                                                                                (ASSERT)
                                                                                                (("3"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (LEMMA
                                                                                       "closed_cont")
                                                                                      (("3"
                                                                                        (INST
                                                                                         -1
                                                                                         "x2+x"
                                                                                         "x"
                                                                                         "f")
                                                                                        (("3"
                                                                                          (ASSERT)
                                                                                          (("3"
                                                                                            (EXPAND
                                                                                             "restrict"
                                                                                             1)
                                                                                            (("3"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "not_one_element?" 1)
                          (("2" (SKEEP)
                            (("2" (INST 1 "x1+1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "deriv_domain?" 1)
                          (("3" (SKEEP)
                            (("3" (INST 1 "e!1/2") (("3" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|deriv_def| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|lim_fun_lemma| FORMULA-DECL NIL |lim_of_functions| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) NIL
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (A CONST-DECL "setof[nzreal]" |derivatives_def| |analysis|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|closed_cont| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    NIL NIL (|open_noe| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|open_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|)
    (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|deriv_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|) NIL
    (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (|abs_diff_commute| FORMULA-DECL NIL |abs_lems| |reals|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|mean_value_gen| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|lim| CONST-DECL "{l: real | convergence(f, x0, l)}" |lim_of_functions|
     |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|sm_TCC1| 0
  (|sm_TCC1-1| |nil| 3808442270 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL (|sm| SUBTYPE "smooth_not_analytic.x" "nznum")))
 (|sm_derivable_init_le0_TCC1| 0
  (|sm_derivable_init_le0_TCC1-1| |nil| 3812202572
   ("" (SKEEP)
    (("" (EXPAND "deriv_domain?" 1)
      (("" (SKEEP) (("" (INST 1 "-e!1/2") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|sm_derivable_init_le0| ASSUMING
    "analysis@nth_derivatives[(LAMBDA (r: reals.real): reals.<(r, 0))].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|sm_derivable_init_le0_TCC2| 0
  (|sm_derivable_init_le0_TCC2-1| |nil| 3812202572
   ("" (EXPAND "not_one_element?" 1)
    (("" (SKEEP)
      (("" (ASSERT) (("" (INST 1 "x-1") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   NIL
   (|sm_derivable_init_le0| ASSUMING
    "analysis@nth_derivatives[(LAMBDA (r: reals.real): reals.<(r, 0))].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|sm_derivable_init_le0| 0
  (|sm_derivable_init_le0-1| |nil| 3812203502
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (DECOMPOSE-EQUALITY 1)
      (("2" (EXPAND "nderiv" 1)
        (("2" (EXPAND "restrict" 1)
          (("2" (ASSERT) (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP*)
      (("3" (LEMMA "nderiv_derivable_eqv[(LAMBDA (r: real): r < 0)]")
        (("3" (INST?)
          (("3" (ASSERT)
            (("3" (EXPAND "restrict")
              (("3" (ASSERT)
                (("3" (FLATTEN)
                  (("3" (SPLIT -2)
                    (("1"
                      (CASE "NOT (derivable_n_times?[(LAMBDA (r: real): r < 0)]
           (LAMBDA (s: (LAMBDA (r: real): r < 0)): sm(s), 1 + j))")
                      (("1" (PROPAX) NIL NIL)
                       ("2" (ASSERT)
                        (("2"
                          (LEMMA
                           " nderiv_derivable_aux[(LAMBDA (r: real): r < 0)]")
                          (("2" (INST -1 "sm" "j")
                            (("2" (ASSERT)
                              (("2" (EXPAND "restrict")
                                (("2" (ASSERT)
                                  (("2" (REPLACE -1)
                                    (("2" (REPLACE -6)
                                      (("2"
                                        (LEMMA
                                         "deriv_const[(LAMBDA (r: real): r < 0)]")
                                        (("1" (INST -1 "0" "_")
                                          (("1" (DECOMPOSE-EQUALITY 1)
                                            (("1" (INST -1 "x!1")
                                              (("1" (EXPAND "const_fun" -1)
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "deriv" 1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "not_one_element?")
                                              (("2" (SKEEP)
                                                (("2" (INST 1 "x-1")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (EXPAND " deriv_domain?" 1 1)
                                              (("3" (SKEEP*)
                                                (("3" (INST 1 "-e!1/2")
                                                  (("3" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "not_one_element?" 1)
                                          (("2" (SKEEP)
                                            (("2" (INST 1 "x-1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (EXPAND " deriv_domain?" 1 1)
                                          (("3" (SKEEP*)
                                            (("3" (INST 1 "-e!1/2")
                                              (("3" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "derivable_const[(LAMBDA (r: real): r < 0)]")
                      (("1" (INST -1 "0")
                        (("1" (EXPAND "const_fun" -1)
                          (("1" (REPLACE -4 1) (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "not_one_element?")
                        (("2" (SKEEP)
                          (("2" (INST 1 "x-1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND " deriv_domain?" 1 1)
                        (("3" (SKEEP*)
                          (("3" (INST 1 "-e!1/2") (("3" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|nderiv_derivable_aux| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nderiv_derivable_eqv| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|)
    (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|chop_poly| 0
  (|chop_poly-1| |nil| 3812889431
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("" (EXPAND "polynomial")
        (("" (LEMMA "sigma_split")
          ((""
            (INST -1 " LAMBDA (i: nat):
               chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
             "m" "0" "n")
            (("" (ASSERT)
              (("" (REPLACE -1 1)
                (("" (LEMMA "sigma_const_restrict_eq_0[nat]")
                  ((""
                    (INST -1 "LAMBDA (i: nat):
                chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                     "m" "1+n" "1")
                    (("" (ASSERT)
                      ((""
                        (CASE "NOT 1 *
        sigma(1 + n, m,
              LAMBDA (i: nat):
                chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)) =
        sigma(1 + n, m,
              LAMBDA (i: nat):
                chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF))")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REPLACE -1)
                          (("2" (SPLIT -2)
                            (("1" (REPLACE -1)
                              (("1" (ASSERT)
                                (("1" (LEMMA "sigma_eq[nat]")
                                  (("1"
                                    (INST -1
                                     "  LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                                     " LAMBDA (i: nat):
               chop(a, n)(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                                     "n" "0")
                                    (("1" (SPLIT -1)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (ASSERT)
                                        (("2" (HIDE 2)
                                          (("2" (SKEEP)
                                            (("2" (EXPAND "chop" 1)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (SKEEP)
                                (("2" (EXPAND "chop" 1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|chop| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_const_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|chop_poly_add| 0
  (|chop_poly_add-1| |nil| 3812892080
   ("" (SKEEP)
    (("" (LEMMA "chop_poly")
      (("" (INST -1 "a" "n1" "max(n1,n2)")
        (("" (LEMMA "chop_poly")
          (("" (INST -1 "b" "n2" "max(n1,n2)")
            (("" (ASSERT)
              (("" (REPLACE -1)
                (("" (REPLACE -2)
                  (("" (LEMMA "sum_polynomial_eq_degree")
                    (("" (INST?) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|chop_poly| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|chop| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|sum_polynomial_eq_degree| FORMULA-DECL NIL |polynomials| |reals|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL))
   SHOSTAK))
 (|poly_restrict_derivable_TCC1| 0
  (|poly_restrict_derivable_TCC1-1| |nil| 3812722029
   ("" (EXPAND "deriv_domain?" 1)
    (("" (SKEEP) (("" (INST 1 "e!1/2") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|poly_restrict_derivable| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, 0))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|poly_restrict_derivable_TCC2| 0
  (|poly_restrict_derivable_TCC2-1| |nil| 3812722029
   ("" (EXPAND "not_one_element?" 1)
    (("" (SKEEP) (("" (INST 1 "x+1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   NIL
   (|poly_restrict_derivable| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>(r, 0))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|poly_restrict_derivable| 0
  (|poly_restrict_derivable-1| |nil| 3812722699
   ("" (SKEEP*)
    (("" (EXPAND "restrict" 1)
      (("" (LEMMA "derivable_polynomial")
        (("" (INST?)
          (("" (LEMMA "derivable_subtype[real,(LAMBDA (r: real): r > 0)]")
            (("" (INST?)
              (("" (ASSERT)
                (("" (EXPAND "restrict")
                  (("" (SPLIT 1)
                    (("1" (EXPAND "deriv_domain?" 1)
                      (("1" (SKEEP)
                        (("1" (INST 1 "e!1/2")
                          (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "not_one_element?" 1)
                      (("2" (SKEEP)
                        (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|restrict| CONST-DECL "R" |restrict| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|derivable_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|deriv_p_old_def_TCC1| 0
  (|deriv_p_old_def_TCC1-1| |nil| 3812894589 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|deriv_p_old_def| SUBTYPE "(number_fields.-)(smooth_not_analytic.n, 1)"
    "nat")))
 (|deriv_p_old_def_TCC2| 0
  (|deriv_p_old_def_TCC2-1| |nil| 3812894589 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|deriv_p_old_def| SUBTYPE
    "real_defs.max((number_fields.-)(smooth_not_analytic.n, 1), 0)" "nat")))
 (|deriv_p_old_def| 0
  (|deriv_p_old_def-1| |nil| 3812894982
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("1" (CASE "n=0")
        (("1" (ASSERT)
          (("1" (EXPAND "max" 1)
            (("1" (EXPAND "deriv_p" 1)
              (("1" (EXPAND "polynomial") (("1" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "deriv_p" 2)
            (("2" (EXPAND "max" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|poly_restrict_deriv_TCC1| 0
  (|poly_restrict_deriv_TCC1-1| |nil| 3812722029
   ("" (LEMMA "poly_restrict_derivable") (("" (PROPAX) NIL NIL)) NIL)
   ((|poly_restrict_derivable| FORMULA-DECL NIL |smooth_not_analytic| NIL)) NIL
   (|poly_restrict_deriv| SUBTYPE
    "restrict[real, (LAMBDA (r: reals.real): reals.>(r, 0)), real].restrict(polynomials.polynomial(smooth_not_analytic.a, smooth_not_analytic.n))"
    "deriv_fun[(LAMBDA (r: real): r > 0)]")))
 (|poly_restrict_deriv_TCC2| 0
  (|poly_restrict_deriv_TCC2-1| |nil| 3812722029 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|poly_restrict_deriv| SUBTYPE
    "real_defs.max(0, (number_fields.-)(smooth_not_analytic.n, 1))" "nat")))
 (|poly_restrict_deriv| 0
  (|poly_restrict_deriv-1| |nil| 3812723365
   ("" (SKEEP*)
    (("" (LEMMA "deriv_subtype[real,(Lambda(r:real): r>0)]")
      (("" (INST?)
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (LEMMA "deriv_polynomial")
              (("1" (INST?)
                (("1" (REPLACE -1)
                  (("1" (DECOMPOSE-EQUALITY 1)
                    (("1" (ASSERT)
                      (("1" (CASE "n=0")
                        (("1" (ASSERT)
                          (("1" (EXPAND "restrict" 1 1)
                            (("1" (DECOMPOSE-EQUALITY -3)
                              (("1" (ASSERT)
                                (("1" (INST -1 "x!1")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "restrict" 1)
                                      (("1" (TYPEPRED "x!1")
                                        (("1" (EXPAND "deriv_p" 1 1)
                                          (("1" (EXPAND "polynomial" 1 2)
                                            (("1" (ASSERT)
                                              (("1"
                                                (LEMMA
                                                 "sigma_const_restrict_eq_0[nat]")
                                                (("1" (EXPAND "max" 1)
                                                  (("1" (EXPAND "sigma" 1)
                                                    (("1" (EXPAND "sigma" 1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "restrict"
                                                                  -3)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "restrict")
                            (("2" (DECOMPOSE-EQUALITY -2)
                              (("1" (INST -1 "x!1")
                                (("1" (REPLACE -1)
                                  (("1" (EXPAND "deriv_p" 2 1)
                                    (("1" (EXPAND "max" 2)
                                      (("1" (ASSERT)
                                        (("1" (LIFT-IF 2)
                                          (("1" (SPLIT 2)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (LEMMA "derivable_polynomial")
                                (("2" (INST?)
                                  (("2"
                                    (LEMMA
                                     "derivable_subtype[real,(Lambda(r:real): r>0)]")
                                    (("2" (INST?)
                                      (("2" (ASSERT)
                                        (("2" (SPLIT -1)
                                          (("1" (EXPAND "restrict")
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "deriv_domain?" 1)
                                            (("2" (SKEEP)
                                              (("2" (INST 1 "e!1/2")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("3" (EXPAND "not_one_element?" 1)
                                            (("3" (SKEEP)
                                              (("3" (INST 1 "x+1")
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "derivable_polynomial") (("2" (INST?) NIL NIL))
                NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (EXPAND "del_neigh_all?" 1)
                (("3" (SKEEP)
                  (("3" (TYPEPRED "a!1")
                    (("3" (INST 1 "a!1/2") (("3" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (EXPAND "not_one_element?" 1)
              (("4" (SKEEP) (("4" (INST 1 "x+1") (("4" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|deriv_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|del_neigh_all?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|derivable_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|sigma_const_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|derivable_trig_exp_poly_div_TCC1| 0
  (|derivable_trig_exp_poly_div_TCC1-1| |nil| 3812702230
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|derivable_trig_exp_poly_div| SUBTYPE "smooth_not_analytic.x" "nznum")))
 (|derivable_trig_exp_poly_div_TCC2| 0
  (|derivable_trig_exp_poly_div_TCC2-1| |nil| 3812702230
   ("" (INDUCT "k")
    (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (INST -1 "x")
          (("2" (EXPAND "^")
            (("2" (EXPAND "expt" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt| DEF-DECL "real" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|derivable_trig_exp_poly_div| SUBTYPE
    "exponentiation.^(smooth_not_analytic.x, smooth_not_analytic.k)" "nznum")))
 (|derivable_trig_exp_poly_div| 0
  (|derivable_trig_exp_poly_div-1| |nil| 3812702394
   ("" (SKEEP*)
    (("" (CASE "derivable?[(LAMBDA (r: real): r > 0)](polynomial(a,n1))")
      (("1" (CASE "derivable?[(LAMBDA (r: real): r > 0)](polynomial(b,n2))")
        (("1"
          (CASE
              "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): 1/x)")
          (("1"
            (CASE
                "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): -1/x)")
            (("1"
              (CASE
                  "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): x^k)")
              (("1"
                (CASE
                    "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): sin(1/x))")
                (("1"
                  (CASE
                      "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): cos(1/x))")
                  (("1"
                    (CASE
                        "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): sin(1/x)*polynomial(a,n1)(x))")
                    (("1"
                      (CASE
                          "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): cos(1/x)*polynomial(b,n2)(x))")
                      (("1"
                        (CASE
                            "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0):(sin(1 / x) * polynomial(a, n1)(x) + cos(1/x)*polynomial(b,n2)(x)))")
                        (("1"
                          (CASE
                              "derivable?[(LAMBDA (r: real): r > 0)](LAMBDA(x:real|x>0): exp(-1 / x) * (sin(1 / x) * polynomial(a, n1)(x) + cos(1/x)*polynomial(b,n2)(x)))")
                          (("1" (LEMMA "poly_restrict_derivable_TCC1")
                            (("1" (LEMMA "poly_restrict_derivable_TCC2")
                              (("1"
                                (LEMMA
                                 "div_derivable[(LAMBDA (r: real): r > 0)]")
                                (("1"
                                  (INST -1 "(LAMBDA (x: real | x > 0):
                                                             (exp(-1 / x) *
                                                               (sin(1 / x) * polynomial(a, n1)(x) +
                                                                 cos(1 / x) * polynomial(b, n2)(x))))"
                                   "(LAMBDA(x:real |x>0):  x ^ k)" "_")
                                  (("1" (EXPAND "derivable?" 1)
                                    (("1" (SKEEP)
                                      (("1" (INST -1 "x_1")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "/" -1)
                                            (("1" (ASSERT)
                                              (("1" (HIDE 2)
                                                (("1" (EXPAND "derivable?" -3)
                                                  (("1" (INST -3 "x_1")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (EXPAND "derivable?"
                                                                -9)
                                                        (("1" (INST -9 "x_1")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2"
                                      (LEMMA
                                       "derivable_trig_exp_poly_div_TCC2")
                                      (("2" (ASSERT)
                                        (("2" (SKEEP)
                                          (("2" (INST -1 "k" "x")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2"
                              (LEMMA
                               "prod_derivable[(LAMBDA (r: real): r > 0)]")
                              (("2" (EXPAND "derivable?" 1)
                                (("2" (SKEEP)
                                  (("2"
                                    (INST -1 "LAMBDA (x: real | x > 0):
                                         exp(-1 / x)"
                                     "(LAMBDA (x: real | x > 0):
                                     (sin(1 / x) * polynomial(a, n1)(x) +
                                       cos(1 / x) * polynomial(b, n2)(x)))"
                                     "x_1")
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "*" -1)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "derivable?" -1)
                                            (("2" (INST -1 "x_1")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (LEMMA
                                                   "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                                                  (("1"
                                                    (INST -1
                                                     "Lambda(x:real|x>0): -1/x"
                                                     "Lambda(x:real): exp(x)"
                                                     "x_1")
                                                    (("1" (EXPAND "o")
                                                      (("1"
                                                        (LEMMA
                                                         "scal_derivable[(Lambda(r:real): r >0)]")
                                                        (("1"
                                                          (INST -1 "-1"
                                                           "Lambda(x: real | x>0): 1/x"
                                                           "x_1")
                                                          (("1"
                                                            (EXPAND
                                                             "derivable?" -9)
                                                            (("1"
                                                              (INST -9 "x_1")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND "*"
                                                                          -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "exp_deriv")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "derivable?"
                                                                           -1)
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "-1/x_1")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (CASE
                                                                                    "exp = LAMBDA (x: real): exp(x)")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (DECOMPOSE-EQUALITY
                                                                                   1)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (EXPAND "not_one_element?"
                                                            1)
                                                    (("2" (SKEEP)
                                                      (("2" (INST 1 "x+1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3"
                                                    (EXPAND "deriv_domain?" 1)
                                                    (("3" (SKEEP)
                                                      (("3" (INST 1 "e!1/2")
                                                        (("3" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "sum_derivable[(Lambda(r:real): r>0)]")
                          (("2"
                            (INST -1
                             " (LAMBDA (x: real | x > 0): cos(1 / x) * polynomial(b, n2)(x))"
                             " (LAMBDA (x: real | x > 0): sin(1 / x) * polynomial(a, n1)(x))"
                             "_")
                            (("2" (EXPAND "derivable?" 1 1)
                              (("2" (SKEEP)
                                (("2" (INST -1 "x_1")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "+")
                                      (("2" (EXPAND "derivable?" -1)
                                        (("2" (EXPAND "derivable?" -2)
                                          (("2" (INST -1 "x_1")
                                            (("2" (INST -2 "x_1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "prod_derivable[(Lambda(r:real): r>0)]")
                        (("2" (EXPAND "derivable?" 1 1)
                          (("2" (SKEEP)
                            (("2"
                              (INST -1 "LAMBDA (x: real | x > 0):
                                       cos(1 / x)"
                               " LAMBDA (x: real | x > 0): polynomial(b, n2)(x)"
                               "x_1")
                              (("2" (EXPAND "*")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "derivable?" -7)
                                    (("2" (INST -7 "x_1")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "restrict")
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "derivable?" -2)
                                              (("2" (INST -2 "x_1") NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (LEMMA "prod_derivable[(Lambda(r:real): r>0)]")
                        (("2" (EXPAND "derivable?" 1 1)
                          (("2" (SKEEP)
                            (("2"
                              (INST -1 "LAMBDA (x: real | x > 0):
                                     sin(1 / x)"
                               "(LAMBDA (x: real | x > 0):
                                      polynomial(a, n1)(x))"
                               "x_1")
                              (("2" (EXPAND "*")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "derivable?" -2)
                                    (("2" (INST -2 "x_1")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "derivable?" -7)
                                          (("2" (INST -7 "x_1")
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "derivable?" -6)
                                                (("2" (INST -6 "x_1")
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (LEMMA "derivable_cos")
                      (("2"
                        (LEMMA
                         "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                        (("1" (INST -1 "Lambda(x: real | x>0): 1/x" "cos" "_")
                          (("1" (EXPAND "derivable?" 1)
                            (("1" (SKEEP)
                              (("1" (INST -1 "x_1")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "o")
                                    (("1" (EXPAND "derivable?" -1)
                                      (("1" (INST -1 "1/x_1")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "derivable?" -5)
                                            (("1" (INST -5 "x_1") NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "not_one_element?" 1)
                            (("2" (SKEEP)
                              (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "deriv_domain?" 1)
                          (("3" (SKEEP)
                            (("3" (INST 1 "e!1/2")
                              (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2"
                  (LEMMA
                   "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                  (("1" (LEMMA "derivable_sin")
                    (("1" (EXPAND "derivable?" 1)
                      (("1" (SKEEP)
                        (("1" (INST -2 "Lambda(x: real | x>0): 1/x" "sin" "_")
                          (("1" (ASSERT)
                            (("1" (INST -2 "x_1")
                              (("1" (ASSERT)
                                (("1" (EXPAND "o")
                                  (("1" (EXPAND "derivable?" -1)
                                    (("1" (INST -1 "1/x_1")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "derivable?" -4)
                                          (("1" (INST -4 "x_1") NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (EXPAND "not_one_element?" 1)
                      (("2" (SKEEP)
                        (("2" (INST 1 "1+x") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "deriv_domain?" 1)
                    (("3" (SKEEP)
                      (("3" (INST 1 "e!1/2") (("3" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "deriv_x_n[(Lambda(r:real): r>0)]")
                (("2" (INST -1 "Lambda(x:real| x>0): x^k" "k")
                  (("2" (ASSERT)
                    (("2" (CASE "NOT k=0")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (REPLACE -1)
                        (("2" (EXPAND "^" 2)
                          (("2" (EXPAND "expt" 2)
                            (("2"
                              (LEMMA
                               "derivable_const[(LAMBDA (r: real): r > 0)]")
                              (("2" (INST -1 "1")
                                (("2" (EXPAND "const_fun" -1)
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "derivable_scal[(LAMBDA (r: real): r > 0)]")
              (("2" (INST -1 "-1" "Lambda(x:real | x>0): 1/x")
                (("2" (ASSERT)
                  (("2" (EXPAND "*") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "derivable_div[(Lambda(r:real): r>0)]")
            (("2" (INST -1 "Lambda(x:real| x>0): 1" "Lambda(x:real| x>0): x")
              (("1" (EXPAND "/" -1) (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (LEMMA "derivable_id[(Lambda(r:real): r>0)]")
                (("2" (EXPAND "I" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)
               ("3" (LEMMA "derivable_const[(LAMBDA (r: real): r > 0)]")
                (("3" (INST -1 "1")
                  (("3" (ASSERT)
                    (("3" (EXPAND "const_fun" -1) (("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (LEMMA "poly_restrict_derivable") (("2" (INST?) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (LEMMA "poly_restrict_derivable") (("2" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|poly_restrict_derivable| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|derivable_scal| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|derivable_sin| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|sum_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|) NIL
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|poly_restrict_derivable_TCC2| ASSUMING-TCC NIL |smooth_not_analytic| NIL)
    NIL (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|derivable_trig_exp_poly_div_TCC2| SUBTYPE-TCC NIL |smooth_not_analytic|
     NIL)
    (|div_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|poly_restrict_derivable_TCC1| ASSUMING-TCC NIL |smooth_not_analytic| NIL)
    (|prod_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|composition_derivable| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (O CONST-DECL "T3" |function_props| NIL) NIL
    (|exp_deriv| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|scal_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|derivable_cos| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|deriv_x_n| FORMULA-DECL NIL |derivatives| |analysis|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (I CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|derivable_id| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives|
     |analysis|)
    NIL
    (|constant_seq2| APPLICATION-JUDGEMENT "(convergent_nz?)" |convergence_ops|
     |analysis|)
    (|derivable_div| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|deriv_sin1x_TCC1| 0
  (|deriv_sin1x_TCC1-1| |nil| 3812728403
   ("" (FLATTEN)
    (("" (SKEEP)
      (("" (ASSERT)
        (("" (HIDE -1)
          (("" (TYPEPRED "x")
            (("" (GRIND) (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "real" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|))
   NIL
   (|deriv_sin1x| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (|deriv_sin1x| 0
  (|deriv_sin1x-1| |nil| 3812728497
   ("" (LEMMA "deriv_composition[(LAMBDA (r: real): r > 0),real]")
    (("1" (LEMMA "derivable_id[(LAMBDA (r: real): r > 0)]")
      (("1" (LEMMA "derivable_div[(LAMBDA (r: real): r > 0)]")
        (("1" (LEMMA "derivable_sin")
          (("1" (INST -2 "Lambda(x:real|x>0): 1" "Lambda(x:real| x>0): x")
            (("1" (EXPAND "/" -2)
              (("1"
                (LEMMA
                 "composition_derivable_fun[(LAMBDA (r: real): r > 0),real]")
                (("1" (INST -1 "Lambda(x:real| x>0): 1/x" "sin")
                  (("1" (ASSERT)
                    (("1" (EXPAND "o" -1)
                      (("1" (ASSERT)
                        (("1" (DECOMPOSE-EQUALITY 1)
                          (("1"
                            (INST -5 "Lambda(x:real| x>0): 1/x" "sin" "x!1")
                            (("1" (EXPAND "o")
                              (("1" (SPLIT -5)
                                (("1" (EXPAND "deriv" 1 1)
                                  (("1" (REPLACE -1 1)
                                    (("1" (LEMMA "deriv_sin")
                                      (("1" (INST -1 "1/x!1")
                                        (("1" (EXPAND "deriv" -1)
                                          (("1" (REPLACE -1 1)
                                            (("1"
                                              (LEMMA
                                               "deriv_div[(Lambda(x:real): x>0)]")
                                              (("1"
                                                (INST -1
                                                 "Lambda(x:real|x>0): 1"
                                                 "Lambda(x:real| x>0): x"
                                                 "x!1")
                                                (("1" (ASSERT)
                                                  (("1" (SPLIT -1)
                                                    (("1" (EXPAND "/" -1)
                                                      (("1" (REPLACE -1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "deriv_const[(Lambda(x:real): x>0)]")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (INST -1 "1"
                                                                 "x!1")
                                                                (("1"
                                                                  (EXPAND
                                                                   "const_fun"
                                                                   -1)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "deriv_I_fun[(Lambda(x:real): x>0)]")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "I"
                                                                           -1)
                                                                          (("1"
                                                                            (DECOMPOSE-EQUALITY
                                                                             -1)
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "deriv"
                                                                                 -1)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "^"
                                                                                       1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "expt"
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "expt"
                                                                                           1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "expt"
                                                                                             1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               2)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "derivable_id[(Lambda(x:real): x>0)]")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "I")
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (LEMMA
                                                       "derivable_const[(Lambda(x:real): x>0)]")
                                                      (("2" (INST -1 "1")
                                                        (("2"
                                                          (EXPAND "const_fun"
                                                                  -1)
                                                          (("2"
                                                            (EXPAND
                                                             "derivable?" -1)
                                                            (("2"
                                                              (INST -1 "x!1")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (LEMMA
                                                       "derivable_id[(Lambda(x:real): x>0)]")
                                                      (("3" (EXPAND "I" -1)
                                                        (("3"
                                                          (EXPAND "derivable?"
                                                                  -1)
                                                          (("3" (INST -1 "x!1")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "derivable?" -3)
                                  (("2" (INST -3 "x!1") NIL NIL)) NIL)
                                 ("3" (EXPAND "derivable?" -2)
                                  (("3" (INST -2 "1/x!1") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (ASSERT)
                              (("2" (EXPAND "^" -1)
                                (("2" (EXPAND "expt" -1)
                                  (("2" (EXPAND "expt" -1)
                                    (("2" (EXPAND "expt" -1)
                                      (("2" (ASSERT)
                                        (("2" (DIV-BY -1 "x")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "derivable_id[(Lambda(x:real): x>0)]")
                (("2" (EXPAND "I" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (LEMMA "derivable_const[(Lambda(x:real): x>0)]")
                (("3" (INST -1 "1")
                  (("3" (EXPAND "const_fun") (("3" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (EXPAND "not_one_element?" 1)
          (("2" (SKEEP) (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (EXPAND "deriv_domain?")
        (("3" (SKEEP) (("3" (INST 1 "e!1/2") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable_id| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|derivable_sin| FORMULA-DECL NIL |sincos_def| |trig|) NIL
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_sin| FORMULA-DECL NIL |sincos_def| |trig|)
    (|deriv_div| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (I CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|deriv_I_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) NIL
    (|derivable_id| NAME-JUDGEMENT "deriv_fun" |derivatives| |analysis|)
    (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |continuous_functions|
     |analysis|)
    NIL NIL NIL NIL NIL NIL NIL
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|composition_derivable_fun| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|derivable_div| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_composition| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|deriv_cos1x_TCC1| 0
  (|deriv_cos1x_TCC1-1| |nil| 3812728403
   ("" (FLATTEN)
    (("" (SKEEP)
      (("" (EXPAND "^")
        (("" (EXPAND "expt" -2)
          (("" (EXPAND "expt" -2)
            (("" (EXPAND "expt" -2)
              (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt| DEF-DECL "real" |exponentiation| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL))
   NIL
   (|deriv_cos1x| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (|deriv_cos1x| 0
  (|deriv_cos1x-1| |nil| 3812747053
   ("" (LEMMA "deriv_composition[(LAMBDA (r: real): r > 0),real]")
    (("1" (LEMMA "derivable_id[(LAMBDA (r: real): r > 0)]")
      (("1" (LEMMA "derivable_div[(LAMBDA (r: real): r > 0)]")
        (("1" (LEMMA "derivable_cos")
          (("1" (INST -2 "Lambda(x:real|x>0): 1" "Lambda(x:real| x>0): x")
            (("1" (EXPAND "/" -2)
              (("1"
                (LEMMA
                 "composition_derivable_fun[(LAMBDA (r: real): r > 0),real]")
                (("1" (INST -1 "Lambda(x:real| x>0): 1/x" "cos")
                  (("1" (ASSERT)
                    (("1" (EXPAND "o" -1)
                      (("1" (ASSERT)
                        (("1" (DECOMPOSE-EQUALITY 1)
                          (("1"
                            (INST -5 "Lambda(x:real| x>0): 1/x" "cos" "x!1")
                            (("1" (EXPAND "o")
                              (("1" (SPLIT -5)
                                (("1" (EXPAND "deriv" 1 1)
                                  (("1" (REPLACE -1 1)
                                    (("1" (LEMMA "deriv_cos")
                                      (("1" (INST -1 "1/x!1")
                                        (("1" (EXPAND "deriv" -1)
                                          (("1" (REPLACE -1 1)
                                            (("1"
                                              (LEMMA
                                               "deriv_div[(Lambda(x:real): x>0)]")
                                              (("1"
                                                (INST -1
                                                 "Lambda(x:real|x>0): 1"
                                                 "Lambda(x:real| x>0): x"
                                                 "x!1")
                                                (("1" (ASSERT)
                                                  (("1" (SPLIT -1)
                                                    (("1" (EXPAND "/" -1)
                                                      (("1" (REPLACE -1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "deriv_const[(Lambda(x:real): x>0)]")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (INST -1 "1"
                                                                 "x!1")
                                                                (("1"
                                                                  (EXPAND
                                                                   "const_fun"
                                                                   -1)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "deriv_I_fun[(Lambda(x:real): x>0)]")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "I"
                                                                           -1)
                                                                          (("1"
                                                                            (DECOMPOSE-EQUALITY
                                                                             -1)
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "deriv"
                                                                                 -1)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "^"
                                                                                       1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "expt"
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "expt"
                                                                                           1)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "expt"
                                                                                             1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               2)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "derivable_id[(Lambda(x:real): x>0)]")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "I")
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (LEMMA
                                                       "derivable_const[(Lambda(x:real): x>0)]")
                                                      (("2" (INST -1 "1")
                                                        (("2"
                                                          (EXPAND "const_fun"
                                                                  -1)
                                                          (("2"
                                                            (EXPAND
                                                             "derivable?" -1)
                                                            (("2"
                                                              (INST -1 "x!1")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3"
                                                      (LEMMA
                                                       "derivable_id[(Lambda(x:real): x>0)]")
                                                      (("3" (EXPAND "I" -1)
                                                        (("3"
                                                          (EXPAND "derivable?"
                                                                  -1)
                                                          (("3" (INST -1 "x!1")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "derivable?" -3)
                                  (("2" (INST -3 "x!1") NIL NIL)) NIL)
                                 ("3" (EXPAND "derivable?" -2)
                                  (("3" (INST -2 "1/x!1") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (ASSERT)
                              (("2" (EXPAND "^" -1)
                                (("2" (EXPAND "expt" -1)
                                  (("2" (EXPAND "expt" -1)
                                    (("2" (EXPAND "expt" -1)
                                      (("2" (ASSERT)
                                        (("2" (DIV-BY -1 "x")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "derivable_id[(Lambda(x:real): x>0)]")
                (("2" (EXPAND "I" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL)
             ("3" (HIDE 2)
              (("3" (LEMMA "derivable_const[(Lambda(x:real): x>0)]")
                (("3" (INST -1 "1")
                  (("3" (EXPAND "const_fun") (("3" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (EXPAND "not_one_element?" 1)
          (("2" (SKEEP) (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (EXPAND "deriv_domain?")
        (("3" (SKEEP) (("3" (INST 1 "e!1/2") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|derivable_id| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|derivable_cos| FORMULA-DECL NIL |sincos_def| |trig|) NIL
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_cos| FORMULA-DECL NIL |sincos_def| |trig|)
    (|deriv_div| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (I CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|deriv_I_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) NIL
    (|derivable_id| NAME-JUDGEMENT "deriv_fun" |derivatives| |analysis|)
    (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |continuous_functions|
     |analysis|)
    NIL NIL NIL NIL NIL NIL NIL
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|composition_derivable_fun| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|derivable_div| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_composition| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|deriv_sin1x_poly_TCC1| 0
  (|deriv_sin1x_poly_TCC1-1| |nil| 3812750102
   ("" (SKEEP*)
    (("" (EXPAND "^")
      (("" (EXPAND "expt")
        (("" (EXPAND "expt")
          (("" (EXPAND "expt" -2)
            (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "real" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|deriv_sin1x_poly| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (|deriv_sin1x_poly| 0
  (|deriv_sin1x_poly-1| |nil| 3812750255
   ("" (SKEEP)
    (("" (LEMMA "prod_derivable[(Lambda(r:real): r>0)]")
      (("" (LEMMA "deriv_prod[(LAMBDA(r:real): r>0)]")
        (("" (LEMMA "poly_restrict_derivable")
          (("" (LEMMA "poly_restrict_deriv")
            (("" (INST -1 "a" "n1")
              (("" (INST -2 "a" "n1")
                (("" (ASSERT)
                  (("" (EXPAND "restrict")
                    (("" (ASSERT)
                      ((""
                        (INST -4 "Lambda(x:real|x>0): sin(1/x)"
                         "Lambda(x:real|x>0): polynomial(a, n1)(x)" "_")
                        ((""
                          (CASE "NOT derivable?[(LAMBDA (r: real): r > 0)]
                 (LAMBDA (x: real | x > 0): (sin(1 / x)) * polynomial(a, n1)(x))")
                          (("1" (EXPAND "derivable?" 1)
                            (("1" (SKEEP)
                              (("1" (INST -4 "x_1")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "*")
                                    (("1" (ASSERT)
                                      (("1" (HIDE 1)
                                        (("1" (LEMMA "deriv_sin1x")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "derivable?" -1)
                                              (("1" (INST -1 "x_1")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (EXPAND "derivable?" -4)
                                                    (("1" (INST -4 "x_1") NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (ASSERT)
                              (("2" (DECOMPOSE-EQUALITY 1)
                                (("1"
                                  (INST -4 "Lambda(x:real|x>0): sin(1/x)"
                                   "Lambda(x:real|x>0): polynomial(a, n1)(x)"
                                   "_")
                                  (("1" (INST -4 "x!1")
                                    (("1" (ASSERT)
                                      (("1" (SPLIT -4)
                                        (("1" (EXPAND "*" -1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "deriv" 1 1)
                                              (("1" (REPLACE -1 1)
                                                (("1" (CASE "n1=0")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "polynomial" 1)
                                                      (("1" (REPLACE -1)
                                                        (("1" (EXPAND "sigma")
                                                          (("1" (ASSERT)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "-")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "derivable_const[(Lambda(x:real): x>0)]")
                                                                    (("1"
                                                                      (INST -1
                                                                       "a(0)")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "deriv_const[(Lambda(x:real): x>0)]")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "a(0)"
                                                                           "x!1")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "const_fun"
                                                                             -1)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "deriv_sin1x")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY
                                                                                       -2)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "deriv"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "max"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "deriv_p"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (EXPAND
                                                                                         "^"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "expt"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "expt"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "expt"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (DIV-BY
                                                                                                 -3
                                                                                                 "x1!1")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (EXPAND
                                                                                         "max"
                                                                                         1)
                                                                                        (("3"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY -3)
                                                      (("2" (INST -1 "x!1")
                                                        (("2"
                                                          (EXPAND "deriv" -1)
                                                          (("2" (REPLACE -1)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "deriv_sin1x")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -2)
                                                                    (("1"
                                                                      (INST -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "deriv"
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "scal_polynomial2")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "a"
                                                                                 "-1"
                                                                                 "n1"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "*"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "-"
                                                                                     2)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "^")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "expt")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "expt")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "expt"
                                                                             -3)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (DIV-BY
                                                                                 -3
                                                                                 "x1!1")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (LEMMA "deriv_sin1x")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "derivable?" -1)
                                                  (("2" (INST -1 "x!1") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE 2)
                                          (("3"
                                            (LEMMA "poly_restrict_derivable")
                                            (("3" (INST?)
                                              (("3" (ASSERT)
                                                (("3" (EXPAND "restrict")
                                                  (("3"
                                                    (EXPAND "derivable?" -1)
                                                    (("3" (INST -1 "x!1") NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (EXPAND "^")
                                    (("2" (EXPAND "expt" -1)
                                      (("2" (EXPAND "expt" -1)
                                        (("2" (EXPAND "expt" -1)
                                          (("2" (DIV-BY -1 "x")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|prod_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|poly_restrict_derivable| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_sin1x| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives|
     |analysis|)
    NIL
    (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops|
     |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) NIL
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|) NIL
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|poly_restrict_deriv| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|deriv_prod| FORMULA-DECL NIL |derivatives_def| |analysis|))
   SHOSTAK))
 (|deriv_cos1x_poly_TCC1| 0
  (|deriv_cos1x_poly_TCC1-1| |nil| 3812751409
   ("" (SKEEP*)
    (("" (EXPAND "^")
      (("" (EXPAND "expt" -2)
        (("" (EXPAND "expt" -2)
          (("" (EXPAND "expt" -2)
            (("" (ASSERT) (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "real" |exponentiation| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|deriv_cos1x_poly| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (|deriv_cos1x_poly| 0
  (|deriv_cos1x_poly-1| |nil| 3812751520
   ("" (SKEEP)
    (("" (LEMMA "prod_derivable[(Lambda(r:real): r>0)]")
      (("" (LEMMA "deriv_prod[(LAMBDA(r:real): r>0)]")
        (("" (LEMMA "poly_restrict_derivable")
          (("" (LEMMA "poly_restrict_deriv")
            (("" (INST -1 "b" "n2")
              (("" (INST -2 "b" "n2")
                (("" (ASSERT)
                  (("" (EXPAND "restrict")
                    (("" (ASSERT)
                      ((""
                        (INST -4 "Lambda(x:real|x>0): cos(1/x)"
                         "Lambda(x:real|x>0): polynomial(b, n2)(x)" "_")
                        ((""
                          (CASE "NOT derivable?[(LAMBDA (r: real): r > 0)]
                        (LAMBDA (x: real | x > 0): (cos(1 / x)) * polynomial(b, n2)(x))")
                          (("1" (EXPAND "derivable?" 1)
                            (("1" (SKEEP)
                              (("1" (INST -4 "x_1")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "*")
                                    (("1" (ASSERT)
                                      (("1" (HIDE 1)
                                        (("1" (LEMMA "deriv_cos1x")
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "derivable?" -1)
                                              (("1" (INST -1 "x_1")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (EXPAND "derivable?" -4)
                                                    (("1" (INST -4 "x_1") NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (ASSERT)
                              (("2" (DECOMPOSE-EQUALITY 1)
                                (("1"
                                  (INST -4 "Lambda(x:real|x>0): cos(1/x)"
                                   "Lambda(x:real|x>0): polynomial(b, n2)(x)"
                                   "_")
                                  (("1" (INST -4 "x!1")
                                    (("1" (ASSERT)
                                      (("1" (SPLIT -4)
                                        (("1" (EXPAND "*" -1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "deriv" 1 1)
                                              (("1" (REPLACE -1 1)
                                                (("1" (CASE "n2=0")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "polynomial" 1)
                                                      (("1" (REPLACE -1)
                                                        (("1" (EXPAND "max")
                                                          (("1"
                                                            (EXPAND "sigma")
                                                            (("1" (ASSERT)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "derivable_const[(Lambda(x:real): x>0)]")
                                                                  (("1"
                                                                    (INST -1
                                                                     "b(0)")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "deriv_const[(Lambda(x:real): x>0)]")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "b(0)"
                                                                         "x!1")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "const_fun"
                                                                           -1)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "deriv_cos1x")
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     -2)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "deriv"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "deriv_p"
                                                                                               1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (EXPAND
                                                                                       "^"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "expt"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "expt"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "expt"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (DIV-BY
                                                                                               -3
                                                                                               "x1!1")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY -3)
                                                      (("2" (INST -1 "x!1")
                                                        (("2"
                                                          (EXPAND "deriv" -1)
                                                          (("2" (REPLACE -1)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "deriv_cos1x")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -2)
                                                                    (("1"
                                                                      (INST -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "deriv"
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (LEMMA
                                                                       "scal_polynomial2")
                                                                      (("2"
                                                                        (LEMMA
                                                                         "deriv_cos1x")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (DECOMPOSE-EQUALITY
                                                                               -8)
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "deriv"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (EXPAND
                                                                                 "^")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "expt")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "expt"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -9
                                                                                         -10
                                                                                         -12
                                                                                         -13
                                                                                         -14)
                                                                                        (("2"
                                                                                          (DIV-BY
                                                                                           -3
                                                                                           "x1!2")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (LEMMA "deriv_cos1x")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "derivable?" -1)
                                                  (("2" (INST -1 "x!1") NIL
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE 2)
                                          (("3"
                                            (LEMMA "poly_restrict_derivable")
                                            (("3" (INST?)
                                              (("3" (ASSERT)
                                                (("3" (EXPAND "restrict")
                                                  (("3"
                                                    (EXPAND "derivable?" -1)
                                                    (("3" (INST -1 "x!1") NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (EXPAND "^")
                                    (("2" (EXPAND "expt" -1)
                                      (("2" (EXPAND "expt" -1)
                                        (("2" (EXPAND "expt" -1)
                                          (("2" (DIV-BY -1 "x")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|prod_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|poly_restrict_derivable| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_cos1x| FORMULA-DECL NIL |smooth_not_analytic| NIL) NIL
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops|
     |analysis|)
    NIL
    (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives|
     |analysis|)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|poly_restrict_deriv| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|deriv_prod| FORMULA-DECL NIL |derivatives_def| |analysis|))
   SHOSTAK))
 (|poly_pull_div_xk| 0
  (|poly_pull_div_xk-1| |nil| 3812899656
   ("" (SKEEP)
    (("" (LEMMA "power_linear_polynomial")
      (("" (LEMMA "polynomial_prod_def")
        (("" (DECOMPOSE-EQUALITY 1)
          (("1" (INST -2 "0" "k" "1" "x!1" "k")
            (("1" (ASSERT)
              (("1" (CASE "1*x!1=x!1")
                (("1" (REPLACE -1)
                  (("1" (ASSERT)
                    (("1" (INST -2 "a" " power_linear(0, 1, k)" "k" "n" "x!1")
                      (("1" (ASSERT)
                        (("1" (REPLACE -3)
                          (("1" (REPLACE -3 -2 RL)
                            (("1" (REPLACE -2 1 RL)
                              (("1" (REPLACE -3 1)
                                (("1" (REPLACE -3 1 RL)
                                  (("1" (MULT-BY 1 "x!1^k") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (HIDE -1 -2)
              (("2" (LEMMA "derivable_trig_exp_poly_div_TCC2")
                (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|power_linear_polynomial| FORMULA-DECL NIL |polynomials| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    NIL (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|polynomial_prod| CONST-DECL "real" |polynomials| |reals|)
    (|power_linear| CONST-DECL "real" |polynomials| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|derivable_trig_exp_poly_div_TCC2| SUBTYPE-TCC NIL |smooth_not_analytic|
     NIL)
    (|polynomial_prod_def| FORMULA-DECL NIL |polynomials| |reals|))
   SHOSTAK))
 (|deriv_sin1x_polyx2| 0
  (|deriv_sin1x_polyx2-1| |nil| 3812923068
   ("" (LEMMA "deriv_sin1x_poly")
    (("" (SKEEP)
      (("" (INST?)
        (("" (ASSERT)
          (("" (FLATTEN)
            (("" (ASSERT)
              (("" (REPLACE -2)
                (("" (LEMMA "poly_pull_div_xk")
                  (("" (INST -1 "deriv_p(a, n1)" "max(0, n1 - 1)" "2")
                    (("1" (DECOMPOSE-EQUALITY 1)
                      (("1" (DECOMPOSE-EQUALITY -3)
                        (("1" (INST -1 "x!1")
                          (("1" (DECOMPOSE-EQUALITY -2)
                            (("1" (INST -1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (EXPAND "^")
                              (("2" (EXPAND "expt")
                                (("2" (EXPAND "expt")
                                  (("2" (EXPAND "expt")
                                    (("2" (DIV-BY -3 "x1!1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "^")
                          (("2" (EXPAND "expt")
                            (("2" (EXPAND "expt")
                              (("2" (EXPAND "expt")
                                (("2" (ASSERT)
                                  (("2" (DIV-BY -3 "x1!1")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)
                       ("3" (SKEEP)
                        (("3" (HIDE -2 -3 -4)
                          (("3" (EXPAND "^")
                            (("3" (EXPAND "expt")
                              (("3" (EXPAND "expt")
                                (("3" (EXPAND "expt")
                                  (("3" (DIV-BY -1 "x")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2) (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|poly_pull_div_xk| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|power_linear| CONST-DECL "real" |polynomials| |reals|)
    (|polynomial_prod| CONST-DECL "real" |polynomials| |reals|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|) NIL
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL) NIL
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|deriv_sin1x_poly| FORMULA-DECL NIL |smooth_not_analytic| NIL))
   SHOSTAK))
 (|deriv_cos1x_polyx2| 0
  (|deriv_cos1x_polyx2-1| |nil| 3812923449
   ("" (SKEEP)
    (("" (LEMMA "deriv_cos1x_poly")
      (("" (INST?)
        (("" (ASSERT)
          (("" (FLATTEN)
            (("" (ASSERT)
              (("" (DECOMPOSE-EQUALITY 1)
                (("1" (DECOMPOSE-EQUALITY -2)
                  (("1" (INST -1 "x!1")
                    (("1" (REPLACE -1)
                      (("1" (LEMMA "poly_pull_div_xk")
                        (("1" (INST -1 "deriv_p(b, n2)" "max(0, n2 - 1)" "2")
                          (("1" (DECOMPOSE-EQUALITY -1)
                            (("1" (INST -1 "x!1")
                              (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (EXPAND "^")
                              (("2" (EXPAND "expt")
                                (("2" (EXPAND "expt")
                                  (("2" (EXPAND "expt")
                                    (("2" (DIV-BY -3 "x1!1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "^")
                    (("2" (EXPAND "expt")
                      (("2" (EXPAND "expt")
                        (("2" (EXPAND "expt")
                          (("2" (DIV-BY -3 "x1!1") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (EXPAND "^")
                    (("2" (EXPAND "expt")
                      (("2" (EXPAND "expt")
                        (("2" (EXPAND "expt")
                          (("2" (DIV-BY -1 "x") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (SKEEP) (("3" (HIDE -) (("3" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_cos1x_poly| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|poly_pull_div_xk| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|power_linear| CONST-DECL "real" |polynomials| |reals|)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|polynomial_prod| CONST-DECL "real" |polynomials| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) NIL
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|deriv_sin_cos1x_TCC1| 0
  (|deriv_sin_cos1x_TCC1-1| |nil| 3812924365 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (NQ CONST-DECL "real" |derivatives_def| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|deriv_sin_cos1x| SUBTYPE
    "real_defs.max(0, (number_fields.-)(smooth_not_analytic.n2, 1))" "nat")))
 (|deriv_sin_cos1x_TCC2| 0
  (|deriv_sin_cos1x_TCC1-1| |nil| 3812747625
   ("" (SKEEP*)
    (("" (EXPAND "^")
      (("" (EXPAND "expt" -2)
        (("" (EXPAND "expt" -2)
          (("" (EXPAND "expt" -2)
            (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "real" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|deriv_sin_cos1x| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (|deriv_sin_cos1x| 0
  (|deriv_sin_cos1x-1| |nil| 3812749552
   ("" (SKEEP)
    (("" (LEMMA "deriv_sin1x_polyx2")
      (("" (LEMMA "deriv_cos1x_polyx2")
        (("" (INST -2 "a" "n1")
          (("" (INST -1 "b" "n2")
            (("" (FLATTEN)
              (("" (LEMMA "sum_derivable_fun[(LAMBDA (r: real): r > 0)]")
                ((""
                  (INST -1
                   "(LAMBDA (x: real | x > 0): (sin(1 / x)) * polynomial(a, n1)(x))"
                   "(LAMBDA (x: real | x > 0): (cos(1 / x)) * polynomial(b, n2)(x))")
                  (("" (ASSERT)
                    (("" (EXPAND "+" -1)
                      (("" (ASSERT)
                        (("" (LEMMA "deriv_sum_fun[(LAMBDA (r: real): r > 0)]")
                          ((""
                            (INST -1
                             "(LAMBDA (x: real | x > 0): (sin(1 / x)) * polynomial(a, n1)(x))"
                             "(LAMBDA (x: real | x > 0): (cos(1 / x)) * polynomial(b, n2)(x))")
                            (("" (EXPAND "+" -1)
                              (("" (REPLACE -6)
                                (("" (REPLACE -4)
                                  (("" (REPLACE -1)
                                    (("" (DECOMPOSE-EQUALITY 1)
                                      (("1" (ASSERT)
                                        (("1" (LEMMA "chop_poly_add")
                                          (("1"
                                            (INST-CP -1 "-a"
                                             "(polynomial_prod(deriv_p(b, n2),
                                    max(0, n2 - 1),
                                    power_linear(0, 1, 2),
                                    2))"
                                             "n1" " 2 + max(0, n2 - 1)")
                                            (("1"
                                              (INST-CP -1 "b"
                                               "polynomial_prod(deriv_p(a, n1),
                                    max(0, n1 - 1),
                                    power_linear(0, 1, 2),
                                    2)"
                                               "n2" " 2 + max(0, n1 - 1)")
                                              (("1" (HIDE -1)
                                                (("1" (HIDE -3 -4 -5 -6 -7 -8)
                                                  (("1" (DECOMPOSE-EQUALITY -2)
                                                    (("1"
                                                      (DECOMPOSE-EQUALITY -2)
                                                      (("1" (INST -2 "x!1")
                                                        (("1" (INST -1 "x!1")
                                                          (("1"
                                                            (REPLACE -2 1 RL)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REPLACE -1 1
                                                                         RL)
                                                                (("1"
                                                                  (EXPAND "+"
                                                                          1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (SKEEP)
                                          (("2" (HIDE -2 -3 -4 -5 -6 -7)
                                            (("2" (EXPAND "^")
                                              (("2" (EXPAND "expt" -1)
                                                (("2" (EXPAND "expt" -1)
                                                  (("2" (EXPAND "expt" -1)
                                                    (("2" (DIV-BY -1 "x")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2)
                                        (("3" (HIDE -)
                                          (("3" (SKEEP) (("3" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("4" (HIDE 2)
                                        (("4" (HIDE -)
                                          (("4" (SKEEP) (("4" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("5" (HIDE -)
                                        (("5" (HIDE 2)
                                          (("5" (SKEEP) (("5" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("6" (HIDE -)
                                        (("6" (HIDE 2)
                                          (("6" (SKEEP)
                                            (("6" (EXPAND "^")
                                              (("6" (EXPAND "expt")
                                                (("6" (EXPAND "expt")
                                                  (("6" (EXPAND "expt")
                                                    (("6" (DIV-BY -2 "x")
                                                      (("6" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("7" (HIDE 2)
                                        (("7" (HIDE -)
                                          (("7" (SKEEP) (("7" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_sin1x_polyx2| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|) NIL
    (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL) NIL
    (|chop| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL) NIL
    (|power_linear| CONST-DECL "real" |polynomials| |reals|)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|polynomial_prod| CONST-DECL "real" |polynomials| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|chop_poly_add| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|deriv_cos1x_polyx2| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL))
   SHOSTAK))
 (|deriv_e1x_TCC1| 0
  (|deriv_e1x_TCC1-1| |nil| 3812879053
   ("" (FLATTEN)
    (("" (EXPAND "^")
      (("" (EXPAND "expt")
        (("" (EXPAND "expt")
          (("" (EXPAND "expt")
            (("" (SKEEP) (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^ CONST-DECL "real" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL))
   NIL
   (|deriv_e1x| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)" "nznum")))
 (|deriv_e1x| 0
  (|deriv_e1x-1| |nil| 3812880450
   ("" (LEMMA "derivable_exp")
    (("" (LEMMA "exp_deriv")
      (("" (HIDE -2)
        (("" (FLATTEN)
          (("" (LEMMA "derivable_subtype[real, (LAMBDA (r: real): r > 0)]")
            (("" (INST -1 "exp")
              (("" (ASSERT)
                (("" (EXPAND "restrict")
                  (("" (SPLIT -1)
                    (("1" (ASSERT)
                      (("1"
                        (LEMMA
                         "composition_derivable[(LAMBDA (r: real): r > 0),real]")
                        (("1"
                          (LEMMA
                           "deriv_composition[(LAMBDA (r: real): r > 0),real]")
                          (("1" (INST -2 "Lambda(x:real |x>0): -1/x" "exp" "_")
                            (("1"
                              (INST -1 "Lambda(x:real |x>0): -1/x" "exp" "_")
                              (("1"
                                (CASE
                                    "NOT     derivable?[(LAMBDA (r: real): r > 0)]
          (LAMBDA (x: real | x > 0): exp(-1 / x))
")
                                (("1" (EXPAND "derivable?" 1)
                                  (("1" (SKEEP)
                                    (("1" (INST -2 "x_1")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "o")
                                          (("1" (ASSERT)
                                            (("1" (HIDE 1)
                                              (("1"
                                                (LEMMA
                                                 "div_derivable[(LAMBDA (r: real): r > 0)]")
                                                (("1"
                                                  (INST -1
                                                   "Lambda(x:real|x>0): -1"
                                                   "Lambda(x:real |x>0): x"
                                                   "_")
                                                  (("1" (INST -1 "x_1")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "/" -1)
                                                        (("1" (SPLIT -1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "derivable?" -4)
                                                              (("1"
                                                                (INST -4
                                                                 "-1/x_1")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA
                                                               "const_derivable[(LAMBDA (r: real): r > 0)]")
                                                              (("2"
                                                                (INST -1 "-1"
                                                                 "x_1")
                                                                (("2"
                                                                  (EXPAND
                                                                   "const_fun"
                                                                   -1)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3"
                                                            (LEMMA
                                                             "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                            (("3"
                                                              (INST -1 "x_1")
                                                              (("3"
                                                                (EXPAND "I" -1)
                                                                (("3" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "deriv" 1)
                                    (("2" (DECOMPOSE-EQUALITY 1)
                                      (("1" (INST -2 "x!1")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -2)
                                            (("1" (EXPAND "o")
                                              (("1" (REPLACE -1)
                                                (("1" (DECOMPOSE-EQUALITY -6)
                                                  (("1" (INST -1 "-1/x!1")
                                                    (("1" (EXPAND "deriv" -1)
                                                      (("1" (REPLACE -1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "deriv_div[(LAMBDA (r: real): r > 0)]")
                                                            (("1"
                                                              (INST -1
                                                               "LAMBDA (x: real | x > 0): -1"
                                                               "LAMBDA (x: real | x > 0): x"
                                                               "x!1")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (SPLIT -1)
                                                                  (("1"
                                                                    (EXPAND "/"
                                                                            -1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "deriv_const[(LAMBDA (r: real): r > 0)]")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "-1"
                                                                             "x!1")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "const_fun"
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "deriv_identity[(LAMBDA (r: real): r > 0)]")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "I")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "^"
                                                                                               1)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "expt"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "expt"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "expt"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "derivable_const[(LAMBDA (r: real): r > 0)]")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "-1")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "const_fun"
                                                                           -1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "derivable?"
                                                                             -1)
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "x!1")
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (LEMMA
                                                                     "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                                    (("3"
                                                                      (INST -1
                                                                       "x!1")
                                                                      (("3"
                                                                        (EXPAND
                                                                         "I"
                                                                         -1)
                                                                        (("3"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (LEMMA
                                               "div_derivable[(LAMBDA (r: real): r > 0)]")
                                              (("2"
                                                (INST -1
                                                 "LAMBDA (x: real | x > 0): -1"
                                                 "LAMBDA (x: real | x > 0): x"
                                                 "x!1")
                                                (("2" (ASSERT)
                                                  (("2" (SPLIT -1)
                                                    (("1" (EXPAND "/" -1)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL)
                                                     ("2"
                                                      (LEMMA
                                                       "derivable_const[(LAMBDA (r: real): r > 0)]")
                                                      (("2" (INST -1 "-1")
                                                        (("2"
                                                          (EXPAND "const_fun"
                                                                  -1)
                                                          (("2"
                                                            (EXPAND
                                                             "derivable?" -1)
                                                            (("2"
                                                              (INST -1 "x!1")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("3" (ASSERT)
                                                      (("3"
                                                        (LEMMA
                                                         "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                        (("3" (INST -1 "x!1")
                                                          (("3" (EXPAND "I" -1)
                                                            (("3" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (EXPAND "derivable?" -4)
                                              (("3" (INST -4 "-1/x!1") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKEEP)
                                        (("2" (EXPAND "^")
                                          (("2" (EXPAND "expt" -1)
                                            (("2" (EXPAND "expt" -1)
                                              (("2" (EXPAND "expt" -1)
                                                (("2" (DIV-BY -1 "x")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (SKEEP)
                                        (("3" (ASSERT)
                                          (("3" (INST -3 "x_1")
                                            (("3" (ASSERT)
                                              (("3" (EXPAND "o")
                                                (("3" (ASSERT)
                                                  (("3" (HIDE 1)
                                                    (("3"
                                                      (EXPAND "derivable?" -4)
                                                      (("3" (INST -4 "-1/x_1")
                                                        (("3" (ASSERT)
                                                          (("3"
                                                            (LEMMA
                                                             "div_derivable[(LAMBDA (r: real): r > 0)]")
                                                            (("3"
                                                              (INST -1
                                                               "Lambda(x:real|x>0): -1"
                                                               "Lambda(x:real |x>0): x"
                                                               "_")
                                                              (("3"
                                                                (INST -1 "x_1")
                                                                (("3" (ASSERT)
                                                                  (("3"
                                                                    (EXPAND "/"
                                                                            -1)
                                                                    (("3"
                                                                      (EXPAND
                                                                       "derivable?"
                                                                       -4)
                                                                      (("3"
                                                                        (ASSERT)
                                                                        (("3"
                                                                          (LEMMA
                                                                           "const_derivable[(LAMBDA (r: real): r > 0)]")
                                                                          (("3"
                                                                            (INST
                                                                             -1
                                                                             "-1"
                                                                             "x_1")
                                                                            (("3"
                                                                              (EXPAND
                                                                               "const_fun"
                                                                               -1)
                                                                              (("3"
                                                                                (LEMMA
                                                                                 "identity_derivable[(LAMBDA (r: real): r > 0)]")
                                                                                (("3"
                                                                                  (INST
                                                                                   -1
                                                                                   "x_1")
                                                                                  (("3"
                                                                                    (EXPAND
                                                                                     "I"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "not_one_element?" 1)
                          (("2" (SKEEP)
                            (("2" (INST 1 "x+1") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "deriv_domain?" 1)
                          (("3" (SKEEP)
                            (("3" (INST 1 "e!1/2") (("3" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "deriv_domain?" 1 1)
                      (("2" (SKEEP)
                        (("2" (INST 1 "e!1/2") (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "not_one_element?" 1 1)
                      (("3" (SKEEP)
                        (("3" (INST 1 "x+1") (("3" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exp_deriv| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_composition| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|deriv_identity| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_div| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (O CONST-DECL "T3" |function_props| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|const_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (I CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|identity_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|) NIL
    (|div_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|composition_derivable| FORMULA-DECL NIL |chain_rule| |analysis|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|derivable_exp| FORMULA-DECL NIL |ln_exp| |lnexp|))
   SHOSTAK))
 (|deriv_e_sin_cos1x_TCC1| 0
  (|deriv_e_sin_cos1x_TCC1-1| |nil| 3812925618
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (EXPAND "^")
        (("" (EXPAND "expt")
          (("" (EXPAND "expt")
            (("" (EXPAND "expt")
              (("" (DIV-BY -2 "x") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt| DEF-DECL "real" |exponentiation| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL))
   NIL
   (|deriv_e_sin_cos1x| SUBTYPE "exponentiation.^(smooth_not_analytic.x, 2)"
    "nznum")))
 (|deriv_e_sin_cos1x| 0
  (|deriv_e_sin_cos1x-1| |nil| 3812925816
   ("" (SKEEP)
    (("" (LEMMA "derivable_prod[(LAMBDA (r: real): r > 0)]")
      (("" (LEMMA "deriv_e1x")
        (("" (FLATTEN)
          (("" (LEMMA "deriv_sin_cos1x")
            ((""
              (INST -4 "LAMBDA (x: real | x > 0): exp(-1 / x)"
               "(LAMBDA (x: real | x > 0):
                 (sin(1 / x) * polynomial(a, n1)(x) +
                   cos(1 / x) * polynomial(b, n2)(x)))")
              (("1" (EXPAND "*" -4)
                (("1" (ASSERT)
                  (("1" (INST -1 "a" "b" "n1" "n2")
                    (("1" (FLATTEN)
                      (("1" (LEMMA "deriv_prod_fun[(LAMBDA (r: real): r > 0)]")
                        (("1"
                          (INST -1 "LAMBDA (x: real | x > 0): exp(-1 / x)"
                           "(LAMBDA (x: real | x > 0):
                   (sin(1 / x) * polynomial(a, n1)(x) +
                     cos(1 / x) * polynomial(b, n2)(x)))")
                          (("1" (EXPAND "*" -1)
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "+" 1)
                                (("1" (REPLACE -5)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -3 1)
                                      (("1" (ASSERT)
                                        (("1" (HIDE -)
                                          (("1" (LEMMA "chop_poly_add")
                                            (("1"
                                              (INST-CP -1 "chop(-a, n1) +
                             chop(polynomial_prod(deriv_p(b, n2),
                                                  max(0, n2 - 1),
                                                  power_linear(0, 1, 2),
                                                  2),
                                  2 + max(0, n2 - 1))"
                                               "b"
                                               "max(n1, 2 + max(0, n2 - 1))"
                                               "n2")
                                              (("1"
                                                (INST-CP -1 "chop(b, n2) +
                               chop(polynomial_prod(deriv_p(a, n1),
                                                    max(0, n1 - 1),
                                                    power_linear(0, 1, 2),
                                                    2),
                                    2 + max(0, n1 - 1))"
                                                 "a"
                                                 "max(n2, 2 + max(0, n1 - 1))"
                                                 "n1")
                                                (("1" (HIDE -1)
                                                  (("1"
                                                    (INST 1 "chop(chop(b, n2) +
                        chop(polynomial_prod(deriv_p(a, n1),
                                             max(0, n1 - 1),
                                             power_linear(0, 1, 2),
                                             2),
                             2 + max(0, n1 - 1)),
                       max(n2, 2 + max(0, n1 - 1)))
                   + chop(a, n1)"
                                                     "chop(chop(-a, n1) +
                        chop(polynomial_prod(deriv_p(b, n2),
                                             max(0, n2 - 1),
                                             power_linear(0, 1, 2),
                                             2),
                             2 + max(0, n2 - 1)),
                       max(n1, 2 + max(0, n2 - 1)))
                   + chop(b, n2)"
                                                     "max(max(n2, 2 + max(0, n1 - 1)), n1)"
                                                     "max(max(n1, 2 + max(0, n2 - 1)), n2)")
                                                    (("1"
                                                      (DECOMPOSE-EQUALITY 1)
                                                      (("1"
                                                        (DECOMPOSE-EQUALITY -2)
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY
                                                           -2)
                                                          (("1" (INST -1 "x!1")
                                                            (("1"
                                                              (INST -2 "x!1")
                                                              (("1"
                                                                (EXPAND "+")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2" (HIDE -)
                                                          (("2" (SKEEP)
                                                            (("2" (EXPAND "^")
                                                              (("2"
                                                                (EXPAND "expt")
                                                                (("2"
                                                                  (EXPAND
                                                                   "expt")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "expt")
                                                                    (("2"
                                                                      (DIV-BY
                                                                       -1
                                                                       "x_1")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -)
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL)
                                                     ("3" (HIDE -)
                                                      (("3" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (HIDE -1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (INST -1 "a" "b" "n1" "n2") (("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|derivable_prod| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) NIL NIL
    (|sin| CONST-DECL "real" |sincos_def| |trig|) NIL NIL
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|power_linear| CONST-DECL "real" |polynomials| |reals|)
    (|deriv_p| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|polynomial_prod| CONST-DECL "real" |polynomials| |reals|) NIL
    (|chop| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|chop_poly_add| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|deriv_prod_fun| FORMULA-DECL NIL |derivatives| |analysis|) NIL
    (|deriv_sin_cos1x| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|deriv_e1x| FORMULA-DECL NIL |smooth_not_analytic| NIL))
   SHOSTAK))
 (|deriv_e_sin_cos1xk_TCC1| 0
  (|deriv_e_sin_cos1xk_TCC1-1| |nil| 3812927247
   ("" (SKEEP)
    (("" (LEMMA "expt_pos_aux")
      (("" (HIDE -2)
        (("" (SKEEP)
          (("" (INST -1 "k+2" "x")
            (("" (EXPAND "^" -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|deriv_e_sin_cos1xk| SUBTYPE
    "exponentiation.^(smooth_not_analytic.x, ((number_fields.+)(smooth_not_analytic.k, 2)))"
    "nznum")))
 (|deriv_e_sin_cos1xk| 0
  (|deriv_e_sin_cos1xk-1| |nil| 3812927456
   ("" (SKEEP)
    (("" (LEMMA "deriv_e_sin_cos1x")
      (("" (INST -1 "a" "b" "n1" "n2")
        (("" (ASSERT)
          (("" (LEMMA "derivable_div[(LAMBDA (r: real): r > 0)]")
            ((""
              (INST -1 "(LAMBDA (x: real | x > 0):
                 polynomial(a, n1)(x) * exp(-1 / x) * sin(1 / x) +
                  polynomial(b, n2)(x) * cos(1 / x) * exp(-1 / x))"
               "(LAMBDA (x: real | x > 0): x^k)")
              (("1" (EXPAND "/" -1)
                (("1" (ASSERT)
                  (("1" (LEMMA "deriv_div_fun[(LAMBDA (r: real): r > 0)]")
                    (("1"
                      (INST -1 "(LAMBDA (x: real | x > 0):
                     polynomial(a, n1)(x) * exp(-1 / x) * sin(1 / x) +
                      polynomial(b, n2)(x) * cos(1 / x) * exp(-1 / x))"
                       "(LAMBDA (x: real | x > 0): x^k)")
                      (("1" (EXPAND "/" -1)
                        (("1" (REPLACE -1)
                          (("1" (FLATTEN)
                            (("1" (SKEEP)
                              (("1"
                                (INST 1
                                 "chop(polynomial_prod(power_linear(0, 1, 1),
                                             1,
                                             -1 * (k * a),
                                             n1),
                             1 + n1)
                         + chop(c, n3)"
                                 "chop(polynomial_prod(power_linear(0, 1, 1),
                                             1,
                                             -1 * (k * b),
                                             n2),
                             1 + n2)
                         + chop(d, n4)"
                                 "max(1 + n1, n3)" "max(1 + n2, n4)")
                                (("1" (REPLACE -4 1)
                                  (("1" (DECOMPOSE-EQUALITY 1)
                                    (("1" (EXPAND "*" 1)
                                      (("1" (EXPAND "-" 1)
                                        (("1" (ASSERT)
                                          (("1" (CASE "k=0")
                                            (("1" (REPLACE -1)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (CASE
                                                      "deriv[(LAMBDA(r:real): r>0)]((LAMBDA (x: real | x > 0): 1))(x!1) = 0")
                                                  (("1" (REPLACE -1)
                                                    (("1" (ASSERT)
                                                      (("1" (HIDE -)
                                                        (("1"
                                                          (EXPAND
                                                           "power_linear" 1 1)
                                                          (("1"
                                                            (EXPAND
                                                             "power_linear" 1)
                                                            (("1"
                                                              (EXPAND
                                                               "polynomial_prod"
                                                               1)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (CASE
                                                                      "chop(LAMBDA (i_1: nat) -> real:
                                           sigma(max(i_1 - n1, 0), 1, LAMBDA (k: nat): 0),
                                         1 + n1)
                                     + chop(c, n3) = chop(c,n3)")
                                                                  (("1"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("1"
                                                                      (CASE
                                                                          "chop(LAMBDA (i_1: nat) -> real:
                                              sigma(max(i_1 - n2, 0), 1, LAMBDA (k: nat): 0),
                                            1 + n2)
                                        + chop(d, n4) = chop(d,n4)")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "chop_poly")
                                                                            (("1"
                                                                              (INST-CP
                                                                               -1
                                                                               "c"
                                                                               "n3"
                                                                               " max(1 + n1, n3)")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     -2)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         1
                                                                                         RL)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -2
                                                                                           "d"
                                                                                           "n4"
                                                                                           "max(1 + n2, n4)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         2)
                                                                        (("2"
                                                                          (HIDE
                                                                           -1)
                                                                          (("2"
                                                                            (DECOMPOSE-EQUALITY
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "+"
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "chop"
                                                                                 1)
                                                                                (("1"
                                                                                  (LIFT-IF
                                                                                   1)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     1)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "sigma_zero[nat]")
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (SKEEP)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (HIDE
                                                                         2)
                                                                        (("3"
                                                                          (SKEEP)
                                                                          (("3"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY
                                                                       1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "+" 1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "chop"
                                                                           1)
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             1)
                                                                            (("1"
                                                                              (SPLIT
                                                                               1)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "sigma_zero[nat]")
                                                                                  (("1"
                                                                                    (INST?)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKEEP)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (HIDE 2)
                                                                    (("3"
                                                                      (SKEEP)
                                                                      (("3"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (HIDE -)
                                                      (("2"
                                                        (LEMMA
                                                         "deriv_const_fun[(LAMBDA(r:real): r>0)]")
                                                        (("2" (INST?)
                                                          (("2"
                                                            (DECOMPOSE-EQUALITY
                                                             -1)
                                                            (("2"
                                                              (INST -1 "x!1")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (HIDE 2)
                                                    (("3" (HIDE -)
                                                      (("3"
                                                        (LEMMA
                                                         "derivable_const[(LAMBDA(r:real): r>0)]")
                                                        (("3" (INST -1 "1")
                                                          (("3"
                                                            (EXPAND "const_fun"
                                                                    -1)
                                                            (("3" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2"
                                                (CASE
                                                    "deriv[(Lambda(r:real):r>0)]((LAMBDA (x: real | x > 0): x ^ k))(x!1) = k * x!1^(k-1)")
                                                (("1" (REPLACE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (HIDE -)
                                                      (("1"
                                                        (LEMMA
                                                         "scal_polynomial2")
                                                        (("1"
                                                          (INST-CP -1 "a" "k"
                                                           "n1" "x!1")
                                                          (("1"
                                                            (CASE
                                                                "NOT (polynomial(a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                            x!1 ^ (k - 1)
                                            * k) = (k * polynomial(a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                            x!1 ^ (k - 1))")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (REPLACE -1 2)
                                                              (("2"
                                                                (REPLACE -3 2
                                                                         RL)
                                                                (("2"
                                                                  (INST -2 "b"
                                                                   "k" "n2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (CASE
                                                                        "NOT polynomial(b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                               x!1 ^ (k - 1)
                                               * k = k * polynomial(b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                               x!1 ^ (k - 1)
                                               ")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (REPLACE
                                                                       -1 2)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -3 2
                                                                         RL)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (CASE
                                                                                "NOT (-1 *
                                                  (polynomial(k * a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                    x!1 ^ (k - 1)))
                                                  -
                                                  polynomial(k * b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                   x!1 ^ (k - 1) =
                                                  (-1*polynomial(k * a, n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                    x!1 ^ (k - 1))
                                                  +
                                                  -1*polynomial(k * b, n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                   x!1 ^ (k - 1)")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (REPLACE
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "scal_polynomial2")
                                                                                  (("2"
                                                                                    (INST-CP
                                                                                     -1
                                                                                     "k*a"
                                                                                     "-1"
                                                                                     "n1"
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (INST-CP
                                                                                       -1
                                                                                       "k*b"
                                                                                       "-1"
                                                                                       "n2"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -2
                                                                                         2
                                                                                         RL)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -3
                                                                                           2
                                                                                           RL)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (CASE
                                                                                                  "NOT (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                       polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                      / x!1 ^ 2
                                                      * x!1 ^ k = (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                       polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                      * x!1 ^ (k - 2)")
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "expt_div")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "k"
                                                                                                       "2"
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (CASE
                                                                                                              "NOT (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                          polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                         / x!1 ^ 2
                                                         * x!1 ^ k = (polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) +
                                                          polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                         * ( x!1 ^ k / x!1 ^ 2)")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (REPLACE
                                                                                                                 -2
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (PROPAX)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (REPLACE
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "expt_plus")
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     -1
                                                                                                     "k"
                                                                                                     "k"
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (REPLACE
                                                                                                         -1
                                                                                                         2
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (CASE
                                                                                                                "NOT (polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                           x!1 ^ (k - 1)) = x!1^(k-2) * (x!1*polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) * sin(1 / x!1))")
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "expt_plus")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -1
                                                                                                                 "k-2"
                                                                                                                 "1"
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "expt_x1")
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "x!1")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (CASE
                                                                                                                    "NOT polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                               x!1 ^ (k - 1) = x!1^(k-2) * (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) * exp(-1 / x!1))")
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "expt_x1")
                                                                                                                  (("1"
                                                                                                                    (LEMMA
                                                                                                                     "expt_plus")
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       -2
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (INST
                                                                                                                         -1
                                                                                                                         "k-2"
                                                                                                                         "1"
                                                                                                                         "x!1")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (REPLACE
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (CASE
                                                                                                                        "NOT  (x!1 ^ (k - 2) *
                                                                  (x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                    sin(1 / x!1))
                                                                  +
                                                                  x!1 ^ (k - 2) *
                                                                   (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                     exp(-1 / x!1))
                                                                  +
                                                                  polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1) *
                                                                   x!1 ^ (k - 2)
                                                                  +
                                                                  polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1) *
                                                                   x!1 ^ (k - 2)) =  x!1 ^ (k - 2) * (
                                                                  (x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                    sin(1 / x!1))
                                                                  +
                                                                   (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                     exp(-1 / x!1))
                                                                  +
                                                                  polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1)
                                                                  +
                                                                  polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (REPLACE
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (CASE
                                                                                                                            "NOT x!1 ^ (k - 2) *
                                                                     ((x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                        sin(1 / x!1))
                                                                       +
                                                                       (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                         exp(-1 / x!1))
                                                                       + polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1)
                                                                       + polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                                     / x!1 ^ (2 * k) =
                                                                     ((x!1 * polynomial(-1 * (k * a), n1)(x!1) * exp(-1 / x!1) *
                                                                        sin(1 / x!1))
                                                                       +
                                                                       (x!1 * polynomial(-1 * (k * b), n2)(x!1) * cos(1 / x!1) *
                                                                         exp(-1 / x!1))
                                                                       + polynomial(c, n3)(x!1) * exp(-1 / x!1) * sin(1 / x!1)
                                                                       + polynomial(d, n4)(x!1) * cos(1 / x!1) * exp(-1 / x!1))
                                                                     / x!1 ^ (k+2)")
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (LEMMA
                                                                                                                               "expt_div")
                                                                                                                              (("1"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "k-2"
                                                                                                                                 "2*k"
                                                                                                                                 "x!1")
                                                                                                                                (("1"
                                                                                                                                  (ASSERT
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (LEMMA
                                                                                                                                     "expt_inverse")
                                                                                                                                    (("1"
                                                                                                                                      (INST
                                                                                                                                       -1
                                                                                                                                       "k+2"
                                                                                                                                       "x!1")
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (REPLACE
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (HIDE
                                                                                                                             -)
                                                                                                                            (("2"
                                                                                                                              (LEMMA
                                                                                                                               "power_linear_polynomial")
                                                                                                                              (("2"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "0"
                                                                                                                                 "1"
                                                                                                                                 "1"
                                                                                                                                 "x!1"
                                                                                                                                 "1")
                                                                                                                                (("2"
                                                                                                                                  (ASSERT
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (CASE
                                                                                                                                        "NOT 1*x!1=x!1")
                                                                                                                                    (("1"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (REPLACE
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (LEMMA
                                                                                                                                         "polynomial_prod_def")
                                                                                                                                        (("2"
                                                                                                                                          (INST-CP
                                                                                                                                           -1
                                                                                                                                           "power_linear(0, 1, 1)"
                                                                                                                                           "-1 * (k * a)"
                                                                                                                                           "n1"
                                                                                                                                           "1"
                                                                                                                                           "x!1")
                                                                                                                                          (("2"
                                                                                                                                            (CASE
                                                                                                                                                "NOT x!1 *
                                                                             polynomial(-1 * (k * a), n1)(x!1)
                                                                             =
                                                                             polynomial(polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * a),
                                                                                                        n1),
                                                                                        1 + n1)
                                                                                       (x!1)")
                                                                                                                                            (("1"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (REPLACE
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (HIDE
                                                                                                                                                 -3
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (INST-CP
                                                                                                                                                   -1
                                                                                                                                                   "power_linear(0, 1, 1)"
                                                                                                                                                   "-1 * (k * b)"
                                                                                                                                                   "n2"
                                                                                                                                                   "1"
                                                                                                                                                   "x!1")
                                                                                                                                                  (("2"
                                                                                                                                                    (CASE
                                                                                                                                                        "NOT x!1 *
                                                                       polynomial(-1 * (k * b), n2)(x!1)
                                                                       =
                                                                       polynomial(polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * b),
                                                                                                  n2),
                                                                                  1 + n2)
                                                                                 (x!1)")
                                                                                                                                                    (("1"
                                                                                                                                                      (ASSERT)
                                                                                                                                                      NIL
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (REPLACE
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (LEMMA
                                                                                                                                                         "chop_poly_add")
                                                                                                                                                        (("2"
                                                                                                                                                          (INST-CP
                                                                                                                                                           -1
                                                                                                                                                           "polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * a),
                                                                                                       n1)"
                                                                                                                                                           "c"
                                                                                                                                                           "1 + n1"
                                                                                                                                                           "n3")
                                                                                                                                                          (("2"
                                                                                                                                                            (INST
                                                                                                                                                             -1
                                                                                                                                                             "polynomial_prod(power_linear(0, 1, 1), 1, -1 * (k * b),n2)"
                                                                                                                                                             "d"
                                                                                                                                                             "1 + n2"
                                                                                                                                                             "n4")
                                                                                                                                                            (("2"
                                                                                                                                                              (ASSERT)
                                                                                                                                                              (("2"
                                                                                                                                                                (DECOMPOSE-EQUALITY
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (DECOMPOSE-EQUALITY
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (INST
                                                                                                                                                                     -2
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (INST
                                                                                                                                                                       -1
                                                                                                                                                                       "x!1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (HIDE
                                                                                                                                                                         -4
                                                                                                                                                                         -5)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (HIDE
                                                                                                                                                                           -4
                                                                                                                                                                           -5)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (CASE
                                                                                                                                                                                "NOT (LAMBDA (x_1: nat) -> real:  -1 * (k * a(x_1))) =   -1 * (k * a)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (DECOMPOSE-EQUALITY
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (EXPAND
                                                                                                                                                                                 "*"
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (PROPAX)
                                                                                                                                                                                  NIL
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (REPLACE
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (CASE
                                                                                                                                                                                    "NOT (LAMBDA(x_1: nat) -> real:  -1 * (k * b(x_1))) =   -1 * (k * b)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (ASSERT)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (DECOMPOSE-EQUALITY
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (EXPAND
                                                                                                                                                                                       "*")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (PROPAX)
                                                                                                                                                                                        NIL
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (REPLACE
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (REPLACE
                                                                                                                                                                                     -1
                                                                                                                                                                                     2
                                                                                                                                                                                     RL)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (REPLACE
                                                                                                                                                                                       -1
                                                                                                                                                                                       2
                                                                                                                                                                                       LR)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (ASSERT)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (REPLACE
                                                                                                                                                                                           -3
                                                                                                                                                                                           2
                                                                                                                                                                                           RL)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (REPLACE
                                                                                                                                                                                             -4
                                                                                                                                                                                             2
                                                                                                                                                                                             RL)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (EXPAND
                                                                                                                                                                                               "+"
                                                                                                                                                                                               2)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (PROPAX)
                                                                                                                                                                                                NIL
                                                                                                                                                                                                NIL))
                                                                                                                                                                                              NIL))
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("3"
                                                                                                                          (HIDE-ALL-BUT
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (LEMMA
                                                                                                                             "expt_pos_aux")
                                                                                                                            (("3"
                                                                                                                              (EXPAND
                                                                                                                               "^"
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (INST?)
                                                                                                                                (("3"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 3)
                                                  (("2" (HIDE -)
                                                    (("2"
                                                      (LEMMA
                                                       "deriv_x_n[(LAMBDA(r:real): r>0)]")
                                                      (("2" (INST?)
                                                        (("2" (INST -1 "k")
                                                          (("2" (ASSERT)
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (DECOMPOSE-EQUALITY
                                                                 -2)
                                                                (("2"
                                                                  (INST -1
                                                                   "x!1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (HIDE 3)
                                                  (("3" (HIDE -)
                                                    (("3"
                                                      (LEMMA
                                                       "deriv_x_n[(LAMBDA(r:real): r>0)]")
                                                      (("3" (INST?)
                                                        (("3" (INST -1 "k")
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -)
                                      (("2" (LEMMA "expt_pos_aux")
                                        (("2" (SKEEP)
                                          (("2" (INST -1 "2+k" "x")
                                            (("2" (EXPAND "^")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (HIDE -)
                                      (("3" (EXPAND "*" 1)
                                        (("3" (SKEEP)
                                          (("3" (LEMMA "expt_pos_aux")
                                            (("3" (EXPAND "^")
                                              (("3" (INST?)
                                                (("3" (DIV-BY -2 "expt(x_1,k)")
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("4" (HIDE -)
                                      (("4" (CASE "k=0")
                                        (("1" (REPLACE -1)
                                          (("1" (ASSERT)
                                            (("1" (SKEEP)
                                              (("1"
                                                (LEMMA
                                                 "derivable_const[(LAMBDA (r: real): r > 0)]")
                                                (("1" (INST -1 "1")
                                                  (("1" (EXPAND "const_fun" -1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKEEP)
                                          (("2"
                                            (LEMMA
                                             "deriv_x_n[(LAMBDA(r:real): r>0)]")
                                            (("2" (INST?)
                                              (("2" (INST -1 "k")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("5" (SKEEP)
                                      (("5" (HIDE -2 -3 -4 -5)
                                        (("5" (EXPAND "^")
                                          (("5" (EXPAND "expt")
                                            (("5" (EXPAND "expt")
                                              (("5" (EXPAND "expt")
                                                (("5" (DIV-BY -1 "x")
                                                  (("5" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (HIDE -)
                          (("2" (CASE "k=0")
                            (("1"
                              (LEMMA
                               "derivable_const[(LAMBDA (r: real): r > 0)]")
                              (("1" (INST -1 "1")
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "const_fun" -1)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "deriv_x_n[(LAMBDA(r:real): r>0)]")
                              (("2" (INST?)
                                (("2" (INST -1 "k") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE 2)
                        (("3" (HIDE -)
                          (("3" (SKEEP)
                            (("3" (LEMMA "expt_pos_aux")
                              (("3" (EXPAND "^")
                                (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("4" (HIDE 2) (("4" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (HIDE -)
                  (("2" (CASE "k=0")
                    (("1" (REPLACE -1)
                      (("1"
                        (LEMMA "derivable_const[(LAMBDA (r: real): r > 0)]")
                        (("1" (ASSERT)
                          (("1" (INST -1 "1")
                            (("1" (EXPAND "const_fun") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (LEMMA "deriv_x_n[(LAMBDA(r:real): r>0)]")
                        (("2" (INST?)
                          (("2" (INST -1 "k") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (HIDE -)
                  (("3" (SKEEP)
                    (("3" (LEMMA "expt_pos_aux")
                      (("3" (EXPAND "^")
                        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (HIDE 2) (("4" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|deriv_e_sin_cos1x| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|) NIL NIL
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL NIL
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL) NIL
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) NIL
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_x_n| FORMULA-DECL NIL |derivatives| |analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|expt_div| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|power_linear_polynomial| FORMULA-DECL NIL |polynomials| |reals|)
    (|chop_poly_add| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|polynomial_prod_def| FORMULA-DECL NIL |polynomials| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs|
     NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|chop_poly| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|sigma_zero| FORMULA-DECL NIL |sigma| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    NIL (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) NIL NIL
    (|chop| CONST-DECL "sequence[real]" |smooth_not_analytic| NIL)
    (|polynomial_prod| CONST-DECL "real" |polynomials| |reals|)
    (|power_linear| CONST-DECL "real" |polynomials| |reals|) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives|
     |analysis|)
    NIL
    (|constant_seq2| APPLICATION-JUDGEMENT "(convergent_nz?)" |convergence_ops|
     |analysis|)
    (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) NIL
    (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops|
     |analysis|)
    (> CONST-DECL "bool" |reals| NIL)
    (|derivable_div| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|init_deriv_n| 0
  (|init_deriv_n-1| |nil| 3812932679
   ("" (INDUCT "n")
    (("1" (FLATTEN)
      (("1" (ASSERT)
        (("1" (EXPAND "restrict" -1)
          (("1" (EXPAND "nderiv" 1)
            (("1" (EXPAND "restrict" 1)
              (("1" (EXPAND "sm" 1)
                (("1"
                  (INST 1 "Lambda(i:nat): IF i=0 THEN 1 ELSE 0 ENDIF"
                   "Lambda(i:nat): 0" "0" "0" "0")
                  (("1" (DECOMPOSE-EQUALITY 1)
                    (("1" (EXPAND "polynomial" 1)
                      (("1" (EXPAND "sigma" 1)
                        (("1" (EXPAND "sigma" 1) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (LEMMA " nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
        (("2" (INST -1 "sm" "j")
          (("2" (FLATTEN)
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (EXPAND "restrict")
                  (("2" (ASSERT)
                    (("2" (HIDE -3)
                      (("2" (SKEEP)
                        (("2"
                          (LEMMA
                           "nderiv_derivable_aux[(LAMBDA (r: real): r > 0)]")
                          (("2" (INST -1 "sm" "j")
                            (("2" (ASSERT)
                              (("2" (EXPAND "restrict")
                                (("2" (REPLACE -1)
                                  (("2" (REPLACE -4 1)
                                    (("2" (LEMMA "deriv_e_sin_cos1xk")
                                      (("2" (INST -1 "c" "d" "n3" "n4" "k")
                                        (("2" (FLATTEN)
                                          (("2" (SKEEP)
                                            (("2"
                                              (INST 1 "c_1" "d_1" "n3_1" "n4_1"
                                               "k+2")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (SKEEP)
          (("3" (LEMMA "expt_pos_aux")
            (("3" (EXPAND "^") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nderiv_derivable_aux| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|deriv_e_sin_cos1xk| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|nderiv_derivable_eqv| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|)
    (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL))
   SHOSTAK))
 (|deriv_sm_n| 0
  (|deriv_sm_n-1| |nil| 3812933463
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (LEMMA "init_deriv_n")
      (("2" (INST -1 "0")
        (("2" (ASSERT)
          (("2" (SPLIT -1)
            (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3"
          (CASE "NOT (derivable_n_times?[(LAMBDA (r: real): r > 0)]
           (restrict[real, (LAMBDA (r: real): r > 0), real](sm), j + 1))")
          (("1" (HIDE 2)
            (("1" (LEMMA "nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
              (("1" (INST?)
                (("1" (FLATTEN)
                  (("1" (ASSERT)
                    (("1" (REPLACE -3)
                      (("1" (LEMMA "deriv_e_sin_cos1xk")
                        (("1" (INST -1 "c" "d" "n3" "n4" "k")
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (LEMMA "init_deriv_n")
              (("2" (INST -1 "1+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 1)
      (("4" (SKEEP)
        (("4" (HIDE -1)
          (("4" (SKEEP)
            (("4" (LEMMA "expt_pos_aux")
              (("4" (EXPAND "^") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 1)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (LEMMA "expt_pos_aux")
            (("5" (EXPAND "^" -3) (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nderiv_derivable_eqv| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|deriv_e_sin_cos1xk| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|init_deriv_n| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|)
    (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL))
   SHOSTAK))
 (|abs_between| 0
  (|abs_between-1| |nil| 3813014718 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|nonneg_real_max| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|bound_sin_p_cos_p_TCC1| 0
  (|bound_sin_p_cos_p_TCC1-1| |nil| 3812934451 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|bound_sin_p_cos_p| SUBTYPE "smooth_not_analytic.x" "nznum")))
 (|bound_sin_p_cos_p| 0
  (|bound_sin_p_cos_p-1| |nil| 3812995497
   ("" (SKEEP)
    (("" (LEMMA "poly_attains_maximum")
      (("" (LEMMA " poly_attains_minimum")
        (("" (INST-CP -2 "a" "n1" "0" "1")
          (("" (INST -2 "b" "n2" "0" "1")
            (("" (INST-CP -1 "a" "n1" "0" "1")
              (("" (INST -1 "b" "n2" "0" "1")
                (("" (ASSERT)
                  (("" (SKEEP*)
                    (("" (ASSERT)
                      ((""
                        (INST 1
                         "max(abs(polynomial(a, n1)(c!1)),abs(polynomial(a, n1)(c!3)))+ max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2))) + 1")
                        (("" (SKEEP)
                          ((""
                            (CASE " abs(cos(1 / x) * polynomial(b, n2)(x) +
                  sin(1 / x) * polynomial(a, n1)(x))
              <=
              max(abs(polynomial(a, n1)(c!1)), abs(polynomial(a, n1)(c!3))) +
               max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2)))")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE 2)
                              (("2" (INST -3 "x")
                                (("2" (INST -6 "x")
                                  (("2" (INST -9 "x")
                                    (("2" (INST -12 "x")
                                      (("2" (ASSERT)
                                        (("2" (LEMMA "triangle")
                                          (("2" (INST?)
                                            (("2"
                                              (CASE
                                                  " abs(cos(1 / x) * polynomial(b, n2)(x)) +
        abs(sin(1 / x) * polynomial(a, n1)(x)) <= max(abs(polynomial(a, n1)(c!1)), abs(polynomial(a, n1)(c!3))) +
        max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2)))")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2" (LEMMA "abs_mult")
                                                  (("2"
                                                    (INST-CP -1 "cos(1 / x)"
                                                     "polynomial(b, n2)(x)")
                                                    (("2"
                                                      (INST -1 "sin(1 / x)"
                                                       " polynomial(a, n1)(x)")
                                                      (("2" (REPLACE -1)
                                                        (("2" (REPLACE -2)
                                                          (("2"
                                                            (CASE
                                                                "abs(cos(1 / x)) <=1")
                                                            (("1"
                                                              (CASE
                                                                  " abs(sin(1 / x))<=1")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "abs_between")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (CASE
                                                                          " (abs(polynomial(b, n2)(x)) +
        abs(polynomial(a, n1)(x))) <= max(abs(polynomial(a, n1)(c!1)), abs(polynomial(a, n1)(c!3))) +
        max(abs(polynomial(b, n2)(c)), abs(polynomial(b, n2)(c!2)))")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (MULT-BY
                                                                           -3
                                                                           " abs(polynomial(a, n1)(x))")
                                                                          (("1"
                                                                            (MULT-BY
                                                                             -4
                                                                             " abs(polynomial(b, n2)(x))")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         2)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (INST-CP
                                                                             -1
                                                                             " polynomial(a, n1)(c!1)"
                                                                             "(polynomial(a, n1)(x))"
                                                                             "polynomial(a, n1)(c!3)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 " polynomial(b, n2)(c)"
                                                                                 "polynomial(b, n2)(x)"
                                                                                 "polynomial(b, n2)(c!2)")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (LEMMA
                                                                 "sin_range")
                                                                (("2"
                                                                  (INST -1
                                                                   "1/x")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "abs" 1
                                                                       1)
                                                                      (("2"
                                                                        (HIDE
                                                                         -3 -4
                                                                         -5 -6
                                                                         -7 -8
                                                                         -9 -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         -14
                                                                         -15
                                                                         -16
                                                                         -17
                                                                         -18)
                                                                        (("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE -)
                                                              (("2" (HIDE 2)
                                                                (("2"
                                                                  (LEMMA
                                                                   "cos_range")
                                                                  (("2"
                                                                    (INST -1
                                                                     "1/x")
                                                                    (("2"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|poly_attains_maximum| FORMULA-DECL NIL |polynomials| |reals|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|cos_range| JUDGEMENT-TCC NIL |sincos| |trig|)
    (|abs_between| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sin_range| JUDGEMENT-TCC NIL |sincos| |trig|)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_real_max| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (< CONST-DECL "bool" |reals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|poly_attains_minimum| FORMULA-DECL NIL |polynomials| |reals|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|lnx_derivable_TCC1| 0
  (|lnx_derivable_TCC1-1| |nil| 3813047370 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|lnx_derivable| SUBTYPE "smooth_not_analytic.x" "posreal")))
 (|lnx_derivable_TCC2| 0
  (|lnx_derivable_TCC2-1| |nil| 3813047370
   ("" (SKEEP)
    (("" (EXPAND "deriv_domain?" 1)
      (("" (SKEEP) (("" (INST 1 "e!1/2") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL))
   NIL
   (|lnx_derivable| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>=(r, smooth_not_analytic.c))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (|lnx_derivable_TCC3| 0
  (|lnx_derivable_TCC3-1| |nil| 3813047370
   ("" (SKEEP)
    (("" (EXPAND "not_one_element?" 1)
      (("" (SKEEP) (("" (INST 1 "x+1") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   NIL
   (|lnx_derivable| ASSUMING
    "analysis@derivatives[(LAMBDA (r: reals.real): reals.>=(r, smooth_not_analytic.c))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|lnx_derivable_TCC4| 0
  (|lnx_derivable_TCC4-1| |nil| 3813047370
   ("" (SKEEP) (("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL (|lnx_derivable| SUBTYPE "smooth_not_analytic.x" "nznum")))
 (|lnx_derivable| 0
  (|lnx_derivable-1| |nil| 3813047695
   ("" (LEMMA "ln_derivable")
    (("" (SKEEP)
      ((""
        (CASE "NOT derivable?[(LAMBDA (r: real): r >= c)]
          (LAMBDA (x: real | x >= c): -x + k * ln(x))")
        (("1" (HIDE 2)
          (("1"
            (CASE "derivable?[(LAMBDA (r: real): r >= c)]
          (LAMBDA (x: real | x >= c): -x)")
            (("1"
              (CASE "derivable?[(LAMBDA (r: real): r >= c)]
          (LAMBDA (x: real | x >= c): k * ln(x))")
              (("1" (LEMMA "derivable_sum[(LAMBDA (r: real): r >= c)]")
                (("1"
                  (INST -1 " (LAMBDA (x: real | x >= c): -x) "
                   "LAMBDA (x: real | x >= c): k * ln(x)")
                  (("1" (EXPAND "+") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "scal_derivable[(LAMBDA (r: real): r >= c)]")
                  (("2" (EXPAND "derivable?" 1)
                    (("2" (SKEEP)
                      (("2"
                        (INST -1 "k" "(LAMBDA (x: real | x >= c): ln(x))"
                         "x_1")
                        (("2" (ASSERT)
                          (("2" (EXPAND "*")
                            (("2" (ASSERT)
                              (("2" (HIDE 2)
                                (("2"
                                  (LEMMA
                                   "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                                  (("2" (INST -1 "ln")
                                    (("2" (ASSERT)
                                      (("2" (SPLIT -1)
                                        (("1" (EXPAND "restrict")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "derivable?" -1)
                                              (("1" (INST -1 "x_1") NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "deriv_domain?" 1)
                                            (("2" (SKEEP)
                                              (("2" (INST 1 "e!1/2")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (EXPAND "not_one_element?" 1)
                                          (("3" (SKEEP)
                                            (("3" (INST 1 "x+1")
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                (("2" (INST -1 "-1" "LAMBDA (x: real | x >= c): x")
                  (("2" (ASSERT)
                    (("2" (EXPAND "*")
                      (("2" (HIDE 2)
                        (("2"
                          (LEMMA
                           "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (LEMMA "deriv_sum_fun[(LAMBDA (r: real): r >= c)]")
            (("2"
              (INST -1 " (LAMBDA (x: real | x >= c): -x)"
               " (LAMBDA (x: real | x >= c): k * ln(x))")
              (("1" (EXPAND "+" -1)
                (("1" (REPLACE -1 1)
                  (("1" (DECOMPOSE-EQUALITY 1)
                    (("1" (LEMMA "deriv_scal_fun[(LAMBDA (r: real): r >= c)]")
                      (("1" (INST-CP -1 "-1" "LAMBDA (x: real | x >= c): x")
                        (("1" (EXPAND "*" -2)
                          (("1" (REPLACE -2)
                            (("1"
                              (INST -1 "k"
                               "(LAMBDA (x: real | x >= c): ln(x))")
                              (("1" (EXPAND "*" -1)
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1"
                                      (LEMMA
                                       "deriv_subtype_dd[posreal,(LAMBDA (r: real): r >= c)]")
                                      (("1" (INST -1 "ln")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -1)
                                            (("1" (DECOMPOSE-EQUALITY -1)
                                              (("1" (INST -1 "x!1")
                                                (("1" (DECOMPOSE-EQUALITY -7)
                                                  (("1" (INST -1 "x!1")
                                                    (("1" (EXPAND "restrict")
                                                      (("1" (REPLACE -2 1)
                                                        (("1" (REPLACE -1 1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (LEMMA
                                                               "deriv_id_fun[(LAMBDA (r: real): r >= c)]")
                                                              (("1"
                                                                (DECOMPOSE-EQUALITY
                                                                 -1)
                                                                (("1"
                                                                  (INST -1
                                                                   "x!1")
                                                                  (("1"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (HIDE -)
                                                (("2"
                                                  (EXPAND "deriv_domain?" 1)
                                                  (("2" (SKEEP)
                                                    (("2" (INST 1 "e!1/2")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE -)
                                              (("3" (HIDE 2)
                                                (("3"
                                                  (EXPAND "not_one_element?" 1)
                                                  (("3" (SKEEP)
                                                    (("3" (INST 1 "x+1")
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2"
                                  (LEMMA
                                   "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                                  (("2" (INST -1 "ln")
                                    (("2" (ASSERT)
                                      (("2" (SPLIT -1)
                                        (("1" (EXPAND "restrict")
                                          (("1" (PROPAX) NIL NIL)) NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "deriv_domain?" 1)
                                            (("2" (SKEEP)
                                              (("2" (INST 1 "e!1/2")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (EXPAND "not_one_element?" 1)
                                          (("3" (SKEEP)
                                            (("3" (INST 1 "x+1")
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2"
                            (LEMMA
                             "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                            (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP)
                      (("2"
                        (LEMMA
                         "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                        (("2"
                          (INST -1 "k" "(LAMBDA (x: real | x >= c):  ln(x))")
                          (("2" (ASSERT)
                            (("2" (EXPAND "*")
                              (("2" (ASSERT)
                                (("2" (HIDE 2)
                                  (("2"
                                    (LEMMA
                                     "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                                    (("2" (INST -1 "ln")
                                      (("2" (SPLIT -1)
                                        (("1" (EXPAND "restrict")
                                          (("1" (PROPAX) NIL NIL)) NIL)
                                         ("2" (PROPAX) NIL NIL)
                                         ("3" (ASSERT)
                                          (("3" (EXPAND "deriv_domain?" 1)
                                            (("3" (SKEEP)
                                              (("3" (INST 1 "e!1/2")
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("4" (EXPAND "not_one_element?" 1)
                                          (("4" (SKEEP)
                                            (("4" (INST 1 "x+1")
                                              (("4" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKEEP)
                      (("3"
                        (LEMMA
                         "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                        (("3" (INST -1 "-1" "(LAMBDA (x: real | x >= c): x)")
                          (("3" (ASSERT)
                            (("3" (EXPAND "*")
                              (("3" (ASSERT)
                                (("3"
                                  (LEMMA
                                   "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                                  (("3" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                (("2" (INST -1 "k" "(LAMBDA (x: real | x >= c):  ln(x))")
                  (("2" (ASSERT)
                    (("2" (EXPAND "*")
                      (("2" (ASSERT)
                        (("2"
                          (LEMMA
                           "derivable_subtype[posreal,(LAMBDA (r: real): r >= c)]")
                          (("2" (INST -1 "ln")
                            (("2" (SPLIT -1)
                              (("1" (EXPAND "restrict")
                                (("1" (PROPAX) NIL NIL)) NIL)
                               ("2" (PROPAX) NIL NIL)
                               ("3" (EXPAND "deriv_domain?" 1)
                                (("3" (SKEEP)
                                  (("3" (INST 1 "e!1/2")
                                    (("3" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("4" (EXPAND "not_one_element?" 1)
                                (("4" (SKEEP)
                                  (("4" (INST 1 "x+1") (("4" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (LEMMA "scal_derivable_fun[(LAMBDA (r: real): r >= c)]")
                  (("3" (INST -1 "-1" "(LAMBDA (x: real | x >= c): x)")
                    (("3" (EXPAND "*")
                      (("3" (ASSERT)
                        (("3"
                          (LEMMA
                           "id_derivable_fun[(LAMBDA (r: real): r >= c)]")
                          (("3" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_scal_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|deriv_subtype_dd| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|not_one_element_posreal| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (|deriv_domain_posreal| FORMULA-DECL NIL |deriv_domain| |analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|id_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|scal_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    NIL (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) NIL
    (|derivable_sum| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|scal_derivable| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL) NIL
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|ln_derivable| FORMULA-DECL NIL |ln_exp| |lnexp|))
   SHOSTAK))
 (|lnx_le| 0
  (|lnx_le-1| |nil| 3813049631
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "derivs_funs_leq[(LAMBDA(r:real): r>=2*k)]")
        (("1"
          (INST -1 "2*k" "2*k+1" "LAMBDA(x:real |x>=2*k): -x + k * ln(x)"
           "LAMBDA(x:real |x>=2*k):(-1/2)*x + -2*k + k* ln(2*k) + k")
          (("1" (ASSERT)
            (("1" (SPLIT -1)
              (("1" (INST -1 "2*k") (("1" (INST -1 "x") NIL NIL)) NIL)
               ("2" (SKEEP)
                (("2" (LEMMA "lnx_derivable")
                  (("2" (INST?)
                    (("2" (FLATTEN)
                      (("2" (REPLACE -2 1)
                        (("2" (ASSERT)
                          (("2" (TYPEPRED "x_1")
                            (("2"
                              (LEMMA
                               "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                              (("1"
                                (LEMMA
                                 "scal_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                (("1"
                                  (INST -1 "-1/2"
                                   "LAMBDA (x: real | x >= 2 * k):
                         x")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "*")
                                      (("1"
                                        (LEMMA
                                         "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                                        (("1" (INST -1 "k + k * ln(2 * k)")
                                          (("1" (EXPAND "const_fun")
                                            (("1"
                                              (LEMMA
                                               "deriv_diff_fun[(LAMBDA (r: real): r >= 2 * k)]")
                                              (("1"
                                                (INST -1
                                                 "(LAMBDA (x: real | x >= 2 * k):
                             (-1 / 2) * x)"
                                                 "(LAMBDA (x: real | x >= 2 * k):
                             k - k * ln(2 * k))")
                                                (("1" (DECOMPOSE-EQUALITY -1)
                                                  (("1" (INST -1 "x_1")
                                                    (("1" (EXPAND "-")
                                                      (("1" (REPLACE -1 1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "deriv_scal_fun[(LAMBDA (r: real): r >= 2 * k)]")
                                                            (("1"
                                                              (INST -1 "-1/2"
                                                               "(LAMBDA (x: real | x >= 2 * k):  x)")
                                                              (("1"
                                                                (EXPAND "*" -1)
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("1"
                                                                      (INST -1
                                                                       "x_1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "deriv_id_fun[(LAMBDA (r: real): r >= 2*k)]")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE
                                                                                 2)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "x_1")
                                                                                      (("1"
                                                                                        (DIV-BY
                                                                                         -1
                                                                                         "x_1")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (DIV-BY
                                                                                             -1
                                                                                             "2")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "NOT 2 * k / x_1 / 2 = k/x_1")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (REPLACE
                                                                                                   -1
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "deriv_const[(LAMBDA (r: real): r >= 2*k)]")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "k - k * ln(2 * k)"
                                                                                                       "x_1")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "const_fun"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "deriv"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (REPLACE
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE -)
                                                                      (("2"
                                                                        (HIDE 2
                                                                         3)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "not_one_element?"
                                                                           1)
                                                                          (("2"
                                                                            (SKEEP)
                                                                            (("2"
                                                                              (INST
                                                                               1
                                                                               "x!2+1")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (HIDE -)
                                                                      (("3"
                                                                        (HIDE 2
                                                                         3)
                                                                        (("3"
                                                                          (EXPAND
                                                                           "deriv_domain?")
                                                                          (("3"
                                                                            (SKEEP)
                                                                            (("3"
                                                                              (INST
                                                                               1
                                                                               "e!1/2")
                                                                              (("3"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("4"
                                                                      (HIDE -)
                                                                      (("4"
                                                                        (HIDE 2
                                                                         3)
                                                                        (("4"
                                                                          (EXPAND
                                                                           "not_one_element?"
                                                                           1)
                                                                          (("4"
                                                                            (SKEEP)
                                                                            (("4"
                                                                              (INST
                                                                               1
                                                                               "x!1+1")
                                                                              (("4"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("5"
                                                                      (HIDE -)
                                                                      (("5"
                                                                        (HIDE 2
                                                                         3)
                                                                        (("5"
                                                                          (EXPAND
                                                                           "deriv_domain?"
                                                                           1)
                                                                          (("5"
                                                                            (SKEEP)
                                                                            (("5"
                                                                              (INST
                                                                               1
                                                                               "e!1/2")
                                                                              (("5"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE 2 3)
                                                    (("2" (HIDE -1 -2 -3 -4)
                                                      (("2"
                                                        (LEMMA
                                                         "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                                                        (("2"
                                                          (INST -1
                                                           " k - k * ln(2 * k)")
                                                          (("2"
                                                            (EXPAND
                                                             "const_fun")
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3"
                                                    (HIDE -1 -2 -3 -5 -6 -7 -8
                                                     -9)
                                                    (("3"
                                                      (EXPAND
                                                       "not_one_element?" 1)
                                                      (("3" (SKEEP)
                                                        (("3" (INST 1 "x!1+1")
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("4" (HIDE -)
                                                    (("4" (HIDE 2 3)
                                                      (("4"
                                                        (EXPAND "deriv_domain?"
                                                                1)
                                                        (("4" (SKEEP)
                                                          (("4"
                                                            (INST 1 "e!1/2")
                                                            (("4" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2"
                                                    (HIDE -2 -3 -4 -5 -6 -7)
                                                    (("2" (HIDE 2 3)
                                                      (("2"
                                                        (LEMMA
                                                         "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                                                        (("2"
                                                          (INST -1
                                                           " k - k * ln(2 * k)")
                                                          (("2"
                                                            (EXPAND
                                                             "const_fun")
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (HIDE -)
                                                  (("3"
                                                    (LEMMA
                                                     "scal_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                                    (("3"
                                                      (INST -1 "-1/2"
                                                       "LAMBDA (x: real | x >= 2 * k):
                         x")
                                                      (("3" (HIDE 2 3)
                                                        (("3" (SPLIT -1)
                                                          (("1" (EXPAND "*" -1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (LEMMA
                                                               "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2"
                                (LEMMA
                                 "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                (("1" (HIDE -)
                                  (("1" (HIDE 2 3)
                                    (("1" (EXPAND "deriv_domain?")
                                      (("1" (SKEEP)
                                        (("1" (INST 1 "e!1/2")
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -)
                                  (("2" (HIDE 2 3)
                                    (("2" (EXPAND "deriv_domain?")
                                      (("2" (SKEEP)
                                        (("2" (INST 1 "e!1/2")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "sum_derivable_fun[(LAMBDA (r: real): r >= 2 * k)]")
            (("1"
              (INST -1 " (LAMBDA (x: real | x >= 2 * k): -1/2 * x)"
               "  (LAMBDA (x: real | x >= 2 * k): -1 * k  + k * ln(2 * k))")
              (("1" (ASSERT)
                (("1" (SPLIT -1)
                  (("1" (EXPAND "+") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 2 3)
                    (("2"
                      (LEMMA
                       "scal_derivable_fun[(LAMBDA (r: real): r >= 2 * k)]")
                      (("2"
                        (INST -1 "-1/2" "(LAMBDA (x: real | x >= 2 * k):  x)")
                        (("2" (EXPAND "*" -1)
                          (("2" (ASSERT)
                            (("2" (HIDE 2)
                              (("2"
                                (LEMMA
                                 "id_derivable_fun[(LAMBDA (r: real): r >= 2*k)]")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (HIDE 2 3)
                    (("3"
                      (LEMMA
                       "derivable_const[(LAMBDA (r: real):  r >= 2 * k)]")
                      (("3" (INST -1 "k * ln(2 * k)-k")
                        (("3" (EXPAND "const_fun") (("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2 3)
              (("2" (EXPAND "deriv_domain?")
                (("2" (SKEEP)
                  (("2" (INST 1 "e!1/2") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE -)
            (("3" (LEMMA "lnx_derivable")
              (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "not_one_element?" 1)
          (("2" (SKEEP) (("2" (INST 1 "x!1+1") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("3" (EXPAND "connected?" 1)
          (("3" (SKEEP) (("3" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) NIL
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|lnx_derivable| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|id_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) NIL
    (|deriv_diff_fun| FORMULA-DECL NIL |derivatives| |analysis|) NIL
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|deriv_const| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|deriv_scal_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|derivable_const| JUDGEMENT-TCC NIL |derivatives| |analysis|)
    (|scal_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|derivs_funs_leq| FORMULA-DECL NIL |derivative_props| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|lnx_neg_large| 0
  (|lnx_neg_large-1| |nil| 3813017199
   ("" (SKEEP)
    (("" (LEMMA "lnx_le")
      (("" (INST -1 "k" "_")
        (("1" (ASSERT)
          (("1" (INST 1 "max(2*k+1, 2* ( -k + k * ln(2 * k)) + 2*M1)")
            (("1" (SKEEP)
              (("1" (INST -1 "x")
                (("1" (SPLIT -1)
                  (("1" (CASE "NOT x >= 2 * (-k + k * ln(2 * k)) + 2 * M1")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE -3)
                      (("2"
                        (CASE
                            "NOT  (-1 / 2) * x <= (-1 / 2) * (2 * (-k + k * ln(2 * k)) + 2 * M1)")
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)
             ("3" (ASSERT)
              (("3" (TYPEPRED "k") (("3" (POSTPONE) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|lnx_le| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) NIL
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|exp_xk_small_TCC1| 0
  (|exp_xk_small_TCC1-1| |nil| 3812935398 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|exp_xk_small| SUBTYPE "smooth_not_analytic.k"
    "{i: integers.int | booleans.OR(smooth_not_analytic.x /= 0, reals.>=(i, 0))}")))
 (|exp_xk_small| 0
  (|exp_xk_small-1| |nil| 3813016805
   ("" (SKEEP)
    (("" (CASE "k>0")
      (("1" (LEMMA "lnx_neg_large")
        (("1"
          (LEMMA "exp_bij
")
          (("1" (EXPAND "bijective?" -1)
            (("1" (FLATTEN)
              (("1" (EXPAND "surjective?" -2)
                (("1" (INST -2 "epsilon/2")
                  (("1" (SKEEP)
                    (("1" (TYPEPRED "x")
                      (("1" (HIDE -1)
                        (("1" (INST -3 "abs(x)+1" "k")
                          (("1" (SKEEP)
                            (("1" (INST 1 "M2")
                              (("1" (SKEEP)
                                (("1" (INST -3 "x!1")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "exp_ln")
                                      (("1" (INST -1 "x!1^k")
                                        (("1" (REPLACE -1 1 RL)
                                          (("1" (LEMMA "exp_sum")
                                            (("1"
                                              (INST -1 "-x!1" "ln(x!1 ^ k)")
                                              (("1" (REPLACE -1 1 RL)
                                                (("1"
                                                  (CASE "not -(1+abs(x)) <= x")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2"
                                                    (LEMMA "exp_increasing")
                                                    (("2"
                                                      (EXPAND "increasing?" -1)
                                                      (("2"
                                                        (INST-CP -1
                                                         " -(1 + abs(x))" "x")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (INST -1
                                                             "ln(x!1 ^ k) + -x!1"
                                                             " -(1 + abs(x))")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "ln_expt")
                                                                (("2"
                                                                  (INST -1 "k"
                                                                   "x!1")
                                                                  (("2"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (LEMMA "expt_pos")
                                                (("2" (INST -1 "k" "x!1")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (LEMMA "expt_pos")
                                            (("2" (INST -1 "k" "x!1")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "expt_pos")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT)
        (("2" (CASE " NOT k=0")
          (("1" (ASSERT) NIL NIL)
           ("2" (REPLACE -1)
            (("2" (ASSERT)
              (("2" (LEMMA "small_exp")
                (("2" (INST -1 "epsilon/2")
                  (("2" (SKEEP)
                    (("2" (INST 2 "abs(x)+1")
                      (("2" (SKEEP)
                        (("2" (LEMMA "exp_increasing")
                          (("2" (EXPAND "increasing?" -1)
                            (("2" (CASE "NOT -(1+abs(x)) <= x")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (CASE "NOT -x_1 <= -(1+abs(x))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (INST-CP -3 "-x_1" "-(1+abs(x))")
                                  (("2" (INST -3 "-(1+abs(x))" "x")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|exp_bij| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|exp_ln| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|ln_expt| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|exp_increasing| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL)
    (|exp_sum| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|lnx_neg_large| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|small_exp| FORMULA-DECL NIL |ln_exp| |lnexp|))
   SHOSTAK))
 (|exp_conv| 0
  (|exp_conv-1| |nil| 3808442504
   ("" (SKEEP)
    (("" (LEMMA "exp_xk_small")
      (("" (EXPAND "convergent?" 1)
        (("" (INST 1 "0")
          (("" (INST -1 "k" "_")
            (("" (EXPAND "convergence" 1 1)
              (("" (EXPAND "convergence" 1 1)
                (("" (EXPAND "adh" 1)
                  (("" (SPLIT 1)
                    (("1" (SKEEP)
                      (("1" (INST 1 "e!1/2") (("1" (GRIND) NIL NIL)) NIL)) NIL)
                     ("2" (SKEEP)
                      (("2" (INST -1 "epsilon")
                        (("2" (SKEEP)
                          (("2" (INST 1 "1/M")
                            (("2" (SKEEP)
                              (("2" (EXPAND "abs" -2 1)
                                (("2" (ASSERT)
                                  (("2" (INST -3 "1/x_1")
                                    (("2" (ASSERT)
                                      (("2" (SPLIT -3)
                                        (("1" (HIDE -2 -3)
                                          (("1" (EXPAND "abs" 1 1)
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "div_expt")
                                                (("1" (INST -1 "k" "1" "x_1")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (MULT-BY 1 "x_1")
                                          (("2" (MULT-BY -2 "M")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exp_xk_small| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|div_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL))
   SHOSTAK))
 (|exp_sin_p_cos_p_conv| 0
  (|exp_sin_p_cos_p_conv-1| |nil| 3812936117
   ("" (LEMMA "exp_xk_small")
    (("" (LEMMA "bound_sin_p_cos_p")
      (("" (SKEEP)
        (("" (INST -1 "a" "b" "n1" "n2")
          (("" (SKEEP)
            (("" (EXPAND "convergent?" 1)
              (("" (INST 1 "0")
                (("" (EXPAND "convergence" 1 1)
                  (("" (EXPAND "convergence" 1 1)
                    (("" (SPLIT 1)
                      (("1" (EXPAND "adh" 1)
                        (("1" (SKEEP)
                          (("1" (INST 1 "e!1/2") (("1" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (INST -2 "k" "epsilon/C")
                          (("2" (SKEEP)
                            (("2" (INST 1 "min(1,1/M)")
                              (("2" (SKEEP)
                                (("2" (LEMMA "abs_mult")
                                  (("2"
                                    (INST -1 " exp(-1 / x_1)/x_1 ^ k"
                                     "(polynomial(a, n1)(x_1) * sin(1 / x_1) +
                    polynomial(b, n2)(x_1) * cos(1 / x_1))")
                                    (("2" (ASSERT)
                                      (("2" (REPLACE -1 1)
                                        (("2" (INST -4 "x_1")
                                          (("2" (ASSERT)
                                            (("2"
                                              (CASE
                                                  "NOT abs(exp(-1 / x_1) / x_1 ^ k) *
                             abs((polynomial(a, n1)(x_1) * sin(1 / x_1) +
                                   polynomial(b, n2)(x_1) * cos(1 / x_1))) < abs(exp(-1 / x_1) / x_1 ^ k) * C")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (DIV-BY 1
                                                   "abs(exp(-1 / x_1) / x_1 ^ k)")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (CASE
                                                    " abs(exp(-1 / x_1) / x_1 ^ k) * C < epsilon")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (INST -6 "1/x_1")
                                                    (("2" (ASSERT)
                                                      (("2" (SPLIT -6)
                                                        (("1" (MULT-BY -1 "C")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (LEMMA
                                                               "div_expt")
                                                              (("1"
                                                                (INST -1 "k"
                                                                 "1" "x_1")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs"
                                                                         1 1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             1)
                                                                            (("1"
                                                                              (SPLIT
                                                                               1)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (TYPEPRED
                                                                                     "x_1")
                                                                                    (("1"
                                                                                      (CASE
                                                                                          " x_1 ^ k>0")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (MULT-BY
                                                                                           -3
                                                                                           "x_1 ^ k")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "expt_pos_aux")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "k"
                                                                                             "x_1")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "^"
                                                                                               1)
                                                                                              (("2"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (MULT-BY 1 "x_1")
                                                          (("2"
                                                            (EXPAND "abs" -4)
                                                            (("2" (HIDE -1 -2)
                                                              (("2" (HIDE -3)
                                                                (("2"
                                                                  (EXPAND "min"
                                                                          -2)
                                                                  (("2"
                                                                    (LIFT-IF
                                                                     -2)
                                                                    (("2"
                                                                      (SPLIT
                                                                       -2)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (MULT-BY
                                                                           -2
                                                                           "M")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (MULT-BY
                                                                             1
                                                                             "M")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (FLIP-INEQ
                                                                                 1)
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  (("1"
                                                                                    (DIV-BY
                                                                                     1
                                                                                     "M")
                                                                                    (("1"
                                                                                      (DIV-BY
                                                                                       -1
                                                                                       "M")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (DIV-BY
                                                                                     1
                                                                                     "M")
                                                                                    (("2"
                                                                                      (DIV-BY
                                                                                       -1
                                                                                       "M")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|bound_sin_p_cos_p| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|div_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|exp_xk_small| FORMULA-DECL NIL |smooth_not_analytic| NIL))
   SHOSTAK))
 (|exp_lim_TCC1| 0
  (|exp_lim_TCC2-1| |nil| 3808442326
   ("" (LEMMA "exp_sin_p_cos_p_conv") (("" (ASSERT) NIL NIL)) NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|exp_sin_p_cos_p_conv| FORMULA-DECL NIL |smooth_not_analytic| NIL))
   NIL
   (|exp_lim| SUBTYPE "0"
    "{a_1 | lim_of_functions[{x: reals.real | reals.>(x, 0)}].convergent?(LAMBDA (x: reals.real | reals.>(x, 0)): number_fields./((number_fields.+)(number_fields.*(number_fields.*(polynomials.polynomial(smooth_not_analytic.a, smooth_not_analytic.n1)(x), ln_exp.exp(number_fields./(-1, x))), sincos_def.sin(number_fields./(1, x))), number_fields.*(number_fields.*(polynomials.polynomial(smooth_not_analytic.b, smooth_not_analytic.n2)(x), sincos_def.cos(number_fields./(1, x))), ln_exp.exp(number_fields./(-1, x)))), exponentiation.^(x, (smooth_not_analytic.k))), a_1)}")))
 (|exp_lim| 0
  (|exp_lim-1| |nil| 3808442332
   ("" (LEMMA " lim_fun_def[(LAMBDA( r:real): r>0)]")
    (("" (SKEEP)
      ((""
        (INST -1 "LAMBDA (x: real | x > 0):
              exp(-1 / x) *
               (sin(1 / x) * polynomial(a, n1)(x) +
                 cos(1 / x) * polynomial(b, n2)(x))
               / x ^ (k)"
         "0" "0")
        (("1" (ASSERT)
          (("1" (HIDE 2)
            (("1" (LEMMA "exp_xk_small")
              (("1" (LEMMA "bound_sin_p_cos_p")
                (("1" (INST -1 "a" "b" "n1" "n2")
                  (("1" (SKEEP)
                    (("1" (EXPAND "convergence" 1 1)
                      (("1" (EXPAND "convergence" 1 1)
                        (("1" (SPLIT 1)
                          (("1" (EXPAND "adh" 1)
                            (("1" (SKEEP)
                              (("1" (INST 1 "e!1/2") (("1" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (INST -2 "k" "epsilon/C")
                              (("2" (SKEEP)
                                (("2" (INST 1 "min(1,1/M)")
                                  (("2" (SKEEP)
                                    (("2" (LEMMA "abs_mult")
                                      (("2"
                                        (INST -1 " exp(-1 / x_1)/x_1 ^ k"
                                         "(polynomial(a, n1)(x_1) * sin(1 / x_1) +
                        polynomial(b, n2)(x_1) * cos(1 / x_1))")
                                        (("2" (ASSERT)
                                          (("2" (REPLACE -1 1)
                                            (("2" (INST -4 "x_1")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (CASE
                                                      "NOT abs(exp(-1 / x_1) / x_1 ^ k) *
                                      abs((polynomial(a, n1)(x_1) * sin(1 / x_1) +
                                            polynomial(b, n2)(x_1) * cos(1 / x_1))) < abs(exp(-1 / x_1) / x_1 ^ k) * C")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (DIV-BY 1
                                                       "abs(exp(-1 / x_1) / x_1 ^ k)")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (CASE
                                                        " abs(exp(-1 / x_1) / x_1 ^ k) * C < epsilon")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (INST -6 "1/x_1")
                                                        (("2" (ASSERT)
                                                          (("2" (SPLIT -6)
                                                            (("1"
                                                              (MULT-BY -1 "C")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "div_expt")
                                                                  (("1"
                                                                    (INST -1
                                                                     "k" "1"
                                                                     "x_1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "abs"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LIFT-IF
                                                                                 1)
                                                                                (("1"
                                                                                  (SPLIT
                                                                                   1)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "x_1")
                                                                                        (("1"
                                                                                          (CASE
                                                                                              " x_1 ^ k>0")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (MULT-BY
                                                                                               -3
                                                                                               "x_1 ^ k")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "expt_pos_aux")
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "k"
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "^"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (MULT-BY 1 "x_1")
                                                              (("2"
                                                                (EXPAND "abs"
                                                                        -4)
                                                                (("2"
                                                                  (HIDE -1 -2)
                                                                  (("2"
                                                                    (HIDE -3)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "min"
                                                                       -2)
                                                                      (("2"
                                                                        (LIFT-IF
                                                                         -2)
                                                                        (("2"
                                                                          (SPLIT
                                                                           -2)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (MULT-BY
                                                                               -2
                                                                               "M")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (MULT-BY
                                                                                 1
                                                                                 "M")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (FLIP-INEQ
                                                                                     1)
                                                                                    (("2"
                                                                                      (GRIND)
                                                                                      (("1"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "M")
                                                                                        (("1"
                                                                                          (DIV-BY
                                                                                           -1
                                                                                           "M")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "M")
                                                                                        (("2"
                                                                                          (DIV-BY
                                                                                           -1
                                                                                           "M")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (SKEEP)
            (("2" (LEMMA "expt_pos_aux")
              (("2" (INST -1 "k" "x")
                (("2" (EXPAND "^") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|exp_xk_small| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|div_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|bound_sin_p_cos_p| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|lim_fun_def| FORMULA-DECL NIL |lim_of_functions| |analysis|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|derivable_nth_split_TCC1| 0
  (|derivable_nth_split_TCC1-1| |nil| 3812988560
   ("" (SKEEP) (("" (ASSERT) (("" (POSTPONE) NIL NIL)) NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|derivable_nth_split| SUBTYPE "(number_fields.-)(smooth_not_analytic.n, 1)"
    "nat")))
 (|derivable_nth_split| 0
  (|derivable_nth_split-1| |nil| 3812989238
   ("" (SKEEP)
    (("" (LEMMA "nderiv_derivable_eqv")
      (("" (INST?)
        (("" (ASSERT)
          (("" (HIDE 2)
            (("" (EXPAND "derivable?" 1)
              (("" (SKEEP)
                (("" (CASE "x=0")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (EXPAND "restrict")
                    (("2"
                      (LEMMA "nderiv_derivable_eqv[(LAMBDA (r: real): r < 0)]")
                      (("2"
                        (LEMMA
                         "nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
                        (("2" (INST?)
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (HIDE -1 -3)
                                    (("2" (CASE "x>0")
                                      (("1" (ASSERT)
                                        (("1"
                                          (LEMMA
                                           "nderiv_subtype[real,(LAMBDA (r: real): r > 0)]")
                                          (("1" (INST -1 "n-1" "f")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -1)
                                                (("1"
                                                  (LEMMA
                                                   "derivable_subtype_del[real, (LAMBDA (r: real): r > 0)]")
                                                  (("1"
                                                    (INST -1 "nderiv(n - 1, f)"
                                                     "nderiv(n - 1, f)" "x")
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT -1)
                                                        (("1"
                                                          (EXPAND "restrict")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "derivable?" -3)
                                                              (("1"
                                                                (INST -3 "x")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (EXPAND
                                                           "deriv_domain?" 1 1)
                                                          (("2" (SKEEP)
                                                            (("2"
                                                              (INST 1 "e!1/2")
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (EXPAND
                                                           "not_one_element?"
                                                           1)
                                                          (("3" (SKEEP)
                                                            (("3"
                                                              (INST 1 "x!1+1")
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("4"
                                                          (DECOMPOSE-EQUALITY
                                                           1)
                                                          (("4"
                                                            (DECOMPOSE-EQUALITY
                                                             -1)
                                                            (("4" (INST -1 "x")
                                                              (("4" (ASSERT)
                                                                (("4"
                                                                  (EXPAND
                                                                   "restrict")
                                                                  (("4"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (INST 1 "x/2")
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (EXPAND "extend" 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "fullset"
                                                                      1)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (EXPAND "deriv_domain?" 1 1)
                                                  (("2" (SKEEP)
                                                    (("2" (INST 1 "e!1/2")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3"
                                                  (EXPAND "not_one_element?" 1)
                                                  (("3" (SKEEP)
                                                    (("3" (INST 1 "x!1+1")
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (CASE "x<0")
                                        (("1"
                                          (LEMMA
                                           "derivable_subtype_del[real, (LAMBDA (r: real): r < 0)]")
                                          (("1"
                                            (LEMMA
                                             "nderiv_subtype[real,(LAMBDA (r: real): r < 0)]")
                                            (("1" (INST -1 "n-1" "f")
                                              (("1" (SPLIT -1)
                                                (("1"
                                                  (INST -2 "nderiv(n-1,f)"
                                                   "nderiv(n-1,f)" "x")
                                                  (("1" (ASSERT)
                                                    (("1" (SPLIT -2)
                                                      (("1" (EXPAND "restrict")
                                                        (("1"
                                                          (EXPAND "derivable?"
                                                                  -4)
                                                          (("1" (INST -4 "x")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND "deriv_domain?"
                                                                1)
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (INST 1 "-e!1/2")
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3"
                                                        (EXPAND
                                                         "not_one_element?" 1)
                                                        (("3" (SKEEP)
                                                          (("3"
                                                            (INST 1 "x!1-1")
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("4"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        (("4"
                                                          (DECOMPOSE-EQUALITY
                                                           -1)
                                                          (("4" (INST -1 "x!1")
                                                            (("4"
                                                              (EXPAND
                                                               "restrict")
                                                              (("4" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (INST 1 "-x/2")
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (EXPAND "extend" 1)
                                                          (("2" (SPLIT 1)
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (EXPAND
                                                                 "fullset")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (PROPAX) NIL NIL)
                                                 ("3"
                                                  (EXPAND "deriv_domain?" 1)
                                                  (("3" (SKEEP)
                                                    (("3" (INST 1 "-e!1/2")
                                                      (("3" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("4"
                                                  (EXPAND "not_one_element?" 1)
                                                  (("4" (SKEEP)
                                                    (("4" (INST 1 "x!1-1")
                                                      (("4" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nderiv_derivable_eqv| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nderiv_subtype| FORMULA-DECL NIL |nth_derivative_subtype| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|derivable_subtype_del| FORMULA-DECL NIL |derivatives_subtype| |analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|)
    (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|)
    (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL) NIL
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|sm_n_derivable_TCC1| 0
  (|sm_n_derivable_TCC1-1| |nil| 3812997575
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "expt_pos")
        (("" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL) NIL (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL))
   NIL
   (|sm_n_derivable| SUBTYPE
    "exponentiation.^(smooth_not_analytic.x, (smooth_not_analytic.k))"
    "nznum")))
 (|sm_n_derivable| 0
  (|sm_n_derivable-1| |nil| 3812980640
   ("" (INDUCT "n")
    (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
     ("2"
      (INST 1 "Lambda(i:nat): IF i=0 THEN 1 ELSE 0 ENDIF" "LAMBDA(i:nat): 0"
       "0" "0" "0")
      (("2" (EXPAND "nderiv" 1)
        (("2" (DECOMPOSE-EQUALITY 1)
          (("1" (LIFT-IF 1)
            (("1" (SPLIT 1)
              (("1" (EXPAND "sm" 1)
                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (ASSERT)
                  (("2" (EXPAND "polynomial")
                    (("2" (EXPAND "sm")
                      (("2" (EXPAND "sigma")
                        (("2" (EXPAND "sigma") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2) (("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (CASE "NOT (derivable_n_times?(sm, j + 1))")
        (("1" (HIDE 2)
          (("1" (LEMMA "derivable_nth_split")
            (("1" (INST -1 "sm" "j+1")
              (("1" (ASSERT)
                (("1" (HIDE 2)
                  (("1" (LEMMA "deriv_sm_n")
                    (("1" (LEMMA " sm_derivable_init_le0")
                      (("1" (INST -2 "1+j")
                        (("1" (ASSERT)
                          (("1" (FLATTEN)
                            (("1" (INST -1 "1+j")
                              (("1" (ASSERT)
                                (("1" (EXPAND "restrict" 1)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "restrict" -1)
                                      (("1" (FLATTEN)
                                        (("1" (ASSERT)
                                          (("1"
                                            (LEMMA "deriv_left_right_point")
                                            (("1" (ASSERT)
                                              (("1"
                                                (INST -1 "0" "nderiv(j, sm)")
                                                (("1" (ASSERT)
                                                  (("1" (HIDE 2)
                                                    (("1" (EXPAND "restrict")
                                                      (("1"
                                                        (LEMMA
                                                         "nderiv_derivable_eqv[(LAMBDA (r: real): r < 0)]")
                                                        (("1"
                                                          (LEMMA
                                                           "nderiv_derivable_eqv[(LAMBDA (r: real): r > 0)]")
                                                          (("1"
                                                            (INST -1 "sm" "j")
                                                            (("1"
                                                              (INST -2 "sm"
                                                               "j")
                                                              (("1"
                                                                (EXPAND
                                                                 "restrict")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (HIDE
                                                                           -3)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "nderiv_subtype[real,(LAMBDA (r: real): r < 0)]")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "nderiv_subtype[real,(LAMBDA (r: real): r > 0)]")
                                                                              (("1"
                                                                                (INST
                                                                                 -2
                                                                                 "j"
                                                                                 "sm")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "j"
                                                                                     "sm")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (SPLIT
                                                                                         -2)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -2)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "restrict")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "nderiv_derivable_aux[(LAMBDA (r: real): r > 0)]")
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "nderiv_derivable_aux[(LAMBDA (r: real): r < 0)]")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "sm"
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -2
                                                                                                         "sm"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "restrict")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -10)
                                                                                                                  (("1"
                                                                                                                    (SKEEP
                                                                                                                     -14)
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -14
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (SPLIT
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           -)
                                                                                                                          (("1"
                                                                                                                            (CASE
                                                                                                                                " (LAMBDA (s: (LAMBDA (r: real): r < 0)): (LAMBDA (x: real): IF x <= 0 THEN 0 ELSE (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x) + polynomial(d, n4)(x) * cos(1 / x) * exp(-1 / x)) / x ^ k ENDIF) (s)) = Lambda(s:real | s<0): 0")
                                                                                                                            (("1"
                                                                                                                              (REPLACE
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (ASSERT)
                                                                                                                                (("1"
                                                                                                                                  (LEMMA
                                                                                                                                   "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                                                                  (("1"
                                                                                                                                    (INST
                                                                                                                                     -1
                                                                                                                                     "0")
                                                                                                                                    (("1"
                                                                                                                                      (REPLACE
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "convergent?"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (INST
                                                                                                                                           1
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "convergence"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "convergence"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (SPLIT
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (HIDE
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (GRIND)
                                                                                                                                                    (("1"
                                                                                                                                                      (INST
                                                                                                                                                       1
                                                                                                                                                       "-e!1/2")
                                                                                                                                                      (("1"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL)
                                                                                                                                                 ("2"
                                                                                                                                                  (SKEEP)
                                                                                                                                                  (("2"
                                                                                                                                                    (INST
                                                                                                                                                     1
                                                                                                                                                     "1")
                                                                                                                                                    (("2"
                                                                                                                                                      (SKEEP)
                                                                                                                                                      (("2"
                                                                                                                                                        (GRIND)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (HIDE
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "not_one_element?"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (SKEEP)
                                                                                                                                        (("2"
                                                                                                                                          (INST
                                                                                                                                           1
                                                                                                                                           "x-1")
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("3"
                                                                                                                                    (HIDE
                                                                                                                                     2)
                                                                                                                                    (("3"
                                                                                                                                      (EXPAND
                                                                                                                                       "deriv_domain?"
                                                                                                                                       1)
                                                                                                                                      (("3"
                                                                                                                                        (SKEEP)
                                                                                                                                        (("3"
                                                                                                                                          (INST
                                                                                                                                           1
                                                                                                                                           "-e!1/2")
                                                                                                                                          (("3"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("3"
                                                                                                                                              (HIDE
                                                                                                                                               -1)
                                                                                                                                              (("3"
                                                                                                                                                (GRIND)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (DECOMPOSE-EQUALITY
                                                                                                                                 1)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("3"
                                                                                                                              (ASSERT)
                                                                                                                              (("3"
                                                                                                                                (HIDE
                                                                                                                                 2)
                                                                                                                                (("3"
                                                                                                                                  (SKEEP)
                                                                                                                                  (("3"
                                                                                                                                    (LEMMA
                                                                                                                                     "expt_pos")
                                                                                                                                    (("3"
                                                                                                                                      (INST
                                                                                                                                       -1
                                                                                                                                       "k"
                                                                                                                                       "x")
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        NIL
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (ASSERT)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("4"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("4"
                                                                                                                                (SKEEP)
                                                                                                                                (("4"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (CASE
                                                                                                                              "NOT (LAMBDA (s: (LAMBDA (r: real): r > 0)):
                  (LAMBDA (x: real):
                     IF x <= 0 THEN 0
                     ELSE (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k
                     ENDIF)
                      (s)) = Lambda(x:real | x>0): (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k")
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (DECOMPOSE-EQUALITY
                                                                                                                               1)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (REPLACE
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (HIDE
                                                                                                                               -)
                                                                                                                              (("2"
                                                                                                                                (LEMMA
                                                                                                                                 "deriv_e_sin_cos1xk")
                                                                                                                                (("2"
                                                                                                                                  (INST
                                                                                                                                   -1
                                                                                                                                   "c"
                                                                                                                                   "d"
                                                                                                                                   "n3"
                                                                                                                                   "n4"
                                                                                                                                   "k")
                                                                                                                                  (("2"
                                                                                                                                    (FLATTEN)
                                                                                                                                    (("2"
                                                                                                                                      (SKEEP)
                                                                                                                                      (("2"
                                                                                                                                        (REPLACE
                                                                                                                                         -2
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (LEMMA
                                                                                                                                           "exp_sin_p_cos_p_conv")
                                                                                                                                          (("2"
                                                                                                                                            (INST
                                                                                                                                             -1
                                                                                                                                             "c_1"
                                                                                                                                             "d_1"
                                                                                                                                             "n3_1"
                                                                                                                                             "n4_1"
                                                                                                                                             "k+2")
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("3"
                                                                                                                            (HIDE
                                                                                                                             2)
                                                                                                                            (("3"
                                                                                                                              (HIDE
                                                                                                                               -)
                                                                                                                              (("3"
                                                                                                                                (SKEEP)
                                                                                                                                (("3"
                                                                                                                                  (LEMMA
                                                                                                                                   "expt_pos")
                                                                                                                                  (("3"
                                                                                                                                    (INST?)
                                                                                                                                    (("3"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("4"
                                                                                                                            (HIDE
                                                                                                                             2)
                                                                                                                            (("4"
                                                                                                                              (HIDE
                                                                                                                               -)
                                                                                                                              (("4"
                                                                                                                                (SKEEP)
                                                                                                                                (("4"
                                                                                                                                  (LEMMA
                                                                                                                                   "expt_pos")
                                                                                                                                  (("4"
                                                                                                                                    (INST?)
                                                                                                                                    (("1"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("5"
                                                                                                                            (HIDE
                                                                                                                             -)
                                                                                                                            (("5"
                                                                                                                              (HIDE
                                                                                                                               2)
                                                                                                                              (("5"
                                                                                                                                (SKEEP)
                                                                                                                                (("5"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("3"
                                                                                                                          (HIDE
                                                                                                                           -)
                                                                                                                          (("3"
                                                                                                                            (LEMMA
                                                                                                                             "exp_lim")
                                                                                                                            (("3"
                                                                                                                              (CASE
                                                                                                                                  "NOT ( (LAMBDA (s: (LAMBDA (r: real): r > 0)):
                  (LAMBDA (x: real):
                     IF x <= 0 THEN 0
                     ELSE (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x)
                            +
                            polynomial(d, n4)(x) * cos(1 / x) *
                             exp(-1 / x))
                           / x ^ k
                     ENDIF)
                      (s))) = (LAMBDA (x: real | x > 0):
              exp(-1 / x) *
               (sin(1 / x) * polynomial(c, n3)(x) +
                 cos(1 / x) * polynomial(d, n4)(x))
               / x ^ (k))")
                                                                                                                              (("1"
                                                                                                                                (DECOMPOSE-EQUALITY
                                                                                                                                 1)
                                                                                                                                NIL
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (REPLACE
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (REPLACE
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   RL)
                                                                                                                                  (("2"
                                                                                                                                    (REPLACE
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (LEMMA
                                                                                                                                       "deriv_e_sin_cos1xk")
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -1
                                                                                                                                         "c"
                                                                                                                                         "d"
                                                                                                                                         "n3"
                                                                                                                                         "n4"
                                                                                                                                         "k")
                                                                                                                                        (("2"
                                                                                                                                          (FLATTEN)
                                                                                                                                          (("2"
                                                                                                                                            (SKEEP)
                                                                                                                                            (("2"
                                                                                                                                              (REPLACE
                                                                                                                                               -2
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (INST
                                                                                                                                                 -4
                                                                                                                                                 "c_1"
                                                                                                                                                 "d_1"
                                                                                                                                                 "n3_1"
                                                                                                                                                 "n4_1"
                                                                                                                                                 "k+2")
                                                                                                                                                (("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  (("2"
                                                                                                                                                    (REPLACE
                                                                                                                                                     -4)
                                                                                                                                                    (("2"
                                                                                                                                                      (HIDE
                                                                                                                                                       -)
                                                                                                                                                      (("2"
                                                                                                                                                        (LEMMA
                                                                                                                                                         "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                                                                                        (("1"
                                                                                                                                                          (INST?)
                                                                                                                                                          (("1"
                                                                                                                                                            (REPLACE
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (LEMMA
                                                                                                                                                               "convergence_equiv[(Lambda(r:real): r<0)]")
                                                                                                                                                              (("1"
                                                                                                                                                                (INST
                                                                                                                                                                 -1
                                                                                                                                                                 "0"
                                                                                                                                                                 "(LAMBDA (x: (LAMBDA (r: real): r < 0)): 0)"
                                                                                                                                                                 "0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (HIDE
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "convergence"
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (EXPAND
                                                                                                                                                                         "convergence"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (SPLIT
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (EXPAND
                                                                                                                                                                             "adh"
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (SKEEP)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (INST
                                                                                                                                                                                 1
                                                                                                                                                                                 "-e!1/2")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (GRIND)
                                                                                                                                                                                  NIL
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (SKEEP)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (INST
                                                                                                                                                                               1
                                                                                                                                                                               "1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (SKEEP)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (GRIND)
                                                                                                                                                                                  NIL
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (HIDE
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "not_one_element?"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (SKEEP)
                                                                                                                                                              (("2"
                                                                                                                                                                (INST
                                                                                                                                                                 1
                                                                                                                                                                 "x-1")
                                                                                                                                                                (("2"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("3"
                                                                                                                                                          (HIDE
                                                                                                                                                           2)
                                                                                                                                                          (("3"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "deriv_domain?"
                                                                                                                                                             1)
                                                                                                                                                            (("3"
                                                                                                                                                              (SKEEP)
                                                                                                                                                              (("3"
                                                                                                                                                                (INST
                                                                                                                                                                 1
                                                                                                                                                                 "-e!1/2")
                                                                                                                                                                (("3"
                                                                                                                                                                  (GRIND)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("3"
                                                                                                                                (HIDE
                                                                                                                                 2)
                                                                                                                                (("3"
                                                                                                                                  (HIDE
                                                                                                                                   -)
                                                                                                                                  (("3"
                                                                                                                                    (SKEEP)
                                                                                                                                    (("3"
                                                                                                                                      (LEMMA
                                                                                                                                       "expt_pos")
                                                                                                                                      (("3"
                                                                                                                                        (INST?)
                                                                                                                                        (("3"
                                                                                                                                          (ASSERT)
                                                                                                                                          NIL
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("4"
                                                                                                                                (HIDE
                                                                                                                                 2)
                                                                                                                                (("4"
                                                                                                                                  (HIDE
                                                                                                                                   -)
                                                                                                                                  (("4"
                                                                                                                                    (SKEEP)
                                                                                                                                    (("4"
                                                                                                                                      (ASSERT)
                                                                                                                                      (("4"
                                                                                                                                        (LEMMA
                                                                                                                                         "expt_pos")
                                                                                                                                        (("4"
                                                                                                                                          (INST?)
                                                                                                                                          (("4"
                                                                                                                                            (ASSERT)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("5"
                                                                                                                                (HIDE
                                                                                                                                 2)
                                                                                                                                (("5"
                                                                                                                                  (SKEEP)
                                                                                                                                  (("5"
                                                                                                                                    (ASSERT)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("4"
                                                                                                                          (HIDE
                                                                                                                           -)
                                                                                                                          (("4"
                                                                                                                            (EXPAND
                                                                                                                             "continuous?"
                                                                                                                             1)
                                                                                                                            (("4"
                                                                                                                              (SKEEP)
                                                                                                                              (("4"
                                                                                                                                (CASE
                                                                                                                                    "x0<0")
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "continuous?"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (SKEEP)
                                                                                                                                    (("1"
                                                                                                                                      (INST
                                                                                                                                       1
                                                                                                                                       "abs(x0)/2")
                                                                                                                                      (("1"
                                                                                                                                        (SKEEP)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("1"
                                                                                                                                            (LIFT-IF
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (SPLIT
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (GRIND)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  (("2"
                                                                                                                                                    (HIDE
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (GRIND)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (GRIND)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL)
                                                                                                                                 ("2"
                                                                                                                                  (LEMMA
                                                                                                                                   "deriv_e_sin_cos1xk")
                                                                                                                                  (("2"
                                                                                                                                    (LEMMA
                                                                                                                                     "derivable_continuous[(LAMBDA (r: real): r > 0)]")
                                                                                                                                    (("2"
                                                                                                                                      (INST
                                                                                                                                       -2
                                                                                                                                       "c"
                                                                                                                                       "d"
                                                                                                                                       "n3"
                                                                                                                                       "n4"
                                                                                                                                       "k")
                                                                                                                                      (("2"
                                                                                                                                        (ASSERT)
                                                                                                                                        (("2"
                                                                                                                                          (CASE
                                                                                                                                              "x0>0")
                                                                                                                                          (("1"
                                                                                                                                            (INST
                                                                                                                                             -2
                                                                                                                                             " (LAMBDA (x: real | x > 0):
             (polynomial(c, n3)(x) * exp(-1 / x) * sin(1 / x) +
               polynomial(d, n4)(x) * cos(1 / x) * exp(-1 / x))
              / x ^ k)"
                                                                                                                                             "x0")
                                                                                                                                            (("1"
                                                                                                                                              (FLATTEN)
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "derivable?"
                                                                                                                                                 -3)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -3
                                                                                                                                                   "x0")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (HIDE
                                                                                                                                                       -3
                                                                                                                                                       -4)
                                                                                                                                                      (("1"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "continuous?")
                                                                                                                                                        (("1"
                                                                                                                                                          (SKEEP)
                                                                                                                                                          (("1"
                                                                                                                                                            (INST
                                                                                                                                                             -2
                                                                                                                                                             "epsilon")
                                                                                                                                                            (("1"
                                                                                                                                                              (SKEEP)
                                                                                                                                                              (("1"
                                                                                                                                                                (INST
                                                                                                                                                                 2
                                                                                                                                                                 "min(delta,x0)/2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (SKEEP)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (INST
                                                                                                                                                                     -2
                                                                                                                                                                     "x_1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (ASSERT)
                                                                                                                                                                      NIL
                                                                                                                                                                      NIL)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (ASSERT)
                                                                                                                                                                      NIL
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (HIDE
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (GRIND)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (SKEEP)
                                                                                                                                              (("2"
                                                                                                                                                (LEMMA
                                                                                                                                                 "expt_pos")
                                                                                                                                                (("2"
                                                                                                                                                  (INST?)
                                                                                                                                                  (("2"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL)
                                                                                                                                           ("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (CASE
                                                                                                                                                  "x0=0")
                                                                                                                                              (("1"
                                                                                                                                                (LEMMA
                                                                                                                                                 "exp_lim")
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   -1
                                                                                                                                                   "c"
                                                                                                                                                   "d"
                                                                                                                                                   "n3"
                                                                                                                                                   "n4"
                                                                                                                                                   "k")
                                                                                                                                                  (("1"
                                                                                                                                                    (LEMMA
                                                                                                                                                     "lim_fun_def[ (LAMBDA (r: real): r > 0)]")
                                                                                                                                                    (("1"
                                                                                                                                                      (INST?)
                                                                                                                                                      (("1"
                                                                                                                                                        (FLATTEN)
                                                                                                                                                        (("1"
                                                                                                                                                          (HIDE
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (SPLIT
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (HIDE
                                                                                                                                                               -2
                                                                                                                                                               -4
                                                                                                                                                               -5
                                                                                                                                                               -6)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "convergence"
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "continuous?")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "convergence"
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (FLATTEN)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (SKEEP)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (INST
                                                                                                                                                                           -2
                                                                                                                                                                           "epsilon")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (SKEEP)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (INST
                                                                                                                                                                               3
                                                                                                                                                                               "delta")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (SKEEP)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (CASE
                                                                                                                                                                                      "x_1<=0")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (ASSERT)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (GRIND)
                                                                                                                                                                                      NIL
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (ASSERT)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (INST
                                                                                                                                                                                       -2
                                                                                                                                                                                       "x_1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (ASSERT)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (EXPAND
                                                                                                                                                                                           "fullset"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (PROPAX)
                                                                                                                                                                                            NIL
                                                                                                                                                                                            NIL))
                                                                                                                                                                                          NIL))
                                                                                                                                                                                        NIL))
                                                                                                                                                                                      NIL))
                                                                                                                                                                                    NIL))
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL)
                                                                                                                                                             ("2"
                                                                                                                                                              (PROPAX)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL)
                                                                                                                                                       ("2"
                                                                                                                                                        (HIDE
                                                                                                                                                         4)
                                                                                                                                                        (("2"
                                                                                                                                                          (HIDE
                                                                                                                                                           -)
                                                                                                                                                          (("2"
                                                                                                                                                            (SKEEP)
                                                                                                                                                            (("2"
                                                                                                                                                              (LEMMA
                                                                                                                                                               "expt_pos")
                                                                                                                                                              (("2"
                                                                                                                                                                (INST?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (ASSERT)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (ASSERT)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             -)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "deriv_domain?"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (SKEEP)
                                                                                                  (("2"
                                                                                                    (INST
                                                                                                     1
                                                                                                     "e!1/2")
                                                                                                    (("2"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("3"
                                                                                              (HIDE
                                                                                               -)
                                                                                              (("3"
                                                                                                (EXPAND
                                                                                                 "not_one_element?"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (SKEEP)
                                                                                                  (("3"
                                                                                                    (INST
                                                                                                     1
                                                                                                     "x+1")
                                                                                                    (("3"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "deriv_domain?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (SKEEP)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   1
                                                                                                   "-e!1/2")
                                                                                                  (("2"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (HIDE
                                                                                           -)
                                                                                          (("3"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("3"
                                                                                              (EXPAND
                                                                                               "not_one_element?"
                                                                                               1)
                                                                                              (("3"
                                                                                                (SKEEP)
                                                                                                (("3"
                                                                                                  (INST
                                                                                                   1
                                                                                                   "x-1")
                                                                                                  (("3"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (LEMMA "deriv_sm_n")
            (("2" (INST -1 "1+j")
              (("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (EXPAND "restrict")
                    (("2" (INST 1 "c" "d" "n3" "n4" "k")
                      (("2"
                        (LEMMA "nderiv_subtype[real,(Lambda(r:real): r>0)]")
                        (("2"
                          (LEMMA "nderiv_subtype[real,(Lambda(r:real): r<0)]")
                          (("2" (INST -1 "1+j" "sm")
                            (("2" (ASSERT)
                              (("2" (INST -2 "1+j" "sm")
                                (("2" (ASSERT)
                                  (("2"
                                    (CASE
                                        "deriv_domain?[(LAMBDA (r: real): r < 0)] AND
       not_one_element?[(LAMBDA (r: real): r < 0)]")
                                    (("1" (FLATTEN)
                                      (("1" (ASSERT)
                                        (("1" (DECOMPOSE-EQUALITY 1)
                                          (("1" (CASE "x!1>0")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -5)
                                                (("1" (DECOMPOSE-EQUALITY -5)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (DECOMPOSE-EQUALITY -2)
                                                      (("1" (INST -1 "x!1")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REPLACE -1 1 RL)
                                                            (("1"
                                                              (EXPAND
                                                               "restrict")
                                                              (("1"
                                                                (DECOMPOSE-EQUALITY
                                                                 -7)
                                                                (("1"
                                                                  (INST -1
                                                                   "x!1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (EXPAND "deriv_domain?" 1)
                                                  (("2" (SKEEP)
                                                    (("2" (INST 1 "e!1/2")
                                                      (("2" (HIDE -)
                                                        (("2" (HIDE 2)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (HIDE -)
                                                  (("3"
                                                    (EXPAND "not_one_element?"
                                                            1)
                                                    (("3" (SKEEP)
                                                      (("3" (INST 1 "x+1")
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (CASE "x!1<0")
                                              (("1" (ASSERT)
                                                (("1" (DECOMPOSE-EQUALITY -4)
                                                  (("1" (INST -1 "x!1")
                                                    (("1" (REPLACE -1 2 RL)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "restrict")
                                                          (("1"
                                                            (LEMMA
                                                             "sm_derivable_init_le0")
                                                            (("1"
                                                              (INST -1 "1+j")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -2)
                                                                  (("1"
                                                                    (INST -1
                                                                     "x!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (CASE "NOT x!1=0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2"
                                                  (LEMMA
                                                   "deriv_left_right_point_deriv")
                                                  (("2"
                                                    (LEMMA
                                                     "nderiv_derivable_aux")
                                                    (("2" (INST -1 "sm" "j")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           -1)
                                                          (("2" (INST -1 "x!1")
                                                            (("2" (REPLACE -1)
                                                              (("2"
                                                                (INST -2 "0"
                                                                 "nderiv(j, sm)")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (REPLACE
                                                                     -3)
                                                                    (("2"
                                                                      (SPLIT
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "deriv"
                                                                           3)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1
                                                                               3)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "restrict")
                                                                                (("1"
                                                                                  (SKEEP)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -12
                                                                                     3)
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "NOT  (LAMBDA (s: (LAMBDA (r: real): r < 0)):
                 (LAMBDA (x: real):
                    IF x <= 0 THEN 0
                    ELSE (polynomial(c!1, n3!1)(x) * exp(-1 / x) *
                           sin(1 / x)
                           +
                           polynomial(d!1, n4!1)(x) * cos(1 / x) *
                            exp(-1 / x))
                          / x ^ k!1
                    ENDIF)
                     (s)) = Lambda(x:real | x<0): 0")
                                                                                      (("1"
                                                                                        (DECOMPOSE-EQUALITY
                                                                                         1)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "0")
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -1)
                                                                                              (("2"
                                                                                                (LEMMA
                                                                                                 "lim_fun_def[ (LAMBDA (r: real): r < 0)]")
                                                                                                (("2"
                                                                                                  (INST?)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "convergence"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "convergence"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "adh"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (SPLIT
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (SKEEP)
                                                                                                                (("1"
                                                                                                                  (INST
                                                                                                                   1
                                                                                                                   "-e!1/2")
                                                                                                                  (("1"
                                                                                                                    (GRIND)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (SKEEP)
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   1
                                                                                                                   "1")
                                                                                                                  (("2"
                                                                                                                    (SKEEP)
                                                                                                                    (("2"
                                                                                                                      (GRIND)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (HIDE
                                                                                         -)
                                                                                        (("3"
                                                                                          (HIDE
                                                                                           4)
                                                                                          (("3"
                                                                                            (SKEEP)
                                                                                            (("3"
                                                                                              (LEMMA
                                                                                               "expt_pos")
                                                                                              (("3"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("4"
                                                                                        (HIDE
                                                                                         -)
                                                                                        (("4"
                                                                                          (HIDE
                                                                                           4)
                                                                                          (("4"
                                                                                            (SKEEP)
                                                                                            (("4"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (LEMMA
                                                                         "nderiv_derivable[(LAMBDA (r: real): r < 0)]")
                                                                        (("2"
                                                                          (LEMMA
                                                                           "sm_derivable_init_le0")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "1+j")
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "nderiv_derivable[(LAMBDA (r: real): r < 0)]")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "sm"
                                                                                   "j"
                                                                                   "j")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "restrict")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "nderiv[(LAMBDA (r: reals.real): reals.<(r, 0))](j, LAMBDA (s: (LAMBDA (r: real): r < 0)): sm(s)) =  LAMBDA (s: (LAMBDA (r: real): r < 0)): nderiv[real](j, sm)(s)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (LEMMA
                                                                                             "nderiv_subtype[real,(Lambda(r:real): r<0)]")
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "j"
                                                                                               "sm")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (ASSERT)
                                                                                            (("3"
                                                                                              (LEMMA
                                                                                               "sm_derivable_init_le0")
                                                                                              (("3"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "j")
                                                                                                (("3"
                                                                                                  (EXPAND
                                                                                                   "restrict")
                                                                                                  (("3"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (SKEEP
                                                                         -11)
                                                                        (("3"
                                                                          (REPLACE
                                                                           -11)
                                                                          (("3"
                                                                            (ASSERT)
                                                                            (("3"
                                                                              (HIDE
                                                                               4)
                                                                              (("3"
                                                                                (HIDE
                                                                                 -)
                                                                                (("3"
                                                                                  (EXPAND
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("3"
                                                                                    (LEMMA
                                                                                     "deriv_e_sin_cos1xk")
                                                                                    (("3"
                                                                                      (INST
                                                                                       -1
                                                                                       "c!1"
                                                                                       "d!1"
                                                                                       "n3!1"
                                                                                       "n4!1"
                                                                                       "k!1")
                                                                                      (("3"
                                                                                        (FLATTEN)
                                                                                        (("3"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("4"
                                                                        (SKEEP)
                                                                        (("4"
                                                                          (REPLACE
                                                                           -11)
                                                                          (("4"
                                                                            (ASSERT)
                                                                            (("4"
                                                                              (HIDE
                                                                               4)
                                                                              (("4"
                                                                                (HIDE
                                                                                 -)
                                                                                (("4"
                                                                                  (EXPAND
                                                                                   "restrict")
                                                                                  (("4"
                                                                                    (ASSERT)
                                                                                    (("4"
                                                                                      (LEMMA
                                                                                       "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                      (("4"
                                                                                        (INST?)
                                                                                        (("4"
                                                                                          (ASSERT)
                                                                                          (("4"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("4"
                                                                                              (EXPAND
                                                                                               "convergent?"
                                                                                               1)
                                                                                              (("4"
                                                                                                (INST
                                                                                                 1
                                                                                                 "0")
                                                                                                (("4"
                                                                                                  (EXPAND
                                                                                                   "convergence"
                                                                                                   1)
                                                                                                  (("4"
                                                                                                    (EXPAND
                                                                                                     "convergence"
                                                                                                     1)
                                                                                                    (("4"
                                                                                                      (SPLIT
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "adh"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (SKEEP)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             1
                                                                                                             "-e!1/2")
                                                                                                            (("1"
                                                                                                              (GRIND)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (SKEEP)
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           1
                                                                                                           "1")
                                                                                                          (("2"
                                                                                                            (SKEEP)
                                                                                                            (("2"
                                                                                                              (GRIND)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("5"
                                                                        (SKEEP)
                                                                        (("5"
                                                                          (REPLACE
                                                                           -11)
                                                                          (("5"
                                                                            (HIDE
                                                                             -)
                                                                            (("5"
                                                                              (HIDE
                                                                               4)
                                                                              (("5"
                                                                                (EXPAND
                                                                                 "restrict")
                                                                                (("5"
                                                                                  (ASSERT)
                                                                                  (("5"
                                                                                    (LEMMA
                                                                                     "deriv_e_sin_cos1xk")
                                                                                    (("5"
                                                                                      (INST
                                                                                       -1
                                                                                       "c!1"
                                                                                       "d!1"
                                                                                       "n3!1"
                                                                                       "n4!1"
                                                                                       "k!1")
                                                                                      (("5"
                                                                                        (FLATTEN)
                                                                                        (("5"
                                                                                          (SKEEP)
                                                                                          (("5"
                                                                                            (REPLACE
                                                                                             -2)
                                                                                            (("5"
                                                                                              (LEMMA
                                                                                               "exp_sin_p_cos_p_conv")
                                                                                              (("5"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "c!2"
                                                                                                 "d!2"
                                                                                                 "n3!2"
                                                                                                 "n4!2"
                                                                                                 "k!1+2")
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("6"
                                                                        (SKEEP)
                                                                        (("6"
                                                                          (REPLACE
                                                                           -11)
                                                                          (("6"
                                                                            (HIDE
                                                                             -)
                                                                            (("6"
                                                                              (ASSERT)
                                                                              (("6"
                                                                                (HIDE
                                                                                 4)
                                                                                (("6"
                                                                                  (EXPAND
                                                                                   "restrict")
                                                                                  (("6"
                                                                                    (ASSERT)
                                                                                    (("6"
                                                                                      (LEMMA
                                                                                       "deriv_const_fun[(LAMBDA (r: real): r < 0)]")
                                                                                      (("6"
                                                                                        (INST?)
                                                                                        (("6"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("6"
                                                                                            (LEMMA
                                                                                             "lim_fun_def[ (LAMBDA (r: real): r < 0)]")
                                                                                            (("6"
                                                                                              (INST
                                                                                               -1
                                                                                               "(LAMBDA (x: (LAMBDA (r: real): r < 0)): 0)"
                                                                                               "0"
                                                                                               "0")
                                                                                              (("6"
                                                                                                (ASSERT)
                                                                                                (("6"
                                                                                                  (FLATTEN)
                                                                                                  (("6"
                                                                                                    (SPLIT
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "deriv_e_sin_cos1xk")
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "c!1"
                                                                                                           "d!1"
                                                                                                           "n3!1"
                                                                                                           "n4!1"
                                                                                                           "k!1")
                                                                                                          (("1"
                                                                                                            (FLATTEN)
                                                                                                            (("1"
                                                                                                              (SKEEP)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "exp_lim")
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "c!2"
                                                                                                                     "d!2"
                                                                                                                     "n3!2"
                                                                                                                     "n4!2"
                                                                                                                     "k!1+2")
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (PROPAX)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "convergence")
                                                                                                        (("2"
                                                                                                          (HIDE
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "convergence"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (SPLIT
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "adh"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (SKEEP)
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     1
                                                                                                                     "-e!1/2")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      (("1"
                                                                                                                        (GRIND)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (SKEEP)
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   1
                                                                                                                   "1")
                                                                                                                  (("2"
                                                                                                                    (SKEEP)
                                                                                                                    (("2"
                                                                                                                      (GRIND)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("7"
                                                                        (HIDE
                                                                         -1 -2
                                                                         -3 -4
                                                                         -5 -6
                                                                         -7 -8)
                                                                        (("7"
                                                                          (LEMMA
                                                                           "nderiv_derivable_aux")
                                                                          (("7"
                                                                            (LEMMA
                                                                             "nderiv_derivable")
                                                                            (("7"
                                                                              (INST
                                                                               -1
                                                                               "sm"
                                                                               "j"
                                                                               "j")
                                                                              (("7"
                                                                                (ASSERT)
                                                                                (("7"
                                                                                  (LEMMA
                                                                                   "derivable_continuous[real]")
                                                                                  (("7"
                                                                                    (EXPAND
                                                                                     "continuous?"
                                                                                     1)
                                                                                    (("7"
                                                                                      (EXPAND
                                                                                       "derivable?"
                                                                                       -2)
                                                                                      (("7"
                                                                                        (SKEEP)
                                                                                        (("7"
                                                                                          (INST
                                                                                           -2
                                                                                           "x0")
                                                                                          (("7"
                                                                                            (INST
                                                                                             -1
                                                                                             "nderiv(j,sm)"
                                                                                             "x0")
                                                                                            (("7"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP)
                                            (("2" (LEMMA "expt_pos")
                                              (("2" (INST?)
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE -)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (SKEEP)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (HIDE -)
                                        (("2" (SPLIT 1)
                                          (("1" (EXPAND "deriv_domain?" 1)
                                            (("1" (SKEEP)
                                              (("1" (INST 1 "-e!1/2")
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "not_one_element?" 1)
                                            (("2" (SKEEP)
                                              (("2" (INST 1 "x-1")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (SKEEP)
          (("4" (LEMMA "expt_pos")
            (("4" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP 2)
      (("5" (HIDE 1)
        (("5" (SKEEP)
          (("5" (LEMMA "expt_pos")
            (("5" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP) (("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL)) NIL)
     ("7" (SKEEP*) (("7" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|)
    (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|derivable_nth_split| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|deriv_sm_n| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|deriv_left_right_point| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|nderiv_derivable_eqv| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|nderiv_subtype| FORMULA-DECL NIL |nth_derivative_subtype| NIL)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|convergent?| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|convergence| CONST-DECL "bool" |lim_of_functions| |analysis|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|adh| CONST-DECL "setof[real]" |convergence_functions| |analysis|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|convergence| CONST-DECL "bool" |convergence_functions| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|)
    (|k| SKOLEM-CONST-DECL "nat" |smooth_not_analytic| NIL)
    (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL)
    (|x| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|x| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|deriv_e_sin_cos1xk| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|exp_sin_p_cos_p_conv| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|exp_lim| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|convergence_equiv| FORMULA-DECL NIL |lim_of_functions| |analysis|)
    (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|)
    (|x0| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|)
    (|derivable_continuous| FORMULA-DECL NIL |derivatives_def| |analysis|)
    (|lim_fun_def| FORMULA-DECL NIL |lim_of_functions| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|delta| SKOLEM-CONST-DECL "posreal" |smooth_not_analytic| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|x_1| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|nderiv_derivable_aux| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|sm_derivable_init_le0| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|x| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|nderiv_derivable| FORMULA-DECL NIL |nth_derivatives| |analysis|)
    (|x| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|k!1| SKOLEM-CONST-DECL "nat" |smooth_not_analytic| NIL)
    (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (|deriv_left_right_point_deriv| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|k| SKOLEM-CONST-DECL "nat" |smooth_not_analytic| NIL)
    (|x| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (|x| SKOLEM-CONST-DECL "real" |smooth_not_analytic| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|smooth_not_analytic| 0
  (|smooth_not_analytic-1| |nil| 3813015720
   ("" (CASE "NOT smooth?(sm)")
    (("1" (ASSERT)
      (("1" (HIDE 2)
        (("1" (EXPAND "smooth?" 1)
          (("1" (LEMMA "sm_n_derivable")
            (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (LEMMA "sm_n_derivable")
      (("2" (ASSERT)
        (("2" (HIDE -2)
          (("2" (EXPAND "analytic?" -2)
            (("2" (SKEEP)
              (("2" (EXPAND "analytic_parts?" -2)
                (("2" (CASE "EXISTS(x:real | abs(x) < M): sm(x) /= 0")
                  (("1" (SKEEP)
                    (("1" (INST -2 "x")
                      (("1" (FLATTEN)
                        (("1" (EXPAND "inf_sum" -3)
                          (("1" (EXPAND "powerseq" -3)
                            (("1" (LEMMA "analytic_term")
                              (("1" (INST -1 "sm" "0" "M" "a")
                                (("1" (ASSERT)
                                  (("1" (SPLIT -1)
                                    (("1" (LEMMA "zero_series_limit")
                                      (("1"
                                        (CASE
                                            "(LAMBDA (k: nat) -> real: a(k) * x ^ k) = (LAMBDA(n:nat): 0)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DECOMPOSE-EQUALITY 1)
                                            (("2" (INST -2 "x!1")
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "restrict" -2)
                                                  (("2" (INST -3 "x!1")
                                                    (("2" (FLATTEN)
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           -4)
                                                          (("1" (INST -1 "0")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (LEMMA
                                                                 "nderiv_subtype[real, (ball(0, M))]")
                                                                (("1"
                                                                  (INST -1
                                                                   "x!1" "sm")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "ball_dd")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "M"
                                                                         "0")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "ball_noe")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "M"
                                                                               "0")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (DECOMPOSE-EQUALITY
                                                                                   -3)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "0")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -4
                                                                                             -6)
                                                                                            (("1"
                                                                                              (DIV-BY
                                                                                               -6
                                                                                               "factorial(x!1)")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (TYPEPRED "x!1")
                                                            (("2"
                                                              (LEMMA
                                                               "expt_pos_aux")
                                                              (("2"
                                                                (INST -1 "k"
                                                                 "x1!1")
                                                                (("2"
                                                                  (EXPAND "^")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "analytic_parts?" 1)
                                      (("2" (REVEAL -) (("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -)
                    (("2" (EXPAND "sm" 1)
                      (("2" (LEMMA "sin_pi2 ")
                        (("2" (LEMMA "sin_period")
                          (("2" (TYPEPRED "M")
                            (("2"
                              (CASE
                                  "(EXISTS(a:posreal):  1/a > 1/M AND sin(1/a) = 1)")
                              (("1" (SKEEP)
                                (("1" (ASSERT)
                                  (("1" (INST 1 "a!1")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (EXPAND "abs" 1)
                                      (("2" (ASSERT)
                                        (("2" (MULT-BY -1 "a!1")
                                          (("2" (MULT-BY -1 "M")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (LEMMA "sin_k_pi2")
                                  (("2"
                                    (CASE
                                        "FORALL(C:posreal): EXISTS( c:real): c> C AND sin(c)=1")
                                    (("1" (INST -1 "1/M")
                                      (("1" (SKEEP)
                                        (("1" (INST 1 "1/c")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (ASSERT)
                                            (("2"
                                              (CASE
                                                  "FORALL(x:real): x>0 IMPLIES 1/x>0")
                                              (("1" (INST -1 "c")
                                                (("1" (ASSERT) NIL NIL)) NIL)
                                               ("2" (HIDE 2)
                                                (("2" (SKEEP)
                                                  (("2" (ASSERT)
                                                    (("2" (MULT-BY 1 "x")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (HIDE 2)
                                                (("3" (SKEEP)
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (SKEEP)
                                        (("2" (CASE "C <= ceiling(C)")
                                          (("1" (INST -5 "pi/2" "ceiling(C)")
                                            (("1" (ASSERT)
                                              (("1"
                                                (INST 1
                                                 "pi / 2 + 2 * (ceiling(C) * pi)")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE
                                                        "NOT ceiling(C)<=2 * (ceiling(C) * pi)")
                                                    (("1" (ASSERT)
                                                      (("1" (LEMMA "pi_bound")
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "pi_lb_new")
                                                              (("1"
                                                                (CASE
                                                                    "NOT pi>=1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (CASE
                                                                        "NOT ceiling(C) <= 2* ceiling(C)")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (CASE
                                                                          "NOT 2 * ceiling(C) <=2 * (ceiling(C) * pi)")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (CASE
                                                                              "FORALL(a:posreal,b:real): b>=1 IMPLIES a <= a*b")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "2*ceiling(C)"
                                                                             "pi")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (SKEEP)
                                                                            (("2"
                                                                              (DIV-BY
                                                                               1
                                                                               "a!1")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL
    (|analytic_term| FORMULA-DECL NIL |analytic_def| NIL)
    (|zero_series_limit| FORMULA-DECL NIL |series| |series|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|)
    (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|)
    (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ball_dd| FORMULA-DECL NIL |analytic_def| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|ball_noe| FORMULA-DECL NIL |analytic_def| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|)
    (|ball| CONST-DECL "bool" |analytic_def| NIL)
    (|nderiv_subtype| FORMULA-DECL NIL |nth_derivative_subtype| NIL)
    (|expt_pos_aux| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|powerseq| CONST-DECL "sequence[real]" |power_series| |series|)
    (|sin_period| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|sin_k_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonneg_ceiling_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|pi_bound| JUDGEMENT-TCC NIL |pi_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    NIL
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL) NIL
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|sm_n_derivable| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|smooth?| CONST-DECL "bool" |smooth_not_analytic| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL))
   SHOSTAK))
 (|psmxn_TCC1| 0
  (|psmxn_TCC1-1| |nil| 3813310680
   ("" (ASSERT)
    ((""
      (INST 1
       "Lambda(i:nat): choose[real]({r:real | r>0 AND sm(r)>0 AND r< 1/(1+i)})")
      (("1" (SKEEP)
        (("1"
          (NAME "ch"
                "choose[real]({r: real | r > 0 AND sm(r) > 0 AND r < 1 / (1 + i)})")
          (("1" (TYPEPRED "ch") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "nonempty?" 1)
              (("2" (EXPAND "empty?" -1)
                (("2" (EXPAND "sm" -1 1)
                  (("2" (ASSERT)
                    (("2" (LEMMA "sin_k_pi2")
                      (("2" (TYPEPRED "pi")
                        (("2" (ASSERT)
                          (("2" (INST -8 "2*(i+1)")
                            (("2" (CASE "FORALL(k:nat): (-1)^(2*k) = 1")
                              (("1" (INST -1 "i+1")
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1"
                                      (INST -10
                                       "1/ (pi / 2 + 2 * ((1+i) * pi))")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT 1)
                                          (("1"
                                            (MULT-BY 1
                                             "pi / 2 + 2 * ((1+i) * pi)")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (ASSERT) NIL NIL)
                                           ("3"
                                            (CASE
                                                "(pi / 2 + 2 * ((1+i) * pi)) > (1+i)")
                                            (("1" (ASSERT)
                                              (("1" (MULT-BY 1 "(1+i)")
                                                (("1"
                                                  (MULT-BY 1
                                                   "(pi / 2 + 2 * ((i+1) * pi))")
                                                  (("1"
                                                    (CASE
                                                        "NOT 1 / (pi / 2 + 2 * ((i+1) * pi)) * (1 + i) * (pi / 2 + 2 * ((i+1) * pi)) = (1+i)")
                                                    (("1" (HIDE 2)
                                                      (("1"
                                                        (CASE
                                                            "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                        (("1"
                                                          (INST -1
                                                           " (pi / 2 + 2 * ((i+1) * pi))"
                                                           "(1+i)")
                                                          NIL NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (ASSERT)
                                                (("2" (CASE "pi / 2>1")
                                                  (("1"
                                                    (CASE
                                                        "2 * ((i+1) * pi) > i")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2"
                                                        (CASE "NOT i+1 > i")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2"
                                                          (CASE
                                                              "NOT 2*pi*(i) >= i ")
                                                          (("1" (ASSERT)
                                                            (("1" (CASE "i=0")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (DIV-BY 2 "i")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (CASE
                                                                "2*pi*(i +1) > 2*pi* i")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -)
                                (("2" (INDUCT "k")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (SKEEP)
                                    (("2" (LEMMA "expt_plus")
                                      (("2" (ASSERT)
                                        (("2" (INST -1 "2*j" "2" "-1")
                                          (("2" (ASSERT)
                                            (("2" (REPLACE -2 -1)
                                              (("2" (REPLACE -1 1)
                                                (("2" (HIDE -)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "nonempty?" 1)
          (("2" (EXPAND "empty?" -1)
            (("2" (EXPAND "sm" -1 1)
              (("2" (ASSERT)
                (("2" (LEMMA "sin_k_pi2")
                  (("2" (TYPEPRED "pi")
                    (("2" (ASSERT)
                      (("2" (INST -8 "2*(i+1)")
                        (("2" (CASE "FORALL(k:nat): (-1)^(2*k) = 1")
                          (("1" (INST -1 "i+1")
                            (("1" (REPLACE -1)
                              (("1" (ASSERT)
                                (("1"
                                  (INST -10 "1/ (pi / 2 + 2 * ((1+i) * pi))")
                                  (("1" (ASSERT)
                                    (("1" (SPLIT 1)
                                      (("1"
                                        (MULT-BY 1 "pi / 2 + 2 * ((1+i) * pi)")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL)
                                       ("3"
                                        (CASE
                                            "(pi / 2 + 2 * ((1+i) * pi)) > (1+i)")
                                        (("1" (ASSERT)
                                          (("1" (MULT-BY 1 "(1+i)")
                                            (("1"
                                              (MULT-BY 1
                                               "(pi / 2 + 2 * ((i+1) * pi))")
                                              (("1"
                                                (CASE
                                                    "NOT 1 / (pi / 2 + 2 * ((i+1) * pi)) * (1 + i) * (pi / 2 + 2 * ((i+1) * pi)) = (1+i)")
                                                (("1" (HIDE 2)
                                                  (("1"
                                                    (CASE
                                                        "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                    (("1"
                                                      (INST -1
                                                       " (pi / 2 + 2 * ((i+1) * pi))"
                                                       "(1+i)")
                                                      NIL NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (ASSERT)
                                            (("2" (CASE "pi / 2>1")
                                              (("1"
                                                (CASE "2 * ((i+1) * pi) > i")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (CASE "NOT i+1 > i")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (CASE
                                                          "NOT 2*pi*(i) >= i ")
                                                      (("1" (ASSERT)
                                                        (("1" (CASE "i=0")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (DIV-BY 2 "i")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (CASE
                                                            "2*pi*(i +1) > 2*pi* i")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -)
                            (("2" (INDUCT "k")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (SKEEP)
                                (("2" (LEMMA "expt_plus")
                                  (("2" (ASSERT)
                                    (("2" (INST -1 "2*j" "2" "-1")
                                      (("2" (ASSERT)
                                        (("2" (REPLACE -2 -1)
                                          (("2" (REPLACE -1 1)
                                            (("2" (HIDE -)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sin_k_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pi_ub_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|psmxn| EXISTENCE ""
    "[i: nat -> {r: real_types.posreal | booleans.AND(reals.>(smooth_not_analytic.sm(r), 0), reals.<(r, number_fields./(1, (number_fields.+)(1, i))))}]")))
 (|nsmxn_TCC1| 0
  (|nsmxn_TCC1-1| |nil| 3813310680
   ("" (ASSERT)
    ((""
      (INST 1
       "Lambda(i:nat): choose[real]({r:real | r>0 AND sm(r) < 0 AND r< 1/(1+i)})")
      (("1" (SKEEP)
        (("1"
          (NAME "ch"
                "choose[real]({r: real | r > 0 AND sm(r) < 0 AND r < 1 / (1 + i)})")
          (("1" (TYPEPRED "ch") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "nonempty?" 1)
              (("2" (EXPAND "empty?" -1)
                (("2" (EXPAND "sm" -1 1)
                  (("2" (ASSERT)
                    (("2" (LEMMA "sin_k_pi2")
                      (("2" (TYPEPRED "pi")
                        (("2" (ASSERT)
                          (("2" (INST -8 "2*(i+1)+1")
                            (("2" (CASE "FORALL(k:nat): (-1)^(2*k+1) = -1")
                              (("1" (INST -1 "i+1")
                                (("1" (REPLACE -1)
                                  (("1" (ASSERT)
                                    (("1"
                                      (INST -10
                                       "1/ (pi / 2 + 2 * (i * pi) + 3 * pi)")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT 1)
                                          (("1"
                                            (MULT-BY 1
                                             "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (ASSERT) NIL NIL)
                                           ("3"
                                            (CASE
                                                " (pi / 2 + 2 * (i * pi) + 3 * pi) > (1+i)")
                                            (("1" (ASSERT)
                                              (("1" (MULT-BY 1 "(1+i)")
                                                (("1"
                                                  (MULT-BY 1
                                                   "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                                  (("1"
                                                    (CASE
                                                        "NOT 1 / (pi / 2 + 2 * (i * pi) + 3 * pi) * (1 + i) * (pi / 2 + 2 * (i * pi) + 3 * pi) = (1+i)")
                                                    (("1" (HIDE 2)
                                                      (("1"
                                                        (CASE
                                                            "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                        (("1"
                                                          (INST -1
                                                           "(pi / 2 + 2 * (i * pi) + 3 * pi)"
                                                           "(1+i)")
                                                          NIL NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (ASSERT)
                                                (("2" (CASE "pi / 2>1")
                                                  (("1"
                                                    (CASE "2 * (i * pi) >= i")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (CASE "i=0")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (DIV-BY 2 "i")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -)
                                (("2" (INDUCT "k")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (SKEEP)
                                    (("2" (LEMMA "expt_plus")
                                      (("2" (ASSERT)
                                        (("2" (INST -1 "1+2*j" "2" "-1")
                                          (("2" (ASSERT)
                                            (("2" (REPLACE -2 -1)
                                              (("2" (REPLACE -1 1)
                                                (("2" (HIDE -)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "nonempty?" 1)
          (("2" (EXPAND "empty?" -1)
            (("2" (EXPAND "sm" -1 1)
              (("2" (ASSERT)
                (("2" (LEMMA "sin_k_pi2")
                  (("2" (TYPEPRED "pi")
                    (("2" (ASSERT)
                      (("2" (INST -8 "2*(i+1)+1")
                        (("2" (CASE "FORALL(k:nat): (-1)^(2*k+1) = -1")
                          (("1" (INST -1 "i+1")
                            (("1" (REPLACE -1)
                              (("1" (ASSERT)
                                (("1"
                                  (INST -10
                                   "1/ (pi / 2 + 2 * (i * pi) + 3 * pi)")
                                  (("1" (ASSERT)
                                    (("1" (SPLIT 1)
                                      (("1"
                                        (MULT-BY 1
                                         "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL)
                                       ("3"
                                        (CASE
                                            " (pi / 2 + 2 * (i * pi) + 3 * pi) > (1+i)")
                                        (("1" (ASSERT)
                                          (("1" (MULT-BY 1 "(1+i)")
                                            (("1"
                                              (MULT-BY 1
                                               "(pi / 2 + 2 * (i * pi) + 3 * pi)")
                                              (("1"
                                                (CASE
                                                    "NOT 1 / (pi / 2 + 2 * (i * pi) + 3 * pi) * (1 + i) * (pi / 2 + 2 * (i * pi) + 3 * pi) = (1+i)")
                                                (("1" (HIDE 2)
                                                  (("1"
                                                    (CASE
                                                        "FORALL(a:nzreal,b:real): (1/a)*b*a = b")
                                                    (("1"
                                                      (INST -1
                                                       "(pi / 2 + 2 * (i * pi) + 3 * pi)"
                                                       "(1+i)")
                                                      NIL NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (ASSERT)
                                            (("2" (CASE "pi / 2>1")
                                              (("1" (CASE "2 * (i * pi) >= i")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (CASE "i=0")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (DIV-BY 2 "i")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -)
                            (("2" (INDUCT "k")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (SKEEP)
                                (("2" (LEMMA "expt_plus")
                                  (("2" (ASSERT)
                                    (("2" (INST -1 "1+2*j" "2" "-1")
                                      (("2" (ASSERT)
                                        (("2" (REPLACE -2 -1)
                                          (("2" (REPLACE -1 1)
                                            (("2" (HIDE -)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sin_k_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|both_sides_div_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pi_ub_new| CONST-DECL "posreal" |pi_def| |trig|)
    (|pi_lb_new| CONST-DECL "posreal" |pi_def| |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|nsmxn| EXISTENCE ""
    "[i: nat -> {r: real_types.posreal | booleans.AND(reals.<(smooth_not_analytic.sm(r), 0), reals.<(r, number_fields./(1, (number_fields.+)(1, i))))}]")))
 (|nsmxn_conv_0| 0
  (|nsmxn_conv_0-1| |nil| 3813316626
   ("" (EXPAND "convergence" 1 1)
    (("" (SKEEP)
      (("" (CASE "FORALL(epsilon:posreal): EXISTS(i:nat): 1/(i+1) < epsilon")
        (("1" (INST -1 "epsilon")
          (("1" (SKEEP)
            (("1" (INST 1 "i")
              (("1" (SKEEP)
                (("1" (TYPEPRED "nsmxn(i_1)")
                  (("1" (ASSERT)
                    (("1" (EXPAND "abs")
                      (("1" (CASE "1/(1+i) >= 1 / (1+i_1)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2" (MULT-BY 1 "(1+i_1)")
                            (("2" (MULT-BY 1 "(1+i)")
                              (("2"
                                (CASE "FORALL(a:nzreal,b:real): (1/a)*b*a=b")
                                (("1" (INST -1 "(1+i)" "(1+i_1)")
                                  (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (SKEEP)
            (("2"
              (CASE
                  "NOT epsilon!1 <= max(ceiling(epsilon!1),ceiling(1/epsilon!1))")
              (("1" (ASSERT) NIL NIL)
               ("2" (ASSERT)
                (("2"
                  (INST 1 "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                  (("2" (ASSERT)
                    (("2"
                      (NAME "m"
                            "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                      (("2" (REPLACE -1)
                        (("2" (CASE "NOT  1/epsilon!1 < 1+m")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (MULT-BY -1 "epsilon!1")
                            (("2" (DIV-BY -1 "(1+m)") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nonneg_ceiling_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nsmxn| CONST-DECL "{r: posreal | sm(r) < 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|psmxn_conv_0| 0
  (|psmxn_conv_0-1| |nil| 3813317118
   ("" (EXPAND "convergence" 1 1)
    (("" (SKEEP)
      (("" (CASE "FORALL(epsilon:posreal): EXISTS(i:nat): 1/(i+1) < epsilon")
        (("1" (INST -1 "epsilon")
          (("1" (SKEEP)
            (("1" (INST 1 "i")
              (("1" (SKEEP)
                (("1" (TYPEPRED "psmxn(i_1)")
                  (("1" (ASSERT)
                    (("1" (EXPAND "abs")
                      (("1" (CASE "1/(1+i) >= 1 / (1+i_1)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2" (MULT-BY 1 "(1+i_1)")
                            (("2" (MULT-BY 1 "(1+i)")
                              (("2"
                                (CASE "FORALL(a:nzreal,b:real): (1/a)*b*a=b")
                                (("1" (INST -1 "(1+i)" "(1+i_1)")
                                  (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (SKEEP)
            (("2"
              (CASE
                  "NOT epsilon!1 <= max(ceiling(epsilon!1),ceiling(1/epsilon!1))")
              (("1" (ASSERT) NIL NIL)
               ("2" (ASSERT)
                (("2"
                  (INST 1 "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                  (("2" (ASSERT)
                    (("2"
                      (NAME "m"
                            "max(ceiling(epsilon!1), ceiling(1 / epsilon!1))")
                      (("2" (REPLACE -1)
                        (("2" (CASE "NOT  1/epsilon!1 < 1+m")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (MULT-BY -1 "epsilon!1")
                            (("2" (DIV-BY -1 "(1+m)") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nonneg_ceiling_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|psmxn| CONST-DECL "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK))
 (|p1_TCC1| 0
  (|p1_TCC1-1| |nil| 3809689113
   ("" (EXPAND "mv_standard_form?" 1 1)
    (("" (SPLIT 1)
      (("1" (PROPAX) NIL NIL)
       ("2" (EXPAND "minlength?" 1 1)
        (("2" (SPLIT 1)
          (("1" (PROPAX) NIL NIL)
           ("2" (FLATTEN)
            (("2" (SPLIT 2)
              (("1" (PROPAX) NIL NIL)
               ("2" (HIDE 2)
                (("2" (SPLIT 1)
                  (("1" (EXPAND "Unif?" 1)
                    (("1" (SKEEP)
                      (("1" (TYPEPRED "i" "j")
                        (("1" (EXPAND "length" -)
                          (("1" (EXPAND "length" -)
                            (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (INST 1 "0")
                    (("2" (EXPAND "nth") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (EXPAND "allnonzero?" 1 1)
            (("3" (SPLIT 1)
              (("1" (SKEEP)
                (("1" (EXPAND "nth" -1)
                  (("1" (GRIND)
                    (("1" (TYPEPRED "i")
                      (("1" (EXPAND "length" -1)
                        (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL)
           ("4" (EXPAND "is_sorted?" 1)
            (("4" (SKEEP)
              (("4" (EXPAND "length" -1)
                (("4" (EXPAND "length" -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("5" (EXPAND "simplified?" 1)
            (("5" (SPLIT 1)
              (("1" (PROPAX) NIL NIL)
               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last| DEF-DECL "real" |standard_form_poly| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|is_sorted?| CONST-DECL "bool" |sorting| |sorting|)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|minlength?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL))
   NIL
   (|p1| SUBTYPE "(: (# C := 1, alpha := (: 1 :) #) :)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (SA_TCC1 0
  (SA_TCC1-1 |nil| 3809689113
   ("" (EXPAND "meet_max" 1) (("" (GRIND) NIL NIL)) NIL)
   ((|p1| CONST-DECL "(mv_standard_form?)" |smooth_not_analytic| NIL)
    (|atom1| CONST-DECL "atomic_poly" |smooth_not_analytic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL))
   NIL
   (SA SUBTYPE "1"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: (: smooth_not_analytic.atom1 :) :)))}")))
 (|non_empt_bound_sm_TCC1| 0
  (|non_empt_bound_sm_TCC1-1| |nil| 3813313818 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)) NIL
   (|non_empt_bound_sm| SUBTYPE
    "(: smooth_not_analytic.sm(smooth_not_analytic.xx) :)" "VectorN(1)")))
 (|non_empt_bound_sm| 0
  (|non_empt_bound_sm-1| |nil| 3813313939
   ("" (SPLIT 1)
    (("1" (EXPAND "nonempty?" 1)
      (("1" (EXPAND "empty?" -1)
        (("1" (INST -1 "psmxn(0)")
          (("1" (TYPEPRED "psmxn(0)")
            (("1" (EXPAND "member" 1)
              (("1" (EXPAND "SA" -5)
                (("1" (EXPAND "semi_alg" -5)
                  (("1" (EXPAND "atom1")
                    (("1" (EXPAND "join" -5)
                      (("1" (EXPAND "join" -5)
                        (("1" (EXPAND "meet" -5)
                          (("1" (EXPAND "meet" -5)
                            (("1" (EXPAND "atom_eval" -5)
                              (("1" (EXPAND "full_eval" -5)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "p1")
                                    (("1" (EXPAND "eval" -5)
                                      (("1" (EXPAND "eval" -5)
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (EXPAND "bounded_below?" 1)
      (("2" (INST 1 "-1")
        (("2" (EXPAND "lower_bound?" 1)
          (("2" (SKEEP)
            (("2" (GRIND) (("2" (TYPEPRED "s") (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL) NIL
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|psmxn| CONST-DECL "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|eval| DEF-DECL "MultPoly" |eval_MultPoly| NIL) NIL
    (|list_length_n| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|add_lists| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|replace| DEF-DECL "list[nat]" |eval_MultPoly| NIL)
    (|sum_C| DEF-DECL "real" |eval_MultPoly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|eval| DEF-DECL "monomial" |eval_MultPoly| NIL)
    (|p1| CONST-DECL "(mv_standard_form?)" |smooth_not_analytic| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|atom1| CONST-DECL "atomic_poly" |smooth_not_analytic| NIL)
    (SA CONST-DECL "set[VectorN(1)]" |smooth_not_analytic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|inf_0_sm_TCC1| 0
  (|inf_0_sm_TCC1-1| |nil| 3813314165
   ("" (LEMMA "non_empt_bound_sm") (("" (PROPAX) NIL NIL)) NIL)
   ((|non_empt_bound_sm| FORMULA-DECL NIL |smooth_not_analytic| NIL)) NIL
   (|inf_0_sm| SUBTYPE
    "{xx: reals.real | (booleans.NOT)(smooth_not_analytic.SA((: smooth_not_analytic.sm(xx) :)))}"
    "{S: sets[real].set | booleans.AND(sets[real].nonempty?(S), bounded_real_defs.bounded_below?(S))}")))
 (|inf_0_sm| 0
  (|inf_0_sm-1| |nil| 3813314362
   ("" (EXPAND "inf" 1)
    (("" (LEMMA "glb_lem")
      (("" (INST -1 "{xx: real | NOT SA((: sm(xx) :))}" "0")
        (("1" (ASSERT)
          (("1" (HIDE 2)
            (("1" (EXPAND "greatest_lower_bound?" 1)
              (("1" (SPLIT 1)
                (("1" (EXPAND "lower_bound?" 1)
                  (("1" (SKEEP)
                    (("1" (TYPEPRED "s") (("1" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (EXPAND "lower_bound?" -1)
                    (("2" (CASE "NOT EXISTS(i:posnat): (1/i) < y")
                      (("1" (INST 1 "ceiling(1/y)+1")
                        (("1" (ASSERT)
                          (("1" (MULT-BY 1 "ceiling(1/y)+1")
                            (("1" (ASSERT)
                              (("1" (CASE "NOT 1/y <= ceiling(1/y)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (MULT-BY -1 "y") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED " ceiling(1/y)")
                              (("2" (ASSERT)
                                (("2" (CASE "NOT y>0")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (CASE "1/y >0")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT)
                                      (("2" (MULT-BY 1 "y")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (TYPEPRED " ceiling(1/y)")
                            (("2" (CASE "NOT y>0")
                              (("1" (CASE "NOT y>0")
                                (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (CASE "1/y >0")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (MULT-BY 1 "y") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (CASE "NOT y>0")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (SKEEP)
                          (("2" (INST -3 "psmxn(i)")
                            (("1" (ASSERT)
                              (("1" (TYPEPRED " nsmxn(i)")
                                (("1" (ASSERT)
                                  (("1" (CASE "1/(1+i) < 1/i")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT)
                                      (("2" (MULT-BY 1 "i")
                                        (("2" (ASSERT)
                                          (("2" (MULT-BY 1 "1+i")
                                            (("2"
                                              (CASE
                                                  " 1 / (1 + i) * i * (1 + i) = i")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (CASE
                                                      "FORALL(a:nzreal,b:real): (1/a)*b*a=b")
                                                  (("1" (INST -1 "1+i" "i") NIL
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "psmxn(i)")
                                (("2" (EXPAND "SA" -5) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "non_empt_bound_sm") (("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|glb_lem| FORMULA-DECL NIL |bounded_real_defs| NIL)
    (|non_empt_bound_sm| FORMULA-DECL NIL |smooth_not_analytic| NIL) NIL
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nsmxn| CONST-DECL "{r: posreal | sm(r) < 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    NIL
    (|psmxn| CONST-DECL "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|sum_C| DEF-DECL "real" |eval_MultPoly| NIL)
    (|eval| DEF-DECL "MultPoly" |eval_MultPoly| NIL)
    (|eval| DEF-DECL "monomial" |eval_MultPoly| NIL)
    (|replace| DEF-DECL "list[nat]" |eval_MultPoly| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|add_lists| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|list_length_n| DEF-DECL "list[nat]" |list_lemmas| NIL) NIL
    (|atom1| CONST-DECL "atomic_poly" |smooth_not_analytic| NIL)
    (|p1| CONST-DECL "(mv_standard_form?)" |smooth_not_analytic| NIL) NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (SA CONST-DECL "set[VectorN(1)]" |smooth_not_analytic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL)
    (|inf| CONST-DECL "real" |smooth_not_analytic| NIL))
   SHOSTAK))
 (|not_clean_break_TCC1| 0
  (|not_clean_break_TCC2-1| |nil| 3809689113 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|inf| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (SA CONST-DECL "set[VectorN(1)]" |smooth_not_analytic| NIL)
    (|atom1| CONST-DECL "atomic_poly" |smooth_not_analytic| NIL)
    (|p1| CONST-DECL "(mv_standard_form?)" |smooth_not_analytic| NIL))
   NIL
   (|not_clean_break| SUBTYPE
    "(: smooth_not_analytic.sm(smooth_not_analytic.xn(smooth_not_analytic.i)) :)"
    "VectorN(1)")))
 (|not_clean_break_TCC2| 0
  (|not_clean_break_TCC3-1| |nil| 3813310680 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|inf| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (SA CONST-DECL "set[VectorN(1)]" |smooth_not_analytic| NIL)
    (|atom1| CONST-DECL "atomic_poly" |smooth_not_analytic| NIL)
    (|p1| CONST-DECL "(mv_standard_form?)" |smooth_not_analytic| NIL))
   NIL
   (|not_clean_break| SUBTYPE
    "(: smooth_not_analytic.sm(smooth_not_analytic.yn(smooth_not_analytic.i)) :)"
    "VectorN(1)")))
 (|not_clean_break| 0
  (|not_clean_break-1| |nil| 3813314104
   ("" (LEMMA "nsmxn_conv_0")
    (("" (LEMMA "psmxn_conv_0")
      (("" (LEMMA "inf_0_sm")
        (("" (ASSERT)
          (("" (INST 1 "nsmxn" "psmxn")
            (("" (ASSERT)
              (("" (SKEEP)
                (("" (ASSERT)
                  (("" (TYPEPRED "nsmxn(i)")
                    (("" (ASSERT)
                      (("" (TYPEPRED "psmxn(i)")
                        (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|psmxn_conv_0| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|p1| CONST-DECL "(mv_standard_form?)" |smooth_not_analytic| NIL)
    (|atom1| CONST-DECL "atomic_poly" |smooth_not_analytic| NIL)
    (SA CONST-DECL "set[VectorN(1)]" |smooth_not_analytic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL
    (|list_length_n| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|add_lists| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|replace| DEF-DECL "list[nat]" |eval_MultPoly| NIL)
    (|eval| DEF-DECL "monomial" |eval_MultPoly| NIL)
    (|eval| DEF-DECL "MultPoly" |eval_MultPoly| NIL)
    (|sum_C| DEF-DECL "real" |eval_MultPoly| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|inf| CONST-DECL "real" |smooth_not_analytic| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|psmxn| CONST-DECL "{r: posreal | sm(r) > 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    (|nsmxn| CONST-DECL "{r: posreal | sm(r) < 0 AND r < 1 / (i + 1)}"
     |smooth_not_analytic| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sm| CONST-DECL "real" |smooth_not_analytic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|inf_0_sm| FORMULA-DECL NIL |smooth_not_analytic| NIL)
    (|nsmxn_conv_0| FORMULA-DECL NIL |smooth_not_analytic| NIL))
   SHOSTAK)))

