(eval_poly
 (init_eval_TCC1 0
  (init_eval_TCC1-1 nil 3777803675 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil))
   nil (init_eval subtype "eval_poly.f" "(list_adt[real].cons?)")))
 (init_eval_TCC2 0
  (init_eval_TCC2-2 nil 3777803926
   ("" (skeep)
    (("" (typepred "deg")
      (("" (expand "length" -1 1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((upfrom nonempty-type-eq-decl nil integers nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_eval subtype "eval_poly.deg"
              "integers.upfrom((number_fields.-)(list_props[real].length(list_adt[real].cdr(eval_poly.f)), 1))"))
  (init_eval_TCC2-1 nil 3777803675 ("" (subtype-tcc) nil nil) nil nil
   (init_eval subtype "eval_poly.deg"
              "integers.upfrom((number_fields.-)(list_props[real].length(list_adt[real].cdr(eval_poly.f)), 1))")))
 (init_eval_TCC3 0
  (init_eval_TCC3-1 nil 3777803675 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (init_eval subtype
              "((number_fields.+)((number_fields.-)(eval_poly.deg, list_props[real].length(eval_poly.f)), 1))"
              "{i: integers.int | booleans.OR(eval_poly.x /= 0, reals.>=(i, 0))}")))
 (init_eval_TCC4 0
  (init_eval_TCC4-1 nil 3777803675 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (init_eval termination
              "eval_poly.init_eval(list_adt[real].cdr(eval_poly.f), eval_poly.deg, (number_fields.+)(eval_poly.acc, number_fields.*(list_adt[real].car(eval_poly.f), exponentiation.^(eval_poly.x, ((number_fields.+)((number_fields.-)(eval_poly.deg, list_props[real].length(eval_poly.f)), 1))))))"
              "nil")))
 (eval_TCC1 0
  (eval_TCC1-1 nil 3777803675 ("" (subtype-tcc) nil nil) nil nil
   (eval subtype
         "(number_fields.-)(list_props[real].length(eval_poly.f), 1)"
         "integers.upfrom((number_fields.-)(list_props[real].length(eval_poly.f), 1))")))
 (null_test_TCC1 0
  (null_test_TCC1-1 nil 3777803675 ("" (subtype-tcc) nil nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (null_test subtype "0"
    "integers.upfrom((number_fields.-)(list_props[real].length(list_adt[real].null), 1))")))
 (null_test 0
  (null_test-1 nil 3777803949
   ("" (expand "init_eval" 1 1) (("" (propax) nil nil)) nil)
   ((init_eval def-decl "real" eval_poly nil)) nil))
 (test_init_eval_TCC1 0
  (test_init_eval_TCC1-2 nil 3777804070 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (test_init_eval subtype "2"
    "integers.upfrom((number_fields.-)(list_props[real].length((: 1, 2, 3 :)), 1))"))
  (test_init_eval_TCC1-1 nil 3777803675 ("" (subtype-tcc) nil nil) nil
   nil
   (test_init_eval subtype "2"
    "integers.upfrom((number_fields.-)(list_props[real].length((: 1, 2, 3 :)), 1))")))
 (test_init_eval 0
  (test_init_eval-1 nil 3777804090 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (init_eval_acc 0
  (init_eval_acc-1 nil 3777803972
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (flatten) nil nil)
     ("3" (skeep)
      (("3" (case "cons2_var=null")
        (("1" (replace -1 1)
          (("1" (skeep)
            (("1" (expand "init_eval" 1 1)
              (("1" (expand "init_eval" 1 2)
                (("1" (expand "init_eval" 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "init_eval" 2 1)
            (("2" (skeep)
              (("2" (decompose-equality 2)
                (("1" (expand "init_eval" 1 2)
                  (("1"
                    (inst-cp -1 "deg" "cons1_var *
                         x!1 ^ (1 - length(cons(cons1_var, cons2_var)) + deg)
                         + acc")
                    (("1" (replace -2 1)
                      (("1"
                        (inst -1 "deg" "cons1_var *
                          x!1 ^ (1 - length(cons(cons1_var, cons2_var)) + deg)")
                        (("1" (replace -1 1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "deg")
                  (("2" (expand "length" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (deg skolem-const-decl
     "upfrom(length(cons(cons1_var, cons2_var)) - 1)" eval_poly nil)
    (cons2_var skolem-const-decl "list[real]" eval_poly nil)
    (cons1_var skolem-const-decl "real" eval_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_eval def-decl "real" eval_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (eval_poly_times_x_TCC1 0
  (eval_poly_times_x_TCC1-1 nil 3777803675 ("" (subtype-tcc) nil nil)
   nil nil
   (eval_poly_times_x subtype "(number_fields.-)(eval_poly.deg, 1)"
    "integers.upfrom((number_fields.-)(list_props[real].length(eval_poly.f), 1))")))
 (eval_poly_times_x_TCC2 0
  (eval_poly_times_x_TCC2-1 nil 3777803675 ("" (subtype-tcc) nil nil)
   nil nil
   (eval_poly_times_x subtype "eval_poly.deg"
    "integers.upfrom((number_fields.-)(list_props[real].length(eval_poly.f), 1))")))
 (eval_poly_times_x 0
  (eval_poly_times_x-1 nil 3777804009
   ("" (induct "f")
    (("1" (grind) nil nil)
     ("2" (ground)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (assert)
            (("2" (expand "init_eval" +)
              (("2"
                (inst -1 "deg" "x"
                 "cons1_var * x ^ (deg - length(cons(cons1_var, cons2_var)))
                     + acc")
                (("1" (replace -1 1)
                  (("1" (lemma "expt_plus")
                    (("1"
                      (inst -1
                       "(deg - length(cons(cons1_var, cons2_var)))" "1"
                       "x")
                      (("1" (assert)
                        (("1" (expand "^" -1 3)
                          (("1" (expand "expt" -1)
                            (("1" (expand "expt" -1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (replaces -1)
                            (("2" (assert)
                              (("2"
                                (expand "^" 1)
                                (("2"
                                  (expand "expt" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "deg")
                    (("2" (expand "length" -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x skolem-const-decl "real" eval_poly nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt def-decl "real" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (expt_plus formula-decl nil exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (deg skolem-const-decl "upfrom(length(cons(cons1_var, cons2_var)))"
     eval_poly nil)
    (cons2_var skolem-const-decl "list[real]" eval_poly nil)
    (cons1_var skolem-const-decl "real" eval_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_eval def-decl "real" eval_poly nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (eval_cons 0
  (eval_cons-1 nil 3777993935
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "eval" 1 2)
          (("2" (expand "init_eval" 1 1)
            (("2" (expand "length" 1 1)
              (("2" (expand "eval" 1 1)
                (("2" (case "NOT 0*x^0 = 0")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (replace -1 1)
                      (("2" (lemma "eval_poly_times_x")
                        (("2"
                          (inst -1 "cons(cons1_var,cons2_var)"
                           "length(cons(cons1_var,cons2_var))" "x" "0")
                          (("2" (replace -1 1)
                            (("2" (case "NOT 0*x =0")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_poly_times_x formula-decl nil eval_poly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (init_eval def-decl "real" eval_poly nil)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (eval_car 0
  (eval_car-1 nil 3778317310
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (expand "eval" 1 1)
              (("1" (expand "init_eval" 1 1)
                (("1" (expand "length" 1 1)
                  (("1" (expand "length" 1 1)
                    (("1" (expand "init_eval" 1 1)
                      (("1" (assert)
                        (("1" (lemma "expt_x0_aux")
                          (("1" (inst -1 "0")
                            (("1" (expand "^" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "eval" 2 1)
              (("2" (expand "init_eval" 2 1)
                (("2" (expand "eval" -1)
                  (("2" (expand "length" 2 1)
                    (("2" (lemma "init_eval_acc")
                      (("2"
                        (inst -1 "cons2_var" "length(cons2_var)"
                         " cons1_var * 0 ^ (0)")
                        (("2" (decompose-equality -1)
                          (("2" (inst -1 "0")
                            (("2" (replace -1 2)
                              (("2"
                                (lemma "expt_x0_aux")
                                (("2"
                                  (inst -1 "0")
                                  (("2"
                                    (expand "^" 2)
                                    (("2"
                                      (replace -1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "eval_poly_times_x")
                                          (("2"
                                            (inst
                                             -1
                                             "cons2_var"
                                             "length(cons2_var)"
                                             "0"
                                             "0")
                                            (("2"
                                              (case "NOT 0*0=0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1 -2)
                                                (("2"
                                                  (replace -2 2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length def-decl "nat" list_props nil)
    (expt_x0_aux formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (init_eval def-decl "real" eval_poly nil)
    (init_eval_acc formula-decl nil eval_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_poly_times_x formula-decl nil eval_poly nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (init_poly_Poly_TCC1 0
  (init_poly_Poly_TCC1-1 nil 3777807232 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (init_poly_Poly subtype
    "real_defs.max((number_fields.-)(list_props[real].length(eval_poly.f), 1), 0)"
    "nat")))
 (init_poly_Poly 0
  (init_poly_Poly-1 nil 3777807597
   (""
    (case "FORALL (f: Polynomial, x,acc: real):
                                                                init_eval(f, length(f) - 1, acc)(x) = acc+
                                                                 polynomial(list2array(0)(f), max(0,length(f)-1))(x)")
    (("1" (skeep)
      (("1" (decompose-equality 1)
        (("1" (inst -1 "f" "x!1" "0")
          (("1" (assert)
            (("1" (case "NOT max(0,length(f)-1) = max(length(f)-1,0)")
              (("1" (expand "max" 1)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (assert)
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "f")
        (("1" (grind) nil nil)
         ("2" (ground)
          (("2" (skeep)
            (("2" (skeep)
              (("2" (assert)
                (("2" (expand "length" +)
                  (("2" (assert)
                    (("2" (expand "init_eval" +)
                      (("2" (case "cons2_var=null")
                        (("1" (expand "length" +)
                          (("1" (assert)
                            (("1" (expand "length" +)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "list2array" +)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "list2array" +)
                                      (("1"
                                        (hide -)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "length" + 3)
                          (("2" (assert)
                            (("2" (inst - "x" "cons1_var*x^0+acc")
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "polynomial_eq_a0_plus")
                                      (("2"
                                        (inst
                                         -
                                         "list2array(0)(cons(cons1_var, cons2_var))"
                                         "length(cons2_var)"
                                         "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (replaces -1 +)
                                              (("1"
                                                (expand
                                                 "list2array"
                                                 2
                                                 1)
                                                (("1"
                                                  (expand
                                                   "list2array"
                                                   -1
                                                   1)
                                                  (("1"
                                                    (case
                                                     "NOT max(0,length(cons2_var))=length(cons2_var)")
                                                    (("1"
                                                      (expand "max" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1 2)
                                                      (("2"
                                                        (replace -2 2)
                                                        (("2"
                                                          (case
                                                           "NOT (LAMBDA (i: nat):
                                                                                                                                  list2array(0)(cons(cons1_var, cons2_var))(1 + i)) = list2array(0)(cons2_var)")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "list2array"
                                                               1
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "init_eval_acc"
                                                                 +)
                                                                (("2"
                                                                  (rewrite
                                                                   "init_eval_acc"
                                                                   +)
                                                                  (("2"
                                                                    (lemma
                                                                     "eval_poly_times_x")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "cons2_var"
                                                                         "length[real](cons2_var)"
                                                                         "x"
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "list2array"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "init_eval_acc"
                                                                                     -)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "init_eval_acc"
                                                                                       -)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT max(0,length(cons2_var)-1)=length(cons2_var)-1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if
                                                                                               1)
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1
                                                                                             -5)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "init_eval_acc"
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (expand "max" 1 1)
              (("3" (lift-if 1)
                (("3" (split 1)
                  (("1" (assert)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (expand "max")
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial_eq_a0_plus formula-decl nil polynomials reals)
    (TRUE const-decl "bool" booleans nil)
    (init_eval_acc formula-decl nil eval_poly nil)
    (eval_poly_times_x formula-decl nil eval_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (list_induction formula-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f skolem-const-decl "Polynomial" eval_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (init_eval def-decl "real" eval_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (list2array def-decl "T" array2list structures)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil))
 (root_lin 0
  (root_lin-1 nil 3779027258
   ("" (skeep) (("" (ground) (("" (grind) nil nil)) nil)) nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (root? const-decl "bool" eval_poly nil)
    (init_eval def-decl "real" eval_poly nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (pos_ball 0
  (pos_ball-2 nil 3779186289
   ("" (skeep)
    (("" (lemma "init_poly_Poly")
      (("" (inst -1 "f")
        (("" (expand "eval" -2 1)
          (("" (lemma "poly_continuous")
            ((""
              (inst -1 "list2array[real](0)(f)" "max(length(f) - 1, 0)"
               "t" "init_eval(f,length(f)-1,0)(t)/2")
              (("1" (skeep)
                (("1" (inst 1 "delta")
                  (("1" (skeep)
                    (("1" (typepred "eps")
                      (("1" (inst -2 "t+eps")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (lemma " abs_mult")
                              (("1"
                                (inst -1 "-1" "eps")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "abs" -1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "NOT --1=1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -1 -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT 1*abs(eps)=abs(eps)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1 -3)
                                                (("2"
                                                  (expand "eval" 1)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "eps+t")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_poly_Poly formula-decl nil eval_poly nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (f skolem-const-decl "Polynomial" eval_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (t skolem-const-decl "real" eval_poly nil)
    (init_eval def-decl "real" eval_poly nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (list2array def-decl "T" array2list structures)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (poly_continuous formula-decl nil polynomials reals)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil)
  (pos_ball-1 nil 3779186209
   ("" (skeep)
    (("" (lemma "init_poly_Poly")
      (("" (inst -1 "f")
        (("" (expand "eval" -2 1)
          (("" (lemma "poly_continuous")
            ((""
              (inst -1 "list2array[real](0)(f)" "max(length(f) - 1, 0)"
               "t" "init_eval(f,length(f)-1,0)(t)/2")
              (("1" (skeep)
                (("1" (inst 1 "delta")
                  (("1" (skeep)
                    (("1" (typepred "eps")
                      (("1" (inst -2 "t+eps")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (lemma " abs_mult")
                              (("1"
                                (inst -1 "-1" "eps")
                                (("1"
                                  (Assert)
                                  (("1"
                                    (Expand "abs" -1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "NOT --1=1")
                                        (("1" (assert) nil)
                                         ("2"
                                          (replace -1 -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT 1*abs(eps)=abs(eps)")
                                              (("1" (assert) nil)
                                               ("2"
                                                (replace -1 -3)
                                                (("2"
                                                  (expand "eval" 1)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "eps+t")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))))))))))))
               ("2" (assert) nil) ("3" (assert) nil))))))))))))
    nil)
   nil nil))
 (neg_ball 0
  (neg_ball-1 nil 3779186382
   ("" (skeep)
    (("" (lemma "init_poly_Poly")
      (("" (inst -1 "f")
        (("" (expand "eval" -2 1)
          (("" (lemma "poly_continuous")
            ((""
              (inst -1 "list2array[real](0)(f)" "max(length(f) - 1, 0)"
               "t" "-init_eval(f,length(f)-1,0)(t)/2")
              (("1" (skeep)
                (("1" (inst 1 "delta")
                  (("1" (skeep)
                    (("1" (typepred "eps")
                      (("1" (inst -2 "t+eps")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (lemma " abs_mult")
                              (("1"
                                (inst -1 "-1" "eps")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "abs" -1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "NOT --1=1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -1 -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT 1*abs(eps)=abs(eps)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1 -3)
                                                (("2"
                                                  (expand "eval" 1)
                                                  (("2"
                                                    (decompose-equality
                                                     -6)
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "eps+t")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_poly_Poly formula-decl nil eval_poly nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (f skolem-const-decl "Polynomial" eval_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (t skolem-const-decl "real" eval_poly nil)
    (init_eval def-decl "real" eval_poly nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (sequence type-eq-decl nil sequences nil)
    (list2array def-decl "T" array2list structures)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (poly_continuous formula-decl nil polynomials reals)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (ivt 0
  (ivt-1 nil 3780486112
   ("" (skeep)
    ((""
      (name "lub"
            "lub({rr: real | (t1 <= rr AND rr <= t2) AND eval(f)(rr) < 0})")
      (("1" (case "eval(f)(lub)>0")
        (("1" (lemma "pos_ball")
          (("1" (inst -1 "f" "lub")
            (("1" (assert)
              (("1" (skeep)
                (("1"
                  (typepred
                   " lub({rr: real | (t1 <= rr AND rr <= t2) AND eval(f)(rr) < 0})")
                  (("1" (expand "least_upper_bound?")
                    (("1" (flatten)
                      (("1" (inst-cp -3 "-Eps/2")
                        (("1" (inst -2 "-Eps/2+lub")
                          (("1" (split -2)
                            (("1" (replace -6 -1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "upper_bound?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred "s")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -5 "s-lub")
                                      (("1" (assert) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide -) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case "eval(f)(lub)<0")
            (("1" (lemma "neg_ball")
              (("1" (inst -1 "f" "lub")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -1 "Eps/2")
                      (("1"
                        (typepred
                         " lub({rr: real | (t1 <= rr AND rr <= t2) AND eval(f)(rr) < 0})")
                        (("1" (expand "least_upper_bound?" -1)
                          (("1" (flatten)
                            (("1" (expand "upper_bound?" -1)
                              (("1"
                                (inst -1 "Eps/2+lub")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (split 1)
                                  (("1"
                                    (typepred
                                     "lub({rr: real | (t1 <= rr AND rr <= t2) AND eval(f)(rr) < 0})")
                                    (("1"
                                      (expand "least_upper_bound?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "upper_bound?" -1)
                                          (("1"
                                            (inst -1 "t1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "t2")
                                      (("2"
                                        (expand "upper_bound?" -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (inst -1 "t2-lub")
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst 3 "lub")
              (("1" (expand "root?" 3) (("1" (assert) nil nil)) nil)
               ("2" (assert)
                (("2" (split 1)
                  (("1" (typepred "lub")
                    (("1" (expand "least_upper_bound?" -1)
                      (("1" (flatten)
                        (("1" (expand "upper_bound?" -1)
                          (("1" (inst -1 "t1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "lub")
                      (("2" (expand "least_upper_bound?" -1)
                        (("2" (flatten)
                          (("2" (inst -2 "t2")
                            (("2" (assert)
                              (("2"
                                (expand "upper_bound?" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (split 1)
        (("1" (lemma "neg_ball")
          (("1" (inst -1 "f" "t1")
            (("1" (assert)
              (("1" (skeep)
                (("1" (inst -1 "Eps/2")
                  (("1" (expand "nonempty?" 1 1)
                    (("1" (assert)
                      (("1" (expand "empty?" -2)
                        (("1" (inst -2 "Eps/2+t1")
                          (("1" (assert)
                            (("1" (expand "member" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (reveal -)
                                  (("1"
                                    (inst -2 "t2-t1")
                                    (("1" (assert) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "bounded_above?" 1)
          (("2" (inst 1 "t2")
            (("2" (expand "upper_bound?" 1 1) (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval const-decl "[real -> real]" eval_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (neg_ball formula-decl nil eval_poly nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Eps skolem-const-decl "posreal" eval_poly nil)
    (pos_ball formula-decl nil eval_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t1 skolem-const-decl "real" eval_poly nil)
    (t2 skolem-const-decl "real" eval_poly nil)
    (f skolem-const-decl "Polynomial" eval_poly nil)
    (s skolem-const-decl
     "({rr: real | (t1 <= rr AND rr <= t2) AND eval(f)(rr) < 0})"
     eval_poly nil)
    (lub skolem-const-decl "{x |
   least_upper_bound?(x,
                      {rr: real |
                         (t1 <= rr AND rr <= t2) AND eval(f)(rr) < 0})}"
     eval_poly nil)
    (init_eval def-decl "real" eval_poly nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (root? const-decl "bool" eval_poly nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Eps skolem-const-decl "posreal" eval_poly nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (> const-decl "bool" reals nil)
    (Eps skolem-const-decl "posreal" eval_poly nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   shostak)))

