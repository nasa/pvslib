(arithmetic_MultPoly
 (add_TCC1 0
  (add_TCC1-1 nil 3810907540 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (add subtype "arithmetic_MultPoly.p" "(list_adt[monomial].cons?)")))
 (add_TCC2 0
  (add_TCC2-1 nil 3810907540 ("" (termination-tcc) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (add termination
    "arithmetic_MultPoly.add(arithmetic_MultPoly.r, list_adt[monomial].cdr(arithmetic_MultPoly.p))"
    "nil")))
 (add_mp_length 0
  (add_mp_length-1 nil 3882531947
   ("" (induct "p")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "r")
          (("2" (assert)
            (("2" (expand "add" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (expand "length" 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "length" 2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (add def-decl "MultPoly" arithmetic_MultPoly nil)
    (length def-decl "nat" list_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (add_mp_max_length 0
  (add_mp_max_length-1 nil 3882532113
   ("" (induct "p")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "r")
          (("2" (expand "add" 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (expand "max_length" 1 1)
                    (("1" (expand "length" 1 1)
                      (("1" (expand "max" 1 1)
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "max_length" 1 1)
                        (("1" (expand "max_length" 1 2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "max_length" 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (add def-decl "MultPoly" arithmetic_MultPoly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (mult_TCC1 0
  (mult_TCC1-1 nil 3810907540 ("" (subtype-tcc) nil nil) nil nil
   (mult subtype "arithmetic_MultPoly.p"
    "(list_adt[monomial].cons?)")))
 (mult_TCC2 0
  (mult_TCC2-1 nil 3810907540 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (mult termination
    "arithmetic_MultPoly.mult(arithmetic_MultPoly.r, list_adt[monomial].cdr(arithmetic_MultPoly.p))"
    "nil")))
 (mv_standard_sans_cut?_TCC1 0
  (mv_standard_sans_cut?_TCC1-1 nil 3810982709
   ("" (subtype-tcc) nil nil)
   ((Unif? const-decl "bool" standard_form_mult_poly nil)) nil
   (mv_standard_sans_cut? subtype "arithmetic_MultPoly.p"
    "(list_adt[monomial].cons?)")))
 (mv_standard_sans_cut?_TCC2 0
  (mv_standard_sans_cut?_TCC2-1 nil 3810982709
   ("" (skeep) (("" (rewrite "leq_total_preorder") nil nil)) nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil))
   nil
   (mv_standard_sans_cut? subtype "standard_form_mult_poly.leq"
    "(total_preorder[monomial].total_preorder?)")))
 (mv_standard_sans_cdr 0
  (mv_standard_sans_cdr-1 nil 3810990212
   ("" (skeep)
    (("" (expand "mv_standard_sans_cut?")
      (("" (split -2)
        (("1" (assert) nil nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (expand "Unif?")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (inst-cp -1 "0" "i+1")
                    (("1" (inst -1 "i+1" "j+1")
                      (("1" (expand "nth" -) (("1" (propax) nil nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "j")
                          (("2" (expand "length" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil)
                     ("3" (expand "length" 1) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Unif?" -1)
              (("2" (assert)
                (("2" (inst -1 "0" "1")
                  (("1" (expand "nth" -)
                    (("1" (expand "nth" -) (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "length" 1)
                      (("2" (assert)
                        (("2" (expand " length" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "length" 1) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (rewrite "allnonzero_cdr") nil nil)
             ("4" (assert)
              (("4" (rewrite "cdr_of_sorted_is_sorted") nil nil)) nil)
             ("5" (rewrite "simplify_cdr") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (simplify_cdr formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (allnonzero_cdr formula-decl nil standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (j skolem-const-decl "below(length(cdr(p)))" arithmetic_MultPoly
     nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(cdr(p)))" arithmetic_MultPoly
       nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (p skolem-const-decl "MultPoly" arithmetic_MultPoly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (lft_standard_is_sans 0
  (lft_standard_is_sans-1 nil 3810990902
   ("" (skeep :preds? T)
    (("" (expand "mv_standard_form?")
      (("" (expand "mv_standard_sans_cut?")
        (("" (split -1)
          (("1" (assert)
            (("1" (expand "lft" 1 1)
              (("1" (assert)
                (("1" (expand "length" 1 1) (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (expand "Unif?")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (lemma "lft_length_nth")
                            (("1" (inst -1 "p" "n" "_")
                              (("1"
                                (inst-cp -1 "i")
                                (("1"
                                  (inst-cp -1 "j")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "Lft_length")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "Lft_length")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "lft_length_nth")
                      (("2" (inst -1 "p" "n" "0")
                        (("1" (expand "nth " -1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "length" 1)
                          (("2" (assert) nil nil)) nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (lemma "allnonzero_lft")
                      (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
                     ("4" (lemma "lft_sorted")
                      (("4" (lemma "minlength_unif")
                        (("4" (inst?)
                          (("4" (assert) (("4" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("5" (lemma "lft_simplify")
                      (("5" (lemma "minlength_unif")
                        (("5" (inst?)
                          (("5" (assert) (("5" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (lft def-decl "MultPoly" standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lft_simplify formula-decl nil standard_form_mult_poly nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (lft_sorted formula-decl nil standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minlength_unif formula-decl nil standard_form_mult_poly nil)
    (allnonzero_lft formula-decl nil standard_form_mult_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (j skolem-const-decl "below(length(lft(p)(n)))" arithmetic_MultPoly
     nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (Lft_length formula-decl nil standard_form_mult_poly nil)
    (< const-decl "bool" reals nil)
    (p skolem-const-decl "(mv_standard_form?)" arithmetic_MultPoly nil)
    (n skolem-const-decl "{n: nat | n >= max_length(p)}"
     arithmetic_MultPoly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(lft(p)(n)))" arithmetic_MultPoly
       nil)
    (lft_length_nth formula-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   shostak))
 (sorted_sans_add_TCC1 0
  (sorted_sans_add_TCC1-1 nil 3810982709 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (sorted_sans_add subtype "arithmetic_MultPoly.p"
    "(list_adt[monomial].cons?)")))
 (sorted_sans_add_TCC2 0
  (sorted_sans_add_TCC2-1 nil 3810982709 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (sorted_sans_add subtype "arithmetic_MultPoly.q"
    "(list_adt[monomial].cons?)")))
 (sorted_sans_add_TCC3 0
  (sorted_sans_add_TCC4-1 nil 3810982709
   ("" (skeep) (("" (rewrite "mv_standard_sans_cdr") nil nil)) nil)
   ((mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].cdr(arithmetic_MultPoly.p)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_sans_add_TCC4 0
  (sorted_sans_add_TCC5-1 nil 3810982709
   ("" (skeep) (("" (rewrite "mv_standard_sans_cdr") nil nil)) nil)
   ((mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].cdr(arithmetic_MultPoly.q)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_sans_add_TCC5 0
  (sorted_sans_add_TCC6-1 nil 3810982709
   ("" (skeep)
    (("" (expand "length" 3 3)
      (("" (assert)
        (("" (expand "length" 3 4) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sorted_sans_add termination
    "arithmetic_MultPoly.sorted_sans_add(arithmetic_MultPoly.n, list_adt[monomial].cdr(arithmetic_MultPoly.p), list_adt[monomial].cdr(arithmetic_MultPoly.q))"
    "nil")))
 (sorted_sans_add_TCC6 0
  (sorted_sans_add_TCC3-1 nil 3810982709
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].car(arithmetic_MultPoly.q)"
    "{mm: standard_form_mult_poly.monomial | mm`alpha = list_adt[monomial].car(arithmetic_MultPoly.p)`alpha}")))
 (sorted_sans_add_TCC7 0
  (sorted_sans_add_TCC8-1 nil 3810982709
   ("" (skeep) (("" (rewrite "mv_standard_sans_cdr") nil nil)) nil)
   ((mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].cdr(arithmetic_MultPoly.p)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_sans_add_TCC8 0
  (sorted_sans_add_TCC10-1 nil 3810982709
   ("" (skeep) (("" (rewrite "mv_standard_sans_cdr") nil nil)) nil)
   ((mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].cdr(arithmetic_MultPoly.q)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_sans_add_TCC9 0
  (sorted_sans_add_TCC9-1 nil 3814265272
   ("" (skeep)
    (("" (expand "length" 4 3)
      (("" (assert)
        (("" (expand "length" 4 4) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sorted_sans_add termination
    "arithmetic_MultPoly.sorted_sans_add(arithmetic_MultPoly.n, list_adt[monomial].cdr(arithmetic_MultPoly.p), list_adt[monomial].cdr(arithmetic_MultPoly.q))"
    "nil")))
 (sorted_sans_add_TCC10 0
  (sorted_sans_add_TCC10-1 nil 3814265272
   ("" (skeep)
    (("" (lemma "mv_standard_sans_cdr")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].cdr(arithmetic_MultPoly.p)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_sans_add_TCC11 0
  (sorted_sans_add_TCC9-1 nil 3810982709
   ("" (skeep)
    (("" (assert)
      (("" (expand "length" 4 3) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (sorted_sans_add termination
    "arithmetic_MultPoly.sorted_sans_add(arithmetic_MultPoly.n, list_adt[monomial].cdr(arithmetic_MultPoly.p), arithmetic_MultPoly.q)"
    "nil")))
 (sorted_sans_add_TCC12 0
  (sorted_sans_add_TCC12-1 nil 3814265272
   ("" (skeep)
    (("" (lemma "mv_standard_sans_cdr")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (sorted_sans_add subtype
    "list_adt[monomial].cdr(arithmetic_MultPoly.q)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_sans_add_TCC13 0
  (sorted_sans_add_TCC11-1 nil 3810982709
   ("" (skeep) (("" (expand "length" 5 4) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sorted_sans_add termination
    "arithmetic_MultPoly.sorted_sans_add(arithmetic_MultPoly.n, arithmetic_MultPoly.p, list_adt[monomial].cdr(arithmetic_MultPoly.q))"
    "nil")))
 (sorted_add_TCC1 0
  (sorted_add_TCC1-1 nil 3810907540 ("" (subtype-tcc) nil nil) nil nil
   (sorted_add subtype "arithmetic_MultPoly.n"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(arithmetic_MultPoly.p))}")))
 (sorted_add_TCC2 0
  (sorted_add_TCC2-1 nil 3810907540
   ("" (skeep) (("" (rewrite "lft_standard_is_sans") nil nil)) nil)
   ((lft_standard_is_sans formula-decl nil arithmetic_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   nil
   (sorted_add subtype
    "standard_form_mult_poly.lft(arithmetic_MultPoly.p)(arithmetic_MultPoly.n)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sorted_add_TCC3 0
  (sorted_add_TCC3-1 nil 3810907540 ("" (subtype-tcc) nil nil) nil nil
   (sorted_add subtype "arithmetic_MultPoly.n"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(arithmetic_MultPoly.q))}")))
 (sorted_add_TCC4 0
  (sorted_add_TCC4-1 nil 3810907540
   ("" (skeep) (("" (rewrite "lft_standard_is_sans") nil nil)) nil)
   ((lft_standard_is_sans formula-decl nil arithmetic_MultPoly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   nil
   (sorted_add subtype
    "standard_form_mult_poly.lft(arithmetic_MultPoly.q)(arithmetic_MultPoly.n)"
    "(arithmetic_MultPoly.mv_standard_sans_cut?(arithmetic_MultPoly.n))")))
 (sort_add_TCC1 0
  (sort_add_TCC1-1 nil 3810907540
   ("" (skeep) (("" (rewrite "standard_form_is_standard") nil nil))
    nil)
   ((standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   nil
   (sort_add subtype
    "standard_form_mult_poly.mv_standard_form(arithmetic_MultPoly.p2)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (sort_add_TCC2 0
  (sort_add_TCC2-1 nil 3810907540
   ("" (skeep) (("" (rewrite "standard_form_is_standard") nil nil))
    nil)
   ((standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   nil
   (sort_add subtype
    "standard_form_mult_poly.mv_standard_form(arithmetic_MultPoly.p1)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (sort_add_TCC3 0
  (sort_add_TCC3-1 nil 3810907540
   ("" (skeep) (("" (rewrite "standard_form_is_standard") nil nil))
    nil)
   ((standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   nil
   (sort_add subtype
    "standard_form_mult_poly.mv_standard_form(arithmetic_MultPoly.p1)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (sort_add_TCC4 0
  (sort_add_TCC4-1 nil 3810907540
   ("" (skeep) (("" (rewrite "standard_form_is_standard") nil nil))
    nil)
   ((standard_form_is_standard formula-decl nil standard_form_mult_poly
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   nil
   (sort_add subtype
    "standard_form_mult_poly.mv_standard_form(arithmetic_MultPoly.p2)"
    "(standard_form_mult_poly.mv_standard_form?)")))
 (min_add_TCC1 0
  (min_add_TCC1-1 nil 3810907540 ("" (subtype-tcc) nil nil) nil nil
   (min_add subtype
    "standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(arithmetic_MultPoly.P))"
    "{nn: naturalnumbers.nat | reals.>=(nn, standard_form_mult_poly.max_length(standard_form_mult_poly.mv_cut(arithmetic_MultPoly.P)))}")))
 (sorted_sans_add_nz 0
  (sorted_sans_add_nz-1 nil 3814370435
   (""
    (case "FORALL (A,n: nat, p: (mv_standard_sans_cut?(n)),
                     q: (mv_standard_sans_cut?(n))):
               length(p)+ length(q) <= A IMPLIES allnonzero?(sorted_sans_add(n, p, q))")
    (("1" (skeep)
      (("1" (inst -1 "length(p)+length(q)" "n" "p" "q")
        (("1" (case "null?(p) AND null?(q)")
          (("1" (expand "sorted_sans_add" 1)
            (("1" (assert)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "allnonzero?" 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "A")
        (("1" (skeep)
          (("1" (case "null?(p) AND null?(q)")
            (("1" (expand "sorted_sans_add" 1)
              (("1" (assert)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "allnonzero?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "sorted_sans_add" 1 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (typepred "q")
                    (("1" (expand "mv_standard_sans_cut?" -1)
                      (("1" (assert)
                        (("1" (expand "allnonzero?" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (typepred "p")
                          (("1" (expand "mv_standard_sans_cut?" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -3 "n" "cdr(p)" "cdr(q)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "allnonzero?" 2 1)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=0")
                                        (("1"
                                          (expand "nth" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "add_mono" -2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" -1)
                                          (("2"
                                            (inst
                                             -3
                                             "n"
                                             "cdr(p)"
                                             "cdr(q)")
                                            (("1"
                                              (expand "length" -4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "allnonzero?"
                                                     -3)
                                                    (("1"
                                                      (split -3)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "i-1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "mv_standard_sans_cdr")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma
                                               "mv_standard_sans_cdr")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "allnonzero?" 1 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=0")
                                        (("1"
                                          (typepred "p")
                                          (("1"
                                            (expand "nth" -3 1)
                                            (("1"
                                              (expand
                                               "mv_standard_sans_cut?"
                                               -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "allnonzero?"
                                                     -3)
                                                    (("1"
                                                      (split -3)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst 1 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -3
                                               "n"
                                               "cdr(p)"
                                               "q")
                                              (("2"
                                                (expand "length" -4 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "allnonzero?"
                                                     -3)
                                                    (("2"
                                                      (split -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "i")
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "i-1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "allnonzero?" 2)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=0")
                                        (("1"
                                          (typepred "q")
                                          (("1"
                                            (expand
                                             "mv_standard_sans_cut?"
                                             -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "allnonzero?"
                                                   -3)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (inst 1 "0")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -6)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -6)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             1
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -2 "n" "p" "cdr(q)")
                                          (("2"
                                            (expand "length" -3 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "allnonzero?"
                                                   -2)
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "i-1")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (mv_standard_sans_cdr formula-decl nil arithmetic_MultPoly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (q skolem-const-decl "(mv_standard_sans_cut?(n))"
     arithmetic_MultPoly nil)
    (p skolem-const-decl "(mv_standard_sans_cut?(n))"
     arithmetic_MultPoly nil)
    (n skolem-const-decl "nat" arithmetic_MultPoly nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (add_mono const-decl "monomial" standard_form_mult_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (i skolem-const-decl
       "below(length(cons(car(q), sorted_sans_add(n, p, cdr(q)))))"
       arithmetic_MultPoly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_sans_cut? const-decl "bool" arithmetic_MultPoly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (sorted_sans_add def-decl "MultPoly" arithmetic_MultPoly nil))
   shostak))
 (mp_mono_mult_max 0
  (mp_mono_mult_max-1 nil 3861967799
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "mp_mono_mult") (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "mp_mono_mult" 1)
          (("2" (assert)
            (("2" (lift-if 1)
              (("2" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "max_length" 2)
                    (("2" (expand "mult_mono" 2 1)
                      (("2" (lemma "add_list_length[nat]")
                        (("2" (inst? -1)
                          (("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (inst -2 "m")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_mono const-decl "monomial" arithmetic_MultPoly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add_lists def-decl "list[nat]" list_lemmas nil)
    (add_list_length formula-decl nil list_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp_mono_mult def-decl "MultPoly" arithmetic_MultPoly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (<= const-decl "bool" reals nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil))
   shostak))
 (mp_mult_TCC1 0
  (mp_mult_TCC1-1 nil 3810907540 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (mp_mult termination
    "arithmetic_MultPoly.mp_mult(list_adt[monomial].cdr(arithmetic_MultPoly.p), arithmetic_MultPoly.q)"
    "nil")))
 (mp_power_TCC1 0
  (mp_power_TCC1-1 nil 3810907540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil))
   nil
   (mp_power subtype "(number_fields.-)(arithmetic_MultPoly.k, 1)"
    "nat")))
 (mp_power_TCC2 0
  (mp_power_TCC2-1 nil 3810907540
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (mp_power termination
    "arithmetic_MultPoly.mp_power(arithmetic_MultPoly.p, (number_fields.-)(arithmetic_MultPoly.k, 1))"
    "nil")))
 (mp_power_TCC3 0
  (mp_power_TCC3-1 nil 3810907540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minlength? const-decl "bool" standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (leq def-decl "bool" standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (mp_power subtype "(number_fields.-)(arithmetic_MultPoly.k, 1)"
    "nat")))
 (mp_power_TCC4 0
  (mp_power_TCC4-1 nil 3810907540
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mp_power termination
    "arithmetic_MultPoly.mp_power(arithmetic_MultPoly.P, (number_fields.-)(arithmetic_MultPoly.k, 1))"
    "nil"))))

