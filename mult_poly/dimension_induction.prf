(|dimension_induction|
 (|mv_UNS?_TCC1| 0
  (|mv_UNS?_TCC1-1| |nil| 3812708192 ("" (SUBTYPE-TCC) NIL NIL)
   ((|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)) NIL
   (|mv_UNS?| SUBTYPE "dimension_induction.p" "(list_adt[monomial].cons?)")))
 (|single_UNS| 0
  (|single_UNS-1| |nil| 3813407296
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_UNS?")
      (("" (EXPAND "mon_UNS?")
        (("" (FLATTEN)
          (("" (SPLIT 2)
            (("1" (EXPAND "Unif?")
              (("1" (SKEEP :PREDS? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (PROPAX) NIL NIL)
             ("3" (EXPAND "allnonzero?")
              (("3" (SPLIT 1)
                (("1" (SKEEP :PREDS? T)
                  (("1" (ASSERT)
                    (("1" (CASE "not i=0")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("4" (EXPAND "simplified?") (("4" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL))
   SHOSTAK))
 (|car_mon_UNS| 0
  (|car_mon_UNS-1| |nil| 3813407440
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mon_UNS?")
      (("" (EXPAND "mv_UNS?")
        (("" (ASSERT)
          (("" (FLATTEN)
            (("" (ASSERT)
              (("" (EXPAND "allnonzero?")
                (("" (SPLIT -4)
                  (("1" (PROPAX) NIL NIL)
                   ("2" (INST 1 "0")
                    (("1" (ASSERT)
                      (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                     ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL) NIL NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL))
   SHOSTAK))
 (|max_length_UNS| 0
  (|max_length_UNS-1| |nil| 3812721322
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_UNS?")
      (("" (ASSERT)
        (("" (FLATTEN)
          (("" (EXPAND "Unif?")
            (("" (LEMMA "max_length_is_nth")
              (("" (INST?)
                (("" (SKEEP)
                  (("" (INST -3 "0" "j")
                    (("" (EXPAND "nth" -3 1) (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL) NIL (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|max_length_UNSge| 0
  (|max_length_UNSge-1| |nil| 3812721405
   ("" (SKEEP)
    (("" (LEMMA "max_length_UNS")
      (("" (INST?)
        (("" (ASSERT) (("" (EXPAND "max_length") (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|standard_is_UNS| 0
  (|standard_is_UNS-1| |nil| 3812963367
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_standard_form?")
      (("" (EXPAND "mv_UNS?")
        (("" (SPLIT -1)
          (("1" (ASSERT) NIL NIL)
           ("2" (FLATTEN)
            (("2" (ASSERT)
              (("2" (SPLIT -1)
                (("1" (FLATTEN)
                  (("1" (ASSERT)
                    (("1" (LEMMA "minlength_unif")
                      (("1" (INST?)
                        (("1" (ASSERT)
                          (("1" (EXPAND "Unif?")
                            (("1" (LEMMA " max_length_is_nth")
                              (("1" (INST?)
                                (("1" (SKEEP)
                                  (("1" (INST -2 "0" "j")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" -2 1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|minlength_unif| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|max_length_is_nth| FORMULA-DECL NIL |standard_form_mult_poly| NIL) NIL
    (|nth| DEF-DECL "T" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL))
   SHOSTAK))
 (|cdr_is_UNS| 0
  (|cdr_is_UNS-1| |nil| 3812963775
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_UNS?")
      (("" (ASSERT)
        (("" (CASE "null?(cdr(p))")
          (("1" (ASSERT) NIL NIL)
           ("2" (ASSERT)
            (("2" (FLATTEN)
              (("2" (EXPAND "Unif?")
                (("2" (INST-CP -2 "0" "1")
                  (("1" (ASSERT)
                    (("1" (EXPAND "nth" -3)
                      (("1" (ASSERT)
                        (("1" (EXPAND "nth" -3)
                          (("1" (ASSERT)
                            (("1" (SPLIT 2)
                              (("1" (SKEEP)
                                (("1" (INST -2 "i+1" "j+1")
                                  (("1" (EXPAND "nth" -2)
                                    (("1" (PROPAX) NIL NIL)) NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "length" 1)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (EXPAND "length" 1)
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (LEMMA "allnonzero_cdr")
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("3" (LEMMA "simplify_cdr")
                                (("3" (INST?) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "length" 1)
                    (("2" (ASSERT)
                      (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (ASSERT)
                    (("3" (EXPAND "length" 1) (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL NIL
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|allnonzero_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|simplify_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL) NIL
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|pos_uns_every| 0
  (|pos_uns_every-1| |nil| 3812965185
   (""
    (CASE "FORALL (m: nat, n: posnat, p: (mv_UNS?(n))):
        m = length(p) IMPLIES every(LAMBDA (m: monomial): cons?(m`alpha))(p)")
    (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(p)") NIL NIL)) NIL))
      NIL)
     ("2" (ASSERT)
      (("2" (HIDE 2)
        (("2" (INDUCT "m")
          (("1" (SKEEP)
            (("1" (EXPAND "length")
              (("1" (LIFT-IF -1)
                (("1" (SPLIT -1)
                  (("1" (ASSERT)
                    (("1" (EXPAND "every" 1) (("1" (PROPAX) NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP :PREDS? T)
              (("2" (INST -3 "n" "cdr(p)")
                (("1" (EXPAND "length" -4)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF -4)
                      (("1" (SPLIT -4)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "every" 2)
                              (("2" (ASSERT)
                                (("2" (EXPAND "mv_UNS?" -3)
                                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "cdr_is_UNS")
                  (("2" (ASSERT)
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "length" -3) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT)
                  (("3" (EXPAND " length" -3) (("3" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL) NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   SHOSTAK))
 (|pos_uns_cons| 0
  (|pos_uns_cons-1| |nil| 3812709962
   ("" (SKEEP)
    (("" (TYPEPRED "p")
      (("" (EXPAND "mv_UNS?")
        (("" (SPLIT -1)
          (("1" (TYPEPRED "i")
            (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (FLATTEN)
            (("2" (EXPAND "Unif?")
              (("2" (SPLIT -1)
                (("1" (TYPEPRED "i")
                  (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("2" (INST -1 "0" "i")
                  (("2" (EXPAND "nth" -1 1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|filter_simplified_TCC1| 0
  (|filter_simplified_TCC1-1| |nil| 3813319237
   ("" (SKEEP)
    (("" (LEMMA "pos_uns_every") (("" (INST -1 "n" "p") NIL NIL)) NIL)) NIL)
   ((|pos_uns_every| FORMULA-DECL NIL |dimension_induction| NIL) NIL NIL
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|filter_simplified| SUBTYPE "dimension_induction.p"
    "list[{m: monomial | cons?[nat](m`alpha)}]")))
 (|filter_simplified| 0
  (|filter_simplified-1| |nil| 3813319237
   ("" (INDUCT "p")
    (("1" (SKEEP) (("1" (EXPAND "filter") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "filter" +)
          (("2" (SPLIT 1)
            (("1" (FLATTEN)
              (("1" (INST -2 "n" "PR")
                (("1" (LEMMA "simplify_cdr")
                  (("1" (INST -1 "cons(cons1_var, cons2_var)")
                    (("1" (ASSERT)
                      (("1" (LEMMA "cdr_is_UNS")
                        (("1" (INST -1 "n" "cons(cons1_var, cons2_var)")
                          (("1" (ASSERT)
                            (("1" (CASE "null?(filter(PR)(cons2_var))")
                              (("1" (ASSERT)
                                (("1" (EXPAND "simplified?" +)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND " length" +)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND " length" +)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (CASE "null?(cons2_var)")
                                  (("1" (EXPAND "filter" 1)
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (EXPAND "simplified?" 3)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" 3)
                                        (("2" (EXPAND "length" 3)
                                          (("2" (ASSERT)
                                            (("2" (ASSERT)
                                              (("2" (SPLIT 3)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (SKEEP :PREDS? T)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (CASE
                                                          "NOT FORALL (L: list[ {m:monomial | cons?(m`alpha)}]): filter(PR)(L) = filter(L, PR)")
                                                      (("1" (HIDE-ALL-BUT 1)
                                                        (("1"
                                                          (INDUCT-AND-SIMPLIFY
                                                           "L")
                                                          NIL NIL))
                                                        NIL)
                                                       ("2" (CASE "i=0")
                                                        (("1" (REPLACE -1 -5)
                                                          (("1"
                                                            (EXPAND "nth" -5)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (LEMMA
                                                                 "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                                (("1"
                                                                  (INST -1
                                                                   "cons2_var"
                                                                   "PR")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (INST-CP
                                                                       -3
                                                                       "cons2_var")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "j-1")
                                                                          (("1"
                                                                            (SKEEP)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -4
                                                                               :DIR
                                                                               RL)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "simplified?"
                                                                                   -13)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -13)
                                                                                      (("1"
                                                                                        (SPLIT
                                                                                         -13)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "0"
                                                                                           "j_1+1")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nth"
                                                                                               1)
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "j_1")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (ASSERT)
                                                                                            (("3"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               1)
                                                                                              (("3"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -3
                                                                               :DIR
                                                                               RL)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -5)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (CASE "j=0")
                                                          (("1"
                                                            (LEMMA
                                                             "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                            (("1"
                                                              (INST -1
                                                               "cons2_var"
                                                               "PR")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (INST -3
                                                                   "cons2_var")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth"
                                                                       -6)
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "i-1")
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -3
                                                                             :DIR
                                                                             RL)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "simplified?"
                                                                                 -12)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -12)
                                                                                    (("1"
                                                                                      (SPLIT
                                                                                       -12)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "0"
                                                                                         "j!1+1")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           1)
                                                                                          (("3"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REPLACE
                                                                           -2
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               -3)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      -2)
                                                              (("2"
                                                                (EXPAND
                                                                 "length" -3)
                                                                (("2"
                                                                  (EXPAND
                                                                   "simplified?"
                                                                   -8)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (SPLIT
                                                                       -8)
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "i-1"
                                                                         "j-1")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "nth"
                                                                               -5)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (ASSERT)
                (("2" (INST?)
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (LEMMA "cdr_is_UNS")
                        (("2" (INST -1 "n" "cons(cons1_var, cons2_var)")
                          (("2" (ASSERT)
                            (("2" (LEMMA "simplify_cdr")
                              (("2" (INST -1 "cons(cons1_var, cons2_var)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (LEMMA "pos_uns_every")
      (("3" (ASSERT)
        (("3" (SKEEP)
          (("3" (INST?) (("3" (ASSERT) (("3" (INST -1 "p") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pos_uns_every| FORMULA-DECL NIL |dimension_induction| NIL)
    (|simplify_cdr| FORMULA-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL NIL NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|filter_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL) NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   SHOSTAK))
 (|filter_is_UNS_TCC1| 0
  (|filter_is_UNS_TCC1-1| |nil| 3812712049
   ("" (LEMMA "pos_uns_every") (("" (PROPAX) NIL NIL)) NIL)
   ((|pos_uns_every| FORMULA-DECL NIL |dimension_induction| NIL)) NIL
   (|filter_is_UNS| SUBTYPE "dimension_induction.p"
    "list[{m: monomial | cons?[nat](m`alpha)}]")))
 (|filter_is_UNS| 0
  (|filter_is_UNS-1| |nil| 3813071425
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "mv_UNS?")
      (("" (CASE "null?(p)")
        (("1" (ASSERT)
          (("1" (EXPAND "filter" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT)
          (("2" (CASE "null?(filter(PR)(p))")
            (("1" (ASSERT) NIL NIL)
             ("2" (FLATTEN)
              (("2"
                (CASE
                    "NOT forall (ll: list[{m:monomial | cons?(m`alpha)}]): filter(ll, PR) = filter(PR)(ll)")
                (("1" (HIDE-ALL-BUT 1)
                  (("1" (INDUCT-AND-SIMPLIFY "ll") NIL NIL)) NIL)
                 ("2" (LABEL "filter_eq" -1)
                  (("2" (COPY -1)
                    (("2" (HIDE -2)
                      (("2" (LEMMA "filter_nth[{m:monomial | cons?(m`alpha)}]")
                        (("2" (INST -1 "p" "PR")
                          (("2" (ASSERT)
                            (("2" (INST -2 "p")
                              (("2" (ASSERT)
                                (("2" (INST -1 "0")
                                  (("1" (SKEEP)
                                    (("1" (REPLACE -2 -1)
                                      (("1" (EXPAND "nth" -1 1)
                                        (("1" (REPLACE -1 4)
                                          (("1" (EXPAND "Unif?" -4)
                                            (("1" (COPY -4)
                                              (("1" (LABEL "Unif" -1)
                                                (("1" (HIDE "Unif")
                                                  (("1" (INST -4 "0" "j")
                                                    (("1" (EXPAND "nth" -4 1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (LEMMA
                                                           "filter_simplified")
                                                          (("1" (INST?)
                                                            (("1" (INST -1 "n")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND
                                                                   "allnonzero?"
                                                                   +)
                                                                  (("1"
                                                                    (SPLIT 4)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "Unif?"
                                                                         1)
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "p"
                                                                               "PR")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (INST-CP
                                                                                   -1
                                                                                   "i")
                                                                                  (("1"
                                                                                    (INST-CP
                                                                                     -1
                                                                                     "j!1")
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -5)
                                                                                        (("1"
                                                                                          (SKEEP
                                                                                           -1)
                                                                                          (("1"
                                                                                            (SKEEP
                                                                                             -2)
                                                                                            (("1"
                                                                                              (REVEAL
                                                                                               "Unif")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "j!2"
                                                                                                 "j!3")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (SKEEP
                                                                       :PREDS?
                                                                       T)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "p"
                                                                           "PR")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "i")
                                                                              (("2"
                                                                                (SKEEP)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "allnonzero?"
                                                                                   -10)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (SPLIT
                                                                                       -10)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (INST
                                                                                         1
                                                                                         "j!1")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REPLACE -1)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "length" 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL NIL NIL
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|filter_simplified| FORMULA-DECL NIL |dimension_induction| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|filter_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|pop_car_TCC1| 0
  (|pop_car_TCC1-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pop_car| SUBTYPE "dimension_induction.m`alpha" "(list_adt[nat].cons?)")))
 (|pop_car_is_UNS_TCC1| 0
  (|pop_car_is_UNS_TCC2-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pop_car_is_UNS| SUBTYPE "(number_fields.-)(dimension_induction.n, 1)"
    "nat")))
 (|pop_car_is_UNS| 0
  (|pop_car_is_UNS-1| |nil| 3812983781
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "pop_car")
      (("" (EXPAND "mv_UNS?")
        (("" (CASE "null?(p)")
          (("1" (ASSERT)
            (("1" (EXPAND "map" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "map" 2 1)
              (("2" (FLATTEN)
                (("2" (EXPAND "map" 2 2)
                  (("2" (EXPAND "pop_car" 2 2)
                    (("2" (EXPAND "length" -3)
                      (("2" (ASSERT)
                        (("2" (LIFT-IF -3)
                          (("2" (SPLIT -3)
                            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (FLATTEN)
                              (("2" (ASSERT)
                                (("2"
                                  (LEMMA
                                   "map_length[{m:monomial | cons?(m`alpha)}, monomial]")
                                  (("2" (INST?)
                                    (("2" (EXPAND "Unif?" 3)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "map" 3 1)
                                          (("2" (SPLIT 3)
                                            (("1" (SKEEP)
                                              (("1" (REWRITE "map_nth_rw" 1)
                                                (("1" (REWRITE "map_nth_rw" 1)
                                                  (("1" (EXPAND "Unif?")
                                                    (("1" (INST -4 "i" "j")
                                                      (("1"
                                                        (EXPAND "pop_car" 1)
                                                        (("1"
                                                          (EXPAND "length" -4)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "allnonzero?")
                                              (("2" (SPLIT -5)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (EXPAND "map" 2 1)
                                                  (("2" (SPLIT 2)
                                                    (("1" (SKEEP)
                                                      (("1"
                                                        (REWRITE "map_nth_rw"
                                                         -1)
                                                        (("1" (INST 1 "i")
                                                          (("1"
                                                            (EXPAND "pop_car")
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (EXPAND "simplified?")
                                              (("3" (EXPAND "map" 1 1)
                                                (("3" (SPLIT -6)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (SPLIT -1)
                                                        (("1" (SPLIT 2)
                                                          (("1" (PROPAX) NIL
                                                            NIL)
                                                           ("2" (SKEEP)
                                                            (("2"
                                                              (REWRITE
                                                               "map_nth_rw" -1)
                                                              (("2"
                                                                (REWRITE
                                                                 "map_nth_rw"
                                                                 -1)
                                                                (("2"
                                                                  (INST -2 "i"
                                                                   "j")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "pop_car"
                                                                         -1)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "every_nth[{m:monomial|cons?(m`alpha)}]")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "LAMBDA ((m: monomial | cons?(m`alpha))): car(m`alpha) = k"
                                                                             "p")
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -2)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (INST-CP
                                                                                     -1
                                                                                     "i")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "j")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "NOT nth(p, i)`alpha = cons(car(nth(p, i)`alpha),   cdr(nth(p, i)`alpha))")
                                                                                          (("1"
                                                                                            (DECOMPOSE-EQUALITY
                                                                                             1)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (CASE
                                                                                                "NOT nth(p, j)`alpha = cons(car(nth(p, j)`alpha),   cdr(nth(p, j)`alpha))")
                                                                                            (("1"
                                                                                              (DECOMPOSE-EQUALITY
                                                                                               1)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pop_car| CONST-DECL "MultPoly" |dimension_induction| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|every_nth| FORMULA-DECL NIL |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|pop_car| CONST-DECL "monomial" |dimension_induction| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL))
   SHOSTAK))
 (|largest_car_alpha_TCC1| 0
  (|largest_car_alpha_TCC1-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|largest_car_alpha| SUBTYPE "dimension_induction.p"
    "(list_adt[monomial].cons?)")))
 (|largest_car_alpha_TCC2| 0
  (|largest_car_alpha_TCC2-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL
    (|length| DEF-DECL "nat" |list_props| NIL) NIL
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL))
   NIL
   (|largest_car_alpha| SUBTYPE
    "list_adt[monomial].car(dimension_induction.p)`alpha"
    "(list_adt[nat].cons?)")))
 (|largest_car_alpha_TCC3| 0
  (|largest_car_alpha_TCC3-1| |nil| 3812708442
   ("" (LEMMA "cdr_is_UNS")
    (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   ((|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL))
   NIL
   (|largest_car_alpha| SUBTYPE "list_adt[monomial].cdr(dimension_induction.p)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (|largest_car_alpha_TCC4| 0
  (|largest_car_alpha_TCC4-1| |nil| 3812708442 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|Unif?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|allnonzero?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|simplified?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|largest_car_alpha| TERMINATION
    "dimension_induction.largest_car_alpha(dimension_induction.n, list_adt[monomial].cdr(dimension_induction.p))"
    "NIL")))
 (|largest_car_is_nth_TCC1| 0
  (|largest_car_is_nth_TCC1-1| |nil| 3812708442
   ("" (LEMMA "pos_uns_cons")
    (("" (ASSERT) (("" (SKEEP) (("" (SKEEP) (("" (INST?) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pos_uns_cons| FORMULA-DECL NIL |dimension_induction| NIL))
   NIL
   (|largest_car_is_nth| SUBTYPE
    "list_props[monomial].nth(dimension_induction.p, dimension_induction.j)`alpha"
    "(list_adt[nat].cons?)")))
 (|largest_car_is_nth| 0
  (|largest_car_is_nth-1| |nil| 3813325829
   (""
    (CASE "FORALL (m:nat, n: posnat, p: (mv_UNS?(n))):
        m=length(p) and cons?(p) IMPLIES
         EXISTS (j: below(length(p))):
           largest_car_alpha(n, p) = car(nth(p, j)`alpha)")
    (("1" (SKEEP)
      (("1" (INST -1 "length(p)" "n" "p") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "m")
        (("1" (SKEEP) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "largest_car_alpha" 1)
              (("2" (ASSERT)
                (("2" (CASE "null?(cdr(p))")
                  (("1" (EXPAND "largest_car_alpha" 1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "max" 1)
                        (("1" (ASSERT)
                          (("1" (INST 1 "0")
                            (("1" (ASSERT)
                              (("1" (LIFT-IF 1)
                                (("1" (SPLIT 1)
                                  (("1" (FLATTEN)
                                    (("1" (ASSERT)
                                      (("1" (TYPEPRED "car(p)`alpha")
                                        (("1" (EXPAND "every" -1)
                                          (("1" (LIFT-IF -1)
                                            (("1" (SPLIT -1)
                                              (("1" (LEMMA "pos_uns_cons")
                                                (("1" (INST -1 "n" "p" "0")
                                                  (("1" (EXPAND "nth" -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (CASE
                                                        "not (forall (r:real): r<0 and r>=0 IMPLIES FALSE)")
                                                    (("1" (ASSERT)
                                                      (("1" (SKEEP)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (INST -1
                                                       "car(car(p)`alpha)")
                                                      (("2" (REPLACE -5)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "nth" 2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (INST -1 "n" "cdr(p)")
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" -2)
                        (("1" (ASSERT)
                          (("1" (SKEEP :PREDS? T)
                            (("1" (EXPAND "max" 2)
                              (("1"
                                (CASE
                                    "car(car(p)`alpha) < largest_car_alpha(n, cdr(p))")
                                (("1" (ASSERT)
                                  (("1" (INST 2 "j+1")
                                    (("1" (EXPAND "nth" 2)
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (INST 3 "0")
                                    (("2" (EXPAND "nth" 3)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("3" (LEMMA "pos_uns_cons")
                                  (("3" (INST -1 "n" "p" "0")
                                    (("3" (EXPAND "nth" -1)
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "cdr_is_UNS")
                      (("2" (INST -1 "n" "p") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (LEMMA "pos_uns_cons") (("3" (INST -1 "n" "p" "_") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "pos_uns_cons")
          (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|pos_uns_cons| FORMULA-DECL NIL |dimension_induction| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|largest_car_is_largest_TCC1| 0
  (|largest_car_is_largest_TCC1-1| |nil| 3812708442
   ("" (LEMMA "pos_uns_cons") (("" (PROPAX) NIL NIL)) NIL)
   ((|pos_uns_cons| FORMULA-DECL NIL |dimension_induction| NIL)) NIL
   (|largest_car_is_largest| SUBTYPE
    "list_props[monomial].nth(dimension_induction.p, dimension_induction.i)`alpha"
    "(list_adt[nat].cons?)")))
 (|largest_car_is_largest| 0
  (|largest_car_is_largest-1| |nil| 3813326911
   (""
    (CASE " FORALL (m:nat, n: posnat, p: (mv_UNS?(n))):
        length(p) = m IMPLIES FORALL (i: below(length(p))):
          largest_car_alpha(n, p) >= car(nth(p, i)`alpha)")
    (("1" (SKEEP) (("1" (INST -1 "length(p) " "n" "p") NIL NIL)) NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "m")
        (("1" (SKEEP) (("1" (SKEEP :PREDS? T) (("1" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (SKEEP :PREDS? T)
              (("2" (EXPAND "largest_car_alpha" 1)
                (("2" (ASSERT)
                  (("2" (EXPAND "length" -3)
                    (("2" (LIFT-IF -3)
                      (("2" (SPLIT -3)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "max" 2)
                              (("2" (LIFT-IF 2)
                                (("2" (SPLIT 2)
                                  (("1" (FLATTEN)
                                    (("1" (CASE "i=0")
                                      (("1" (REPLACE -1)
                                        (("1" (EXPAND "nth" 1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (INST -4 "n" "cdr(p)")
                                        (("2" (ASSERT)
                                          (("2" (INST -4 "i-1")
                                            (("2" (EXPAND "nth" 2)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (FLIP-INEQ 1)
                                        (("2" (INST -4 "n" "cdr(p)")
                                          (("2" (ASSERT)
                                            (("2" (CASE "i=0")
                                              (("1" (REPLACE -1)
                                                (("1" (EXPAND " nth" 1)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST -4 "i-1")
                                                (("1" (EXPAND "nth" 2)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 2)
          (("3" (LEMMA "pos_uns_cons")
            (("3" (SKEEP) (("3" (INST -1 "n" "p" "_") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP)
      (("3" (LEMMA "pos_uns_cons") (("3" (INST -1 "n" "p" " _") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|pos_uns_cons| FORMULA-DECL NIL |dimension_induction| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL NIL NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|list_upto_TCC1| 0
  (|list_upto_TCC1-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|list_upto| SUBTYPE "dimension_induction.i" "below[length[upto(n)](L)]")))
 (|list_upto_TCC2| 0
  (|list_upto_TCC2-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|list_upto| SUBTYPE "0" "upto(dimension_induction.n)")))
 (|list_upto_TCC3| 0
  (|list_upto_TCC3-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|list_upto| SUBTYPE "(: 0 :)"
    "{L: list_adt[upto(dimension_induction.n)].list | booleans.AND(list_props[upto(dimension_induction.n)].length(L) = (number_fields.+)(1, dimension_induction.n), FORALL (i: naturalnumbers.upto(dimension_induction.n)): list_props[upto(dimension_induction.n)].nth(L, i) = i)}")))
 (|list_upto_TCC4| 0
  (|list_upto_TCC4-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|list_upto| SUBTYPE "(number_fields.-)(dimension_induction.n, 1)" "nat")))
 (|list_upto_TCC5| 0
  (|list_upto_TCC5-1| |nil| 3812708442 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|list_upto| TERMINATION
    "dimension_induction.list_upto((number_fields.-)(dimension_induction.n, 1))"
    "NIL")))
 (|list_upto_TCC6| 0
  (|list_upto_TCC6-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (TYPEPRED "v(n - 1)")
      (("1" (ASSERT)
        (("1" (REWRITE "every_nth")
          (("1" (REWRITE "every_nth")
            (("1" (ASSERT)
              (("1" (SKEEP)
                (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|every_nth| FORMULA-DECL NIL |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL)
   NIL
   (|list_upto| SUBTYPE
    "dimension_induction.list_upto((number_fields.-)(dimension_induction.n, 1))"
    "list[upto(n)]")))
 (|list_upto_TCC7| 0
  (|list_upto_TCC7-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (EXPAND "every") (("" (EXPAND "every") (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   (NIL NIL) NIL
   (|list_upto| SUBTYPE "(: dimension_induction.n :)" "list[upto(n)]")))
 (|list_upto_TCC8| 0
  (|list_upto_TCC8-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (SPLASH 2)
      (("1" (SKEEP)
        (("1" (REWRITE "nth_append")
          (("1" (TYPEPRED "v(n - 1)")
            (("1" (LIFT-IF 1)
              (("1" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (ASSERT) (("1" (INST -4 "i") NIL NIL)) NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (TYPEPRED "i")
                    (("2" (CASE "NOT i=n")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (REPLACE -1)
                        (("2" (REPLACE -4)
                          (("2" (ASSERT)
                            (("2" (EXPAND "nth" 2) (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT)
        (("2" (LEMMA "length_append[upto(n)]")
          (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL))
   NIL
   (|list_upto| SUBTYPE
    "list_props[upto(dimension_induction.n)].append(dimension_induction.list_upto((number_fields.-)(dimension_induction.n, 1)), (: dimension_induction.n :))"
    "{L: list_adt[upto(dimension_induction.n)].list | booleans.AND(list_props[upto(dimension_induction.n)].length(L) = (number_fields.+)(1, dimension_induction.n), FORALL (i: naturalnumbers.upto(dimension_induction.n)): list_props[upto(dimension_induction.n)].nth(L, i) = i)}")))
 (|poly_filter_xk_TCC1| 0
  (|poly_filter_xk_TCC1-1| |nil| 3812708442
   ("" (LEMMA "pos_uns_every")
    (("" (ASSERT) (("" (SKEEP) (("" (INST -1 "n" "p") NIL NIL)) NIL)) NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|pos_uns_every| FORMULA-DECL NIL |dimension_induction| NIL))
   NIL
   (|poly_filter_xk| SUBTYPE "dimension_induction.p"
    "list[{m: monomial | cons?[nat](m`alpha)}]")))
 (|poly_filter_xk_TCC2| 0
  (|poly_filter_xk_TCC2-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (LEMMA "filter_is_UNS")
      ((""
        (INST -1 "n" "p" " LAMBDA ((m: monomial | cons?[nat](m`alpha))):
                     car[real](m`alpha) = k")
        (("" (ASSERT) (("" (EXPAND "extend") (("" (POSTPONE) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|filter_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|poly_filter_xk| SUBTYPE
    "filters[{m: standard_form_mult_poly.monomial | list_adt[nat].cons?(m`alpha)}].filter(LAMBDA ((m: standard_form_mult_poly.monomial | list_adt[nat].cons?(m`alpha))): list_adt[nat].car(m`alpha) = dimension_induction.k)(dimension_induction.p)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (|poly_coeff_xk_TCC1| 0
  (|poly_coeff_xk_TCC1-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|poly_coeff_xk| SUBTYPE "(number_fields.-)(dimension_induction.n, 1)"
    "nat")))
 (|poly_coeff_xk_TCC2| 0
  (|poly_coeff_xk_TCC2-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (EXPAND "poly_filter_xk")
      (("" (TYPEPRED "p")
        (("" (LEMMA "every_filter[{m: monomial | cons?(m`alpha)}]")
          ((""
            (INST -1 "p" "LAMBDA ((m: monomial | cons?(m`alpha))):
                               car(m`alpha) = k")
            (("" (LEMMA "pop_car_is_UNS")
              (("" (ASSERT)
                (("" (LEMMA "filter_is_UNS")
                  ((""
                    (INST -1 "n" "p" "LAMBDA ((m: monomial | cons?(m`alpha))):
                               car(m`alpha) = k")
                    ((""
                      (INST -2 "n"
                       "filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                       car(m`alpha) = k)
                    (p)"
                       "k")
                      (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|poly_filter_xk| CONST-DECL "(mv_UNS?(n))" |dimension_induction| NIL)
    (|every_filter| FORMULA-DECL NIL |list_lemmas| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|pop_car_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|filter_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   NIL
   (|poly_coeff_xk| SUBTYPE
    "dimension_induction.pop_car(dimension_induction.n, dimension_induction.poly_filter_xk(dimension_induction.n, dimension_induction.p, dimension_induction.k))"
    "(dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1)))")))
 (|poly_in_polys_TCC1| 0
  (|poly_in_polys_TCC1-1| |nil| 3812708442 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   NIL
   (|poly_in_polys| SUBTYPE "dimension_induction.k"
    "{k: naturalnumbers.nat | reals.<=(k, dimension_induction.largest_car_alpha(dimension_induction.n, dimension_induction.p))}")))
 (|poly_in_polys_single_TCC1| 0
  (|poly_in_polys_single_TCC1-1| |nil| 3813410033
   ("" (SKEEP) (("" (LEMMA "single_UNS") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|single_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL))
   NIL
   (|poly_in_polys_single| SUBTYPE "(: dimension_induction.m :)"
    "{p: standard_form_mult_poly.MultPoly | dimension_induction.mv_UNS?(dimension_induction.n)(p)}")))
 (|poly_in_polys_single_TCC2| 0
  (|poly_in_polys_single_TCC3-1| |nil| 3813410033
   ("" (SKEEP)
    (("" (EXPAND "every")
      (("" (EXPAND "mv_UNS?")
        (("" (EXPAND "every") (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   (NIL (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)) NIL
   (|poly_in_polys_single| SUBTYPE
    "(: list_adt[(dimension_induction.mon_UNS?((number_fields.-)(dimension_induction.n, 1)))].null :)"
    "list[(mv_UNS?(n - 1))]")))
 (|poly_in_polys_single_TCC3| 0
  (|poly_in_polys_single_TCC2-1| |nil| 3813410033 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|poly_in_polys_single| SUBTYPE "dimension_induction.m`alpha"
    "(list_adt[nat].cons?)")))
 (|poly_in_polys_single| 0
  (|poly_in_polys_single-1| |nil| 3813413224
   ("" (SKEEP)
    (("" (EXPAND "poly_in_polys")
      (("" (CASE "NOT largest_car_alpha(n,(: m :)) = car(m`alpha)")
        (("1" (EXPAND "largest_car_alpha" 1)
          (("1" (EXPAND "largest_car_alpha" 1)
            (("1" (ASSERT) (("1" (EXPAND "max") (("1" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "list_extensionality[(mv_UNS?(n-1))]")
          (("2" (INST?)
            (("2" (FLATTEN)
              (("2" (HIDE -1)
                (("2" (ASSERT)
                  (("2"
                    (CASE
                        "length(map(LAMBDA (k: upto(largest_car_alpha(n, (: m :)))):
                   poly_coeff_xk(n, (: m :), k))
                (list_upto(largest_car_alpha(n, (: m :)))))
       =
       length(append[(mv_UNS?(n - 1))]
                  ((: null[(mon_UNS?(n - 1))] :) ^ car[nat](m`alpha),
                   (: (: pop_car(m) :) :)))")
                    (("1" (ASSERT)
                      (("1" (HIDE 2)
                        (("1" (SKEEP :PREDS? T)
                          (("1" (REWRITE "map_nth_rw")
                            (("1" (ASSERT)
                              (("1" (REWRITE "map_length")
                                (("1" (EXPAND "poly_coeff_xk")
                                  (("1" (EXPAND "poly_filter_xk")
                                    (("1" (REPLACE -3)
                                      (("1"
                                        (TYPEPRED "list_upto(car(m`alpha))")
                                        (("1" (INST -3 "n_1")
                                          (("1" (REPLACE -3)
                                            (("1" (HIDE -1)
                                              (("1" (EXPAND "filter")
                                                (("1" (EXPAND "filter")
                                                  (("1" (REWRITE "nth_append")
                                                    (("1"
                                                      (REWRITE
                                                       "length_appendn")
                                                      (("1"
                                                        (EXPAND "length" 1 1)
                                                        (("1"
                                                          (EXPAND "length" 1 1)
                                                          (("1"
                                                            (EXPAND "length" 1)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      1)
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1"
                                                                  (LIFT-IF 1)
                                                                  (("1"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "pop_car"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "map"
                                                                                 1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "map"
                                                                                   1)
                                                                                  (("1"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "pop_car"
                                                                         2 1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "map"
                                                                           2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "nth_appendn")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   +)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     +)
                                                                                    (("2"
                                                                                      (TYPEPRED
                                                                                       "rem(1)(n_1)")
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "not rem(1)(n_1) =0")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "nth"
                                                                                             +)
                                                                                            (("2"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (REPLACE -1)
                                                      (("2"
                                                        (REWRITE
                                                         "length_appendn")
                                                        (("2"
                                                          (EXPAND " length" 1)
                                                          (("2"
                                                            (EXPAND " length"
                                                                    1)
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "map_length" -1) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (REWRITE "map_length")
                        (("2" (HIDE 2)
                          (("2" (REPLACE -1)
                            (("2" (TYPEPRED "list_upto(car(m`alpha))")
                              (("2" (REPLACES -2)
                                (("2" (HIDE (-1 -2))
                                  (("2" (REWRITE "length_append")
                                    (("2" (REWRITE "length_appendn")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "length" 1)
                                          (("2" (EXPAND "length" 1)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn(0)" |standard_form_mult_poly| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (^ DEF-DECL "list[T]" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|pop_car| CONST-DECL "monomial" |dimension_induction| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|poly_filter_xk| CONST-DECL "(mv_UNS?(n))" |dimension_induction| NIL)
    (|filter| DEF-DECL "list[T]" |filters| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|pop_car| CONST-DECL "MultPoly" |dimension_induction| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|n| SKOLEM-CONST-DECL "posnat" |dimension_induction| NIL)
    (|m| SKOLEM-CONST-DECL "(mon_UNS?(n))" |dimension_induction| NIL)
    (|n_1| SKOLEM-CONST-DECL
     "below(length(map(LAMBDA (k: upto(largest_car_alpha(n, (: m :)))): poly_coeff_xk(n, (: m :), k))(list_upto(largest_car_alpha(n, (: m :))))))"
     |dimension_induction| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL))
   SHOSTAK))
 (|pip_length| 0
  (|pip_length-1| |nil| 3813327589
   ("" (SKEEP)
    (("" (EXPAND "poly_in_polys")
      (("" (REWRITE "map_length")
        (("" (TYPEPRED "list_upto(largest_car_alpha(n, p))")
          (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|pip_cons_nth_TCC1| 0
  (|pip_cons_nth_TCC1-1| |nil| 3812802330
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (EXPAND "poly_in_polys")
        (("" (REWRITE "map_length")
          (("" (TYPEPRED "list_upto(largest_car_alpha(n, p))")
            (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL))
   NIL
   (|pip_cons_nth| SUBTYPE
    "dimension_induction.largest_car_alpha(dimension_induction.n, dimension_induction.p)"
    "below[length[(mv_UNS?(n - 1))](poly_in_polys(n, p))]")))
 (|pip_cons_nth| 0
  (|pip_cons_nth-1| |nil| 3813327750
   ("" (SKEEP)
    (("" (EXPAND "poly_in_polys")
      (("" (REWRITE "map_nth_rw")
        (("" (TYPEPRED "list_upto(largest_car_alpha(n, p))")
          (("" (HIDE -1)
            (("" (INST -2 " largest_car_alpha(n, p)")
              (("" (REPLACE -2)
                (("" (EXPAND "poly_coeff_xk")
                  (("" (EXPAND "pop_car")
                    (("" (EXPAND "map" 1)
                      (("" (ASSERT)
                        (("" (LIFT-IF 1)
                          (("" (SPLIT 1)
                            (("1" (FLATTEN)
                              (("1"
                                (LEMMA
                                 "filter_exists_cons[{m:monomial|cons?(m`alpha)}]")
                                (("1" (EXPAND "poly_filter_xk")
                                  (("1" (INST?)
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "largest_car_is_nth")
                                        (("1" (INST -1 "n" "p")
                                          (("1" (ASSERT)
                                            (("1" (SKEEP)
                                              (("1" (INST 1 "j")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|poly_filter_xk| CONST-DECL "(mv_UNS?(n))" |dimension_induction| NIL)
    (|largest_car_is_nth| FORMULA-DECL NIL |dimension_induction| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|filter_exists_cons| FORMULA-DECL NIL |list_lemmas| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pop_car| CONST-DECL "MultPoly" |dimension_induction| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|partial_eval_pip_TCC1| 0
  (|partial_eval_pip_TCC1-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (LEMMA "max_length_UNSge") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|max_length_UNSge| FORMULA-DECL NIL |dimension_induction| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL)
   NIL
   (|partial_eval_pip| SUBTYPE "dimension_induction.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(dimension_induction.pxk))}")))
 (|partial_eval_pip_TCC2| 0
  (|partial_eval_pip_TCC2-1| |nil| 3812708442
   ("" (SKEEP :PREDS? T)
    (("" (REWRITE "map_length")
      (("" (LEMMA "max_length_UNSge")
        (("" (ASSERT)
          (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_length_UNSge| FORMULA-DECL NIL |dimension_induction| NIL) NIL)
   NIL
   (|partial_eval_pip| SUBTYPE
    "list_adt_map[(dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1))), real].map(LAMBDA (pxk: (dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1)))): eval_MultPoly.full_eval(pxk)(dimension_induction.vals))(dimension_induction.pip)"
    "{p: standard_form_poly.Polynomial | list_props[real].length(p) = list_props[(dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1)))].length(dimension_induction.pip)}")))
 (|poly_in_polys_partial_eval_TCC1| 0
  (|poly_in_polys_partial_eval_TCC1-1| |nil| 3812708442
   ("" (SKEEP)
    (("" (TYPEPRED " partial_eval_pip(n, poly_in_polys(n, p), vals)")
      (("" (REPLACES -2)
        (("" (HIDE -1)
          (("" (EXPAND "poly_in_polys")
            (("" (REWRITE "map_length")
              (("" (TYPEPRED " list_upto(largest_car_alpha(n, p))")
                (("" (POSTPONE) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL)
    (|partial_eval_pip| CONST-DECL "{p: Polynomial | length(p) = length(pip)}"
     |dimension_induction| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL)
   NIL
   (|poly_in_polys_partial_eval| SUBTYPE
    "dimension_induction.partial_eval_pip(dimension_induction.n, dimension_induction.poly_in_polys(dimension_induction.n, dimension_induction.p), dimension_induction.vals)"
    "{pp: standard_form_poly.Polynomial | list_props[real].length(pp) = (number_fields.+)(1, dimension_induction.largest_car_alpha(dimension_induction.n, dimension_induction.p))}")))
 (|pip_eval_single| 0
  (|pip_eval_single-1| |nil| 3813415324
   ("" (SKEEP)
    (("" (EXPAND "poly_in_polys_partial_eval")
      (("" (REWRITE "poly_in_polys_single")
        (("" (EXPAND "partial_eval_pip")
          (("" (LEMMA "list_extensionality[real]")
            (("" (INST?)
              (("1" (FLATTEN)
                (("1" (HIDE -1)
                  (("1" (ASSERT)
                    (("1" (HIDE 2)
                      (("1"
                        (CASE
                            "length(map(LAMBDA (pxk: (mv_UNS?(n - 1))): full_eval(pxk)(vals))
                (append[(mv_UNS?(n - 1))]
                     ((: null[(mon_UNS?(n - 1))] :) ^ car[nat](m`alpha),
                      (: (: pop_car(m) :) :))))
       =
       length(append[real]
                  ((: 0 :) ^ car[nat](m`alpha),
                   (: full_eval(pop_car(m))(vals) :)))")
                        (("1" (ASSERT)
                          (("1" (SKEEP :PREDS? T)
                            (("1" (REWRITE "map_length")
                              (("1" (REWRITE "map_nth_rw")
                                (("1" (REWRITE "length_append")
                                  (("1" (REWRITE "length_append")
                                    (("1" (REWRITE "nth_append[real]")
                                      (("1" (REWRITE "length_appendn")
                                        (("1" (LIFT-IF 1)
                                          (("1" (SPLIT 1)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "nth_appendn")
                                                  (("1"
                                                    (TYPEPRED "rem(1)(n!1)")
                                                    (("1" (EXPAND "nth" 1 2)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REWRITE
                                                           "nth_append")
                                                          (("1"
                                                            (REWRITE
                                                             "nth_appendn")
                                                            (("1"
                                                              (EXPAND "length"
                                                                      1)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" 1)
                                                                (("1"
                                                                  (EXPAND "nth"
                                                                          1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "full_eval")
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "every")
                                                    (("2" (EXPAND "every")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (REWRITE "nth_append" 2)
                                                  (("2" (REPLACE -2)
                                                    (("2"
                                                      (CASE
                                                          "n!1 - car[nat](m`alpha) = 0")
                                                      (("1" (ASSERT)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (MOVE-TERMS -1 L 2)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "nth")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "full_eval_recurs")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "(: pop_car(m) :)"
                                                                         "vals")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "full_eval"
                                                                               2
                                                                               2)
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "every")
                                          (("2" (EXPAND "every")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (REWRITE "length_append")
                            (("2" (REWRITE "length_appendn")
                              (("1" (ASSERT)
                                (("1" (REWRITE "map_length")
                                  (("1" (REWRITE "length_append")
                                    (("1" (REWRITE "length_appendn")
                                      (("1" (EXPAND "length")
                                        (("1" (EXPAND "length")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "every")
                                (("2" (EXPAND "every") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (SKEEP)
                          (("3" (LEMMA "max_length_UNSge")
                            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL)
                         ("4" (TYPEPRED " m")
                          (("4" (EXPAND "mon_UNS?")
                            (("4" (FLATTEN)
                              (("4" (EXPAND "length") (("4" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("5" (EXPAND "every")
                          (("5" (EXPAND "every")
                            (("5" (EXPAND "mv_UNS?") (("5" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP)
                (("2" (ASSERT)
                  (("2" (LEMMA "max_length_UNSge")
                    (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|poly_in_polys_partial_eval| CONST-DECL
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     |dimension_induction| NIL)
    (|partial_eval_pip| CONST-DECL "{p: Polynomial | length(p) = length(pip)}"
     |dimension_induction| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL) NIL
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL) NIL
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|pop_car| CONST-DECL "monomial" |dimension_induction| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max_length_UNSge| FORMULA-DECL NIL |dimension_induction| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|full_eval_recurs| FORMULA-DECL NIL |eval_properties| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nth_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|poly_in_polys_single| FORMULA-DECL NIL |dimension_induction| NIL) NIL)
   SHOSTAK))
 (|eval_single_TCC1| 0
  (|eval_single_TCC1-1| |nil| 3813410322 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|eval_single| SUBTYPE "dimension_induction.m"
    "{i: integers.int | booleans.OR(dimension_induction.r /= 0, reals.>=(i, 0))}")))
 (|eval_single| 0
  (|eval_single-1| |nil| 3813421291
   ("" (SKOLEM 1 ("_" "c" "r"))
    (("" (CASE "r=0")
      (("1" (SKEEP)
        (("1" (REPLACE -1)
          (("1" (REWRITE "eval_car")
            (("1" (CASE "m=0")
              (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "^" 2 1)
                (("2" (ASSERT)
                  (("2" (REWRITE "append_assoc")
                    (("2" (ASSERT)
                      (("2" (EXPAND "append" 2 1)
                        (("2" (REWRITE "expt_0") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "append" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (INDUCT "m" 2)
        (("1" (GRIND) NIL NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "^" 1 1)
            (("2" (REWRITE "append_assoc")
              (("2" (EXPAND "eval" 1)
                (("2" (EXPAND "init_eval" 1)
                  (("2" (EXPAND "append" 1 1)
                    (("2" (ASSERT)
                      (("2" (EXPAND "append" 1 1)
                        (("2" (EXPAND "append" 1 1)
                          (("2" (REWRITE "length_append" 1)
                            (("2" (ASSERT)
                              (("2" (EXPAND "append " 1 3)
                                (("2" (ASSERT)
                                  (("2" (EXPAND "^" 1 3)
                                    (("2" (EXPAND "expt")
                                      (("2" (EXPAND "eval")
                                        (("2" (MULT-BY -1 "r")
                                          (("2" (REWRITE "eval_poly_times_x")
                                            (("2" (ASSERT)
                                              (("2" (REPLACE -1)
                                                (("2" (REWRITE "expt_plus")
                                                  (("2" (REWRITE "expt_x1")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|expt_0| FORMULA-DECL NIL |sqrt_exists| |reals|)
    (|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) NIL
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|eval_car| FORMULA-DECL NIL |eval_poly| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|eval_poly_times_x| FORMULA-DECL NIL |eval_poly| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|eval_pip_eval_single_TCC1| 0
  (|eval_pip_eval_single_TCC2-1| |nil| 3813407260
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "length" 1 1)
      (("" (ASSERT) (("" (EXPAND "mon_UNS?") (("" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|eval_pip_eval_single| SUBTYPE
    "list_adt[real].cons(dimension_induction.r, dimension_induction.vals)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(dimension_induction.m`alpha))}")))
 (|eval_pip_eval_single| 0
  (|eval_pip_eval_single-1| |nil| 3813423133
   ("" (SKEEP)
    (("" (REWRITE "pip_eval_single")
      (("" (REWRITE "eval_single")
        (("" (EXPAND "pop_car")
          (("" (LEMMA "eval_vals")
            (("" (INST -1 "n" "m" "cons(r, vals)")
              (("1" (REPLACE -1)
                (("1" (ASSERT)
                  (("1" (EXPAND "hat")
                    (("1" (CASE "null?(cdr(m`alpha))")
                      (("1" (LEMMA "eval_vals_0")
                        (("1" (INST -1 "_" "vals")
                          (("1" (INST-CP -1 "m`C")
                            (("1" (INST-CP -1 "1")
                              (("1" (ASSERT)
                                (("1" (CASE "cdr(m`alpha) = null[nat]")
                                  (("1" (REPLACE -1)
                                    (("1" (REPLACE -3)
                                      (("1" (REPLACE -4)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "eval_vals")
                        (("2"
                          (INST -1 "n-1"
                           "(# C := m`C, alpha := cdr(m`alpha) #)" "vals")
                          (("1" (REPLACE -1)
                            (("1" (LEMMA "eval_vals")
                              (("1"
                                (INST -1 "n-1"
                                 "(# C := 1, alpha := cdr(m`alpha) #)" "vals")
                                (("1" (ASSERT)
                                  (("1" (REPLACE -1)
                                    (("1" (ASSERT)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "hat" 2)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "m")
                                  (("2" (EXPAND "mon_UNS?")
                                    (("2" (FLATTEN)
                                      (("2" (EXPAND "length" -1)
                                        (("2" (LIFT-IF -1)
                                          (("2" (SPLIT -1)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (ASSERT)
                                  (("3" (TYPEPRED "n")
                                    (("3" (TYPEPRED "m")
                                      (("3" (EXPAND "mon_UNS?")
                                        (("3" (EXPAND "length" -1)
                                          (("3" (ASSERT)
                                            (("3" (LIFT-IF -1)
                                              (("3" (SPLIT -1)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "length" -1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "m")
                            (("2" (EXPAND "mon_UNS?")
                              (("2" (FLATTEN)
                                (("2" (EXPAND "length" -1)
                                  (("2" (LIFT-IF -1)
                                    (("2" (SPLIT -1)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (TYPEPRED "m")
                            (("3" (EXPAND "mon_UNS?")
                              (("3" (FLATTEN)
                                (("3" (EXPAND "length" -1)
                                  (("3" (LIFT-IF -1)
                                    (("3" (SPLIT -1)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" -1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (TYPEPRED "m")
                  (("2" (EXPAND "mon_UNS?") (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pip_eval_single| FORMULA-DECL NIL |dimension_induction| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    NIL (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|eval_vals_0| FORMULA-DECL NIL |standard_form_extras| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL)
    (|eval_vals| FORMULA-DECL NIL |eval_properties| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pop_car| CONST-DECL "monomial" |dimension_induction| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|eval_single| FORMULA-DECL NIL |dimension_induction| NIL) NIL)
   SHOSTAK))
 (|eval_pip_eval_recurs_TCC1| 0
  (|eval_pip_eval_recurs_TCC1-1| |nil| 3813407260
   ("" (SKEEP :PREDS? T)
    (("" (LEMMA "car_mon_UNS")
      (("" (INST?)
        (("" (ASSERT) (("" (LEMMA "single_UNS") (("" (INST?) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|car_mon_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|single_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL
   (|eval_pip_eval_recurs| SUBTYPE
    "(: list_adt[monomial].car(dimension_induction.p) :)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (|eval_pip_eval_recurs_TCC2| 0
  (|eval_pip_eval_recurs_TCC2-1| |nil| 3813407260
   ("" (SKEEP)
    (("" (LEMMA "cdr_is_UNS") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL
   (|eval_pip_eval_recurs| SUBTYPE
    "list_adt[monomial].cdr(dimension_induction.p)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (|eval_pip_eval_recurs| 0
  (|eval_pip_eval_recurs-1| |nil| 3813424872
   ("" (SKEEP)
    ((""
      (CASE
          "poly_in_polys_partial_eval(n, p, vals) = init_polyplus(poly_in_polys_partial_eval(n, (: car(p) :), vals), poly_in_polys_partial_eval(n, cdr(p), vals))")
      (("1" (REPLACE -1)
        (("1" (LEMMA "eval_add")
          (("1" (INST?)
            (("1" (ASSERT)
              (("1" (REPLACE -1)
                (("1"
                  (EXPAND "+
")
                  (("1" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "list_extensionality[real]")
          (("2" (INST?)
            (("2" (FLATTEN)
              (("2" (HIDE -1)
                (("2" (ASSERT)
                  (("2" (HIDE 2)
                    (("2"
                      (CASE "length(poly_in_polys_partial_eval(n, p, vals)) =
       length(init_polyplus(poly_in_polys_partial_eval(n,
                                                       (: car(p) :),
                                                       vals),
                            poly_in_polys_partial_eval(n, cdr(p), vals)))")
                      (("1" (ASSERT)
                        (("1" (SKEEP :PREDS? T)
                          (("1"
                            (TYPEPRED
                             "init_polyplus(poly_in_polys_partial_eval(n,
                                                       (: car(p) :),
                                                       vals),
                            poly_in_polys_partial_eval(n, cdr(p), vals))")
                            (("1" (HIDE -1)
                              (("1" (REPLACE -3 -2)
                                (("1" (REPLACE -1 -2)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "init_polyplus_nth")
                                      (("1" (INST?)
                                        (("1" (REPLACE -1)
                                          (("1"
                                            (TYPEPRED
                                             "poly_in_polys_partial_eval(n, (: car(p) :), vals)")
                                            (("1" (HIDE -1)
                                              (("1"
                                                (CASE
                                                    "NOT largest_car_alpha(n, (: car(p) :)) = car(car(p)`alpha)")
                                                (("1"
                                                  (EXPAND "largest_car_alpha"
                                                          1)
                                                  (("1"
                                                    (EXPAND "largest_car_alpha"
                                                            1)
                                                    (("1" (EXPAND "max" 1)
                                                      (("1" (ASSERT)
                                                        (("1" (LIFT-IF 1)
                                                          (("1" (ASSERT)
                                                            (("1" (SPLIT 1)
                                                              (("1"
                                                                (TYPEPRED
                                                                 "car(p)`alpha")
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "p")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "mv_UNS?")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             -2)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 -2)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "every")
                                                                                      (("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (CASE
                                                                                                "NOT FORALL (R:real): (R>=0 AND R<0) IMPLIES FALSE")
                                                                                            (("1"
                                                                                              (SKEEP)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "car(car(p)`alpha)")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (LEMMA "car_mon_UNS")
                                                  (("2" (INST?)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (REWRITE
                                                         "pip_eval_single")
                                                        (("2"
                                                          (EXPAND
                                                           "poly_in_polys_partial_eval"
                                                           1 1)
                                                          (("2"
                                                            (EXPAND
                                                             "poly_in_polys_partial_eval"
                                                             -6 1)
                                                            (("2"
                                                              (EXPAND
                                                               "partial_eval_pip")
                                                              (("2"
                                                                (TYPEPRED
                                                                 "n_1")
                                                                (("2"
                                                                  (EXPAND
                                                                   "poly_in_polys_partial_eval"
                                                                   -1 1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "partial_eval_pip")
                                                                    (("2"
                                                                      (REWRITE
                                                                       "map_length")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "map_nth_rw")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "poly_in_polys")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "map_length")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "map_nth_rw")
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "list_upto(largest_car_alpha(n, p))")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -2
                                                                                       "n_1")
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -2)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "poly_coeff_xk")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "poly_filter_xk")
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "NOT cons?(car(p)`alpha)")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "mon_UNS?")
                                                                                                (("1"
                                                                                                  (FLATTEN)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (CASE
                                                                                                    "n_1 = car(car(p)`alpha)")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "filter")
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -1
                                                                                                     1
                                                                                                     :DIR
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "pop_car"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "map"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "full_eval_recurs")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "cons(pop_car(car(p)),
                     map(pop_car)
                        (filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                                  car(m`alpha) = n_1)
                               (cdr(p))))"
                                                                                                             "vals")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (REPLACE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "enth"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -2
                                                                                                                     -9
                                                                                                                     :DIR
                                                                                                                     RL)
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -9
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (REWRITE
                                                                                                                           "nth_append[real]")
                                                                                                                          (("1"
                                                                                                                            (REWRITE
                                                                                                                             "length_appendn[real]"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "nth"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "poly_in_polys_partial_eval")
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "partial_eval_pip")
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "map_length")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "enth"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("1"
                                                                                                                                            (REWRITE
                                                                                                                                             "map_length"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (LIFT-IF
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (SPLIT
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (FLATTEN)
                                                                                                                                                  (("1"
                                                                                                                                                    (REWRITE
                                                                                                                                                     "map_nth_rw"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "poly_in_polys")
                                                                                                                                                      (("1"
                                                                                                                                                        (TYPEPRED
                                                                                                                                                         " list_upto(largest_car_alpha(n, cdr(p)))")
                                                                                                                                                        (("1"
                                                                                                                                                          (HIDE
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (REWRITE
                                                                                                                                                             "map_length")
                                                                                                                                                            (("1"
                                                                                                                                                              (REWRITE
                                                                                                                                                               "map_nth_rw"
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "poly_coeff_xk")
                                                                                                                                                                (("1"
                                                                                                                                                                  (INST
                                                                                                                                                                   -2
                                                                                                                                                                   "n_1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (REPLACE
                                                                                                                                                                     -2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "poly_filter_xk")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (EXPAND
                                                                                                                                                                         "pop_car"
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (PROPAX)
                                                                                                                                                                          NIL
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (SKEEP)
                                                                                                                                                      (("2"
                                                                                                                                                        (LEMMA
                                                                                                                                                         "max_length_UNSge")
                                                                                                                                                        (("2"
                                                                                                                                                          (INST?)
                                                                                                                                                          (("2"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL)
                                                                                                                                                 ("2"
                                                                                                                                                  (HIDE
                                                                                                                                                   (-1
                                                                                                                                                    -10))
                                                                                                                                                  (("2"
                                                                                                                                                    (FLATTEN)
                                                                                                                                                    (("2"
                                                                                                                                                      (FLIP-INEQ
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "poly_in_polys")
                                                                                                                                                        (("2"
                                                                                                                                                          (REWRITE
                                                                                                                                                           "map_length"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (TYPEPRED
                                                                                                                                                             " list_upto(largest_car_alpha(n, cdr(p)))")
                                                                                                                                                            (("2"
                                                                                                                                                              (HIDE
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (REPLACE
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (CASE
                                                                                                                                                                      "null?(filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                             car(m`alpha) = n_1)
                          (cdr(p)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "map"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (ASSERT)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (EXPAND
                                                                                                                                                                         "full_eval")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (PROPAX)
                                                                                                                                                                          NIL
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (LEMMA
                                                                                                                                                                     "cons_filter_exists[{m:monomial | cons?(m`alpha)}]")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (INST
                                                                                                                                                                       -1
                                                                                                                                                                       "cdr(p)"
                                                                                                                                                                       " LAMBDA ((m: monomial | cons?(m`alpha))):
                             car(m`alpha) = n_1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (ASSERT)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (SKEEP)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (LEMMA
                                                                                                                                                                             "largest_car_is_largest")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (INST
                                                                                                                                                                               -1
                                                                                                                                                                               "n"
                                                                                                                                                                               "cdr(p)"
                                                                                                                                                                               "i")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (ASSERT)
                                                                                                                                                                                NIL
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (LEMMA
                                                                                                                                                                     "pos_uns_every")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (INST?)
                                                                                                                                                                      NIL
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL)
                                                                                                                                             ("2"
                                                                                                                                              (SKEEP)
                                                                                                                                              (("2"
                                                                                                                                                (LEMMA
                                                                                                                                                 "max_length_UNSge")
                                                                                                                                                (("2"
                                                                                                                                                  (INST?)
                                                                                                                                                  (("2"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (SKEEP)
                                                                                                                                        (("2"
                                                                                                                                          (LEMMA
                                                                                                                                           "max_length_UNSge")
                                                                                                                                          (("2"
                                                                                                                                            (INST?)
                                                                                                                                            (("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (REWRITE
                                                                                                                             "length_appendn")
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (EXPAND
                                                                                                                               "every")
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "every")
                                                                                                                                (("2"
                                                                                                                                  (PROPAX)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (LEMMA
                                                                                                               "pos_uns_every")
                                                                                                              (("2"
                                                                                                                (INST?)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (CASE
                                                                                                      "NOT enth(append[real]
                ((: 0 :) ^ car[nat](car(p)`alpha),
                 (: full_eval(pop_car(car(p)))(vals) :)),
            n_1) = 0")
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "enth"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (LIFT-IF
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (SPLIT
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (FLATTEN)
                                                                                                            (("1"
                                                                                                              (REWRITE
                                                                                                               "length_append"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "nth_append[real]"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (REWRITE
                                                                                                                     "length_appendn[real]")
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "nth_appendn[real]")
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "nth"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (TYPEPRED
                                                                                                                             "rem(1)(n_1)")
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (REPLACES
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "filter"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "enth"
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (LIFT-IF
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (SPLIT
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (FLATTEN)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "poly_in_polys_partial_eval")
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "partial_eval_pip")
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "map_length")
                                                                                                                      (("1"
                                                                                                                        (REWRITE
                                                                                                                         "map_nth_rw"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "poly_in_polys")
                                                                                                                          (("1"
                                                                                                                            (TYPEPRED
                                                                                                                             "list_upto(largest_car_alpha(n, cdr(p)))")
                                                                                                                            (("1"
                                                                                                                              (HIDE
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (REWRITE
                                                                                                                                 "map_length")
                                                                                                                                (("1"
                                                                                                                                  (REPLACE
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (INST
                                                                                                                                     -2
                                                                                                                                     "n_1")
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "map_nth_rw")
                                                                                                                                      (("1"
                                                                                                                                        (REPLACE
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "poly_coeff_xk")
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "poly_filter_xk")
                                                                                                                                            (("1"
                                                                                                                                              (PROPAX)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (SKEEP)
                                                                                                                          (("2"
                                                                                                                            (LEMMA
                                                                                                                             "max_length_UNSge")
                                                                                                                            (("2"
                                                                                                                              (INST?)
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (SKEEP)
                                                                                                                        (("2"
                                                                                                                          (LEMMA
                                                                                                                           "max_length_UNSge")
                                                                                                                          (("2"
                                                                                                                            (INST?)
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (FLATTEN)
                                                                                                                (("2"
                                                                                                                  (FLIP-INEQ
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (TYPEPRED
                                                                                                                     "poly_in_polys_partial_eval(n, cdr(p), vals)")
                                                                                                                    (("2"
                                                                                                                      (HIDE
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (REPLACE
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (CASE
                                                                                                                              "null?(filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                                 car(m`alpha) = n_1)
                              (cdr(p)))")
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "pop_car")
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "map")
                                                                                                                              (("1"
                                                                                                                                (ASSERT)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "full_eval"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (PROPAX)
                                                                                                                                    NIL
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (LEMMA
                                                                                                                             "cons_filter_exists[{m:monomial | cons?(m`alpha)}]")
                                                                                                                            (("2"
                                                                                                                              (ASSERT)
                                                                                                                              (("2"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "cdr(p)"
                                                                                                                                 " LAMBDA ((m: monomial | cons?(m`alpha))):
                             car(m`alpha) = n_1")
                                                                                                                                (("2"
                                                                                                                                  (ASSERT)
                                                                                                                                  (("2"
                                                                                                                                    (SKEEP)
                                                                                                                                    (("2"
                                                                                                                                      (LEMMA
                                                                                                                                       "largest_car_is_largest")
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -1
                                                                                                                                         "n"
                                                                                                                                         "cdr(p)"
                                                                                                                                         "i")
                                                                                                                                        (("2"
                                                                                                                                          (ASSERT)
                                                                                                                                          NIL
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("3"
                                                                                                                            (LEMMA
                                                                                                                             "pos_uns_every")
                                                                                                                            (("3"
                                                                                                                              (INST?)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "NOT FORALL (N,M: nat): N<1+M IMPLIES N <=M")
                                                                                          (("1"
                                                                                            (SKEEP)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "n_1"
                                                                                             "largest_car_alpha(n, p)")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (SKEEP)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "max_length_UNSge")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKEEP)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "max_length_UNSge")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (TYPEPRED "p")
                                                  (("3" (EXPAND "mv_UNS?")
                                                    (("3" (FLATTEN)
                                                      (("3"
                                                        (EXPAND "length" -2)
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2"
                          (TYPEPRED "poly_in_polys_partial_eval(n, p, vals)")
                          (("2" (HIDE -1)
                            (("2"
                              (TYPEPRED
                               "init_polyplus(poly_in_polys_partial_eval(n,
                                                       (: car(p) :),
                                                       vals),
                            poly_in_polys_partial_eval(n, cdr(p), vals))")
                              (("2" (HIDE -1)
                                (("2" (EXPAND "largest_car_alpha" -2)
                                  (("2" (REPLACE -2)
                                    (("2" (HIDE -2)
                                      (("2"
                                        (TYPEPRED
                                         "poly_in_polys_partial_eval(n, (: car(p) :), vals)")
                                        (("2" (HIDE -1)
                                          (("2" (REPLACES -1)
                                            (("2"
                                              (EXPAND "largest_car_alpha" -)
                                              (("2"
                                                (EXPAND "largest_car_alpha" -)
                                                (("2"
                                                  (CASE
                                                      "NOT max(car(car(p)`alpha), 0) = car(car(p)`alpha)")
                                                  (("1" (EXPAND "max" 1)
                                                    (("1" (ASSERT)
                                                      (("1" (LIFT-IF 1)
                                                        (("1" (SPLIT 1)
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (TYPEPRED
                                                                 "car(p)`alpha")
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "p")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "mv_UNS?")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             -2)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -2)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     " every"
                                                                                     -5)
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "FORALL (R:real): (R<0 AND R>=0) IMPLIES FALSE")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "car(car(p)`alpha)")
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -9)
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKEEP)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (REPLACE -1)
                                                    (("2" (REPLACE -2)
                                                      (("2"
                                                        (TYPEPRED
                                                         "poly_in_polys_partial_eval(n, cdr(p), vals)")
                                                        (("2" (REPLACE -2)
                                                          (("2"
                                                            (HIDE-ALL-BUT 1)
                                                            (("2"
                                                              (EXPAND "max")
                                                              (("2" (LIFT-IF 1)
                                                                (("2" (SPLIT 1)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (TYPEPRED "p")
                        (("3" (LEMMA "cdr_is_UNS")
                          (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL)
                       ("4" (LEMMA "car_mon_UNS")
                        (("4" (INST?)
                          (("4" (ASSERT)
                            (("4" (LEMMA "single_UNS") (("4" (INST?) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|init_polyplus| DEF-DECL
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     |arithmetic_poly| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|poly_in_polys_partial_eval| CONST-DECL
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     |dimension_induction| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|eval_add| FORMULA-DECL NIL |arithmetic_poly| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|init_polyplus_nth| FORMULA-DECL NIL |polyplus_props| NIL)
    (|car_mon_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|partial_eval_pip| CONST-DECL "{p: Polynomial | length(p) = length(pip)}"
     |dimension_induction| NIL)
    (|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|map_length| FORMULA-DECL NIL |more_map_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL NIL NIL NIL (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nth_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rem| CONST-DECL "{r: mod(b) | EXISTS q: x = b * q + r}"
     |modulo_arithmetic| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL) NIL
    (|pop_car| CONST-DECL "MultPoly" |dimension_induction| NIL)
    (|full_eval_recurs| FORMULA-DECL NIL |eval_properties| NIL)
    (|enth| CONST-DECL "real" |polyplus_props| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL) NIL
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|largest_car_is_largest| FORMULA-DECL NIL |dimension_induction| NIL)
    (|cons_filter_exists| FORMULA-DECL NIL |list_lemmas| NIL)
    (|pos_uns_every| FORMULA-DECL NIL |dimension_induction| NIL)
    (|max_length_UNSge| FORMULA-DECL NIL |dimension_induction| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_appendn| FORMULA-DECL NIL |more_list_props| |structures|)
    (|pop_car| CONST-DECL "monomial" |dimension_induction| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|poly_filter_xk| CONST-DECL "(mv_UNS?(n))" |dimension_induction| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)
    (|pip_eval_single| FORMULA-DECL NIL |dimension_induction| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonneg_real_max| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|single_UNS| FORMULA-DECL NIL |dimension_induction| NIL) NIL)
   SHOSTAK))
 (|pip_to_full_eval_TCC1| 0
  (|pip_to_full_eval_TCC1-1| |nil| 3812708442
   ("" (SKEEP :PREDS? T)
    (("" (LEMMA "max_length_UNSge")
      (("" (INST?) (("" (EXPAND "length" 1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|max_length_UNSge| FORMULA-DECL NIL |dimension_induction| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL
   (|pip_to_full_eval| SUBTYPE
    "list_adt[real].cons(dimension_induction.r, dimension_induction.vals)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(dimension_induction.p))}")))
 (|pip_to_full_eval| 0
  (|pip_to_full_eval-1| |nil| 3813335624
   (""
    (CASE "FORALL (m:nat, n: posnat, p: (mv_UNS?(n)), r: real,
                            (vals: list[real] | length(vals) = n - 1)):
                      LET P: {pp: Polynomial | length(pp) = 1 + largest_car_alpha(n, p)}
                            = poly_in_polys_partial_eval(n, p, vals)
                        IN length(p) = m IMPLIES full_eval(p)(cons(r, vals)) = eval(P)(r)")
    (("1" (SKEEP)
      (("1" (ASSERT) (("1" (INST -1 "length(p)" "n" "p" "r" "vals") NIL NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "m")
        (("1" (SKEEP) (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL)) NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "length" -1)
            (("2" (ASSERT)
              (("2" (LIFT-IF -1)
                (("2" (SPLIT -1)
                  (("1" (EXPAND "poly_in_polys_partial_eval")
                    (("1" (EXPAND "poly_in_polys")
                      (("1" (EXPAND "largest_car_alpha")
                        (("1" (ASSERT)
                          (("1" (EXPAND "list_upto")
                            (("1" (ASSERT)
                              (("1" (EXPAND "poly_coeff_xk")
                                (("1" (EXPAND "poly_filter_xk")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "filter")
                                      (("1" (EXPAND "pop_car")
                                        (("1" (EXPAND "map")
                                          (("1" (EXPAND "map")
                                            (("1" (EXPAND "partial_eval_pip")
                                              (("1" (EXPAND "map")
                                                (("1" (EXPAND "map")
                                                  (("1" (EXPAND "full_eval")
                                                    (("1" (EXPAND "eval")
                                                      (("1"
                                                        (EXPAND "init_eval")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND
                                                             "init_eval")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (SKEEP)
            (("3" (CASE "null?(p)")
              (("1" (EXPAND "length" -3) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (LEMMA "full_eval_recurs")
                (("2" (INST -1 "p" "cons(r, vals)")
                  (("2" (ASSERT)
                    (("2" (REPLACE -1)
                      (("2" (INST -2 "n" "cdr(p)" "r" "vals")
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" -3)
                            (("1" (ASSERT)
                              (("1" (REPLACE -2)
                                (("1" (LEMMA "eval_pip_eval_recurs")
                                  (("1" (INST -1 "n" "p" "r" "vals")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "eval_pip_eval_single")
                                            (("1" (INST?)
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (LEMMA "car_mon_UNS")
                                                (("2" (INST?)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "cdr_is_UNS")
                          (("2" (ASSERT)
                            (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 2)
          (("4" (SKEEP)
            (("4" (LEMMA "max_length_UNSge")
              (("4" (INST?)
                (("4" (EXPAND "length") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (LEMMA "max_length_UNSge")
          (("3" (INST?)
            (("3" (EXPAND "length" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_length_UNSge| FORMULA-DECL NIL |dimension_induction| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr_is_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|eval_pip_eval_recurs| FORMULA-DECL NIL |dimension_induction| NIL)
    (|mon_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|car_mon_UNS| FORMULA-DECL NIL |dimension_induction| NIL)
    (|eval_pip_eval_single| FORMULA-DECL NIL |dimension_induction| NIL) NIL
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL
    (|full_eval_recurs| FORMULA-DECL NIL |eval_properties| NIL)
    (|poly_in_polys| CONST-DECL "list[(mv_UNS?(n - 1))]" |dimension_induction|
     NIL)
    (|poly_filter_xk| CONST-DECL "(mv_UNS?(n))" |dimension_induction| NIL) NIL
    NIL
    (|partial_eval_pip| CONST-DECL "{p: Polynomial | length(p) = length(pip)}"
     |dimension_induction| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|init_eval| DEF-DECL "real" |eval_poly| NIL)
    (|pop_car| CONST-DECL "MultPoly" |dimension_induction| NIL)
    (|poly_coeff_xk| CONST-DECL "(mv_UNS?(n - 1))" |dimension_induction| NIL)
    (|list_upto| DEF-DECL
     "{L: list[upto(n)] | length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     |dimension_induction| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_UNS?| CONST-DECL "bool" |dimension_induction| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Polynomial| TYPE-EQ-DECL NIL |standard_form_poly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|largest_car_alpha| DEF-DECL "nat" |dimension_induction| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|eval| CONST-DECL "[real -> real]" |eval_poly| NIL)
    (|poly_in_polys_partial_eval| CONST-DECL
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     |dimension_induction| NIL))
   SHOSTAK)))

