(|poly_comp_analytic|
 (|e_mon_TCC1| 0
  (|e_mon_TCC1-1| |nil| 3809679803
   ("" (SKEEP)
    (("" (ASSERT) (("" (TYPEPRED "vals") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL) NIL)
   NIL (|e_mon| SUBTYPE "poly_comp_analytic.vals" "(list_adt[real].cons?)")))
 (|e_mon_TCC2| 0
  (|e_mon_TCC2-1| |nil| 3809679803 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL))
   NIL (|e_mon| SUBTYPE "poly_comp_analytic.m`alpha" "(list_adt[nat].cons?)")))
 (|e_mon_TCC3| 0
  (|e_mon_TCC3-1| |nil| 3810304434 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|e_mon| SUBTYPE "list_adt[nat].car(poly_comp_analytic.m`alpha)"
    "{i: integers.int | booleans.OR(list_adt[real].car(poly_comp_analytic.vals) /= 0, reals.>=(i, 0))}")))
 (|e_mon_TCC4| 0
  (|e_mon_TCC4-1| |nil| 3809679803
   ("" (SKEEP)
    (("" (TYPEPRED "vals")
      (("" (EXPAND "length" -2)
        (("" (ASSERT)
          (("" (LIFT-IF -2)
            (("" (SPLIT)
              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|e_mon| SUBTYPE "list_adt[real].cdr(poly_comp_analytic.vals)"
    "{l: list_adt[real].list | list_props[real].length(l) = list_props[nat].length(list_adt[nat].cdr(poly_comp_analytic.m`alpha))}")))
 (|e_mon_TCC5| 0
  (|e_mon_TCC5-1| |nil| 3809679803 ("" (TERMINATION-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|e_mon| TERMINATION
    "poly_comp_analytic.e_mon((# C := poly_comp_analytic.m`C, alpha := list_adt[nat].cdr(poly_comp_analytic.m`alpha) #))"
    "NIL")))
 (|increasing?_TCC1| 0
  (|increasing?_TCC1-1| |nil| 3809684466 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|increasing?| SUBTYPE "poly_comp_analytic.l" "(list_adt[nat].cons?)")))
 (|increasing?_TCC2| 0
  (|increasing?_TCC2-1| |nil| 3809684466
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL)
   NIL
   (|increasing?| SUBTYPE "list_adt[nat].cdr(poly_comp_analytic.l)"
    "(list_adt[nat].cons?)")))
 (|increasing?_TCC3| 0
  (|increasing?_TCC3-1| |nil| 3809684466 ("" (TERMINATION-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|increasing?| TERMINATION
    "poly_comp_analytic.increasing?(list_adt[nat].cdr(poly_comp_analytic.l))"
    "NIL")))
 (|increase_nth| 0
  (|increase_nth-1| |nil| 3809693100
   ("" (INDUCT "l")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "increasing?" -2)
          (("2" (SPLIT -2)
            (("1" (TYPEPRED "i" "j")
              (("1" (EXPAND "length" -3 1)
                (("1" (EXPAND "length" -1)
                  (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (ASSERT)
                (("2" (CASE "i=0")
                  (("1" (EXPAND "nth" 2 1)
                    (("1" (ASSERT)
                      (("1" (CASE "j=0")
                        (("1" (EXPAND "nth" 2 1) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (EXPAND "nth" 3 1)
                          (("2" (ASSERT)
                            (("2" (CASE "j-1=0")
                              (("1" (EXPAND "nth" 3 1) (("1" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (INST -4 "0" "j-1")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "nth" -4 1)
                                      (("1" (ASSERT)
                                        (("1" (HIDE -3)
                                          (("1"
                                            (CASE
                                                "NOT cons1_var <= car[nat](cons2_var)")
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "length" 1 1)
                                      (("2" (LIFT-IF 1)
                                        (("2" (SPLIT 1)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT)
                                              (("1" (TYPEPRED "j")
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (INST -3 "i-1" "j-1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "nth" 3) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "j")
                          (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (TYPEPRED "i")
                        (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL NIL
    NIL (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|increasing?| DEF-DECL "bool" |poly_comp_analytic| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|index_great_increase_TCC1| 0
  (|index_great_increase_TCC1-1| |nil| 3809684671
   ("" (SKEEP) (("" (TYPEPRED "vals") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL) NIL)
   NIL
   (|index_great_increase| SUBTYPE "poly_comp_analytic.l"
    "(list_adt[nat].cons?)")))
 (|index_great_increase_TCC2| 0
  (|index_great_increase_TCC2-1| |nil| 3809684671
   ("" (SKEEP)
    (("" (TYPEPRED "index") (("" (TYPEPRED "vals") (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|bov?| DEF-DECL "bool" |eval_properties| NIL)
    (|increasing?| DEF-DECL "bool" |poly_comp_analytic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|index_great_increase| SUBTYPE "poly_comp_analytic.index"
    "(list_adt[nat].cons?)")))
 (|index_great_increase_TCC3| 0
  (|index_great_increase_TCC1-1| |nil| 3809684466
   ("" (SKEEP)
    (("" (TYPEPRED "vals")
      (("" (TYPEPRED "index") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|increasing?| DEF-DECL "bool" |poly_comp_analytic| NIL)
    (|bov?| DEF-DECL "bool" |eval_properties| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) NIL)
   NIL
   (|index_great_increase| SUBTYPE "poly_comp_analytic.vals"
    "{vals: list_adt[real].list | list_props[real].length(vals) = list_props[nat].length(poly_comp_analytic.index)}")))
 (|index_great_increase| 0
  (|index_great_increase-1| |nil| 3809684925
   (""
    (CASE "FORALL (n:nat, m: {mm: monomial | cons?(mm`alpha)},
                            vals: {l: list[real] | cons?(l)},
                            index:
                              {l: list[nat] |
                                 (length(l) = length(vals) AND increasing?(l)) AND
                                  bov?(0)(cdr(l))}):
                      length(vals) = n IMPLIES car[nat](index) >= length(m`alpha) IMPLIES eval(m, index)(vals)`C = m`C")
    (("1" (SKEEP)
      (("1" (INST -1 "length(vals)" "m" "vals" "index")
        (("1" (ASSERT) NIL NIL)) NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "eval" 1 1)
              (("2" (LIFT-IF 1)
                (("2" (SPLIT 1)
                  (("1" (PROPAX) NIL NIL)
                   ("2" (ASSERT)
                    (("2" (INST - "m" "cdr(vals)" "cdr(index)")
                      (("1" (ASSERT)
                        (("1" (EXPAND "length" -3)
                          (("1" (ASSERT)
                            (("1" (CASE "j=0")
                              (("1" (REPLACE -1)
                                (("1" (CASE "length(cdr(vals)) = 0")
                                  (("1" (REPLACE -1)
                                    (("1" (TYPEPRED "index")
                                      (("1" (CASE "cdr(index)=null")
                                        (("1" (CASE "cdr(vals)=null")
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (EXPAND "length" -)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (REPLACE -2 :DIR RL)
                                          (("2" (EXPAND "length" -)
                                            (("2" (EXPAND "length" -)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "length" -)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "index")
                                (("2" (EXPAND "increasing?" -3)
                                  (("2" (SPLIT -3)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "index")
                          (("2" (EXPAND "length" -2)
                            (("2" (ASSERT)
                              (("2" (EXPAND "bov?" -4)
                                (("2" (SPLIT -4)
                                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "increasing?" -5)
                                        (("2" (SPLIT -5)
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (TYPEPRED "vals")
                        (("3" (CASE "j=0")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "vals")
                              (("1" (HIDE -1 -4)
                                (("1" (EXPAND "eval" 2 1)
                                  (("1" (TYPEPRED "index")
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (GRIND) NIL NIL)
         ("4" (HIDE 2)
          (("4" (SKEEP)
            (("4" (TYPEPRED "l" "vals") (("4" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (TYPEPRED "index" "vals") (("3" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|eval| DEF-DECL "monomial" |eval_MultPoly| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|bov?| DEF-DECL "bool" |eval_properties| NIL)
    (|increasing?| DEF-DECL "bool" |poly_comp_analytic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[nat](0)" |standard_form_mult_poly| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|replace| DEF-DECL "list[nat]" |eval_MultPoly| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|vals| SKOLEM-CONST-DECL "{l: list[real] | cons?(l)}" |poly_comp_analytic|
     NIL)
    (|index| SKOLEM-CONST-DECL
     "{l: list[nat] | (length(l) = length(vals) AND increasing?(l)) AND bov?(0)(cdr(l))}"
     |poly_comp_analytic| NIL))
   SHOSTAK))
 (|cdr_replace_TCC1| 0
  (|cdr_replace_TCC1-1| |nil| 3810285734
   ("" (SKEEP) (("" (EXPAND "replace" 1) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|replace| DEF-DECL "list[nat]" |eval_MultPoly| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL)
   NIL
   (|cdr_replace| SUBTYPE
    "eval_MultPoly.replace(poly_comp_analytic.m`alpha, list_adt[nat].car(poly_comp_analytic.index))(0)"
    "(list_adt[nat].cons?)")))
 (|cdr_replace_TCC2| 0
  (|cdr_replace_TCC2-1| |nil| 3810285734 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|cdr_replace| SUBTYPE "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (|cdr_replace_TCC3| 0
  (|cdr_replace_TCC3-1| |nil| 3810285734
   ("" (SKEEP) (("" (REWRITE "member_0_bov") NIL NIL)) NIL)
   ((|member_0_bov| FORMULA-DECL NIL |eval_properties| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL)
   NIL
   (|cdr_replace| SUBTYPE "poly_comp_analytic.index"
    "{ll: list_adt[nat].list | eval_properties.bov?(0)(ll)}")))
 (|cdr_replace_TCC4| 0
  (|cdr_replace_TCC4-1| |nil| 3810285734
   ("" (SKEEP) (("" (EXPAND "sub1") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|sub1| DEF-DECL
     "{ll: list[nat] | length(ll) = length(l) AND FORALL (i: below(length(ll))): nth(ll, i) = nth(l, i) - 1}"
     |eval_properties| NIL)
    NIL)
   NIL
   (|cdr_replace| SUBTYPE "eval_properties.sub1(poly_comp_analytic.index)"
    "(list_adt[nat].cons?)")))
 (|cdr_replace_TCC5| 0
  (|cdr_replace_TCC5-1| |nil| 3810285734
   ("" (SKEEP)
    (("" (EXPAND "sub1" 2 1)
      (("" (ASSERT) (("" (EXPAND "length" -1 1) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|sub1| DEF-DECL
     "{ll: list[nat] | length(ll) = length(l) AND FORALL (i: below(length(ll))): nth(ll, i) = nth(l, i) - 1}"
     |eval_properties| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL)
   NIL
   (|cdr_replace| SUBTYPE
    "list_adt[nat].car(eval_properties.sub1(poly_comp_analytic.index))"
    "below(list_props[nat].length(list_adt[nat].cdr(poly_comp_analytic.m`alpha)))")))
 (|cdr_replace| 0
  (|cdr_replace-1| |nil| 3810286853
   (""
    (CASE "FORALL (n:nat, m: monomial | cons?(m`alpha),
                     index: list[nat] | cons?(index)):
                length(m`alpha)=n IMPLIES ( (car[nat](index) < length(m`alpha) AND NOT member[nat](0, index))
                IMPLIES
                cdr[nat](replace(m`alpha, car[nat](index))(0)) =
                 replace(cdr[nat](m`alpha), car[nat](sub1(index)))(0))")
    (("1" (SKEEP)
      (("1" (INST -1 "length(m`alpha)" "m" "index") (("1" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (INDUCT "n")
        (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (SKEEP)
            (("2" (EXPAND "replace" 2 1)
              (("2" (ASSERT)
                (("2" (EXPAND "member" 1)
                  (("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (EXPAND "sub1" 3 1) (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (ASSERT)
          (("3" (HIDE 2)
            (("3" (SKEEP)
              (("3" (EXPAND "sub1" 2)
                (("3" (EXPAND "length" -1)
                  (("3" (ASSERT)
                    (("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 2)
          (("4" (SKEEP)
            (("4" (EXPAND "sub1" 2 1) (("4" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL)
         ("5" (HIDE 2)
          (("5" (SKEEP) (("5" (REWRITE "member_0_bov") NIL NIL)) NIL)) NIL)
         ("6" (HIDE 2) (("6" (SKEEP) (("6" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (EXPAND "sub1" 2 1)
          (("3" (EXPAND "length" -1)
            (("3" (ASSERT)
              (("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP) (("4" (GRIND) NIL NIL)) NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKEEP) (("5" (REWRITE "member_0_bov") NIL NIL)) NIL))
      NIL)
     ("6" (HIDE 2) (("6" (SKEEP) (("6" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|member_0_bov| FORMULA-DECL NIL |eval_properties| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|replace| DEF-DECL "list[nat]" |eval_MultPoly| NIL)
    (|bov?| DEF-DECL "bool" |eval_properties| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sub1| DEF-DECL
     "{ll: list[nat] | length(ll) = length(l) AND FORALL (i: below(length(ll))): nth(ll, i) = nth(l, i) - 1}"
     |eval_properties| NIL))
   SHOSTAK))
 (|eval0_fconst| 0
  (|eval0_fconst-1| |nil| 3810361688
   ("" (INDUCT "v")
    (("1" (SKEEP)
      (("1" (CASE "ind=null")
        (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)
         ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "eval" 1 1)
          (("2" (LIFT-IF 1)
            (("2" (SPLIT 1)
              (("1" (PROPAX) NIL NIL)
               ("2" (FLATTEN)
                (("2" (REPLACE -2)
                  (("2" (ASSERT)
                    (("2" (SPLIT 2)
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (INST -2 "m" "cdr(ind)")
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" -3)
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (TYPEPRED "ind")
                            (("2" (EXPAND "every" -1) (("2" (FLATTEN) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|eval| DEF-DECL "monomial" |eval_MultPoly| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|fulleval0_fconst_TCC1| 0
  (|fulleval0_fconst_TCC1-1| |nil| 3810362249 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|fulleval0_fconst| SUBTYPE "poly_comp_analytic.v"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (|fulleval0_fconst| 0
  (|fulleval0_fconst-1| |nil| 3810362340
   ("" (SKEEP)
    (("" (LEMMA "eval0_fconst")
      (("" (EXPAND "full_eval" 1 1)
        (("" (INST?)
          (("" (ASSERT)
            (("" (LEMMA "list_length_n[nat]") (("" (INST?) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval0_fconst| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list_length_n| DEF-DECL "list[nat]" |list_lemmas| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list_length_n| FORMULA-DECL NIL |list_lemmas| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL) NIL)
   SHOSTAK))
 (|eval_hat_equiv_TCC1| 0
  (|eval_hat_equiv_TCC1-1| |nil| 3809437473 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|eval_hat_equiv| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (|eval_hat_equiv_TCC2| 0
  (|eval_hat_equiv_TCC4-1| |nil| 3809437473
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "f(x)") (("" (TYPEPRED "n") (("" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   (NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|))
   NIL
   (|eval_hat_equiv| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "(list_adt[real].cons?)")))
 (|eval_hat_equiv_TCC3| 0
  (|eval_hat_equiv_TCC2-1| |nil| 3809437473 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL)
   NIL
   (|eval_hat_equiv| SUBTYPE "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (|eval_hat_equiv_TCC4| 0
  (|eval_hat_equiv_TCC3-1| |nil| 3810304434 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|eval_hat_equiv| SUBTYPE "list_adt[nat].car(poly_comp_analytic.m`alpha)"
    "{i: integers.int | booleans.OR(list_adt[real].car(poly_comp_analytic.f(poly_comp_analytic.x)) /= 0, reals.>=(i, 0))}")))
 (|eval_hat_equiv_TCC5| 0
  (|eval_hat_equiv_TCC5-1| |nil| 3813941823
   ("" (SKEEP)
    (("" (EXPAND "hat" 1)
      (("" (TYPEPRED "m")
        (("" (TYPEPRED "f(x)")
          (("" (EXPAND "length" -) (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL)
    (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   NIL
   (|eval_hat_equiv| SUBTYPE
    "eval_properties.hat(poly_comp_analytic.n)(poly_comp_analytic.f)(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(eval_properties.hat(poly_comp_analytic.m)`alpha))}")))
 (|eval_hat_equiv| 0
  (|eval_hat_equiv-1| |nil| 3809437782
   ("" (SKEEP)
    (("" (DECOMPOSE-EQUALITY 1)
      (("1" (LEMMA "eval_vals")
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (EXPAND "hat" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (SKEEP)
          (("2" (EXPAND "hat" 1 1)
            (("2" (ASSERT)
              (("2" (TYPEPRED "f(x)")
                (("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE 2) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)
       ("4" (HIDE 2)
        (("4" (SKEEP)
          (("4" (ASSERT)
            (("4" (TYPEPRED "f(x)")
              (("4" (TYPEPRED "n") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("5" (HIDE 2) (("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   (NIL (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    NIL (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL) NIL
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL)
    (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|eval_vals| FORMULA-DECL NIL |eval_properties| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|eval_hat_equiv_ge_TCC1| 0
  (|eval_hat_equiv_ge_TCC1-1| |nil| 3810364520 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|eval_hat_equiv_ge| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (|eval_hat_equiv_ge_TCC2| 0
  (|eval_hat_equiv_ge_TCC2-1| |nil| 3810364520 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|eval_hat_equiv_ge| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "(list_adt[real].cons?)")))
 (|eval_hat_equiv_ge_TCC3| 0
  (|eval_hat_equiv_ge_TCC3-1| |nil| 3810364520 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|eval_hat_equiv_ge| SUBTYPE "poly_comp_analytic.m`alpha"
    "(list_adt[nat].cons?)")))
 (|eval_hat_equiv_ge_TCC4| 0
  (|eval_hat_equiv_ge_TCC4-1| |nil| 3810364520 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|eval_hat_equiv_ge| SUBTYPE "list_adt[nat].car(poly_comp_analytic.m`alpha)"
    "{i: integers.int | booleans.OR(list_adt[real].car(poly_comp_analytic.f(poly_comp_analytic.x)) /= 0, reals.>=(i, 0))}")))
 (|eval_hat_equiv_ge_TCC5| 0
  (|eval_hat_equiv_ge_TCC5-1| |nil| 3810364520
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (EXPAND "hat" 1)
        (("" (ASSERT)
          (("" (TYPEPRED "m")
            (("" (TYPEPRED "f(x)")
              (("" (EXPAND "length" -2)
                (("" (EXPAND "length" -3) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL))
   NIL
   (|eval_hat_equiv_ge| SUBTYPE
    "eval_properties.hat(poly_comp_analytic.n2)(poly_comp_analytic.f)(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(eval_properties.hat(poly_comp_analytic.m)`alpha))}")))
 (|eval_hat_equiv_ge| 0
  (|eval_hat_equiv_ge-1| |nil| 3810364588
   ("" (SKEEP)
    (("" (LEMMA "eval_vals")
      (("" (INST?)
        (("" (ASSERT)
          (("" (DECOMPOSE-EQUALITY 1)
            (("1" (INST -1 "f(x!1)")
              (("1" (ASSERT)
                (("1" (EXPAND "hat" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (SKEEP) (("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL)) NIL)
             ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)
             ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval_vals| FORMULA-DECL NIL |eval_properties| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL)
    NIL (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL NIL NIL NIL
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|analytic_hat_TCC1| 0
  (|analytic_hat_TCC1-1| |nil| 3813941823 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL NIL
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) NIL
    (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|analytic_hat| SUBTYPE "(number_fields.-)(poly_comp_analytic.m, 1)"
    "nat")))
 (|analytic_hat| 0
  (|analytic_hat-1| |nil| 3810357815
   ("" (SKEEP)
    (("" (EXPAND "analytic?")
      (("" (SKEEP)
        (("" (EXPAND "hat" 1)
          (("" (INST -1 "i+1")
            (("" (EXPAND "nth" -1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|mono_comp_analytic_0_TCC1| 0
  (|mono_comp_analytic_0_TCC1-1| |nil| 3810356637 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL NIL NIL
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) NIL
    (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL)
   NIL
   (|mono_comp_analytic_0| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (|mono_comp_analytic_0| 0
  (|mono_comp_analytic_0-1| |nil| 3810356696
   ("" (SKEEP)
    (("" (EXPAND "analytic?" 1 1)
      (("" (INST 1 "1" "LAMBDA(i:nat): IF i=0 THEN m`C ELSE 0 ENDIF")
        (("" (EXPAND "analytic_parts?" 1 1)
          (("" (SKEEP)
            ((""
              (CASE "convergence(powerseries(LAMBDA (i: nat):
                                IF i = 0 THEN m`C ELSE 0 ENDIF)
                             (x_1 - alpha), m`C)")
              (("1" (SPLIT 1)
                (("1" (EXPAND "convergent?" 1 1) (("1" (INST 1 "m`C") NIL NIL))
                  NIL)
                 ("2" (EXPAND "full_eval" 1 1)
                  (("2" (LEMMA "limit_def")
                    (("2" (INST?)
                      (("1" (ASSERT)
                        (("1" (TYPEPRED "f(x_1)")
                          (("1" (REPLACE -2)
                            (("1" (EXPAND "list_length_n" 1 1)
                              (("1" (EXPAND "eval" 1 1)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "inf_sum" 1 1)
                                    (("1" (EXPAND "powerseries" -3)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (EXPAND "convergent?" 1)
                          (("2" (INST 1 "m`C") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "convergence" 1 1)
                  (("2" (SKEEP)
                    (("2" (INST 1 "2")
                      (("2" (SKEEP)
                        (("2" (EXPAND "powerseries" 1 1)
                          (("2" (EXPAND "powerseq" 1 1)
                            (("2" (ASSERT)
                              (("2" (LEMMA "sigma_first")
                                (("2" (EXPAND "series" 1 1)
                                  (("2"
                                    (INST -1 " LAMBDA (k: nat) -> real:
                  IF k = 0 THEN m`C ELSE 0 ENDIF * (x_1 - alpha) ^ k"
                                     "i_1" "0")
                                    (("2" (ASSERT)
                                      (("2" (REPLACE -1 1)
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "sigma_zero")
                                            (("2" (LEMMA "sigma_shift")
                                              (("2"
                                                (INST -1
                                                 " LAMBDA (k: nat) -> real:
                  IF k = 0 THEN m`C ELSE 0 ENDIF * (x_1 - alpha) ^ k"
                                                 "i_1-1" "0" "1")
                                                (("2" (ASSERT)
                                                  (("2" (REPLACE -1 1)
                                                    (("2"
                                                      (CASE
                                                          " (LAMBDA (n: nat): 0 * (x_1 - alpha) ^ (1 + n)) = (LAMBDA(i:nat): 0)")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (INST -3 "i_1-1" "0")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (REPLACE -1 1)
                                                              (("1"
                                                                (REPLACE -3 1)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           1)
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL) NIL NIL NIL
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|list_length_n| DEF-DECL "list[nat]" |list_lemmas| NIL) NIL
    (|eval| DEF-DECL "monomial" |eval_MultPoly| NIL) NIL
    (|limit_def| FORMULA-DECL NIL |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_shift| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sigma_zero| FORMULA-DECL NIL |sigma| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_first| FORMULA-DECL NIL |sigma| |reals|)
    (|powerseq| CONST-DECL "sequence[real]" |power_series| |series|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|mono_comp_analytic_TCC1| 0
  (|mono_comp_analytic_TCC1-1| |nil| 3810356637 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL NIL NIL
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) NIL
    (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|mono_comp_analytic| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (|mono_comp_analytic| 0
  (|mono_comp_analytic-1| |nil| 3810307623
   ("" (INDUCT "n")
    (("1" (LEMMA "mono_comp_analytic_0") (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (ASSERT)
          (("2" (LEMMA "eval_hat_equiv")
            (("2" (INST?)
              (("2" (REPLACE -1 1)
                (("2" (LEMMA "analytic_prod_fun")
                  (("2" (LEMMA "analytic_scal_fun")
                    (("2"
                      (INST -2 "alpha" "(LAMBDA (x: real):
                  m`C * car(f(x)) ^ car[nat](m`alpha))"
                       " (LAMBDA (x: real):full_eval(hat(m))(hat(1 + j)(f)(x)))")
                      (("1" (ASSERT)
                        (("1" (SPLIT -2)
                          (("1" (EXPAND "*" -1) (("1" (PROPAX) NIL NIL)) NIL)
                           ("2" (HIDE 2)
                            (("2"
                              (INST -1 "alpha"
                               "((LAMBDA (x: real):car(f(x)) ^ car[nat](m`alpha)))"
                               "m`C")
                              (("1" (ASSERT)
                                (("1" (SPLIT -1)
                                  (("1" (EXPAND "*" -1)
                                    (("1" (PROPAX) NIL NIL)) NIL)
                                   ("2" (LEMMA "analytic_pow_fun")
                                    (("2"
                                      (INST -1 "alpha"
                                       "(LAMBDA (x: real): car(f(x)))"
                                       "car[nat](m`alpha)")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -1)
                                          (("1" (ASSERT)
                                            (("1" (HIDE 2)
                                              (("1" (EXPAND "^" -1 1)
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (TYPEPRED "f")
                                            (("2" (EXPAND "analytic?" -1)
                                              (("2" (INST -1 "0")
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "nth" -1)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "m")
                                        (("2" (EXPAND "length" -1)
                                          (("2" (ASSERT)
                                            (("2" (LIFT-IF -1)
                                              (("2" (SPLIT -1)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (SKEEP)
                                        (("3" (TYPEPRED "f(x)")
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (TYPEPRED "m") (("3" (GRIND) NIL NIL)) NIL)
                               ("4" (SKEEP)
                                (("4" (TYPEPRED "f(x)") (("4" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (LEMMA "analytic_hat")
                            (("3" (INST?)
                              (("3" (ASSERT)
                                (("3" (INST -1 "alpha")
                                  (("3" (ASSERT)
                                    (("3"
                                      (INST -4 "alpha" "hat(m)" "hat(1+j)(f)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (TYPEPRED "m")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)
                       ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)
                       ("4" (TYPEPRED "m") (("4" (GRIND) NIL NIL)) NIL)
                       ("5" (SKEEP)
                        (("5" (TYPEPRED "f(x)") (("5" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|analytic_prod_fun| FORMULA-DECL NIL |analytic_def| NIL) NIL
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) NIL NIL
    NIL NIL (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL) NIL NIL
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|nth| DEF-DECL "T" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|analytic_pow_fun| FORMULA-DECL NIL |analytic_def| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|analytic_hat| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|analytic_scal_fun| FORMULA-DECL NIL |analytic_def| NIL)
    (|eval_hat_equiv| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|mono_comp_analytic_0| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL)
   SHOSTAK))
 (|mono_comp_analytic_ge_TCC1| 0
  (|mono_comp_analytic_ge_TCC1-1| |nil| 3810361246 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    NIL (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL) NIL
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|) NIL
    NIL)
   NIL
   (|mono_comp_analytic_ge| SUBTYPE
    "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(poly_comp_analytic.m`alpha))}")))
 (|mono_comp_analytic_ge| 0
  (|mono_comp_analytic_ge-1| |nil| 3810361353
   ("" (INDUCT "n")
    (("1" (SKEEP)
      (("1" (ASSERT)
        (("1"
          (CASE
              "NOT (LAMBDA (x: real): full_eval(m)(f(x))) = (Lambda(x:real): m`C)")
          (("1" (DECOMPOSE-EQUALITY 1)
            (("1" (LEMMA "fulleval0_fconst")
              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (REPLACE -1)
            (("2" (LEMMA "analytic_const") (("2" (INST?) NIL NIL)) NIL)) NIL)
           ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (LEMMA " eval_hat_equiv_ge")
          (("2" (INST?)
            (("2" (INST -1 "n2" "f")
              (("1" (ASSERT)
                (("1" (REPLACE -1)
                  (("1" (LEMMA "analytic_prod_fun")
                    (("1" (LEMMA "analytic_scal_fun")
                      (("1"
                        (INST -2 "alpha" "(LAMBDA (x: real):
                                  m`C * car(f(x)) ^ car[nat](m`alpha))"
                         " (LAMBDA (x: real):full_eval(hat(m))(hat(n2)(f)(x)))")
                        (("1" (ASSERT)
                          (("1" (SPLIT -2)
                            (("1" (EXPAND "*" -1) (("1" (PROPAX) NIL NIL)) NIL)
                             ("2" (HIDE 2)
                              (("2"
                                (INST -1 "alpha"
                                 "((LAMBDA (x: real):car(f(x)) ^ car[nat](m`alpha)))"
                                 "m`C")
                                (("1" (ASSERT)
                                  (("1" (SPLIT -1)
                                    (("1" (EXPAND "*" -1)
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (LEMMA "analytic_pow_fun")
                                      (("2"
                                        (INST -1 "alpha"
                                         "(LAMBDA (x: real): car(f(x)))"
                                         "car[nat](m`alpha)")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -1)
                                            (("1" (ASSERT)
                                              (("1" (HIDE 2)
                                                (("1" (EXPAND "^" -1 1)
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (TYPEPRED "f")
                                              (("2" (EXPAND "analytic?" -1)
                                                (("2" (INST -1 "0")
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "nth" -1)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "m")
                                          (("2" (EXPAND "length" -1)
                                            (("2" (ASSERT)
                                              (("2" (LIFT-IF -1)
                                                (("2" (SPLIT -1)
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKEEP)
                                          (("3" (TYPEPRED "f(x)")
                                            (("3" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (TYPEPRED "m") (("3" (GRIND) NIL NIL))
                                  NIL)
                                 ("4" (SKEEP)
                                  (("4" (TYPEPRED "f(x)")
                                    (("4" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3"
                              (INST -3 "alpha" "n2-1" "hat(m)" "hat(n2)(f)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (EXPAND "hat" 1)
                                (("2" (ASSERT)
                                  (("2" (TYPEPRED "f")
                                    (("2" (EXPAND "analytic?" 1)
                                      (("2" (EXPAND "analytic?" -1)
                                        (("2" (SKEEP)
                                          (("2" (INST -1 "i+1")
                                            (("2" (EXPAND "nth" -1)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (ASSERT) NIL NIL)
                               ("4" (ASSERT)
                                (("4" (TYPEPRED "m") (("4" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL)
                         ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)
                         ("4" (TYPEPRED "m")
                          (("4" (HIDE -1 -2 -4)
                            (("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL)
                         ("5" (HIDE 2)
                          (("5" (SKEEP)
                            (("5" (ASSERT)
                              (("5" (TYPEPRED "f(x)") (("5" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|eval_hat_equiv_ge| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|analytic_scal_fun| FORMULA-DECL NIL |analytic_def| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|analytic_pow_fun| FORMULA-DECL NIL |analytic_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) NIL NIL
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|hat| CONST-DECL "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     |eval_properties| NIL)
    (|hat| CONST-DECL "[real -> VectorN(n - 1)]" |eval_properties| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL NIL NIL
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|analytic_prod_fun| FORMULA-DECL NIL |analytic_def| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|fulleval0_fconst| FORMULA-DECL NIL |poly_comp_analytic| NIL) NIL NIL NIL
    NIL NIL (|analytic_const| FORMULA-DECL NIL |analytic_def| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|poly_comp_analytic_TCC1| 0
  (|poly_comp_analytic_TCC1-1| |nil| 3810361246 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL NIL NIL
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|limit| CONST-DECL "real" |convergence_sequences| |analysis|) NIL
    (|analytic_parts?| CONST-DECL "bool" |analytic_def| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|poly_comp_analytic| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.x)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(poly_comp_analytic.p))}")))
 (|poly_comp_analytic| 0
  (|poly_comp_analytic-1| |nil| 3810364848
   ("" (INDUCT "p")
    (("1" (SKEEP)
      (("1" (EXPAND "full_eval" 1 1)
        (("1" (LEMMA "analytic_const") (("1" (INST?) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (LEMMA "full_eval_recurs")
          (("2" (INST -1 "cons(cons1_var,cons2_var)" "_")
            (("2" (ASSERT)
              (("2"
                (CASE "(LAMBDA (x: real):
                  full_eval(cons(cons1_var, cons2_var))(f(x))) = (LAMBDA (x: real):
                  full_eval(cons2_var)(f(x)) + full_eval(cons1_var)(f(x)))")
                (("1" (REPLACE -1)
                  (("1" (LEMMA "analytic_sum_fun")
                    (("1"
                      (INST -1 "alpha" "(LAMBDA (x: real):
                   full_eval(cons2_var)(f(x)))"
                       "(LAMBDA (x: real):
                   full_eval(cons1_var)(f(x)))")
                      (("1" (ASSERT)
                        (("1" (SPLIT -1)
                          (("1" (EXPAND "+" -1) (("1" (PROPAX) NIL NIL)) NIL)
                           ("2" (INST -3 "n" "alpha" "f")
                            (("2" (ASSERT)
                              (("2" (EXPAND "max_length" -3)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (LEMMA "mono_comp_analytic_ge")
                            (("3"
                              (INST -1 "alpha" "length(cons1_var`alpha)" "n"
                               "cons1_var" "f")
                              (("3" (ASSERT)
                                (("3" (EXPAND "max_length" -4)
                                  (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (ASSERT)
                          (("2" (EXPAND "max_length" -4 1)
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (SKEEP)
                        (("3" (ASSERT)
                          (("3" (EXPAND "max_length" -4)
                            (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (DECOMPOSE-EQUALITY 1)
                  (("1" (INST -1 "f(x!1)") NIL NIL)
                   ("2" (SKEEP)
                    (("2" (EXPAND "max_length" -3) (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("3" (SKEEP)
                    (("3" (ASSERT)
                      (("3" (TYPEPRED "f(x)")
                        (("3" (EXPAND "max_length" -5) (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("3" (SKEEP)
                  (("3" (EXPAND "max_length" -3) (("3" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("4" (SKEEP)
                  (("4" (EXPAND "max_length" -3) (("4" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (SKEEP) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|full_eval_recurs| FORMULA-DECL NIL |eval_properties| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL NIL NIL NIL NIL
    NIL
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|mono_comp_analytic_ge| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|analytic_sum_fun| FORMULA-DECL NIL |analytic_def| NIL)
    (|full_eval| CONST-DECL "real" |eval_MultPoly| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|analytic_const| FORMULA-DECL NIL |analytic_def| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL) NIL
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL))
   SHOSTAK))
 (|meeting_analytic_TCC1| 0
  (|meeting_analytic_TCC1-1| |nil| 3810472024
   ("" (SKEEP)
    (("" (TYPEPRED "n")
      (("" (EXPAND "meet_max" 1 1)
        (("" (ASSERT)
          (("" (EXPAND "meet_max" 1)
            (("" (EXPAND "max" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL))
   NIL
   (|meeting_analytic| SUBTYPE "poly_comp_analytic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: poly_comp_analytic.m :)))}")))
 (|meeting_analytic_TCC2| 0
  (|meeting_analytic_TCC2-1| |nil| 3810472024
   ("" (SKEEP) (("" (SKEEP) (("" (HIDE 1) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL))
   NIL
   (|meeting_analytic| SUBTYPE "poly_comp_analytic.n"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max((: poly_comp_analytic.m :)))}")))
 (|meeting_analytic| 0
  (|meeting_analytic-1| |nil| 3810472201
   ("" (INDUCT "m")
    (("1" (SKEEP)
      (("1" (EXPAND "semi_alg")
        (("1" (EXPAND "join" 1 1)
          (("1" (EXPAND "meet" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (TYPEPRED "f")
          (("2" (INST -2 "x0" "n" "f")
            (("1" (ASSERT)
              (("1" (SPLIT -2)
                (("1" (SKEEP)
                  (("1" (LEMMA "poly_comp_analytic")
                    (("1" (ASSERT)
                      (("1" (INST -1 "n" "x0" "cons1_var`poly" "f")
                        (("1" (ASSERT)
                          (("1" (TYPEPRED "n")
                            (("1" (SPLIT -2)
                              (("1" (CASE "full_eval(cons1_var`poly)(f(x0))>0")
                                (("1" (LEMMA "analytic_pos_ball")
                                  (("1"
                                    (INST -1 "x0"
                                     "LAMBDA (x: real): full_eval(cons1_var`poly)(f(x))")
                                    (("1" (ASSERT)
                                      (("1" (SKEEP)
                                        (("1" (INST 1 "min(epsilon,delta)/2")
                                          (("1" (INST 2 "min(epsilon,delta)/2")
                                            (("1" (SKEEP)
                                              (("1" (SKEEP)
                                                (("1" (EXPAND "semi_alg" +)
                                                  (("1" (EXPAND "semi_alg" -7)
                                                    (("1" (EXPAND "join" -7)
                                                      (("1" (EXPAND "join" 1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "join" -7)
                                                            (("1"
                                                              (EXPAND "join" 1)
                                                              (("1"
                                                                (EXPAND "meet"
                                                                        1)
                                                                (("1"
                                                                  (EXPAND
                                                                   "meet" -7)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -5
                                                                           "t")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "semi_alg"
                                                                             -5)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "join"
                                                                               -5)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "join"
                                                                                 -5)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "atom_eval")
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "cons1_var`ineq")
                                                                                      (("1"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (INST
                                                                                             -2
                                                                                             "t!1+x0")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (TYPEPRED
                                                                                                 "t!1")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "abs"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9
                                                                                           -10
                                                                                           -11
                                                                                           2)
                                                                                          (("2"
                                                                                            (REVEAL
                                                                                             -)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11)
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -7)
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -8
                                                                                                   "t+x0")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (TYPEPRED
                                                                                                       "t")
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "abs"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("3"
                                                                                            (ASSERT)
                                                                                            (("3"
                                                                                              (INST
                                                                                               -2
                                                                                               "t!1+x0")
                                                                                              (("3"
                                                                                                (ASSERT)
                                                                                                (("3"
                                                                                                  (TYPEPRED
                                                                                                   "t!1")
                                                                                                  (("3"
                                                                                                    (EXPAND
                                                                                                     "abs"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("4"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("4"
                                                                                            (INST
                                                                                             -2
                                                                                             "t+x0")
                                                                                            (("4"
                                                                                              (ASSERT)
                                                                                              (("4"
                                                                                                (EXPAND
                                                                                                 "abs"
                                                                                                 1
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (ASSERT)
                                                                                                  (("4"
                                                                                                    (TYPEPRED
                                                                                                     "t")
                                                                                                    (("4"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "t")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2 3)
                                      (("2" (SKEEP)
                                        (("2" (TYPEPRED "f(x)")
                                          (("2" (ASSERT)
                                            (("2" (TYPEPRED "n")
                                              (("2" (EXPAND "atom_max" -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (CASE
                                      "full_eval(cons1_var`poly)(f(x0)) < 0 ")
                                  (("1" (LEMMA "analytic_neg_ball")
                                    (("1"
                                      (INST -1 "x0"
                                       "LAMBDA (x: real): full_eval(cons1_var`poly)(f(x))")
                                      (("1" (ASSERT)
                                        (("1" (SKEEP)
                                          (("1" (INST 2 "min(epsilon,delta)/2")
                                            (("1"
                                              (INST 3 "min(epsilon,delta)/2")
                                              (("1" (SKEEP*)
                                                (("1" (EXPAND "semi_alg")
                                                  (("1" (EXPAND "join")
                                                    (("1" (EXPAND "join")
                                                      (("1" (EXPAND "meet" -7)
                                                        (("1" (EXPAND "meet" 2)
                                                          (("1" (INST -5 "t")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "atom_eval")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (TYPEPRED
                                                                     "cons1_var`ineq")
                                                                    (("1"
                                                                      (INST-CP
                                                                       -2
                                                                       "t+x0")
                                                                      (("1"
                                                                        (INST
                                                                         -2
                                                                         "t!1+x0")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "abs"
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "abs"
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "t!1"
                                                                                 "t")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -7)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (REPLACE
                                                                                       -1)
                                                                                      (("3"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("4"
                                                                                      (ASSERT)
                                                                                      (("4"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("4"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (TYPEPRED "t")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKEEP)
                                        (("2" (TYPEPRED "f(x)")
                                          (("2" (TYPEPRED "n")
                                            (("2" (EXPAND "atom_max" -1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (CASE
                                        "NOT full_eval(cons1_var`poly)(f(x0))=0")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (LEMMA "analytic_zero_right")
                                      (("2"
                                        (INST -1 "x0"
                                         "LAMBDA (x: real): full_eval(cons1_var`poly)(f(x))")
                                        (("1" (ASSERT)
                                          (("1" (SPLIT -1)
                                            (("1" (SKEEP)
                                              (("1"
                                                (INST 3 "min(delta,epsilon)/2")
                                                (("1"
                                                  (INST 4
                                                   "min(epsilon,delta)/2")
                                                  (("1" (SKEEP*)
                                                    (("1" (INST-CP -1 "t!1")
                                                      (("1" (INST -1 "t")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (TYPEPRED "t"
                                                             "t!1")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "semi_alg"
                                                                 -14)
                                                                (("1"
                                                                  (EXPAND
                                                                   "semi_alg"
                                                                   3)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "join"
                                                                     -14)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "join"
                                                                       3)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "meet"
                                                                         3)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "meet"
                                                                           -14)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "join"
                                                                                 -14)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "join"
                                                                                   4)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -12
                                                                                         "t")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "semi_alg"
                                                                                             -12)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "join"
                                                                                               -12)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "atom_eval")
                                                                                                  (("1"
                                                                                                    (TYPEPRED
                                                                                                     "cons1_var`ineq")
                                                                                                    (("1"
                                                                                                      (SPLIT
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (REPLACE
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("3"
                                                                                                        (REPLACE
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("4"
                                                                                                        (REPLACE
                                                                                                         -1)
                                                                                                        (("4"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (SKEEP)
                                                (("2"
                                                  (INST 3
                                                   "min(delta,epsilon)/2")
                                                  (("2"
                                                    (INST 4
                                                     "min(epsilon,delta)/2")
                                                    (("2" (SKEEP*)
                                                      (("2"
                                                        (EXPAND "semi_alg" -7)
                                                        (("2"
                                                          (EXPAND "semi_alg" 3)
                                                          (("2"
                                                            (EXPAND "join" 3)
                                                            (("2"
                                                              (EXPAND "join"
                                                                      -7)
                                                              (("2"
                                                                (EXPAND "meet"
                                                                        3)
                                                                (("2"
                                                                  (EXPAND
                                                                   "join" 3)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "join" -7)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "meet"
                                                                       -7)
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (INST
                                                                           -5
                                                                           "t")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "semi_alg"
                                                                             -5)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "join"
                                                                               -5)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "join"
                                                                                 -5)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "atom_eval")
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "cons1_var`ineq")
                                                                                      (("1"
                                                                                        (INST-CP
                                                                                         -2
                                                                                         "t")
                                                                                        (("1"
                                                                                          (INST-CP
                                                                                           -2
                                                                                           "t!1")
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "t!1"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("3"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("4"
                                                                                                  (REPLACE
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "t")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (SKEEP)
                                              (("3"
                                                (INST 3 "min(delta,epsilon)/2")
                                                (("3"
                                                  (INST 4
                                                   "min(epsilon,delta)/2")
                                                  (("3" (SKEEP*)
                                                    (("3" (INST -5 "t")
                                                      (("1" (EXPAND "semi_alg")
                                                        (("1" (EXPAND "join")
                                                          (("1"
                                                            (EXPAND "join" -7)
                                                            (("1"
                                                              (EXPAND "join" 3)
                                                              (("1"
                                                                (EXPAND "join"
                                                                        -5)
                                                                (("1"
                                                                  (EXPAND
                                                                   "meet" -7)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "meet" 3)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST-CP
                                                                           -1
                                                                           "t")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "t!1")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "t!1")
                                                                                (("1"
                                                                                  (TYPEPRED
                                                                                   "t")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (TYPEPRED
                                                                                       "cons1_var`ineq")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "atom_eval")
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (REPLACE
                                                                                             -1)
                                                                                            (("3"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("4"
                                                                                            (ASSERT)
                                                                                            (("4"
                                                                                              (REPLACE
                                                                                               -1)
                                                                                              (("4"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (TYPEPRED "t")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2 3 4 5)
                                          (("2" (SKEEP)
                                            (("2" (TYPEPRED "f(x)" "n")
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "atom_max" -3)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (TYPEPRED "f(x0)")
                                  (("3" (TYPEPRED "n")
                                    (("3" (EXPAND "atom_max" -1)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "atom_max" -1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP)
                  (("2" (INST 2 "epsilon")
                    (("2" (SKEEP)
                      (("2" (INST -1 "t")
                        (("2" (EXPAND "semi_alg")
                          (("2" (EXPAND "join")
                            (("2" (EXPAND "join")
                              (("2" (EXPAND "meet" -2)
                                (("2" (FLATTEN) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "n")
              (("2" (ASSERT)
                (("2" (EXPAND "atom_max" -1) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (SKEEP) (("3" (TYPEPRED "n") (("3" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) NIL NIL
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|analytic_neg_ball| FORMULA-DECL NIL |analytic_def| NIL)
    (|analytic_zero_right| FORMULA-DECL NIL |analytic_def| NIL) NIL NIL NIL NIL
    (|analytic_pos_ball| FORMULA-DECL NIL |analytic_def| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|atom_eval| CONST-DECL "bool" |semi_algebraic| NIL) NIL NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|poly_comp_analytic| FORMULA-DECL NIL |poly_comp_analytic| NIL) NIL NIL
    NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|meet| DEF-DECL "bool" |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|joining_analytic| 0
  (|joining_analytic-1| |nil| 3810552051
   ("" (INDUCT "j")
    (("1" (SKEEP)
      (("1" (EXPAND "semi_alg")
        (("1" (EXPAND "join") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "semi_alg" +)
          (("2" (CASE "cons2_var=null")
            (("1" (REPLACE -1)
              (("1" (EXPAND "join" +)
                (("1" (LEMMA "meeting_analytic")
                  (("1" (INST -1 "x0" "cons1_var" "n" "f")
                    (("1" (EXPAND "semi_alg" -1)
                      (("1" (EXPAND "join" -1)
                        (("1" (EXPAND "join" -1)
                          (("1" (EXPAND "join" +)
                            (("1" (SPLIT -1)
                              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (TYPEPRED "n")
                        (("2" (ASSERT)
                          (("2" (EXPAND "meet_max" -1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (INST -1 "x0" "n" "f")
              (("1" (ASSERT)
                (("1" (EXPAND "join" +)
                  (("1" (EXPAND "semi_alg" -)
                    (("1" (SPLIT -1)
                      (("1" (SKEEP)
                        (("1" (INST 2 "epsilon")
                          (("1" (ASSERT)
                            (("1" (SKEEP) (("1" (INST -1 "t") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (SKEEP)
                          (("2" (LEMMA "meeting_analytic")
                            (("2" (INST -1 "x0" "cons1_var" "n" "f")
                              (("1" (ASSERT)
                                (("1" (SPLIT -1)
                                  (("1" (SKEEP)
                                    (("1" (EXPAND "semi_alg" -1)
                                      (("1" (EXPAND "join" -1)
                                        (("1" (EXPAND "join" -1)
                                          (("1" (INST 2 "epsilon!1")
                                            (("1" (SKEEP)
                                              (("1" (INST -1 "t") NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (SKEEP)
                                      (("2" (INST 3 "min(epsilon,epsilon!1)")
                                        (("2" (SKEEP)
                                          (("2" (INST -1 "t")
                                            (("1" (INST -1 "t")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "semi_alg" 1)
                                                  (("1" (EXPAND "join" 1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "semi_alg" 2 1)
                                                  (("2" (EXPAND "join" 2)
                                                    (("2" (EXPAND "join" 2)
                                                      (("2" (ASSERT)
                                                        (("2" (TYPEPRED "t")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (TYPEPRED " t")
                                              (("2" (TYPEPRED "t")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "n")
                                (("2" (EXPAND "meet_max" -1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "n" 1)
                (("2" (ASSERT)
                  (("2" (EXPAND "meet_max" -1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|meeting_analytic| FORMULA-DECL NIL |poly_comp_analytic| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL) NIL NIL NIL
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|join| DEF-DECL "bool" |semi_algebraic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|atom_max_nth| 0
  (|atom_max_nth-1| |nil| 3813321764
   ("" (INDUCT "m")
    (("1" (SKEEP)
      (("1" (GRIND) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "i=0")
          (("1" (EXPAND "atom_max" 1 1)
            (("1" (EXPAND "nth" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (EXPAND "atom_max" 2)
            (("2" (EXPAND "nth" 2)
              (("2" (ASSERT)
                (("2" (INST -1 "i-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL))
   SHOSTAK))
 (|min_eps_TCC1| 0
  (|min_eps_TCC1-1| |nil| 3809437473
   ("" (LEMMA "atom_max_nth")
    (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   (NIL (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max_nth| FORMULA-DECL NIL |poly_comp_analytic| NIL))
   NIL
   (|min_eps| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.t)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(list_props[atomic_poly].nth(poly_comp_analytic.m, poly_comp_analytic.i)`poly))}")))
 (|min_eps_TCC2| 0
  (|min_eps_TCC2-1| |nil| 3813325566
   ("" (SKEEP)
    (("" (SKEEP 2)
      (("" (LEMMA "atom_max_nth") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|atom_max_nth| FORMULA-DECL NIL |poly_comp_analytic| NIL))
   NIL
   (|min_eps| SUBTYPE "poly_comp_analytic.f(poly_comp_analytic.t)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(list_props[atomic_poly].nth(poly_comp_analytic.m, poly_comp_analytic.i)`poly))}")))
 (|min_eps| 0
  (|min_eps-1| |nil| 3813321862
   ("" (INDUCT "m")
    (("1" (SKEEP)
      (("1" (INST 1 "1")
        (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (TYPEPRED "f")
          (("2" (INST -2 "x0" "n" "f")
            (("1" (LEMMA "analytic_zero_right")
              (("1" (LEMMA "poly_comp_analytic")
                (("1"
                  (INST -1 "n" "x0" "nth(cons(cons1_var, cons2_var), 0)`poly"
                   "f")
                  (("1" (ASSERT)
                    (("1" (SPLIT -1)
                      (("1"
                        (INST -2 "x0" " (LAMBDA (x: real):
                          full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x)))")
                        (("1" (ASSERT)
                          (("1"
                            (CASE
                                "full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x0)) = 0")
                            (("1" (ASSERT)
                              (("1" (SPLIT -3)
                                (("1" (SKEEP)
                                  (("1" (SKEEP)
                                    (("1" (INST 1 "min(eps_min, delta)")
                                      (("1" (SKEEP)
                                        (("1" (CASE "i=0")
                                          (("1" (SKEEP 2)
                                            (("1" (INST -2 "t-x0")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST -5 "i-1")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -5)
                                                (("1" (SKEEP)
                                                  (("1" (INST -1 "t")
                                                    (("1" (EXPAND "nth" -8)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (SKEEP 3)
                                                    (("2" (INST -1 "t")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "nth" 3 1)
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (TYPEPRED "i")
                                                (("2" (EXPAND "length" -1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (SKEEP)
                                    (("2" (INST 1 "min(delta,eps_min)")
                                      (("2" (SKEEP)
                                        (("2" (CASE "i=0")
                                          (("1" (SKEEP 1)
                                            (("1" (INST -2 "t-x0")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (INST -5 "i-1")
                                              (("1" (SPLIT -5)
                                                (("1" (SKEEP 2)
                                                  (("1" (INST -1 "t")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "nth" -8 1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (SKEEP 3)
                                                    (("2" (INST -1 "t")
                                                      (("2" (EXPAND "nth" 3)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (TYPEPRED "i")
                                                  (("2" (EXPAND "length" -1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (SKEEP -1)
                                  (("3" (SKEEP -5)
                                    (("3" (INST 1 "min(eps_min,delta)")
                                      (("3" (SKEEP)
                                        (("3" (CASE "i=0")
                                          (("1" (SKEEP 1)
                                            (("1" (INST -2 "t-x0")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST -5 "i-1")
                                            (("1" (SPLIT -5)
                                              (("1" (SKEEP 2)
                                                (("1" (INST -1 "t")
                                                  (("1" (EXPAND "nth" -8)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKEEP 3)
                                                (("2" (INST -1 "t")
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "nth" 3 1)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (ASSERT)
                                                (("2" (TYPEPRED "i")
                                                  (("2" (EXPAND "length" -1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (SPLIT -2)
                                (("1" (ASSERT)
                                  (("1" (SKEEP -1)
                                    (("1" (SKEEP)
                                      (("1" (INST 2 "min(eps_min,delta)")
                                        (("1" (SKEEP 2)
                                          (("1" (CASE "i=0")
                                            (("1" (SKEEP 3)
                                              (("1" (EXPAND "nth" 3 1)
                                                (("1" (ASSERT)
                                                  (("1" (INST -2 "t-x0")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "nth")
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (INST -4 " i-1")
                                                (("1" (SPLIT -4)
                                                  (("1" (SKEEP 3)
                                                    (("1" (INST -1 "t")
                                                      (("1" (ASSERT)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "nth" -7)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (SKEEP 4)
                                                      (("2" (INST -1 "t")
                                                        (("2" (EXPAND "nth" 4)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (TYPEPRED "i")
                                                  (("2" (EXPAND "length" -1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKEEP)
                                  (("2" (SKEEP)
                                    (("2" (INST 2 "min(eps_min,delta)")
                                      (("2" (SKEEP)
                                        (("2" (CASE "i=0")
                                          (("1" (ASSERT)
                                            (("1" (SKEEP 2)
                                              (("1" (INST -2 "t-x0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST -4 "i-1")
                                            (("1" (SPLIT -4)
                                              (("1" (SKEEP 3)
                                                (("1" (INST -1 "t")
                                                  (("1" (ASSERT)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "nth" -7)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKEEP 4)
                                                (("2" (INST -1 "t")
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "nth" 4)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (TYPEPRED "i")
                                                (("2" (EXPAND "length" -1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (ASSERT)
                                  (("3" (SKEEP -)
                                    (("3" (SKEEP -)
                                      (("3" (INST 2 "min(eps_min,delta)")
                                        (("3" (SKEEP)
                                          (("3" (CASE "i=0")
                                            (("1" (SKEEP 2)
                                              (("1" (INST -2 "t-x0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST -4 "i-1")
                                              (("1" (SPLIT -4)
                                                (("1" (SKEEP 3)
                                                  (("1" (INST -1 "t")
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "nth" -7)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (SKEEP 4)
                                                    (("2" (INST -1 "t")
                                                      (("2" (EXPAND "nth" +)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (TYPEPRED "i")
                                                  (("2" (EXPAND "length" -1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (EXPAND "nth" 1 1)
                                  (("4" (LEMMA "analytic_pos_ball")
                                    (("4"
                                      (INST -1 "x0" " (LAMBDA (x: real):
                  full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x)))")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -1)
                                          (("1" (SKEEP -1)
                                            (("1" (SKEEP -4)
                                              (("1"
                                                (INST 2 "min(eps_min,delta)")
                                                (("1" (SKEEP)
                                                  (("1" (CASE "i=0")
                                                    (("1" (SKEEP 2)
                                                      (("1" (INST -2 "t")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (HIDE -2 -3 -4 "7-"
                                                             2 3)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (INST -4 "i-1")
                                                      (("1" (ASSERT)
                                                        (("1" (SKEEP 3)
                                                          (("1" (SPLIT -4)
                                                            (("1" (SKEEP 3)
                                                              (("1"
                                                                (INST -1 "t")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "nth" -7)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (SKEEP)
                                                                (("2"
                                                                  (INST -1
                                                                   "t!1")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "nth" 3
                                                                       1)
                                                                      (("2"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT)
                                                        (("2" (ASSERT)
                                                          (("2" (TYPEPRED "i")
                                                            (("2"
                                                              (EXPAND "length"
                                                                      -)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP -3)
                                            (("2" (LEMMA "analytic_neg_ball")
                                              (("2"
                                                (INST -1 "x0"
                                                 " (LAMBDA (x: real):
                  full_eval(nth(cons(cons1_var, cons2_var), 0)`poly)(f(x)))")
                                                (("1" (ASSERT)
                                                  (("1" (SKEEP -1)
                                                    (("1"
                                                      (INST 3
                                                       "min(eps_min,delta)")
                                                      (("1" (SKEEP)
                                                        (("1" (CASE "i=0")
                                                          (("1" (SKEEP 3)
                                                            (("1" (INST -2 "t")
                                                              (("1" (HIDE -3)
                                                                (("1" (ASSERT)
                                                                  (("1" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (INST -4 "i-1")
                                                            (("1" (SPLIT -4)
                                                              (("1" (SKEEP 4)
                                                                (("1"
                                                                  (INST -1 "t")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth" 2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "nth"
                                                                           -7)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                (("2" (SKEEP 5)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "nth" 5)
                                                                    (("2"
                                                                      (INST -1
                                                                       "t")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (TYPEPRED
                                                                   "i")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 2 3 4)
                                                  (("2" (SKEEP)
                                                    (("2" (TYPEPRED "f(x)")
                                                      (("2" (HIDE -1)
                                                        (("2" (TYPEPRED "n")
                                                          (("2"
                                                            (LEMMA
                                                             "atom_max_nth")
                                                            (("2" (INST?)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "length" 1)
                                        (("2" (ASSERT) NIL NIL)) NIL)
                                       ("3" (SKEEP 1)
                                        (("3" (LEMMA "atom_max_nth")
                                          (("3" (INST?)
                                            (("3" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "length" 1) (("3" (ASSERT) NIL NIL))
                              NIL)
                             ("4" (HIDE -)
                              (("4" (LEMMA "atom_max_nth")
                                (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)
                         ("3" (SKEEP)
                          (("3" (LEMMA "atom_max_nth")
                            (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "n")
                        (("2" (EXPAND "nth" 1 1)
                          (("2" (EXPAND "atom_max" -1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "length" 1 1) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "n")
                (("2" (HIDE 2)
                  (("2" (EXPAND "atom_max" -1)
                    (("2" (EXPAND "max" -1)
                      (("2" (LIFT-IF -1)
                        (("2" (SPLIT -1)
                          (("1" (FLATTEN) NIL NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (HIDE 1)
          (("3" (SKEEP)
            (("3" (TYPEPRED "f(t)")
              (("3" (TYPEPRED "n")
                (("3" (HIDE -2)
                  (("3" (LEMMA "atom_max_nth")
                    (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (LEMMA "atom_max_nth")
          (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|analytic_zero_right| FORMULA-DECL NIL |analytic_def| NIL) NIL NIL
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|analytic_neg_ball| FORMULA-DECL NIL |analytic_def| NIL)
    (|atom_max_nth| FORMULA-DECL NIL |poly_comp_analytic| NIL) NIL
    (|analytic_pos_ball| FORMULA-DECL NIL |analytic_def| NIL) NIL NIL NIL NIL
    NIL NIL NIL NIL NIL
    (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}"
     |real_defs| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    NIL
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|poly_comp_analytic| FORMULA-DECL NIL |poly_comp_analytic| NIL) NIL NIL
    NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|full_eval| DEF-DECL "real" |eval_MultPoly| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atom_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|max_length| DEF-DECL "nat" |standard_form_mult_poly| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|clean_exit_TCC1| 0
  (|clean_exit_TCC1-1| |nil| 3809437473 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|clean_exit| SUBTYPE "semi_algebraic.meet_max(poly_comp_analytic.j)"
    "{n: naturalnumbers.nat | reals.>=(n, semi_algebraic.meet_max(poly_comp_analytic.j))}")))
 (|clean_exit_TCC2| 0
  (|clean_exit_TCC2-1| |nil| 3810555379
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (SPLIT 2)
        (("1" (EXPAND "nonempty?" 1)
          (("1" (EXPAND "empty?" -1)
            (("1" (INST -1 "x")
              (("1" (EXPAND "member" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "bounded_below?" 1)
          (("2" (INST 1 "x0")
            (("2" (EXPAND "lower_bound?" 1) (("2" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL) NIL
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   NIL
   (|clean_exit| SUBTYPE
    "{xx: reals.real | booleans.AND(reals.<=(poly_comp_analytic.x0, xx), (booleans.NOT)(semi_algebraic.semi_alg(poly_comp_analytic.j)(semi_algebraic.meet_max(poly_comp_analytic.j))(poly_comp_analytic.f(xx))))}"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (|clean_exit| 0
  (|clean_exit-1| |nil| 3810568778
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "joining_analytic")
        ((""
          (WITH-TCCS
           (NAME "ch" " inf({xx: real |
                 x0 <= xx AND NOT semi_alg(j)(meet_max(j))(f(xx))})"))
          (("" (INST -2 "ch" "j" "meet_max(j)" "f")
            (("1" (SPLIT -2)
              (("1" (SKEEP)
                (("1" (INST 2 "epsilon")
                  (("1" (INST 3 "epsilon")
                    (("1" (SKEEP*)
                      (("1" (ASSERT)
                        (("1" (INST-CP -1 "t-ch")
                          (("1" (INST -1 "t!1-ch") (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP)
                (("2" (INST 2 "epsilon")
                  (("2" (INST 3 "epsilon")
                    (("2" (SKEEP*)
                      (("2" (INST-CP -1 "t-ch")
                        (("1" (INST -1 "t!1-ch")
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "f")
              (("2" (EXPAND "Analytic?" -1)
                (("2" (INST -1 "ch")
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "ch")
                      (("2" (EXPAND "inf" -2)
                        (("2"
                          (WITH-TCCS
                           (TYPEPRED
                            "glb({xx: real | x0 <= xx AND NOT semi_alg(j)(meet_max(j))(f(xx))})"))
                          (("2" (EXPAND "greatest_lower_bound?" -1)
                            (("2" (FLATTEN)
                              (("2" (INST -2 "x0")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "lower_bound?" 1)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|Analytic?| CONST-DECL "bool" |poly_comp_analytic| NIL)
    (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|inf| CONST-DECL "real" |poly_comp_analytic| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|glb| CONST-DECL "{x | greatest_lower_bound?(x, SB)}" |bounded_real_defs|
     NIL)
    NIL NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL NIL NIL NIL NIL
    (|joining_analytic| FORMULA-DECL NIL |poly_comp_analytic| NIL))
   SHOSTAK))
 (|clean_enter_TCC1| 0
  (|clean_enter_TCC1-1| |nil| 3810896826
   ("" (SKEEP*)
    (("" (SPLIT 2)
      (("1" (EXPAND "nonempty?" 1)
        (("1" (EXPAND "empty?" -1)
          (("1" (INST -1 "x")
            (("1" (EXPAND "member" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (EXPAND "bounded_below?" 1)
        (("2" (INST 1 "x0")
          (("2" (EXPAND "lower_bound?" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL
    (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|clean_enter| SUBTYPE
    "{xx: reals.real | booleans.AND(reals.<=(poly_comp_analytic.x0, xx), semi_algebraic.semi_alg(poly_comp_analytic.j)(semi_algebraic.meet_max(poly_comp_analytic.j))(poly_comp_analytic.f(xx)))}"
    "{SS: sets[real].set | booleans.AND(sets[real].nonempty?(SS), bounded_real_defs.bounded_below?(SS))}")))
 (|clean_enter| 0
  (|clean_enter-1| |nil| 3810897120
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "joining_analytic")
        ((""
          (WITH-TCCS
           (NAME "ch" " inf({xx: real |
                         x0 <= xx AND semi_alg(j)(meet_max(j))(f(xx))})"))
          (("" (INST -2 "ch" "j" "meet_max(j)" "f")
            (("1" (SPLIT -2)
              (("1" (SKEEP)
                (("1" (INST 2 "epsilon")
                  (("1" (INST 3 "epsilon")
                    (("1" (SKEEP*)
                      (("1" (ASSERT)
                        (("1" (INST-CP -1 "t-ch")
                          (("1" (INST -1 "t!1-ch") (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP)
                (("2" (INST 2 "epsilon")
                  (("2" (INST 3 "epsilon")
                    (("2" (SKEEP*)
                      (("2" (INST-CP -1 "t-ch")
                        (("1" (INST -1 "t!1-ch")
                          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "f")
              (("2" (EXPAND "Analytic?" -1)
                (("2" (INST -1 "ch")
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "ch")
                      (("2" (EXPAND "inf" -2)
                        (("2"
                          (WITH-TCCS
                           (TYPEPRED
                            "glb({xx: real | x0 <= xx AND semi_alg(j)(meet_max(j))(f(xx))})"))
                          (("2" (EXPAND "greatest_lower_bound?" -1)
                            (("2" (FLATTEN)
                              (("2" (INST -2 "x0")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "lower_bound?" 1)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|meet_max| DEF-DECL "nat" |semi_algebraic| NIL)
    (|joining| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|meeting| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|atomic_poly| TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (|mv_standard_form?| CONST-DECL "bool" |standard_form_mult_poly| NIL)
    (|MultPoly| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (INEQ TYPE-EQ-DECL NIL |semi_algebraic| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|semi_alg| CONST-DECL "set[VectorN(n)]" |semi_algebraic| NIL)
    (|Analytic?| CONST-DECL "bool" |poly_comp_analytic| NIL)
    (|bounded_below?| CONST-DECL "bool" |bounded_real_defs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|inf| CONST-DECL "real" |poly_comp_analytic| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|glb| CONST-DECL "{x | greatest_lower_bound?(x, SB)}" |bounded_real_defs|
     NIL)
    NIL NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL NIL NIL NIL NIL
    (|joining_analytic| FORMULA-DECL NIL |poly_comp_analytic| NIL))
   SHOSTAK))
 (|finite_support_series| 0
  (|finite_support_series-1| |nil| 3813325247
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (EXPAND "series" 1)
        (("" (EXPAND "convergent?" 1)
          (("" (INST 1 "sigma(0,N,a)")
            (("" (EXPAND "convergence" 1)
              (("" (SKEEP)
                (("" (INST 1 "N")
                  (("" (SKEEP)
                    (("" (LEMMA "sigma_split[nat]")
                      (("" (INST -1 "a" "i" "0" "N")
                        (("" (ASSERT)
                          (("" (REPLACE -1 1)
                            (("" (ASSERT)
                              (("" (LEMMA "sigma_restrict_eq_0[nat]")
                                (("" (INST -1 "a" "i" "1+N")
                                  (("" (SPLIT -1)
                                    (("1" (REPLACE -1) (("1" (GRIND) NIL NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (SKEEP)
                                        (("2" (INST -2 "i_1")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|convergent?| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|convergence| CONST-DECL "bool" |convergence_sequences| |analysis|)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   SHOSTAK))
 (|analytic_mono| 0
  (|analytic_mono-1| |nil| 3808526373
   ("" (LEMMA "mono_comp_analytic_ge")
    (("" (SKEEP)
      (("" (TYPEPRED "f")
        (("" (INST -2 "alpha" "m" "m" "mon" "f") (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|monomial| TYPE-EQ-DECL NIL |standard_form_mult_poly| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|mono_comp_analytic_ge| FORMULA-DECL NIL |poly_comp_analytic| NIL))
   SHOSTAK)))

