(eval_MultPoly
 (replace_TCC1 0
  (replace_TCC1-1 nil 3810907543
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (replace subtype "eval_MultPoly.l" "(list_adt[real].cons?)")))
 (replace_TCC2 0
  (replace_TCC2-1 nil 3810907543
   ("" (skeep)
    (("" (typepred "l") (("" (assert) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (replace subtype "list_adt[real].cdr(eval_MultPoly.l)"
     "list[nat]")))
 (replace_TCC3 0
  (replace_TCC3-1 nil 3810907543
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (replace subtype "eval_MultPoly.l" "(list_adt[real].cons?)")))
 (replace_TCC4 0
  (replace_TCC4-1 nil 3810907543
   ("" (skeep)
    (("" (typepred "l") (("" (assert) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (replace subtype "list_adt[real].car(eval_MultPoly.l)" "nat")))
 (replace_TCC5 0
  (replace_TCC5-1 nil 3810907543
   ("" (skeep)
    (("" (typepred "n")
      (("" (split 3)
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (replace subtype "(number_fields.-)(eval_MultPoly.n, 1)"
     "naturalnumbers.below(list_props[nat].length(list_adt[nat].cdr(eval_MultPoly.l)))")))
 (replace_TCC6 0
  (replace_TCC6-1 nil 3810907543
   ("" (skeep) (("" (expand "length" 3 2) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (replace termination
            "eval_MultPoly.replace(list_adt[nat].cdr(eval_MultPoly.l), (number_fields.-)(eval_MultPoly.n, 1))"
     "nil")))
 (length_replace 0
  (length_replace-1 nil 3810908336
   ("" (induct "l")
    (("1" (skeep)
      (("1" (expand "replace" 1) (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "replace" 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "length" 1) (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "length" 2)
                  (("2" (inst -1 "n-1" "m") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons1_var skolem-const-decl "nat" eval_MultPoly nil)
    (cons2_var skolem-const-decl "list[nat]" eval_MultPoly nil)
    (n skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     eval_MultPoly nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (replace def-decl "list[nat]" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (eval_TCC1 0
  (eval_TCC1-1 nil 3810907543 ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (eval subtype "eval_MultPoly.index" "(list_adt[real].cons?)")))
 (eval_TCC2 0
  (eval_TCC2-1 nil 3810907543
   ("" (skeep) (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval termination
         "eval_MultPoly.eval(eval_MultPoly.m, list_adt[nat].cdr(eval_MultPoly.index))"
         "nil")))
 (eval_TCC3 0
  (eval_TCC3-1 nil 3810907543
   ("" (skeep)
    (("" (typepred "vals")
      (("" (hide -1)
        (("" (expand "length" -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (eval subtype "eval_MultPoly.vals" "(list_adt[real].cons?)")))
 (eval_TCC4 0
  (eval_TCC4-1 nil 3810907543
   ("" (skeep :preds? T)
    (("" (expand "length" -3)
      (("" (assert) (("" (lift-if -3) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval subtype "list_adt[real].cdr(eval_MultPoly.vals)"
         "{vals: list_adt[real].list | list_props[real].length(vals) = list_props[nat].length(list_adt[nat].cdr(eval_MultPoly.index))}")))
 (eval_TCC5 0
  (eval_TCC5-1 nil 3810907543
   ("" (skeep :preds? T)
    (("" (expand "every" -1)
      (("" (assert)
        (("" (flatten)
          (("" (assert)
            (("" (replaces -3) (("" (replaces -3) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval subtype "list_adt[real].car(eval_MultPoly.index)"
         "naturalnumbers.below(list_props[nat].length(eval_MultPoly.m`alpha))")))
 (eval_TCC6 0
  (eval_TCC6-1 nil 3810907543
   ("" (skeep)
    (("" (typepred "vals")
      (("" (expand "length" -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (eval subtype "eval_MultPoly.vals" "(list_adt[real].cons?)")))
 (eval_TCC7 0
  (eval_TCC7-1 nil 3810907543 ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval subtype
         "list_props[nat].nth(eval_MultPoly.m`alpha, list_adt[real].car(eval_MultPoly.index))"
         "{i: integers.int | booleans.OR(list_adt[real].car(eval_MultPoly.vals) /= 0, reals.>=(i, 0))}")))
 (eval_TCC8 0
  (eval_TCC8-1 nil 3810907543
   ("" (skeep) (("" (expand "length" 3 2) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval termination
         "eval_MultPoly.eval((# C := number_fields.*(eval_MultPoly.m`C, (exponentiation.^(list_adt[real].car(eval_MultPoly.vals), list_props[nat].nth(eval_MultPoly.m`alpha, list_adt[real].car(eval_MultPoly.index))))), alpha := eval_MultPoly.replace(eval_MultPoly.m`alpha, list_adt[real].car(eval_MultPoly.index))(0) #), list_adt[nat].cdr(eval_MultPoly.index))"
         "nil")))
 (eval_TCC9 0
  (eval_TCC9-1 nil 3810907543
   ("" (skeep :preds? T)
    (("" (expand "length" -3)
      (("" (assert) (("" (lift-if -3) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval subtype "list_adt[real].cdr(eval_MultPoly.vals)"
         "{vals_1: list_adt[real].list | list_props[real].length(vals_1) = list_props[nat].length(list_adt[nat].cdr(eval_MultPoly.index))}")))
 (full_eval_TCC1 0
  (full_eval_TCC1-1 nil 3810907543
   ("" (skeep)
    (("" (lemma "list_length_n[nat]") (("" (inst? -1) nil nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (full_eval subtype "eval_MultPoly.vals"
    "{vals_1: list_adt[real].list | list_props[real].length(vals_1) = list_props[nat].length(list_lemmas[nat].list_length_n(list_props[real].length(eval_MultPoly.vals)))}")))
 (eval_TCC10 0
  (eval_TCC10-1 nil 3810907543 ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil (eval subtype "eval_MultPoly.p" "(list_adt[monomial].cons?)")))
 (eval_TCC11 0
  (eval_TCC11-1 nil 3810907543
   ("" (skeep) (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval termination
         "eval_MultPoly.eval(list_adt[monomial].cdr(eval_MultPoly.p), eval_MultPoly.index)"
         "nil")))
 (sum_C_TCC1 0
  (sum_C_TCC1-1 nil 3810907543 ("" (skeep) (("" (assert) nil nil)) nil)
   nil nil
   (sum_C subtype "eval_MultPoly.p" "(list_adt[monomial].cons?)")))
 (sum_C_TCC2 0
  (sum_C_TCC2-1 nil 3810907543
   ("" (skeep) (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (sum_C termination
    "eval_MultPoly.sum_C(list_adt[monomial].cdr(eval_MultPoly.p))"
    "nil")))
 (full_eval_TCC2 0
  (full_eval_TCC2-1 nil 3810907543
   ("" (skeep)
    (("" (lemma "list_length_n[nat]") (("" (inst? -1) nil nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_length_n formula-decl nil list_lemmas nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (full_eval subtype "eval_MultPoly.vals"
    "{vals_1: list_adt[real].list | list_props[real].length(vals_1) = list_props[nat].length(list_lemmas[nat].list_length_n(list_props[real].length(eval_MultPoly.vals)))}")))
 (full_eval_null_TCC1 0
  (full_eval_null_TCC1-1 nil 3860231294 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil more_list_props structures))
   nil
   (full_eval_null subtype "list_adt[real].null"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(eval_MultPoly.p))}")))
 (full_eval_null 0
  (full_eval_null-1 nil 3860231295
   ("" (induct "p")
    (("1" (assert) nil nil) ("2" (assert) (("2" (grind) nil nil)) nil)
     ("3" (skeep)
      (("3" (expand "full_eval" 1)
        (("3" (expand "sum_C" 1)
          (("3" (lift-if)
            (("3" (split 1)
              (("1" (expand "eval" 1) (("1" (propax) nil nil)) nil)
               ("2" (flatten)
                (("2" (hide 1)
                  (("2" (expand "eval" 1 1)
                    (("2" (expand "eval" 1 1)
                      (("2" (assert)
                        (("2" (lift-if 1)
                          (("2" (expand "list_length_n" 1 1)
                            (("2" (expand "eval" 1)
                              (("2"
                                (expand "max_length" -2)
                                (("2"
                                  (expand "max" -2)
                                  (("2"
                                    (lift-if -2)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (typepred
                                           "max_length(cons2_var)")
                                          (("2"
                                            (grind)
                                            (("2"
                                              (expand "full_eval" -3)
                                              (("2"
                                                (lift-if -3)
                                                (("2"
                                                  (split -3)
                                                  (("1"
                                                    (expand "eval" 2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "list_length_n"
                                                       -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil))
    nil)
   ((eval def-decl "MultPoly" eval_MultPoly nil)
    (eval def-decl "monomial" eval_MultPoly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_length_n def-decl "list[nat]" list_lemmas nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (sum_C def-decl "real" eval_MultPoly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (length_null formula-decl nil more_list_props structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak)))

